"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// dist/index.js
var dist_exports = {};
__export(dist_exports, {
  BSONLoader: () => BSONLoader,
  BSONWriter: () => BSONWriter
});
module.exports = __toCommonJS(dist_exports);

// dist/lib/parsers/parse-bson.js
var BSON = __toESM(require("bson"), 1);
function parseBSONSync(value, options) {
  const parsedData = BSON.deserialize(new Uint8Array(value), options);
  return parsedData;
}

// dist/bson-loader.js
var VERSION = true ? "4.3.3" : "latest";
var BSONLoader = {
  dataType: null,
  batchType: null,
  name: "BSON",
  id: "bson",
  module: "bson",
  version: VERSION,
  extensions: ["bson"],
  mimeTypes: ["application/bson"],
  category: "json",
  binary: true,
  parse,
  parseSync,
  options: {
    bson: {}
  }
};
async function parse(arrayBuffer, options) {
  const bsonOptions = { ...BSONLoader.options.bson, ...options == null ? void 0 : options.bson };
  return parseBSONSync(arrayBuffer, bsonOptions);
}
function parseSync(arrayBuffer, options) {
  const bsonOptions = { ...BSONLoader.options.bson, ...options == null ? void 0 : options.bson };
  return parseBSONSync(arrayBuffer, bsonOptions);
}

// dist/lib/encoders/encode-bson.js
var BSON2 = __toESM(require("bson"), 1);
function encodeBSONSync(value, options) {
  const uint8Array = BSON2.serialize(value);
  return uint8Array.buffer;
}

// dist/bson-writer.js
var VERSION2 = true ? "4.3.3" : "latest";
var BSONWriter = {
  name: "BSON",
  id: "bson",
  module: "bson",
  version: VERSION2,
  extensions: ["bson"],
  options: {
    bson: {}
  },
  async encode(data, options) {
    return encodeBSONSync(data, {});
  },
  encodeSync(data, options) {
    return encodeBSONSync(data, {});
  }
};
//# sourceMappingURL=index.cjs.map
