// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import { BlobFile } from '@loaders.gl/loader-utils';
import { parseParquetFileWasm, parseParquetFileInBatchesWasm } from "./lib/parsers/parse-parquet-wasm.js";
import { VERSION, PARQUET_WASM_URL } from "./lib/constants.js";
/** Parquet WASM table loader */
export const ParquetWasmWorkerLoader = {
    dataType: null,
    batchType: null,
    name: 'Apache Parquet',
    id: 'parquet-wasm',
    module: 'parquet',
    version: VERSION,
    worker: false,
    category: 'table',
    extensions: ['parquet'],
    mimeTypes: ['application/octet-stream'],
    binary: true,
    tests: ['PAR1', 'PARE'],
    options: {
        parquet: {
            shape: 'arrow-table',
            limit: undefined, // Provide a limit to the number of rows to be read.
            offset: 0, // Provide an offset to skip over the given number of rows.
            batchSize: undefined, // The number of rows in each batch. If not provided, the upstream parquet default is 1024.
            columns: undefined, // The column names from the file to read.
            rowGroups: undefined, // Only read data from the provided row group indexes.
            concurrency: undefined, // The number of concurrent requests to make
            wasmUrl: PARQUET_WASM_URL
        }
    }
};
/** Parquet WASM table loader */
export const ParquetWasmLoader = {
    ...ParquetWasmWorkerLoader,
    parse(arrayBuffer, options) {
        const wasmOptions = { ...ParquetWasmLoader.options.parquet, ...options?.parquet };
        return parseParquetFileWasm(new BlobFile(arrayBuffer), wasmOptions);
    },
    parseFile(file, options) {
        const wasmOptions = { ...ParquetWasmLoader.options.parquet, ...options?.parquet };
        return parseParquetFileWasm(file, wasmOptions);
    },
    parseFileInBatches(file, options) {
        const wasmOptions = { ...ParquetWasmLoader.options.parquet, ...options?.parquet };
        return parseParquetFileInBatchesWasm(file, wasmOptions);
    }
};
