import type { LoaderOptions } from '@loaders.gl/loader-utils';
import type { ObjectRowTable, ObjectRowTableBatch, GeoJSONTable, GeoJSONTableBatch, ColumnarTable, ColumnarTableBatch } from '@loaders.gl/schema';
import { parseParquetFile, parseParquetFileInBatches } from "./lib/parsers/parse-parquet.js";
import { parseGeoParquetFile, parseGeoParquetFileInBatches } from "./lib/parsers/parse-geoparquet.js";
import { parseParquetFileInColumns, parseParquetFileInColumnarBatches } from "./lib/parsers/parse-parquet-to-columns.js";
import { Buffer } from "./polyfills/buffer/install-buffer-polyfill.js";
export { Buffer };
/** Options for the parquet loader */
export type ParquetLoaderOptions = LoaderOptions & {
    /** Options for the parquet loader */
    parquet?: {
        /** Format of returned parsed data */
        shape?: 'object-row-table' | 'geojson-table';
        /** Restrict which columns that are parsed from the table. Can save significant memory. */
        columnList?: string[] | string[][];
        /** If true, binary values are not converted to strings */
        preserveBinary?: boolean;
        /**  @deprecated not used? Set to true to indicate that this is a geoparquet file. */
        geoparquet?: boolean;
        /** @deprecated URL to override loaders.gl/core parser system */
        url?: string;
    };
};
/**
 * ParquetJS table loader
 */
export declare const ParquetWorkerLoader: {
    readonly dataType: ObjectRowTable;
    readonly batchType: ObjectRowTableBatch;
    readonly name: "Apache Parquet";
    readonly id: "parquet";
    readonly module: "parquet";
    readonly version: any;
    readonly worker: false;
    readonly category: "table";
    readonly extensions: ["parquet"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly binary: true;
    readonly tests: ["PAR1", "PARE"];
    readonly options: {
        readonly parquet: {
            readonly shape: "object-row-table";
            readonly columnList: [];
            readonly geoparquet: true;
            readonly url: undefined;
            readonly preserveBinary: false;
        };
    };
};
/** ParquetJS table loader */
export declare const ParquetLoader: {
    readonly dataType: ObjectRowTable | GeoJSONTable;
    readonly batchType: ObjectRowTableBatch | GeoJSONTableBatch;
    readonly parse: (arrayBuffer: ArrayBuffer, options?: ParquetLoaderOptions) => Promise<ObjectRowTable>;
    readonly parseFile: typeof parseParquetFile;
    readonly parseFileInBatches: typeof parseParquetFileInBatches;
    readonly name: "Apache Parquet";
    readonly id: "parquet";
    readonly module: "parquet";
    readonly version: any;
    readonly worker: false;
    readonly category: "table";
    readonly extensions: ["parquet"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly binary: true;
    readonly tests: ["PAR1", "PARE"];
    readonly options: {
        readonly parquet: {
            readonly shape: "object-row-table";
            readonly columnList: [];
            readonly geoparquet: true;
            readonly url: undefined;
            readonly preserveBinary: false;
        };
    };
};
export declare const GeoParquetWorkerLoader: {
    readonly dataType: GeoJSONTable;
    readonly batchType: GeoJSONTableBatch;
    readonly name: "Apache Parquet";
    readonly id: "parquet";
    readonly module: "parquet";
    readonly version: any;
    readonly worker: true;
    readonly category: "table";
    readonly extensions: ["parquet"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly binary: true;
    readonly tests: ["PAR1", "PARE"];
    readonly options: {
        readonly parquet: {
            readonly shape: "geojson-table";
            readonly columnList: [];
            readonly geoparquet: true;
            readonly url: undefined;
            readonly preserveBinary: false;
        };
    };
};
/** ParquetJS table loader */
export declare const GeoParquetLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer, options?: ParquetLoaderOptions) => Promise<ObjectRowTable | GeoJSONTable>;
    readonly parseFile: typeof parseGeoParquetFile;
    readonly parseFileInBatches: typeof parseGeoParquetFileInBatches;
    readonly dataType: GeoJSONTable;
    readonly batchType: GeoJSONTableBatch;
    readonly name: "Apache Parquet";
    readonly id: "parquet";
    readonly module: "parquet";
    readonly version: any;
    readonly worker: true;
    readonly category: "table";
    readonly extensions: ["parquet"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly binary: true;
    readonly tests: ["PAR1", "PARE"];
    readonly options: {
        readonly parquet: {
            readonly shape: "geojson-table";
            readonly columnList: [];
            readonly geoparquet: true;
            readonly url: undefined;
            readonly preserveBinary: false;
        };
    };
};
/** @deprecated Test to see if we can improve perf of parquetjs loader */
export declare const ParquetColumnarWorkerLoader: {
    readonly dataType: ColumnarTable;
    readonly batchType: ColumnarTableBatch;
    readonly name: "Apache Parquet";
    readonly id: "parquet";
    readonly module: "parquet";
    readonly version: any;
    readonly worker: true;
    readonly category: "table";
    readonly extensions: ["parquet"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly binary: true;
    readonly tests: ["PAR1", "PARE"];
    readonly options: {
        readonly parquet: {
            readonly shape: "object-row-table";
            readonly columnList: [];
            readonly geoparquet: true;
            readonly url: undefined;
            readonly preserveBinary: false;
        };
    };
};
/** @deprecated Test to see if we can improve perf of parquetjs loader */
export declare const ParquetColumnarLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer, options?: ParquetLoaderOptions) => Promise<ColumnarTable>;
    readonly parseFile: typeof parseParquetFileInColumns;
    readonly parseFileInBatches: typeof parseParquetFileInColumnarBatches;
    readonly dataType: ColumnarTable;
    readonly batchType: ColumnarTableBatch;
    readonly name: "Apache Parquet";
    readonly id: "parquet";
    readonly module: "parquet";
    readonly version: any;
    readonly worker: true;
    readonly category: "table";
    readonly extensions: ["parquet"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly binary: true;
    readonly tests: ["PAR1", "PARE"];
    readonly options: {
        readonly parquet: {
            readonly shape: "object-row-table";
            readonly columnList: [];
            readonly geoparquet: true;
            readonly url: undefined;
            readonly preserveBinary: false;
        };
    };
};
//# sourceMappingURL=parquet-loader.d.ts.map