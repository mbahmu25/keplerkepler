"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.flattenMessages = exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _en = _interopRequireDefault(require("./translations/en"));
var _fi = _interopRequireDefault(require("./translations/fi"));
var _pt = _interopRequireDefault(require("./translations/pt"));
var _es = _interopRequireDefault(require("./translations/es"));
var _ca = _interopRequireDefault(require("./translations/ca"));
var _cn = _interopRequireDefault(require("./translations/cn"));
var _ja = _interopRequireDefault(require("./translations/ja"));
var _ru = _interopRequireDefault(require("./translations/ru"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var _flattenMessages = exports.flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;
    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, _flattenMessages(value, prefixedKey));
    }
    return messages;
  }, {});
};
var enFlat = _flattenMessages(_en["default"]);
var messages = exports.messages = {};
messages.en = enFlat;
messages.fi = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_fi["default"]));
messages.pt = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_pt["default"]));
messages.es = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_es["default"]));
messages.ca = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ca["default"]));
messages.cn = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_cn["default"]));
messages.ja = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ja["default"]));
messages.ru = _objectSpread(_objectSpread({}, enFlat), _flattenMessages(_ru["default"]));
var _default = exports["default"] = messages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZW4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9maSIsIl9wdCIsIl9lcyIsIl9jYSIsIl9jbiIsIl9qYSIsIl9ydSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiZmxhdHRlbk1lc3NhZ2VzIiwiZXhwb3J0cyIsIm5lc3RlZE1lc3NhZ2VzIiwicHJlZml4IiwidW5kZWZpbmVkIiwicmVkdWNlIiwibWVzc2FnZXMiLCJrZXkiLCJ2YWx1ZSIsInByZWZpeGVkS2V5IiwiY29uY2F0IiwiYXNzaWduIiwiZW5GbGF0IiwiZW4iLCJmaSIsInB0IiwiZXMiLCJjYSIsImNuIiwiamEiLCJydSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vc3JjL21lc3NhZ2VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBlbiBmcm9tICcuL3RyYW5zbGF0aW9ucy9lbic7XG5pbXBvcnQgZmkgZnJvbSAnLi90cmFuc2xhdGlvbnMvZmknO1xuaW1wb3J0IHB0IGZyb20gJy4vdHJhbnNsYXRpb25zL3B0JztcbmltcG9ydCBlcyBmcm9tICcuL3RyYW5zbGF0aW9ucy9lcyc7XG5pbXBvcnQgY2EgZnJvbSAnLi90cmFuc2xhdGlvbnMvY2EnO1xuaW1wb3J0IGNuIGZyb20gJy4vdHJhbnNsYXRpb25zL2NuJztcbmltcG9ydCBqYSBmcm9tICcuL3RyYW5zbGF0aW9ucy9qYSc7XG5pbXBvcnQgcnUgZnJvbSAnLi90cmFuc2xhdGlvbnMvcnUnO1xuXG4vLyBGbGF0IG1lc3NhZ2VzIHNpbmNlIHJlYWN0LWludGwgZG9lcyBub3Qgc2VlbSB0byBzdXBwb3J0IG5lc3RlZCBzdHJ1Y3R1cmVzXG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9tZWRpdW0uY29tL3NpcmVuLWFwcGFyZWwtcHJlc3MvaW50ZXJuYXRpb25hbGl6YXRpb24tYW5kLWxvY2FsaXphdGlvbi1vZi1zaXJlbmFwcGFyZWwtZXUtc2lyZW5hcHBhcmVsLXVzLWFuZC1zaXJlbmFwcGFyZWwtYXNpYS1kZGVlMjY2MDY2YTJcbmV4cG9ydCBjb25zdCBmbGF0dGVuTWVzc2FnZXMgPSAoXG4gIG5lc3RlZE1lc3NhZ2VzLFxuICBwcmVmaXggPSAnJ1xuKToge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59ID0+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG5lc3RlZE1lc3NhZ2VzKS5yZWR1Y2UoKG1lc3NhZ2VzLCBrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG5lc3RlZE1lc3NhZ2VzW2tleV07XG4gICAgY29uc3QgcHJlZml4ZWRLZXkgPSBwcmVmaXggPyBgJHtwcmVmaXh9LiR7a2V5fWAgOiBrZXk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1lc3NhZ2VzW3ByZWZpeGVkS2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKG1lc3NhZ2VzLCBmbGF0dGVuTWVzc2FnZXModmFsdWUsIHByZWZpeGVkS2V5KSk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfSwge30pO1xufTtcblxuY29uc3QgZW5GbGF0ID0gZmxhdHRlbk1lc3NhZ2VzKGVuKTtcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VzOiB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gIH07XG59ID0ge307XG5cbm1lc3NhZ2VzLmVuID0gZW5GbGF0O1xubWVzc2FnZXMuZmkgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoZmkpfTtcbm1lc3NhZ2VzLnB0ID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKHB0KX07XG5tZXNzYWdlcy5lcyA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhlcyl9O1xubWVzc2FnZXMuY2EgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoY2EpfTtcbm1lc3NhZ2VzLmNuID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGNuKX07XG5tZXNzYWdlcy5qYSA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhqYSl9O1xubWVzc2FnZXMucnUgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMocnUpfTtcblxuZXhwb3J0IGRlZmF1bHQgbWVzc2FnZXM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsR0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsR0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsR0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsR0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksR0FBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUssR0FBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU0sR0FBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8sR0FBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBQW1DLFNBQUFRLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsUUFBQWUsZ0JBQUEsYUFBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBLElBVm5DO0FBQ0E7QUFXQTtBQUNBO0FBQ08sSUFBTW9CLGdCQUFlLEdBQUFDLE9BQUEsQ0FBQUQsZUFBQSxHQUFHLFNBQWxCQSxlQUFlQSxDQUMxQkUsY0FBYyxFQUlYO0VBQUEsSUFISEMsTUFBTSxHQUFBVixTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBVyxTQUFBLEdBQUFYLFNBQUEsTUFBRyxFQUFFO0VBSVgsT0FBT1YsTUFBTSxDQUFDQyxJQUFJLENBQUNrQixjQUFjLENBQUMsQ0FBQ0csTUFBTSxDQUFDLFVBQUNDLFFBQVEsRUFBRUMsR0FBRyxFQUFLO0lBQzNELElBQU1DLEtBQUssR0FBR04sY0FBYyxDQUFDSyxHQUFHLENBQUM7SUFDakMsSUFBTUUsV0FBVyxHQUFHTixNQUFNLE1BQUFPLE1BQUEsQ0FBTVAsTUFBTSxPQUFBTyxNQUFBLENBQUlILEdBQUcsSUFBS0EsR0FBRztJQUNyRCxJQUFJLE9BQU9DLEtBQUssS0FBSyxRQUFRLEVBQUU7TUFDN0JGLFFBQVEsQ0FBQ0csV0FBVyxDQUFDLEdBQUdELEtBQUs7SUFDL0IsQ0FBQyxNQUFNO01BQ0x6QixNQUFNLENBQUM0QixNQUFNLENBQUNMLFFBQVEsRUFBRU4sZ0JBQWUsQ0FBQ1EsS0FBSyxFQUFFQyxXQUFXLENBQUMsQ0FBQztJQUM5RDtJQUNBLE9BQU9ILFFBQVE7RUFDakIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUVELElBQU1NLE1BQU0sR0FBR1osZ0JBQWUsQ0FBQ2EsY0FBRSxDQUFDO0FBRTNCLElBQU1QLFFBSVosR0FBQUwsT0FBQSxDQUFBSyxRQUFBLEdBQUcsQ0FBQyxDQUFDO0FBRU5BLFFBQVEsQ0FBQ08sRUFBRSxHQUFHRCxNQUFNO0FBQ3BCTixRQUFRLENBQUNRLEVBQUUsR0FBQXRCLGFBQUEsQ0FBQUEsYUFBQSxLQUFPb0IsTUFBTSxHQUFLWixnQkFBZSxDQUFDYyxjQUFFLENBQUMsQ0FBQztBQUNqRFIsUUFBUSxDQUFDUyxFQUFFLEdBQUF2QixhQUFBLENBQUFBLGFBQUEsS0FBT29CLE1BQU0sR0FBS1osZ0JBQWUsQ0FBQ2UsY0FBRSxDQUFDLENBQUM7QUFDakRULFFBQVEsQ0FBQ1UsRUFBRSxHQUFBeEIsYUFBQSxDQUFBQSxhQUFBLEtBQU9vQixNQUFNLEdBQUtaLGdCQUFlLENBQUNnQixjQUFFLENBQUMsQ0FBQztBQUNqRFYsUUFBUSxDQUFDVyxFQUFFLEdBQUF6QixhQUFBLENBQUFBLGFBQUEsS0FBT29CLE1BQU0sR0FBS1osZ0JBQWUsQ0FBQ2lCLGNBQUUsQ0FBQyxDQUFDO0FBQ2pEWCxRQUFRLENBQUNZLEVBQUUsR0FBQTFCLGFBQUEsQ0FBQUEsYUFBQSxLQUFPb0IsTUFBTSxHQUFLWixnQkFBZSxDQUFDa0IsY0FBRSxDQUFDLENBQUM7QUFDakRaLFFBQVEsQ0FBQ2EsRUFBRSxHQUFBM0IsYUFBQSxDQUFBQSxhQUFBLEtBQU9vQixNQUFNLEdBQUtaLGdCQUFlLENBQUNtQixjQUFFLENBQUMsQ0FBQztBQUNqRGIsUUFBUSxDQUFDYyxFQUFFLEdBQUE1QixhQUFBLENBQUFBLGFBQUEsS0FBT29CLE1BQU0sR0FBS1osZ0JBQWUsQ0FBQ29CLGNBQUUsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBcEIsT0FBQSxjQUVuQ0ssUUFBUSIsImlnbm9yZUxpc3QiOltdfQ==