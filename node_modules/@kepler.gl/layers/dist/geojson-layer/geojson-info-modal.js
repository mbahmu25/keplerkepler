"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _markdownToJsx = _interopRequireDefault(require("markdown-to-jsx"));
var _reactIntl = require("react-intl");
var _localization = require("@kepler.gl/localization");
var _exampleTable = _interopRequireDefault(require("../example-table"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var InfoModal = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 13px;\n  color: ", ";\n\n  pre {\n    padding: 12px;\n    background-color: #f8f8f9;\n  }\n"])), function (props) {
  return props.theme.titleColorLT;
});
var StyledTitle = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 20px;\n  letter-spacing: 1.25px;\n  margin: 18px 0 14px 0;\n  color: ", ";\n"])), function (props) {
  return props.theme.titleColorLT;
});
var StyledCode = _styledComponents["default"].code(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n"])), function (props) {
  return props.theme.titleColorLT;
});
var exampleTableHeader = ['id', 'latitude', 'longitude', 'sort by'];
var exampleTabbleRows = [['A', '40.81773', '-74.20986', '0'], ['A', '40.81765', '-74.20987', '1'], ['A', '40.81746', '-74.20998', '2'], ['B', '40.64375', '-74.33242', '0'], ['B', '40.64353', '-74.20987', '1'], ['B', '40.64222', '-74.33001', '2']];
var ExampleTable = function ExampleTable() {
  return /*#__PURE__*/_react["default"].createElement(_exampleTable["default"], {
    className: "geojson-example-table"
  }, /*#__PURE__*/_react["default"].createElement("thead", null, /*#__PURE__*/_react["default"].createElement("tr", null, exampleTableHeader.map(function (v) {
    return /*#__PURE__*/_react["default"].createElement("th", {
      key: v
    }, v);
  }))), /*#__PURE__*/_react["default"].createElement("tbody", null, exampleTabbleRows.map(function (row, i) {
    return /*#__PURE__*/_react["default"].createElement("tr", {
      key: i
    }, row.map(function (v, j) {
      return /*#__PURE__*/_react["default"].createElement("td", {
        key: j
      }, /*#__PURE__*/_react["default"].createElement(StyledCode, null, v));
    }));
  })));
};
var GeojsonInfoModalFactory = function GeojsonInfoModalFactory(columnMode) {
  var GeojsonInfoModal = function GeojsonInfoModal() {
    var intl = (0, _reactIntl.useIntl)();
    return /*#__PURE__*/_react["default"].createElement(InfoModal, {
      className: "geojson-info-modal"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "geojson-info-modal__description"
    }, /*#__PURE__*/_react["default"].createElement(_markdownToJsx["default"], null, intl.formatMessage({
      id: columnMode === 'geojson' ? 'modal.polygonInfo.description' : 'modal.polygonInfo.descriptionTable'
    }))), columnMode === 'table' ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "geojson-info-modal__example"
    }, /*#__PURE__*/_react["default"].createElement(StyledTitle, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "modal.polygonInfo.exampleTable"
    })), /*#__PURE__*/_react["default"].createElement(ExampleTable, null)) : null);
  };
  return GeojsonInfoModal;
};
var _default = exports["default"] = GeojsonInfoModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX21hcmtkb3duVG9Kc3giLCJfcmVhY3RJbnRsIiwiX2xvY2FsaXphdGlvbiIsIl9leGFtcGxlVGFibGUiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwiX3RlbXBsYXRlT2JqZWN0MyIsIkluZm9Nb2RhbCIsInN0eWxlZCIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwicHJvcHMiLCJ0aGVtZSIsInRpdGxlQ29sb3JMVCIsIlN0eWxlZFRpdGxlIiwiU3R5bGVkQ29kZSIsImNvZGUiLCJleGFtcGxlVGFibGVIZWFkZXIiLCJleGFtcGxlVGFiYmxlUm93cyIsIkV4YW1wbGVUYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJtYXAiLCJ2Iiwia2V5Iiwicm93IiwiaSIsImoiLCJHZW9qc29uSW5mb01vZGFsRmFjdG9yeSIsImNvbHVtbk1vZGUiLCJHZW9qc29uSW5mb01vZGFsIiwiaW50bCIsInVzZUludGwiLCJmb3JtYXRNZXNzYWdlIiwiaWQiLCJGb3JtYXR0ZWRNZXNzYWdlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlb2pzb24tbGF5ZXIvZ2VvanNvbi1pbmZvLW1vZGFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgTWFya2Rvd24gZnJvbSAnbWFya2Rvd24tdG8tanN4JztcbmltcG9ydCB7dXNlSW50bH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuXG5pbXBvcnQgVGFibGUgZnJvbSAnLi4vZXhhbXBsZS10YWJsZSc7XG5cbmNvbnN0IEluZm9Nb2RhbCA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGl0bGVDb2xvckxUfTtcblxuICBwcmUge1xuICAgIHBhZGRpbmc6IDEycHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmOTtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBmb250LXNpemU6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxLjI1cHg7XG4gIG1hcmdpbjogMThweCAwIDE0cHggMDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGl0bGVDb2xvckxUfTtcbmA7XG5cbmNvbnN0IFN0eWxlZENvZGUgPSBzdHlsZWQuY29kZWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGl0bGVDb2xvckxUfTtcbmA7XG5cbmNvbnN0IGV4YW1wbGVUYWJsZUhlYWRlciA9IFsnaWQnLCAnbGF0aXR1ZGUnLCAnbG9uZ2l0dWRlJywgJ3NvcnQgYnknXTtcbmNvbnN0IGV4YW1wbGVUYWJibGVSb3dzID0gW1xuICBbJ0EnLCAnNDAuODE3NzMnLCAnLTc0LjIwOTg2JywgJzAnXSxcbiAgWydBJywgJzQwLjgxNzY1JywgJy03NC4yMDk4NycsICcxJ10sXG4gIFsnQScsICc0MC44MTc0NicsICctNzQuMjA5OTgnLCAnMiddLFxuICBbJ0InLCAnNDAuNjQzNzUnLCAnLTc0LjMzMjQyJywgJzAnXSxcbiAgWydCJywgJzQwLjY0MzUzJywgJy03NC4yMDk4NycsICcxJ10sXG4gIFsnQicsICc0MC42NDIyMicsICctNzQuMzMwMDEnLCAnMiddXG5dO1xuXG5jb25zdCBFeGFtcGxlVGFibGUgPSAoKSA9PiAoXG4gIDxUYWJsZSBjbGFzc05hbWU9XCJnZW9qc29uLWV4YW1wbGUtdGFibGVcIj5cbiAgICA8dGhlYWQ+XG4gICAgICA8dHI+XG4gICAgICAgIHtleGFtcGxlVGFibGVIZWFkZXIubWFwKHYgPT4gKFxuICAgICAgICAgIDx0aCBrZXk9e3Z9Pnt2fTwvdGg+XG4gICAgICAgICkpfVxuICAgICAgPC90cj5cbiAgICA8L3RoZWFkPlxuICAgIDx0Ym9keT5cbiAgICAgIHtleGFtcGxlVGFiYmxlUm93cy5tYXAoKHJvdywgaSkgPT4gKFxuICAgICAgICA8dHIga2V5PXtpfT5cbiAgICAgICAgICB7cm93Lm1hcCgodiwgaikgPT4gKFxuICAgICAgICAgICAgPHRkIGtleT17an0+XG4gICAgICAgICAgICAgIDxTdHlsZWRDb2RlPnt2fTwvU3R5bGVkQ29kZT5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvdHI+XG4gICAgICApKX1cbiAgICA8L3Rib2R5PlxuICA8L1RhYmxlPlxuKTtcblxuY29uc3QgR2VvanNvbkluZm9Nb2RhbEZhY3RvcnkgPSBjb2x1bW5Nb2RlID0+IHtcbiAgY29uc3QgR2VvanNvbkluZm9Nb2RhbCA9ICgpID0+IHtcbiAgICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuICAgIHJldHVybiAoXG4gICAgICA8SW5mb01vZGFsIGNsYXNzTmFtZT1cImdlb2pzb24taW5mby1tb2RhbFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdlb2pzb24taW5mby1tb2RhbF9fZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICA8TWFya2Rvd24+XG4gICAgICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgaWQ6XG4gICAgICAgICAgICAgICAgY29sdW1uTW9kZSA9PT0gJ2dlb2pzb24nXG4gICAgICAgICAgICAgICAgICA/ICdtb2RhbC5wb2x5Z29uSW5mby5kZXNjcmlwdGlvbidcbiAgICAgICAgICAgICAgICAgIDogJ21vZGFsLnBvbHlnb25JbmZvLmRlc2NyaXB0aW9uVGFibGUnXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L01hcmtkb3duPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge2NvbHVtbk1vZGUgPT09ICd0YWJsZScgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZW9qc29uLWluZm8tbW9kYWxfX2V4YW1wbGVcIj5cbiAgICAgICAgICAgIDxTdHlsZWRUaXRsZT5cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJtb2RhbC5wb2x5Z29uSW5mby5leGFtcGxlVGFibGVcIiAvPlxuICAgICAgICAgICAgPC9TdHlsZWRUaXRsZT5cbiAgICAgICAgICAgIDxFeGFtcGxlVGFibGUgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L0luZm9Nb2RhbD5cbiAgICApO1xuICB9O1xuICByZXR1cm4gR2VvanNvbkluZm9Nb2RhbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdlb2pzb25JbmZvTW9kYWxGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxjQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxhQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxhQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBcUMsSUFBQU0sZUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxnQkFBQSxFQVZyQztBQUNBO0FBV0EsSUFBTUMsU0FBUyxHQUFHQyw0QkFBTSxDQUFDQyxHQUFHLENBQUFMLGVBQUEsS0FBQUEsZUFBQSxPQUFBTSx1QkFBQSwrSEFFakIsVUFBQUMsS0FBSztFQUFBLE9BQUlBLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyxZQUFZO0FBQUEsRUFNM0M7QUFF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