"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = require("../base");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var IconLayerIcon = exports["default"] = /*#__PURE__*/function (_Component) {
  function IconLayerIcon() {
    (0, _classCallCheck2["default"])(this, IconLayerIcon);
    return _callSuper(this, IconLayerIcon, arguments);
  }
  (0, _inherits2["default"])(IconLayerIcon, _Component);
  return (0, _createClass2["default"])(IconLayerIcon, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base.Base, this.props, /*#__PURE__*/_react["default"].createElement("path", {
        className: "cr1",
        d: "M42.27,33.59l-4.34,4.34-4.34-4.34a13.25,13.25,0,0,1-8.9-12.52h0A13.24,13.24,0,0,1,37.93,7.83h0A13.24,13.24,0,0,1,51.17,21.07h0A13.25,13.25,0,0,1,42.27,33.59ZM37.93,28.3a7.22,7.22,0,1,0-7.22-7.22A7.22,7.22,0,0,0,37.93,28.3Z"
      }), /*#__PURE__*/_react["default"].createElement("path", {
        className: "cr2",
        d: "M18.68,48.79l-2.44,2.44L13.8,48.79a7.44,7.44,0,0,1-5-7h0a7.44,7.44,0,0,1,7.44-7.44h0a7.44,7.44,0,0,1,7.44,7.44h0A7.44,7.44,0,0,1,18.68,48.79Zm-2.44-3a4.06,4.06,0,1,0-4.06-4.06A4.06,4.06,0,0,0,16.24,45.81Z"
      }), /*#__PURE__*/_react["default"].createElement("path", {
        className: "cr3",
        d: "M48.85,55.52l-2.2,2.2-2.2-2.2a6.73,6.73,0,0,1-4.52-6.36h0a6.72,6.72,0,0,1,6.72-6.72h0a6.72,6.72,0,0,1,6.72,6.72h0A6.73,6.73,0,0,1,48.85,55.52Zm-2.2-2.69A3.67,3.67,0,1,0,43,49.17,3.67,3.67,0,0,0,46.65,52.83Z"
      }));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(IconLayerIcon, "propTypes", {
  /** Set the height of the icon, ex. '16px' */
  height: _propTypes["default"].string,
  colors: _propTypes["default"].arrayOf(_propTypes["default"].string)
});
(0, _defineProperty2["default"])(IconLayerIcon, "defaultProps", {
  height: '16px',
  predefinedClassName: 'icon-layer-icon',
  totalColor: 3
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9iYXNlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX2NhbGxTdXBlciIsIm8iLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJJY29uTGF5ZXJJY29uIiwiZXhwb3J0cyIsIl9Db21wb25lbnQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiYXJndW1lbnRzIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJCYXNlIiwicHJvcHMiLCJjbGFzc05hbWUiLCJkIiwiQ29tcG9uZW50IiwiX2RlZmluZVByb3BlcnR5MiIsImhlaWdodCIsIlByb3BUeXBlcyIsInN0cmluZyIsImNvbG9ycyIsImFycmF5T2YiLCJwcmVkZWZpbmVkQ2xhc3NOYW1lIiwidG90YWxDb2xvciJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pY29uLWxheWVyL2ljb24tbGF5ZXItaWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtCYXNlfSBmcm9tICcuLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvbkxheWVySWNvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqIFNldCB0aGUgaGVpZ2h0IG9mIHRoZSBpY29uLCBleC4gJzE2cHgnICovXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbG9yczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGhlaWdodDogJzE2cHgnLFxuICAgIHByZWRlZmluZWRDbGFzc05hbWU6ICdpY29uLWxheWVyLWljb24nLFxuICAgIHRvdGFsQ29sb3I6IDNcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCYXNlIHsuLi50aGlzLnByb3BzfT5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBjbGFzc05hbWU9XCJjcjFcIlxuICAgICAgICAgIGQ9XCJNNDIuMjcsMzMuNTlsLTQuMzQsNC4zNC00LjM0LTQuMzRhMTMuMjUsMTMuMjUsMCwwLDEtOC45LTEyLjUyaDBBMTMuMjQsMTMuMjQsMCwwLDEsMzcuOTMsNy44M2gwQTEzLjI0LDEzLjI0LDAsMCwxLDUxLjE3LDIxLjA3aDBBMTMuMjUsMTMuMjUsMCwwLDEsNDIuMjcsMzMuNTlaTTM3LjkzLDI4LjNhNy4yMiw3LjIyLDAsMSwwLTcuMjItNy4yMkE3LjIyLDcuMjIsMCwwLDAsMzcuOTMsMjguM1pcIlxuICAgICAgICAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGNsYXNzTmFtZT1cImNyMlwiXG4gICAgICAgICAgZD1cIk0xOC42OCw0OC43OWwtMi40NCwyLjQ0TDEzLjgsNDguNzlhNy40NCw3LjQ0LDAsMCwxLTUtN2gwYTcuNDQsNy40NCwwLDAsMSw3LjQ0LTcuNDRoMGE3LjQ0LDcuNDQsMCwwLDEsNy40NCw3LjQ0aDBBNy40NCw3LjQ0LDAsMCwxLDE4LjY4LDQ4Ljc5Wm0tMi40NC0zYTQuMDYsNC4wNiwwLDEsMC00LjA2LTQuMDZBNC4wNiw0LjA2LDAsMCwwLDE2LjI0LDQ1LjgxWlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgY2xhc3NOYW1lPVwiY3IzXCJcbiAgICAgICAgICBkPVwiTTQ4Ljg1LDU1LjUybC0yLjIsMi4yLTIuMi0yLjJhNi43Myw2LjczLDAsMCwxLTQuNTItNi4zNmgwYTYuNzIsNi43MiwwLDAsMSw2LjcyLTYuNzJoMGE2LjcyLDYuNzIsMCwwLDEsNi43Miw2LjcyaDBBNi43Myw2LjczLDAsMCwxLDQ4Ljg1LDU1LjUyWm0tMi4yLTIuNjlBMy42NywzLjY3LDAsMSwwLDQzLDQ5LjE3LDMuNjcsMy42NywwLDAsMCw0Ni42NSw1Mi44M1pcIlxuICAgICAgICAvPlxuICAgICAgPC9CYXNlPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFILE9BQUE7QUFBNkIsU0FBQUkseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFOLHdCQUFBTSxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFB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