"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexIdRequiredColumns = exports.hexIdExAccessor = exports.hexIdAccessor = exports.defaultElevation = exports.defaultCoverage = exports["default"] = exports.HexagonIdVisConfigs = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _baseLayer = _interopRequireDefault(require("../base-layer"));
var _extensions = require("@deck.gl/extensions");
var _layers = require("@deck.gl/layers");
var _geoLayers = require("@deck.gl/geo-layers");
var _deckglLayers = require("@kepler.gl/deckgl-layers");
var _commonUtils = require("@kepler.gl/common-utils");
var _utils = require("@kepler.gl/utils");
var _h3HexagonLayerIcon = _interopRequireDefault(require("./h3-hexagon-layer-icon"));
var _constants = require("@kepler.gl/constants");
var _layerTextLabel = require("../layer-text-label");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_LINE_SCALE_VALUE = 8;
var hexIdRequiredColumns = exports.hexIdRequiredColumns = ['hex_id'];
var hexIdAccessor = exports.hexIdAccessor = function hexIdAccessor(_ref) {
  var hex_id = _ref.hex_id;
  return function (dc) {
    return function (d) {
      return dc.valueAt(d.index, hex_id.fieldIdx);
    };
  };
};

/** Accessor that tries to convert h3 indicies in decimal form to hex form */
var hexIdExAccessor = exports.hexIdExAccessor = function hexIdExAccessor(_ref2) {
  var hex_id = _ref2.hex_id;
  return function (dc) {
    return function (d) {
      var value = dc.valueAt(d.index, hex_id.fieldIdx);
      if ((0, _commonUtils.h3IsValid)(value)) {
        return value;
      }
      try {
        return BigInt(value).toString(16);
      } catch (_unused) {
        return null;
      }
    };
  };
};
var defaultElevation = exports.defaultElevation = 500;
var defaultCoverage = exports.defaultCoverage = 1;
var HexagonIdVisConfigs = exports.HexagonIdVisConfigs = {
  colorRange: 'colorRange',
  filled: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.filled), {}, {
    defaultValue: true
  }),
  opacity: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.opacity), {}, {
    label: 'Fill Opacity',
    range: [0, 1],
    property: 'opacity'
  }),
  outline: 'outline',
  strokeColor: 'strokeColor',
  strokeColorRange: 'strokeColorRange',
  strokeOpacity: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.opacity), {}, {
    label: 'Stroke Opacity',
    range: [0, 1],
    property: 'strokeOpacity'
  }),
  thickness: 'thickness',
  coverage: 'coverage',
  enable3d: 'enable3d',
  sizeRange: 'elevationRange',
  coverageRange: 'coverageRange',
  elevationScale: 'elevationScale',
  enableElevationZoomFactor: 'enableElevationZoomFactor',
  fixedHeight: 'fixedHeight'
};
var brushingExtension = new _extensions.BrushingExtension();
var HexagonIdLayer = exports["default"] = /*#__PURE__*/function (_Layer) {
  function HexagonIdLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, HexagonIdLayer);
    _this = _callSuper(this, HexagonIdLayer, [props]);
    (0, _defineProperty2["default"])(_this, "dataToFeature", void 0);
    _this.dataToFeature = {
      centroids: []
    };
    _this.registerVisConfig(HexagonIdVisConfigs);
    _this.getPositionAccessor = function (dataContainer, dataset) {
      var fieldType = dataset === null || dataset === void 0 ? void 0 : dataset.fields[_this.config.columns.hex_id.fieldIdx].type;
      return fieldType === _constants.ALL_FIELD_TYPES.h3 ? hexIdAccessor(_this.config.columns)(dataContainer) : hexIdExAccessor(_this.config.columns)(dataContainer);
    };
    return _this;
  }
  (0, _inherits2["default"])(HexagonIdLayer, _Layer);
  return (0, _createClass2["default"])(HexagonIdLayer, [{
    key: "type",
    get: function get() {
      return 'hexagonId';
    }
  }, {
    key: "name",
    get: function get() {
      return 'H3';
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return hexIdRequiredColumns;
    }
  }, {
    key: "layerIcon",
    get: function get() {
      // use hexagon layer icon for now
      return _h3HexagonLayerIcon["default"];
    }
  }, {
    key: "visualChannels",
    get: function get() {
      var visualChannels = _superPropGet(HexagonIdLayer, "visualChannels", this, 1);
      return {
        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {
          accessor: 'getFillColor',
          condition: function condition(config) {
            return config.visConfig.filled;
          }
        }),
        strokeColor: {
          property: 'strokeColor',
          key: 'strokeColor',
          field: 'strokeColorField',
          scale: 'strokeColorScale',
          domain: 'strokeColorDomain',
          range: 'strokeColorRange',
          channelScaleType: _constants.CHANNEL_SCALES.color,
          accessor: 'getLineColor',
          condition: function condition(config) {
            return config.visConfig.outline;
          },
          defaultValue: function defaultValue(config) {
            return config.visConfig.strokeColor || config.color;
          }
        },
        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {
          property: 'height',
          accessor: 'getElevation',
          nullValue: 0,
          condition: function condition(config) {
            return config.visConfig.enable3d;
          },
          defaultValue: defaultElevation
        }),
        coverage: {
          property: 'coverage',
          field: 'coverageField',
          scale: 'coverageScale',
          domain: 'coverageDomain',
          range: 'coverageRange',
          key: 'coverage',
          channelScaleType: _constants.CHANNEL_SCALES.radius,
          accessor: 'getCoverage',
          nullValue: 0,
          defaultValue: defaultCoverage
        }
      };
    }
  }, {
    key: "setInitialLayerConfig",
    value: function setInitialLayerConfig(dataset) {
      if (!dataset.dataContainer.numRows()) {
        return this;
      }
      var defaultColorField = (0, _utils.findDefaultColorField)(dataset);
      if (defaultColorField) {
        this.updateLayerConfig({
          colorField: defaultColorField
        });
        this.updateLayerVisualChannel(dataset, 'color');
      }
      return this;
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      var defaultLayerConfig = _superPropGet(HexagonIdLayer, "getDefaultLayerConfig", this, 3)([props]);
      return _objectSpread(_objectSpread({}, defaultLayerConfig), {}, {
        // add stroke color visual channel
        strokeColorField: null,
        strokeColorDomain: [0, 1],
        strokeColorScale: 'quantile',
        colorUI: _objectSpread(_objectSpread({}, defaultLayerConfig.colorUI), {}, {
          strokeColorRange: _constants.DEFAULT_COLOR_UI
        }),
        // add radius visual channel
        coverageField: null,
        coverageDomain: [0, 1],
        coverageScale: 'linear',
        // modify default textLabel anchor position to be appropriate for a hexagon shape
        textLabel: [_objectSpread(_objectSpread({}, _constants.DEFAULT_TEXT_LABEL), {}, {
          anchor: 'middle'
        })]
      });
    }
  }, {
    key: "calculateDataAttribute",
    value: function calculateDataAttribute(_ref3, getHexId) {
      var filteredIndex = _ref3.filteredIndex;
      var data = [];
      for (var i = 0; i < filteredIndex.length; i++) {
        var index = filteredIndex[i];
        var id = getHexId({
          index: index
        });
        var centroid = this.dataToFeature.centroids[index];
        if (centroid) {
          data.push({
            index: index,
            id: id,
            centroid: centroid
          });
        }
      }
      return data;
    }

    // TODO: fix complexity
    /* eslint-disable complexity */
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      if (this.config.dataId === null) {
        return {};
      }
      var dataset = datasets[this.config.dataId];
      var gpuFilter = dataset.gpuFilter,
        dataContainer = dataset.dataContainer;
      var getHexId = this.getPositionAccessor(dataContainer, dataset);
      var _this$updateData = this.updateData(datasets, oldLayerData),
        data = _this$updateData.data,
        triggerChanged = _this$updateData.triggerChanged;
      var accessors = this.getAttributeAccessors({
        dataContainer: dataContainer
      });
      var textLabel = this.config.textLabel;

      // get all distinct characters in the text labels
      var textLabels = (0, _layerTextLabel.formatTextLabelData)({
        textLabel: textLabel,
        triggerChanged: triggerChanged,
        oldLayerData: oldLayerData,
        data: data,
        dataContainer: dataContainer
      });
      return _objectSpread({
        data: data,
        getHexId: getHexId,
        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),
        textLabels: textLabels,
        getPosition: function getPosition(d) {
          return d.centroid;
        }
      }, accessors);
    }
    /* eslint-enable complexity */
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataset, getHexId) {
      var dataContainer = dataset.dataContainer;
      var centroids = dataContainer.map(function (d, index) {
        var id = getHexId({
          index: index
        });
        if (!(0, _commonUtils.h3IsValid)(id)) {
          return null;
        }
        // save a reference of centroids to dataToFeature
        // so we don't have to re calculate it again
        return (0, _commonUtils.getCentroid)({
          id: id
        });
      }, true);
      var centroidsDataContainer = (0, _utils.createDataContainer)(centroids);
      var bounds = this.getPointsBounds(centroidsDataContainer, function (d, dc) {
        return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];
      });
      this.dataToFeature = {
        centroids: centroids
      };
      this.updateMeta({
        bounds: bounds
      });
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var data = opts.data,
        gpuFilter = opts.gpuFilter,
        objectHovered = opts.objectHovered,
        mapState = opts.mapState,
        interactionConfig = opts.interactionConfig;
      var zoomFactor = this.getZoomFactor(mapState);
      var eleZoomFactor = this.getElevationZoomFactor(mapState);
      var config = this.config;
      var visConfig = config.visConfig;
      var updateTriggers = this.getVisualChannelUpdateTriggers();
      var h3HexagonLayerTriggers = {
        getHexagon: this.config.columns,
        getFillColor: updateTriggers.getFillColor,
        getLineColor: updateTriggers.getLineColor,
        getElevation: updateTriggers.getElevation,
        getFilterValue: gpuFilter.filterValueUpdateTriggers
      };
      var columnLayerTriggers = {
        getCoverage: updateTriggers.getCoverage
      };
      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var hoveredObject = this.hasHoveredObject(objectHovered);

      // getPixelOffset with no radius
      var radiusScale = 1.0;
      var getRaidus = null;
      var getPixelOffset = (0, _layerTextLabel.getTextOffsetByRadius)(radiusScale, getRaidus, mapState);
      var brushingProps = this.getBrushingExtensionProps(interactionConfig);
      var extensions = [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [brushingExtension]);
      var sharedProps = _objectSpread({
        getFilterValue: data.getFilterValue,
        extensions: extensions,
        filterRange: defaultLayerProps.filterRange,
        visible: defaultLayerProps.visible
      }, brushingProps);
      return [new _geoLayers.H3HexagonLayer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), data), brushingProps), {}, {
        extensions: extensions,
        wrapLongitude: false,
        filled: visConfig.filled,
        stroked: visConfig.outline,
        lineWidthScale: visConfig.thickness,
        getHexagon: function getHexagon(x) {
          return x.id;
        },
        // coverage
        coverage: config.coverageField ? 1 : visConfig.coverage,
        // highlight
        autoHighlight: visConfig.enable3d,
        highlightColor: _constants.HIGHLIGH_COLOR_3D,
        // elevation
        extruded: visConfig.enable3d,
        elevationScale: visConfig.elevationScale * eleZoomFactor,
        // render
        updateTriggers: h3HexagonLayerTriggers,
        _subLayerProps: {
          'hexagon-cell': {
            type: _deckglLayers.EnhancedColumnLayer,
            getCoverage: data.getCoverage,
            updateTriggers: columnLayerTriggers,
            strokeOpacity: visConfig.strokeOpacity
          }
        }
      }))].concat((0, _toConsumableArray2["default"])(hoveredObject && !config.sizeField ? [new _layers.GeoJsonLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {
        visible: defaultLayerProps.visible,
        data: [(0, _commonUtils.idToPolygonGeo)(hoveredObject)],
        getLineColor: config.highlightColor,
        lineWidthScale: DEFAULT_LINE_SCALE_VALUE * zoomFactor,
        wrapLongitude: false
      }))] : []), (0, _toConsumableArray2["default"])(this.renderTextLabelLayer({
        getPosition: data.getPosition,
        sharedProps: sharedProps,
        getPixelOffset: getPixelOffset,
        updateTriggers: updateTriggers
      }, opts)));
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref4) {
      var _ref4$fields = _ref4.fields,
        fields = _ref4$fields === void 0 ? [] : _ref4$fields,
        dataContainer = _ref4.dataContainer,
        label = _ref4.label;
      var hexFields = (0, _commonUtils.getHexFields)(fields, dataContainer);
      if (!hexFields.length) {
        return {
          props: []
        };
      }
      return {
        props: hexFields.map(function (f) {
          return {
            isVisible: true,
            // default layer name should be dataset name
            label: label,
            columns: {
              hex_id: {
                value: f.name,
                fieldIdx: fields.findIndex(function (fid) {
                  return fid.name === f.name;
                })
              }
            }
          };
        })
      };
    }
  }]);
}(_baseLayer["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,