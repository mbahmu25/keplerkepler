"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = require("../base");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var TripLayerIcon = exports["default"] = /*#__PURE__*/function (_Component) {
  function TripLayerIcon() {
    (0, _classCallCheck2["default"])(this, TripLayerIcon);
    return _callSuper(this, TripLayerIcon, arguments);
  }
  (0, _inherits2["default"])(TripLayerIcon, _Component);
  return (0, _createClass2["default"])(TripLayerIcon, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base.Base, this.props, /*#__PURE__*/_react["default"].createElement("g", {
        clipPath: "url(#clip0)",
        className: "cr1"
      }, /*#__PURE__*/_react["default"].createElement("path", {
        d: "M53.025 4.85005C50.25 2.07505 45.75 2.07505 42.975 4.85005C40.2 7.62505 40.2 12.2 42.975 14.975L48 20L53.025 14.9C55.8 12.2 55.8 7.62505 53.025 4.85005ZM48 11.375C47.175 11.375 46.5 10.7 46.5 9.87505C46.5 9.05005 47.175 8.37505 48 8.37505C48.825 8.37505 49.5 9.05005 49.5 9.87505C49.5 10.7 48.825 11.375 48 11.375Z"
      })), /*#__PURE__*/_react["default"].createElement("g", {
        clipPath: "url(#clip1)",
        className: "cr2"
      }, /*#__PURE__*/_react["default"].createElement("path", {
        d: "M20.025 36.85C17.25 34.075 12.75 34.075 9.97502 36.85C7.20002 39.625 7.20002 44.2 9.97502 46.975L15 52L20.025 46.9C22.8 44.2 22.8 39.625 20.025 36.85ZM15 43.375C14.175 43.375 13.5 42.7 13.5 41.875C13.5 41.05 14.175 40.375 15 40.375C15.825 40.375 16.5 41.05 16.5 41.875C16.5 42.7 15.825 43.375 15 43.375Z"
      })), /*#__PURE__*/_react["default"].createElement("path", {
        className: "cr3",
        d: "M45.9943 19.8697C46.0661 20.6951 45.4552 21.4223 44.6299 21.4941L34.782 22.3504L38.1515 40.1604L17.8748 54.7185C17.2019 55.2016 16.2647 55.0478 15.7815 54.3748C15.2984 53.7019 15.4522 52.7647 16.1252 52.2815L34.8483 38.8389L31.2177 19.6491L44.37 18.5053C45.1953 18.4336 45.9225 19.0444 45.9943 19.8697Z"
      }), /*#__PURE__*/_react["default"].createElement("defs", null, /*#__PURE__*/_react["default"].createElement("clipPath", {
        id: "clip0"
      }, /*#__PURE__*/_react["default"].createElement("rect", {
        width: "18",
        height: "18",
        transform: "translate(39 2)"
      })), /*#__PURE__*/_react["default"].createElement("clipPath", {
        id: "clip1"
      }, /*#__PURE__*/_react["default"].createElement("rect", {
        width: "18",
        height: "18",
        transform: "translate(6 34)"
      }))));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(TripLayerIcon, "propTypes", {
  /** Set the height of the icon, ex. '16px' */
  height: _propTypes["default"].string,
  colors: _propTypes["default"].arrayOf(_propTypes["default"].string)
});
(0, _defineProperty2["default"])(TripLayerIcon, "defaultProps", {
  size: 'tiny',
  height: '16px',
  predefinedClassName: 'trip-layer-icon'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9iYXNlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX2NhbGxTdXBlciIsIm8iLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJUcmlwTGF5ZXJJY29uIiwiZXhwb3J0cyIsIl9Db21wb25lbnQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiYXJndW1lbnRzIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJCYXNlIiwicHJvcHMiLCJjbGlwUGF0aCIsImNsYXNzTmFtZSIsImQiLCJpZCIsIndpZHRoIiwiaGVpZ2h0IiwidHJhbnNmb3JtIiwiQ29tcG9uZW50IiwiX2RlZmluZVByb3BlcnR5MiIsIlByb3BUeXBlcyIsInN0cmluZyIsImNvbG9ycyIsImFycmF5T2YiLCJzaXplIiwicHJlZGVmaW5lZENsYXNzTmFtZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmlwLWxheWVyL3RyaXAtbGF5ZXItaWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtCYXNlfSBmcm9tICcuLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJpcExheWVySWNvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqIFNldCB0aGUgaGVpZ2h0IG9mIHRoZSBpY29uLCBleC4gJzE2cHgnICovXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbG9yczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNpemU6ICd0aW55JyxcbiAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICBwcmVkZWZpbmVkQ2xhc3NOYW1lOiAndHJpcC1sYXllci1pY29uJ1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2Ugey4uLnRoaXMucHJvcHN9PlxuICAgICAgICA8ZyBjbGlwUGF0aD1cInVybCgjY2xpcDApXCIgY2xhc3NOYW1lPVwiY3IxXCI+XG4gICAgICAgICAgPHBhdGggZD1cIk01My4wMjUgNC44NTAwNUM1MC4yNSAyLjA3NTA1IDQ1Ljc1IDIuMDc1MDUgNDIuOTc1IDQuODUwMDVDNDAuMiA3LjYyNTA1IDQwLjIgMTIuMiA0Mi45NzUgMTQuOTc1TDQ4IDIwTDUzLjAyNSAxNC45QzU1LjggMTIuMiA1NS44IDcuNjI1MDUgNTMuMDI1IDQuODUwMDVaTTQ4IDExLjM3NUM0Ny4xNzUgMTEuMzc1IDQ2LjUgMTAuNyA0Ni41IDkuODc1MDVDNDYuNSA5LjA1MDA1IDQ3LjE3NSA4LjM3NTA1IDQ4IDguMzc1MDVDNDguODI1IDguMzc1MDUgNDkuNSA5LjA1MDA1IDQ5LjUgOS44NzUwNUM0OS41IDEwLjcgNDguODI1IDExLjM3NSA0OCAxMS4zNzVaXCIgLz5cbiAgICAgICAgPC9nPlxuICAgICAgICA8ZyBjbGlwUGF0aD1cInVybCgjY2xpcDEpXCIgY2xhc3NOYW1lPVwiY3IyXCI+XG4gICAgICAgICAgPHBhdGggZD1cIk0yMC4wMjUgMzYuODVDMTcuMjUgMzQuMDc1IDEyLjc1IDM0LjA3NSA5Ljk3NTAyIDM2Ljg1QzcuMjAwMDIgMzkuNjI1IDcuMjAwMDIgNDQuMiA5Ljk3NTAyIDQ2Ljk3NUwxNSA1MkwyMC4wMjUgNDYuOUMyMi44IDQ0LjIgMjIuOCAzOS42MjUgMjAuMDI1IDM2Ljg1Wk0xNSA0My4zNzVDMTQuMTc1IDQzLjM3NSAxMy41IDQyLjcgMTMuNSA0MS44NzVDMTMuNSA0MS4wNSAxNC4xNzUgNDAuMzc1IDE1IDQwLjM3NUMxNS44MjUgNDAuMzc1IDE2LjUgNDEuMDUgMTYuNSA0MS44NzVDMTYuNSA0Mi43IDE1LjgyNSA0My4zNzUgMTUgNDMuMzc1WlwiIC8+XG4gICAgICAgIDwvZz5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBjbGFzc05hbWU9XCJjcjNcIlxuICAgICAgICAgIGQ9XCJNNDUuOTk0MyAxOS44Njk3QzQ2LjA2NjEgMjAuNjk1MSA0NS40NTUyIDIxLjQyMjMgNDQuNjI5OSAyMS40OTQxTDM0Ljc4MiAyMi4zNTA0TDM4LjE1MTUgNDAuMTYwNEwxNy44NzQ4IDU0LjcxODVDMTcuMjAxOSA1NS4yMDE2IDE2LjI2NDcgNTUuMDQ3OCAxNS43ODE1IDU0LjM3NDhDMTUuMjk4NCA1My43MDE5IDE1LjQ1MjIgNTIuNzY0NyAxNi4xMjUyIDUyLjI4MTVMMzQuODQ4MyAzOC44Mzg5TDMxLjIxNzcgMTkuNjQ5MUw0NC4zNyAxOC41MDUzQzQ1LjE5NTMgMTguNDMzNiA0NS45MjI1IDE5LjA0NDQgNDUuOTk0MyAxOS44Njk3WlwiXG4gICAgICAgIC8+XG4gICAgICAgIDxkZWZzPlxuICAgICAgICAgIDxjbGlwUGF0aCBpZD1cImNsaXAwXCI+XG4gICAgICAgICAgICA8cmVjdCB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMThcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzkgMilcIiAvPlxuICAgICAgICAgIDwvY2xpcFBhdGg+XG4gICAgICAgICAgPGNsaXBQYXRoIGlkPVwiY2xpcDFcIj5cbiAgICAgICAgICAgIDxyZWN0IHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxOFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg2IDM0KVwiIC8+XG4gICAgICAgICAgPC9jbGlwUGF0aD5cbiAgICAgICAgPC9kZWZzPlxuICAgICAgPC9CYXNlPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxLQUFBLEdBQUFILE9BQUE7QUFBNkIsU0FBQUkseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFOLHdCQUFBTSxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQSxzQkFBQUEsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxD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