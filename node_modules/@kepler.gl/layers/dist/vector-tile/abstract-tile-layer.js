"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.commonTileVisConfigs = exports.DEFAULT_RADIUS = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _table = require("@kepler.gl/table");
var _utils = require("@kepler.gl/utils");
var _baseLayer = _interopRequireDefault(require("../base-layer"));
var _tileUtils = require("./common-tile/tile-utils");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_ELEVATION = 500;
var DEFAULT_RADIUS = exports.DEFAULT_RADIUS = 1;
var commonTileVisConfigs = exports.commonTileVisConfigs = {
  strokeColor: 'strokeColor',
  strokeOpacity: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.opacity), {}, {
    property: 'strokeOpacity'
  }),
  radius: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.radius), {}, {
    range: [0.1, 100],
    step: 0.1,
    defaultValue: DEFAULT_RADIUS,
    allowCustomValue: false
  }),
  radiusUnits: {
    type: 'boolean',
    defaultValue: true,
    label: 'Radius in pixels',
    group: '',
    property: 'radiusUnits',
    description: 'Radius in pixels or in meters'
  },
  enable3d: 'enable3d',
  stroked: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.stroked), {}, {
    defaultValue: false
  }),
  transition: {
    type: 'boolean',
    defaultValue: false,
    label: 'Transition',
    group: '',
    property: 'transition',
    description: 'Smoother transition during animation (enable transition will decrease performance)'
  },
  heightRange: 'elevationRange',
  elevationScale: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.elevationScale), {}, {
    allowCustomValue: false
  }),
  opacity: 'opacity',
  colorRange: 'colorRange',
  // TODO: figure out type for radiusByZoom vis config
  radiusByZoom: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.radius), {}, {
    defaultValue: {
      enabled: false,
      stops: null
    }
  }),
  dynamicColor: {
    type: 'boolean',
    defaultValue: false,
    label: 'Dynamic Color',
    group: '',
    property: 'dynamicColor',
    description: 'Use a dynamic color scale based on data visible in the viewport'
  }
};
/**
 * Abstract tile layer, including common functionality for viewport-based datasets,
 * dynamic scales, and tile-based animation
 */
var AbstractTileLayer = exports["default"] = /*#__PURE__*/function (_KeplerLayer) {
  function AbstractTileLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, AbstractTileLayer);
    _this = _callSuper(this, AbstractTileLayer, [props]);
    (0, _defineProperty2["default"])(_this, "tileDataset", void 0);
    (0, _defineProperty2["default"])(_this, "setLayerDomain", undefined);
    /**
     * Callback to invoke when the viewport changes
     */
    (0, _defineProperty2["default"])(_this, "onViewportLoad", function (tiles) {
      _this.tileDataset.updateTiles(tiles);
      // Update dynamic color domain if required
      if (_this.config.visConfig.dynamicColor) {
        _this.setDynamicColorDomain();
      }
    });
    (0, _defineProperty2["default"])(_this, "setDynamicColorDomain", (0, _throttle["default"])(function () {
      var _this2 = _this,
        config = _this2.config,
        tileDataset = _this2.tileDataset,
        setLayerDomain = _this2.setLayerDomain;
      var field = config.colorField;
      var colorDomain = config.colorDomain,
        colorScale = config.colorScale;
      if (!tileDataset || !setLayerDomain || !field) return;
      if (colorScale === _constants.SCALE_TYPES.quantize) {
        var _tileDataset$getExten = tileDataset.getExtent(field),
          _tileDataset$getExten2 = (0, _slicedToArray2["default"])(_tileDataset$getExten, 2),
          min = _tileDataset$getExten2[0],
          max = _tileDataset$getExten2[1];
        if (!Array.isArray(colorDomain) || min !== colorDomain[0] || max !== colorDomain[1]) {
          setLayerDomain({
            domain: [min, max]
          });
        }
      } else if (colorScale === _constants.SCALE_TYPES.quantile) {
        var domain = tileDataset.getQuantileSample(field);
        setLayerDomain({
          domain: domain
        });
      } else if (colorScale === _constants.SCALE_TYPES.ordinal) {
        var _domain = tileDataset.getUniqueValues(field);
        setLayerDomain({
          domain: _domain
        });
      }
    }, 500));
    _this.registerVisConfig(commonTileVisConfigs);
    _this.tileDataset = _this.initTileDataset();
    return _this;
  }
  (0, _inherits2["default"])(AbstractTileLayer, _KeplerLayer);
  return (0, _createClass2["default"])(AbstractTileLayer, [{
    key: "requireData",
    get: function get() {
      return true;
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return [];
    }
  }, {
    key: "visualChannels",
    get: function get() {
      return {
        color: _objectSpread(_objectSpread({}, _superPropGet(AbstractTileLayer, "visualChannels", this, 1).color), {}, {
          accessor: 'getFillColor',
          defaultValue: function defaultValue(config) {
            return config.color;
          }
        }),
        height: {
          property: 'height',
          field: 'heightField',
          scale: 'heightScale',
          domain: 'heightDomain',
          range: 'heightRange',
          key: 'height',
          channelScaleType: 'size',
          accessor: 'getElevation',
          condition: function condition(config) {
            return config.visConfig.enable3d;
          },
          nullValue: 0,
          defaultValue: DEFAULT_ELEVATION
        }
      };
    }
  }, {
    key: "accessVSFieldValue",
    value: function accessVSFieldValue(inputField, indexKey) {
      return this.accessRowValue(inputField, indexKey);
    }
  }, {
    key: "getScaleOptions",
    value: function getScaleOptions(channelKey) {
      if (channelKey === 'color') {
        var _field$filterProps;
        var channel = this.visualChannels.color;
        var _field = this.config[channel.field];
        if ((0, _tileUtils.isDomainQuantiles)(_field === null || _field === void 0 || (_field$filterProps = _field.filterProps) === null || _field$filterProps === void 0 ? void 0 : _field$filterProps.domainQuantiles) || this.config.visConfig.dynamicColor ||
        // If we've set the scale to quantile, we need to include it - there's a loading
        // period in which the visConfig isn't set yet, but if we don't return the right
        // scale type we lose it
        this.config.colorScale === _constants.SCALE_TYPES.quantile) {
          return [_constants.SCALE_TYPES.quantize, _constants.SCALE_TYPES.quantile, _constants.SCALE_TYPES.custom];
        }
        return [_constants.SCALE_TYPES.quantize, _constants.SCALE_TYPES.custom];
      }
      return [_constants.SCALE_TYPES.linear];
    }
  }, {
    key: "resetColorDomain",
    value: function resetColorDomain() {
      var _this$setLayerDomain;
      var _this$meta = this.meta,
        datasetId = _this$meta.datasetId,
        datasets = _this$meta.datasets;
      this.updateLayerVisualChannel(datasets === null || datasets === void 0 ? void 0 : datasets[datasetId || ''], 'color');
      (_this$setLayerDomain = this.setLayerDomain) === null || _this$setLayerDomain === void 0 || _this$setLayerDomain.call(this, {
        domain: this.config.colorDomain
      });
    }
  }, {
    key: "updateLayerConfig",
    value: function updateLayerConfig(newConfig) {
      var _this$config$visConfi,
        _newConfig$visConfig$,
        _newConfig$visConfig,
        _this3 = this;
      // When the dynamic color setting changes, we need to recalculate the layer domain
      var old = (_this$config$visConfi = this.config.visConfig.dynamicColor) !== null && _this$config$visConfi !== void 0 ? _this$config$visConfi : false;
      var next = (_newConfig$visConfig$ = (_newConfig$visConfig = newConfig.visConfig) === null || _newConfig$visConfig === void 0 ? void 0 : _newConfig$visConfig.dynamicColor) !== null && _newConfig$visConfig$ !== void 0 ? _newConfig$visConfig$ : old;
      var scaleTypeChanged = newConfig.colorScale && this.config.colorScale !== newConfig.colorScale;
      _superPropGet(AbstractTileLayer, "updateLayerConfig", this, 3)([newConfig]);
      var colorField = this.config.colorField;
      if (colorField) {
        // When we switch from dynamic to non-dynamic or vice versa, we need to update
        // the color domain. This is downstream from a dispatch call, so we use
        // setTimeout to avoid "reducers may not dispatch actions" errors
        if (next && (!old || scaleTypeChanged)) {
          setTimeout(function () {
            return _this3.setDynamicColorDomain();
          }, 0);
        } else if (old && !next) {
          setTimeout(function () {
            return _this3.resetColorDomain();
          }, 0);
        }
      }
      return this;
    }
  }, {
    key: "animationDomain",
    get: function get() {
      return this.config.animation.domain;
    }
  }, {
    key: "setInitialLayerConfig",
    value: function setInitialLayerConfig(dataset) {
      var defaultColorField = (0, _utils.findDefaultColorField)(dataset);
      if (defaultColorField) {
        this.updateLayerConfig({
          colorField: defaultColorField
        });
        this.updateLayerVisualChannel(dataset, 'color');
      }
      return this;
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      return _objectSpread(_objectSpread({}, _superPropGet(AbstractTileLayer, "getDefaultLayerConfig", this, 3)([props])), {}, {
        colorScale: _constants.SCALE_TYPES.quantize,
        // add height visual channel
        heightField: null,
        heightDomain: [0, 1],
        heightScale: 'linear'
      });
    }

    // We can render without columns, so we redefine this method
  }, {
    key: "shouldRenderLayer",
    value: function shouldRenderLayer() {
      return Boolean(this.type && this.config.isVisible);
    }
  }, {
    key: "updateAnimationDomainByField",
    value: function updateAnimationDomainByField(channel) {
      var field = this.config[this.visualChannels[channel].field];
      if ((0, _tileUtils.isIndexedField)(field) && field.indexBy.type === _constants.ALL_FIELD_TYPES.timestamp) {
        var timeDomain = field.indexBy.timeDomain;
        this.updateLayerConfig({
          animation: _objectSpread(_objectSpread({}, timeDomain), {}, {
            enabled: true,
            startTime: timeDomain.domain[0]
          })
        });
      }
    }
  }, {
    key: "updateAnimationDomain",
    value: function updateAnimationDomain(domain) {
      this.updateLayerConfig({
        animation: _objectSpread(_objectSpread({}, this.config.animation), {}, {
          domain: domain
        })
      });
    }
  }, {
    key: "updateLayerDomain",
    value: function updateLayerDomain(datasets, newFilter) {
      var _this4 = this;
      _superPropGet(AbstractTileLayer, "updateLayerDomain", this, 3)([datasets, newFilter]);
      if (newFilter) {
        // invalidate cachedVisibleDataset when e.g. changing filters
        this.tileDataset.invalidateCache();
      }
      Object.keys(this.visualChannels).forEach(function (channel) {
        _this4.updateAnimationDomainByField(channel);
      });
      return this;
    }
  }, {
    key: "updateLayerVisualChannel",
    value: function updateLayerVisualChannel(dataset, channel) {
      _superPropGet(AbstractTileLayer, "updateLayerVisualChannel", this, 3)([dataset, channel]);

      // create animation if field is indexed by time
      this.updateAnimationDomainByField(channel);
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData, animationConfig) {
      var dataId = this.config.dataId;
      if (!(0, _commonUtils.notNullorUndefined)(dataId)) {
        return {};
      }
      var dataset = datasets[dataId];
      var dataUpdateTriggers = this.getDataUpdateTriggers(dataset);
      var triggerChanged = this.getChangedTriggers(dataUpdateTriggers);
      if (triggerChanged && triggerChanged.getMeta) {
        this.updateLayerMeta(dataset, datasets);
      }
      var indexKey = this.config.animation.enabled ? animationConfig.currentTime : null;
      var accessors = this.getAttributeAccessors({
        dataAccessor: function dataAccessor() {
          return function (d) {
            return d;
          };
        },
        dataContainer: dataset.dataContainer,
        indexKey: indexKey
      });
      var metadata = dataset === null || dataset === void 0 ? void 0 : dataset.metadata;
      var metadataToData = metadata ? {
        minZoom: metadata.minZoom,
        maxZoom: metadata.maxZoom,
        bounds: metadata.bounds
      } : {};
      return _objectSpread(_objectSpread({}, metadataToData), accessors);
    }
  }, {
    key: "getGpuFilterValueAccessor",
    value: function getGpuFilterValueAccessor(_ref) {
      var _this5 = this;
      var gpuFilter = _ref.gpuFilter,
        animationConfig = _ref.animationConfig;
      var indexKey = this.config.animation.enabled ? animationConfig.currentTime : null;
      var valueAccessor = function valueAccessor(dataContainer, d) {
        return function (field) {
          return _this5.accessVSFieldValue(field, indexKey)(field, d);
        };
      };
      return gpuFilter.filterValueAccessor(null)(undefined, valueAccessor);
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(dataset) {
      if (!(0, _table.isTileDataset)(dataset)) {
        return {
          props: []
        };
      }
      var newLayerProp = {
        dataId: dataset.id,
        label: dataset.label,
        isVisible: true
      };
      return {
        props: [newLayerProp]
      };
    }
  }]);
}(_baseLayer["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,