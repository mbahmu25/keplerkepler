"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("@kepler.gl/utils");
var _iterableTileSet = _interopRequireDefault(require("./iterable-tile-set"));
var _tileUtils = require("./tile-utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Per-tile stats, for caching
 */
/**
 * Stateful class offering dataset-style functions for the set of tiles.
 */
var TileDataset = exports["default"] = /*#__PURE__*/function () {
  function TileDataset(accessors, tiles) {
    (0, _classCallCheck2["default"])(this, TileDataset);
    (0, _defineProperty2["default"])(this, "accessors", void 0);
    (0, _defineProperty2["default"])(this, "tiles", void 0);
    (0, _defineProperty2["default"])(this, "tileSet", void 0);
    (0, _defineProperty2["default"])(this, "tileIds", new Set());
    /** Cache for per-tile field stats: tileId -> fieldId -> stats */
    (0, _defineProperty2["default"])(this, "tileStats", new Map());
    this.accessors = accessors;
    this.tiles = [];
    this.tileSet = new _iterableTileSet["default"]([], accessors.getRowCount);
    if (tiles) {
      this.updateTiles(tiles);
    }
  }

  /**
   * Invalidate the cached data
   */
  return (0, _createClass2["default"])(TileDataset, [{
    key: "invalidateCache",
    value: function invalidateCache() {
      // TODO: implement later
    }

    /**
     * Update the set of tiles in the viewport
     */
  }, {
    key: "updateTiles",
    value: function updateTiles(tiles) {
      var _this$accessors = this.accessors,
        getTileId = _this$accessors.getTileId,
        getIterable = _this$accessors.getIterable,
        getRowCount = _this$accessors.getRowCount;
      var tileIds = new Set(tiles.map(getTileId));
      if (!areEqualSets(tileIds, this.tileIds)) {
        this.invalidateCache();
      }
      this.tiles = tiles;
      this.tileIds = tileIds;
      this.tileSet = new _iterableTileSet["default"](tiles.map(getIterable), getRowCount);
    }

    /**
     * Get the min/max domain of a field
     */
  }, {
    key: "getExtent",
    value: function getExtent(field) {
      var _this$accessors2 = this.accessors,
        getRowValue = _this$accessors2.getRowValue,
        getIterable = _this$accessors2.getIterable;
      var accessor = getRowValue(field);
      var min = Infinity;
      var max = -Infinity;
      var _iterator = _createForOfIteratorHelper(this.tiles),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var tile = _step.value;
          // Check the cache
          var extent = this.getTileStat(tile, field, 'extent');
          if (!extent) {
            // Cache miss, calculate and cache
            extent = getTileExtent(getIterable(tile), field, accessor);
            this.setTileStat(tile, field, 'extent', extent);
          }
          if (extent) {
            if (extent[0] < min) min = extent[0];
            if (extent[1] > max) max = extent[1];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return Number.isFinite(min) && Number.isFinite(max) ? [min, max] : [0, 0];
    }

    /**
     * Get a sample of field values to use in estimating quantiles
     */
  }, {
    key: "getQuantileSample",
    value: function getQuantileSample(field) {
      var minRowCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
      // TODO: There should be reasonable per-tile caching possible here
      var set = this.tileSet;
      var accessor = this.accessors.getRowValue(field);
      var sample = [];
      var sampleStep = Math.max(Math.floor(set.rowCount / minRowCount), 1);
      var i = 0;
      var _iterator2 = _createForOfIteratorHelper(set),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _row = _step2.value;
          if (++i === sampleStep) {
            var val = accessor(field, _row);
            if (val !== null) sample.push(val);
            i = 0;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      (0, _utils.quickInsertionSort)(sample);
      (0, _tileUtils.pruneQuantiles)(sample);
      return sample;
    }

    /**
     * Get a set of unique values for a field
     */
  }, {
    key: "getUniqueValues",
    value: function getUniqueValues(field) {
      var _this$accessors3 = this.accessors,
        getRowValue = _this$accessors3.getRowValue,
        getIterable = _this$accessors3.getIterable;
      var accessor = getRowValue(field);
      var uniques = new Set();
      var _iterator3 = _createForOfIteratorHelper(this.tiles),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _tileUniques;
          var tile = _step3.value;
          // Check the cache
          var tileUniques = this.getTileStat(tile, field, 'uniqueValues');
          if (!tileUniques) {
            // Cache miss, calculate and cache
            tileUniques = getTileUniqueValues(getIterable(tile), field, accessor);
            this.setTileStat(tile, field, 'uniqueValues', tileUniques);
          }
          var _iterator4 = _createForOfIteratorHelper((_tileUniques = tileUniques) !== null && _tileUniques !== void 0 ? _tileUniques : []),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var val = _step4.value;
              uniques.add(val);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return (0, _toConsumableArray2["default"])(uniques);
    }
  }, {
    key: "getTileStat",
    value: function getTileStat(tile, field, stat) {
      var _this$tileStats$get;
      return (_this$tileStats$get = this.tileStats.get(this.accessors.getTileId(tile))) === null || _this$tileStats$get === void 0 || (_this$tileStats$get = _this$tileStats$get.get(field.name)) === null || _this$tileStats$get === void 0 ? void 0 : _this$tileStats$get[stat];
    }
  }, {
    key: "setTileStat",
    value: function setTileStat(tile, field, stat, value) {
      var _this$tileStats$get2, _tileStats$get;
      var tileId = this.accessors.getTileId(tile);
      var tileStats = (_this$tileStats$get2 = this.tileStats.get(tileId)) !== null && _this$tileStats$get2 !== void 0 ? _this$tileStats$get2 : new Map();
      var tileFieldStats = (_tileStats$get = tileStats.get(field.name)) !== null && _tileStats$get !== void 0 ? _tileStats$get : {};
      tileFieldStats[stat] = value;
      tileStats.set(field.name, tileFieldStats);
      this.tileStats.set(tileId, tileStats);
    }
  }]);
}();
/**
 * Get the min/max domain of a field in a given tile
 */
function getTileExtent(iterable, field, accessor) {
  var min = Infinity;
  var max = -Infinity;
  var _iterator5 = _createForOfIteratorHelper(iterable),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var _row2 = _step5.value;
      var val = accessor(field, _row2);
      if (val === null) continue;
      if (val < min) min = val;
      if (val > max) max = val;
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  return Number.isFinite(min) && Number.isFinite(max) ? [min, max] : undefined;
}

/**
 * Get unique values for a field in a given tile
 */
function getTileUniqueValues(iterable, field, accessor) {
  var maxUniques = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
  var uniques = new Set();
  var _iterator6 = _createForOfIteratorHelper(iterable),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var _row3 = _step6.value;
      if (uniques.size >= maxUniques) return uniques;
      uniques.add(accessor(field, _row3));
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  return uniques;
}
function areEqualSets(a, b) {
  if (a.size !== b.size) return false;
  var _iterator7 = _createForOfIteratorHelper(a),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var val = _step7.value;
      if (!b.has(val)) {
        return false;
      }
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,