"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CATEGORICAL_TEXTURE_WIDTH = void 0;
exports.bboxIntersects = bboxIntersects;
exports.computeZRange = computeZRange;
exports.dtypeMaxValue = void 0;
exports.filterAvailablePresets = filterAvailablePresets;
exports.findAssetWithName = findAssetWithName;
exports.generateCategoricalBitmapArray = generateCategoricalBitmapArray;
exports.getAssets = getAssets;
exports.getBandIdsForCommonNames = getBandIdsForCommonNames;
exports.getDataSourceParams = getDataSourceParams;
exports.getEOBands = getEOBands;
exports.getImageMinMax = getImageMinMax;
exports.getMaxRequests = getMaxRequests;
exports.getMinMaxFromTile2DHeaders = getMinMaxFromTile2DHeaders;
exports.getRasterStatisticsMinMax = getRasterStatisticsMinMax;
exports.getSTACBounds = getSTACBounds;
exports.getSingleBandPresetOptions = getSingleBandPresetOptions;
exports.getUsableAssets = getUsableAssets;
exports.isColormapAllowed = isColormapAllowed;
exports.isFilterAllowed = isFilterAllowed;
exports.isRescalingAllowed = isRescalingAllowed;
exports.isSearchableStac = isSearchableStac;
exports.timeRangeToStacTemporalInterval = timeRangeToStacTemporalInterval;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _core = require("@math.gl/core");
var _utils = require("@kepler.gl/utils");
var _config = require("./config");
var _types = require("./types");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Utility functions and constants for processing STAC metadata and other raster tile data
 */
var CATEGORICAL_TEXTURE_WIDTH = exports.CATEGORICAL_TEXTURE_WIDTH = 256;
function isColormapAllowed(bandCombination) {
  return bandCombination !== _types.BandCombination.Rgb;
}
function isRescalingAllowed(bandCombination) {
  return bandCombination === _types.BandCombination.Rgb || bandCombination === _types.BandCombination.Single;
}
function isFilterAllowed(bandCombination) {
  return bandCombination !== _types.BandCombination.Rgb;
}

/**
 * Max value for data type
 *
 * Values of null might be calculated in runtime
 */
var dtypeMaxValue = exports.dtypeMaxValue = {
  uint8: Math.pow(2, 8) - 1,
  uint16: Math.pow(2, 16) - 1,
  uint32: Math.pow(2, 32) - 1,
  uint64: null,
  int8: Math.pow(2, 7) - 1,
  int16: Math.pow(2, 15) - 1,
  int32: Math.pow(2, 31) - 1,
  int64: null,
  float16: null,
  float32: null,
  float64: null,
  cint16: null,
  cint32: null,
  cfloat32: null,
  cfloat64: null,
  other: null
};

/**
 * Is this a STAC Collection that supports custom searching
 * TODO: currently this is a custom hack to support Sentinel. It will need to be generalized before being accessible
 * @param stac  STAC object
 * @return If True, supports searching
 */
function isSearchableStac(stac) {
  return stac.type === 'Collection';

  // return stac.type !== 'Feature' && stac?.providers.some(
  //   provider =>
  //     provider.name.toLowerCase() === 'microsoft' &&
  //     provider.url === 'https://planetarycomputer.microsoft.com'
  // );
}
function getZoomRange(stac) {
  if (_config.ZOOM_RANGES[stac.id]) {
    return _config.ZOOM_RANGES[stac.id];
  }

  // For a single COG, having a full zoom range isn't really a problem.
  // the /cog/info endpoint doesn't describe zoom levels because it doesn't know the projection to serve the image in.
  // Default minzoom, maxzoom: [0, 20]
  return [0, 20];
}

/**
 * Infer data type from STAC item
 * This uses the `raster` extension, which is not yet very common
 * @param stac stac object
 * @return Data type of the band
 */
function getDataType(usableAssets, typesToCheck) {
  var dataTypes = new Set();
  for (var assetName in usableAssets) {
    var _asset$rasterBands;
    var asset = usableAssets[assetName];
    if (!asset) {
      continue;
    }
    if (typesToCheck && !typesToCheck.includes(assetName)) {
      continue;
    }
    (_asset$rasterBands = asset['raster:bands']) === null || _asset$rasterBands === void 0 || _asset$rasterBands.forEach(function (band) {
      return band.data_type && dataTypes.add(band.data_type);
    });
  }

  // TODO: support multiple data types across assets
  if (dataTypes.size !== 1) {
    return null;
  }
  return Array.from(dataTypes)[0];
}

/**
 * Get min and max values of the band from the band's data type values range
 * @param stac - stac metadata object
 * @param dtype - data type of the raster band
 * @returns min and max values for the band
 */
function getPixelRange(stac, dtype, _ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
    minRasterStatsValue = _ref2[0],
    maxRasterStatsValue = _ref2[1];
  if (!dtype) {
    return null;
  }

  // TODO: might not always be desired to leave min pixel value at 0
  var minPixelValue = 0;
  var maxPixelValue = dtypeMaxValue[dtype];

  // TODO check if this early return is expected
  if (!maxPixelValue) {
    return null;
  }
  if (!Number.isFinite(maxPixelValue) && typeof minRasterStatsValue === 'number' && typeof maxRasterStatsValue === 'number') {
    return [minRasterStatsValue, maxRasterStatsValue];
  }
  return [minPixelValue, maxPixelValue];
}

/**
 * Find min and max values throughout a raster band image
 * @param imageData raster band image data
 * @returns min and max values throughout the band
 */
function getImageMinMax(imageData) {
  // We cannot calculate min/max for Image/ImageBitmap
  if (!(0, _core.isArray)(imageData)) {
    return [null, null];
  }
  var min = Infinity;
  var max = -Infinity;
  var _iterator = _createForOfIteratorHelper(imageData),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var value = _step.value;
      if (!isNaN(value)) {
        min = Math.min(min, value);
        max = Math.max(max, value);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return [min, max];
}

/**
 * Find asset names and band indexes for given commonNames
 * Right now in Kepler, our available methods of rendering raster data are quite simple. We only allow a user to choose among `presets`, and under the hood we select which data files to load.
 * @param usableAssets [stac description]
 * @param commonNames  an array of eo:common_name to search within bands
 * @return Band information or null if not all bands exist
 */
function getBandIdsForCommonNames(stac, usableAssets, commonNames) {
  // An array of strings describing asset identifiers, e.g. the "key" in the assets object
  var assetIds = [];
  // An array of integers giving the index of the band within that asset's data
  // In general, data sources either have a single band per asset or all assets in a single band
  var bandIndexes = [];
  var _iterator2 = _createForOfIteratorHelper(commonNames),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var commonName = _step2.value;
      // Find asset that includes a band with this common name
      var result = findAssetWithName(usableAssets, commonName, 'common_name');
      if (result) {
        var _result = (0, _slicedToArray2["default"])(result, 2),
          assetName = _result[0],
          bandIndex = _result[1];
        assetIds.push(assetName);
        bandIndexes.push(bandIndex);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (assetIds.length === 0) {
    return null;
  }
  var _consolidateBandIndex = consolidateBandIndexes(stac, assetIds, bandIndexes),
    loadAssetIds = _consolidateBandIndex.loadAssetIds,
    loadBandIndexes = _consolidateBandIndex.loadBandIndexes,
    renderBandIndexes = _consolidateBandIndex.renderBandIndexes;
  return {
    loadAssetIds: loadAssetIds,
    loadBandIndexes: loadBandIndexes,
    renderBandIndexes: renderBandIndexes
  };
}

/**
 * Consolidate asset/band info into load info and render info
 * @param stac STAC object
 * @param assetIds
 * @param bandIndexes
 * @return Asset information
 */
function consolidateBandIndexes(stac, assetIds, bandIndexes) {
  var loadAssetIds;
  var loadBandIndexes;
  var renderBandIndexes;

  // All bands we want to load are in a single asset
  if (assetIds.length === 1 || Array.from(new Set(assetIds)).length === 1) {
    var _asset$eoBands;
    loadAssetIds = [assetIds[0]];
    var asset = getAssets(stac)[loadAssetIds[0]];

    // Request all bands in order, then reorder with renderBandIndexes
    // NOTE: usually (e.g. with NAIP) if all bands are in a single asset, then there are only ~4
    // bands. This approach of requesting all bands may be less efficient with more than 4 bands
    // (because of larger download sizes). In the future may want separate loading paths if we
    // encounter single asset objects with > 4 bands.

    // TODO: eo:bands can be _either_ on each asset _or_ on the STAC's properties, which is not currently handled
    loadBandIndexes = (_asset$eoBands = asset['eo:bands']) === null || _asset$eoBands === void 0 ? void 0 : _asset$eoBands.map(function (_, idx) {
      return idx;
    });
    renderBandIndexes = bandIndexes;
  } else {
    loadAssetIds = assetIds;
    loadBandIndexes = bandIndexes;
    renderBandIndexes = null;
  }
  return {
    loadAssetIds: loadAssetIds,
    loadBandIndexes: loadBandIndexes,
    renderBandIndexes: renderBandIndexes
  };
}

/**
 * Find the Asset in the STAC object that containing an eo:band with the desired common_name or name
 * @param assets assets object. Keys should be asset name and values should be asset data
 * @param name  name or common_name in eo:bands
 * @param property 'name' or 'common_name'
 * @return name of asset containing desired band, index of band within asset
 */
function findAssetWithName(assets, name, property) {
  for (var _i = 0, _Object$entries = Object.entries(assets); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
      assetName = _Object$entries$_i[0],
      assetData = _Object$entries$_i[1];
    var eoBands = assetData['eo:bands'] || [];

    // Search bands array of this asset
    for (var i = 0; i < eoBands.length; i++) {
      var eoBand = eoBands[i];
      if (name === eoBand[property]) {
        return [assetName, i];
      }
    }
  }
  return null;
}
function getSingleBandInfo(usableAssets, singleBandInfo) {
  var _singleBandInfo;
  if (!((_singleBandInfo = singleBandInfo) !== null && _singleBandInfo !== void 0 && _singleBandInfo.assetId) && Object.keys(usableAssets).length === 1) {
    singleBandInfo = {
      assetId: Object.keys(usableAssets)[0]
    };
  }
  if (!singleBandInfo) {
    return null;
  }
  var _singleBandInfo2 = singleBandInfo,
    assetId = _singleBandInfo2.assetId,
    bandIndex = _singleBandInfo2.bandIndex;
  if (!Object.keys(usableAssets).includes(assetId)) {
    return null;
  }
  return {
    loadAssetIds: [assetId],
    loadBandIndexes: bandIndex ? [bandIndex] : [0],
    // No reordering of bands on the GPU
    renderBandIndexes: null
  };
}
function getRasterStatisticsMinMax(stac, presetId, singleBandInfo) {
  if (presetId !== 'singleBand') {
    return [undefined, undefined];
  }
  var minCategoricalBandValue;
  var maxCategoricalBandValue;
  var usableAssets = getUsableAssets(stac);
  var bandMetadata = usableAssets[(singleBandInfo === null || singleBandInfo === void 0 ? void 0 : singleBandInfo.assetId) || ''];
  if (!bandMetadata) {
    var assetId = Object.keys(usableAssets)[0];
    bandMetadata = usableAssets[assetId];
  }
  if (bandMetadata) {
    var _bandMetadata$raster, _bandMetadata$raster2;
    minCategoricalBandValue = (_bandMetadata$raster = bandMetadata['raster:bands']) === null || _bandMetadata$raster === void 0 || (_bandMetadata$raster = _bandMetadata$raster[0].statistics) === null || _bandMetadata$raster === void 0 ? void 0 : _bandMetadata$raster.minimum;
    maxCategoricalBandValue = (_bandMetadata$raster2 = bandMetadata['raster:bands']) === null || _bandMetadata$raster2 === void 0 || (_bandMetadata$raster2 = _bandMetadata$raster2[0].statistics) === null || _bandMetadata$raster2 === void 0 ? void 0 : _bandMetadata$raster2.maximum;
  }
  return [minCategoricalBandValue, maxCategoricalBandValue];
}
function getSingleBandPresetOptions(stac, singleBandName) {
  var usableAssets = getUsableAssets(stac);
  var assetData = findAssetWithName(usableAssets, singleBandName, 'name');
  if (!assetData) {
    // some collections have common_name instead of name
    assetData = findAssetWithName(usableAssets, singleBandName, 'common_name');
  }
  var singleBand;
  if (assetData) {
    var _assetData = assetData,
      _assetData2 = (0, _slicedToArray2["default"])(_assetData, 2),
      assetId = _assetData2[0],
      bandIndex = _assetData2[1];
    singleBand = {
      assetId: assetId,
      bandIndex: bandIndex
    };
  }
  return singleBand;
}

/**
 * Calculate viewport-related min and max raster values from loaded tiles
 * @param tiles - deck.gl tiles
 * @returns [minPixelValue, maxPixelValue]
 */
function getMinMaxFromTile2DHeaders(tiles) {
  var minValues = tiles.map(function (tile) {
    if (!tile || !tile.data) {
      return null;
    }
    var minPixelValue = tile.data.minPixelValue;
    return minPixelValue;
  }).filter(function (value) {
    return value;
  });
  var maxValues = tiles.map(function (tile) {
    if (!tile || !tile.data) {
      return null;
    }
    var maxPixelValue = tile.data.maxPixelValue;
    return maxPixelValue;
  }).filter(function (value) {
    return value;
  });
  // We can cast to number[] because we have filtered null values
  return [Math.min.apply(Math, (0, _toConsumableArray2["default"])(minValues)), Math.max.apply(Math, (0, _toConsumableArray2["default"])(maxValues))];
}

/**
 * Get loading params
 * @param stac STAC Object
 * @param preset Preset for display
 * @return Parameters for loading data
 */
function getDataSourceParams(stac, presetId, presetOptions) {
  var usableAssets = getUsableAssets(stac);
  var _PRESET_OPTIONS$prese = _config.PRESET_OPTIONS[presetId],
    commonNames = _PRESET_OPTIONS$prese.commonNames,
    bandCombination = _PRESET_OPTIONS$prese.bandCombination;
  var _getZoomRange = getZoomRange(stac),
    _getZoomRange2 = (0, _slicedToArray2["default"])(_getZoomRange, 2),
    minZoom = _getZoomRange2[0],
    maxZoom = _getZoomRange2[1];
  var bandInfo = null;
  if (bandCombination === 'single') {
    bandInfo = getSingleBandInfo(usableAssets, presetOptions === null || presetOptions === void 0 ? void 0 : presetOptions.singleBand);
  } else if (commonNames) {
    bandInfo = getBandIdsForCommonNames(stac, usableAssets, commonNames);
  } else {
    return null;
  }
  if (!bandInfo) return null;
  var dtype = getDataType(usableAssets, bandInfo.loadAssetIds);
  var _getRasterStatisticsM = getRasterStatisticsMinMax(stac, presetId, presetOptions === null || presetOptions === void 0 ? void 0 : presetOptions.singleBand),
    _getRasterStatisticsM2 = (0, _slicedToArray2["default"])(_getRasterStatisticsM, 2),
    minRasterStatsValue = _getRasterStatisticsM2[0],
    maxRasterStatsValue = _getRasterStatisticsM2[1];
  var pixelRange = getPixelRange(stac, dtype, [minRasterStatsValue, maxRasterStatsValue]);
  if (!pixelRange || !dtype) {
    return null;
  }
  var _pixelRange = (0, _slicedToArray2["default"])(pixelRange, 2),
    minPixelValue = _pixelRange[0],
    maxPixelValue = _pixelRange[1];
  var _bandInfo = bandInfo,
    loadAssetIds = _bandInfo.loadAssetIds,
    loadBandIndexes = _bandInfo.loadBandIndexes,
    renderBandIndexes = _bandInfo.renderBandIndexes;
  var globalBounds = getSTACBounds(stac);
  return {
    loadAssetIds: loadAssetIds,
    loadBandIndexes: loadBandIndexes,
    renderBandIndexes: renderBandIndexes,
    minZoom: minZoom,
    maxZoom: maxZoom,
    minPixelValue: minPixelValue,
    maxPixelValue: maxPixelValue,
    // use min and max statistics values for categorical re-scale
    minCategoricalBandValue: minRasterStatsValue,
    maxCategoricalBandValue: maxRasterStatsValue,
    globalBounds: globalBounds,
    dataType: dtype
  };
}

/**
 * Get Bounding Box of STAC object
 * @param stac
 * @return bounding box
 */
function getSTACBounds(stac) {
  // Check if Item
  if (stac.type === 'Feature') {
    // bbox may be missing
    return stac.bbox || null;
  }

  // Then must be collection
  return stac.extent.spatial.bbox[0];
}

/**
 * Get all eo:band objects from STAC object
 * @param stac  STAC object
 * @return array of eo:band objects or null
 */
function getEOBands(stac) {
  var assets = getAssets(stac);
  if (!assets) {
    return null;
  }
  var eoBands = [];
  for (var _i2 = 0, _Object$values = Object.values(assets); _i2 < _Object$values.length; _i2++) {
    var data = _Object$values[_i2];
    var assetBands = data['eo:bands'];
    if (Array.isArray(assetBands) && assetBands.length > 0) {
      eoBands.push.apply(eoBands, (0, _toConsumableArray2["default"])(assetBands));
    }
  }
  return eoBands;
}

/**
 * Filter presets by those that can be used with the given stac item
 * Each preset has a commonNames key, which is a list of eo `common_name` values. Some STAC items
 * may not have assets that span all of these combinations of `common_name`, so this filters the
 * input array.
 * @param stac           STAC object
 * @param presetData  object with requirements for each preset
 * @return An array of preset option ids that can be used with the given STAC item
 */
function filterAvailablePresets(stac, presetData) {
  if (!stac) {
    return null;
  }
  var eoBands = getEOBands(stac);
  if (!eoBands) {
    return null;
  }
  var availablePresetIds = [];
  for (var _i3 = 0, _Object$values2 = Object.values(presetData); _i3 < _Object$values2.length; _i3++) {
    var preset = _Object$values2[_i3];
    var commonNames = preset.commonNames,
      bandCombination = preset.bandCombination;

    // True if all required common names of preset exist in STAC object
    var allBandsExist = commonNames === null || commonNames === void 0 ? void 0 : commonNames.every(function (commonName) {
      return eoBands.some(function (eoBand) {
        return eoBand.common_name === commonName;
      });
    });
    if (allBandsExist || bandCombination === 'single') {
      availablePresetIds.push(preset.id);
    }
  }
  return availablePresetIds;
}

// TODO: would be better to have a generic here to relax the requirement that all input STACs have all extensions we list.
function getAssets(stac) {
  // stac is an Item
  if (stac.type === 'Feature') {
    return stac.assets;
  }

  // stac is a Collection
  // A STAC Collection optionally contains (if it includes the Item Assets Extension) an item_assets
  // key that describes the assets included in every Item in the Collection.
  return stac.item_assets;
}

/**
 * Find usable assets in main assets object
 * The `assets` object can point to many different objects, including original XML or JSON metadata,
 * thumbnails, etc. These aren't usable as image data in Studio.
 * @param stac  STAC object
 * @return asset mapping including only assets usable in Studio
 */
function getUsableAssets(stac) {
  var allAssets = getAssets(stac);
  var usableAssets = {};
  for (var assetName in allAssets) {
    var assetData = allAssets[assetName];

    // We don't require data assets to have the "data" role, but if the asset has a non-data role,
    // we exclude it
    if (Array.isArray(assetData.roles) && assetData.roles.some(function (role) {
      return ['thumbnail', 'overview', 'metadata', 'visual'].includes(role);
    }) && !assetData.roles.includes('data')) {
      continue;
    }

    // raster:bands array exists
    if (assetData['raster:bands']) {
      usableAssets[assetName] = assetData;
    }

    // TODO: Could also mark the asset as unusable if the asset has a non-GeoTIFF or COG Media Type
  }
  return usableAssets;
}

/**
 * Get the max number of requests the TileLayer should be able to send at once
 * With HTTP 1 under Chrome, you can make a max of 6 concurrent requests per domain, so this number
 * should be 6 * number of domains tiles are loaded from.
 * @param stac STAC object
 * @return Number of permissible concurrent requests
 */
function getMaxRequests(rasterTileServerUrls) {
  return (rasterTileServerUrls.length || 1) * 6;
}

/**
 * Determine if two axis-aligned boxes intersect
 * @param bbox1  axis-aligned box
 * @param bbox2  axis-aligned box
 * @return true if boxes intersect
 */
function bboxIntersects(bbox1, bbox2) {
  if (!Array.isArray(bbox1) || bbox1.length !== 4 || !Array.isArray(bbox2) || bbox2.length !== 4) {
    // Invalid input; can't make determination
    return true;
  }
  return !(bbox2[0] > bbox1[2] || bbox2[2] < bbox1[0] || bbox2[3] < bbox1[1] || bbox2[1] > bbox1[3]);
}

/**
 * Compute zRange of tiles in viewport.
 * Derived from https://github.com/visgl/deck.gl/blob/8d824a4b836fee3bfebe6fc962e0f03d8c1dbd0d/modules/geo-layers/src/terrain-layer/terrain-layer.js#L173-L196
 * @param tiles Array of tiles in current viewport
 */
function computeZRange(tiles) {
  // Abort if no tiles visible
  if (!tiles) {
    return null;
  }

  // Since getTileData returns an object with either {terrain, images} in 3d mode or {images} in
  // 2D mode, we can grab that object using tile.content.terrain, then grab the bounding box from
  // the header.
  var ranges = tiles.map(function (tile) {
    var _tile$content;
    return tile === null || tile === void 0 || (_tile$content = tile.content) === null || _tile$content === void 0 || (_tile$content = _tile$content.terrain) === null || _tile$content === void 0 || (_tile$content = _tile$content.header) === null || _tile$content === void 0 ? void 0 : _tile$content.boundingBox;
  }).flatMap(function (bounds) {
    return bounds ? [[bounds[0][2], bounds[1][2]]] : [];
  });
  if (ranges.length === 0) {
    return null;
  }
  var minZ = Math.min.apply(Math, (0, _toConsumableArray2["default"])(ranges.map(function (x) {
    return x[0];
  })));
  var maxZ = Math.max.apply(Math, (0, _toConsumableArray2["default"])(ranges.map(function (x) {
    return x[1];
  })));
  return [minZ, maxZ];
}

/**
 * Create RGBA bitmap array for categorical color scale from categorical color map
 * @param categoricalOptions - color map configuration and min-max values of categorical band
 * @returns typed array with bitmap data
 */
function generateCategoricalBitmapArray(categoricalOptions) {
  var colorMap = categoricalOptions.colorMap,
    _categoricalOptions$m = categoricalOptions.minValue,
    minValue = _categoricalOptions$m === void 0 ? 0 : _categoricalOptions$m,
    _categoricalOptions$m2 = categoricalOptions.maxValue,
    maxValue = _categoricalOptions$m2 === void 0 ? CATEGORICAL_TEXTURE_WIDTH - 1 : _categoricalOptions$m2;
  if (!colorMap) {
    return null;
  }
  var colorScaleMaxValue = maxValue - minValue;
  var step = CATEGORICAL_TEXTURE_WIDTH / (colorScaleMaxValue + 1);
  var data = new Uint8Array(CATEGORICAL_TEXTURE_WIDTH * 4);
  var _iterator3 = _createForOfIteratorHelper(colorMap),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _step3$value = (0, _slicedToArray2["default"])(_step3.value, 2),
        value = _step3$value[0],
        color = _step3$value[1];
      if (typeof value !== 'number') {
        continue;
      }
      var rgb = (0, _utils.hexToRgb)(color);
      var minPixel = Math.floor(value * step);
      var maxPixel = Math.floor((value + 1) * step - 1);
      for (var i = minPixel; i <= maxPixel; i++) {
        data.set([].concat((0, _toConsumableArray2["default"])(rgb), [CATEGORICAL_TEXTURE_WIDTH - 1]), i * 4);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return data;
}
function timeRangeToStacTemporalInterval(stac, startDate, endDate) {
  var _stac$extent;
  // TODO support multiple temporal intervals
  var interval = (_stac$extent = stac.extent) === null || _stac$extent === void 0 || (_stac$extent = _stac$extent.temporal) === null || _stac$extent === void 0 || (_stac$extent = _stac$extent.interval) === null || _stac$extent === void 0 ? void 0 : _stac$extent[0];
  if (!interval || !interval[0]) return {
    startDate: startDate,
    endDate: endDate
  };
  var collectionStart = interval[0] ? new Date(interval[0]) : new Date();
  var collectionEnd = interval[1] ? new Date(interval[1]) : new Date();
  var layerStart = new Date(startDate);
  var layerEnd = new Date(endDate);
  var clippedStart = layerStart < collectionStart || layerStart > collectionEnd ? collectionStart : layerStart;
  var clippedEnd = layerEnd > collectionEnd ? collectionEnd : layerEnd;
  if (clippedStart > clippedEnd) {
    clippedEnd = new Date(clippedStart);
    clippedEnd.setDate(clippedEnd.getDate() + 1);
  }
  return {
    startDate: clippedStart.toISOString().split('T')[0],
    endDate: clippedEnd.toISOString().split('T')[0]
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,