"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RasterTileLayerPresets = exports.RasterTileLayerColorMaps = void 0;
var _keymirror = _interopRequireDefault(require("keymirror"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var RasterTileLayerColorMaps = exports.RasterTileLayerColorMaps = (0, _keymirror["default"])({
  cfastie: null,
  rplumbo: null,
  schwarzwald: null,
  viridis: null,
  plasma: null,
  inferno: null,
  magma: null,
  cividis: null,
  greys: null,
  purples: null,
  blues: null,
  greens: null,
  oranges: null,
  reds: null,
  ylorbr: null,
  ylorrd: null,
  orrd: null,
  purd: null,
  rdpu: null,
  bupu: null,
  gnbu: null,
  pubu: null,
  ylgnbu: null,
  pubugn: null,
  bugn: null,
  ylgn: null,
  binary: null,
  gray: null,
  bone: null,
  pink: null,
  spring: null,
  summer: null,
  autumn: null,
  winter: null,
  cool: null,
  wistia: null,
  hot: null,
  afmhot: null,
  gist_heat: null,
  copper: null,
  piyg: null,
  prgn: null,
  brbg: null,
  puor: null,
  rdgy: null,
  rdbu: null,
  rdylbu: null,
  rdylgn: null,
  spectral: null,
  coolwarm: null,
  bwr: null,
  seismic: null,
  twilight: null,
  twilight_shifted: null,
  hsv: null,
  flag: null,
  prism: null,
  ocean: null,
  gist_earth: null,
  terrain: null,
  gist_stern: null,
  gnuplot: null,
  gnuplot2: null,
  cmrmap: null,
  cubehelix: null,
  brg: null,
  gist_rainbow: null,
  rainbow: null,
  jet: null,
  nipy_spectral: null,
  gist_ncar: null
});
var RasterTileLayerPresets = exports.RasterTileLayerPresets = (0, _keymirror["default"])({
  trueColor: null,
  infrared: null,
  agriculture: null,
  forestBurn: null,
  ndvi: null,
  savi: null,
  msavi: null,
  ndmi: null,
  nbr: null,
  nbr2: null,
  singleBand: null
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfa2V5bWlycm9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJSYXN0ZXJUaWxlTGF5ZXJDb2xvck1hcHMiLCJleHBvcnRzIiwia2V5TWlycm9yIiwiY2Zhc3RpZSIsInJwbHVtYm8iLCJzY2h3YXJ6d2FsZCIsInZpcmlkaXMiLCJwbGFzbWEiLCJpbmZlcm5vIiwibWFnbWEiLCJjaXZpZGlzIiwiZ3JleXMiLCJwdXJwbGVzIiwiYmx1ZXMiLCJncmVlbnMiLCJvcmFuZ2VzIiwicmVkcyIsInlsb3JiciIsInlsb3JyZCIsIm9ycmQiLCJwdXJkIiwicmRwdSIsImJ1cHUiLCJnbmJ1IiwicHVidSIsInlsZ25idSIsInB1YnVnbiIsImJ1Z24iLCJ5bGduIiwiYmluYXJ5IiwiZ3JheSIsImJvbmUiLCJwaW5rIiwic3ByaW5nIiwic3VtbWVyIiwiYXV0dW1uIiwid2ludGVyIiwiY29vbCIsIndpc3RpYSIsImhvdCIsImFmbWhvdCIsImdpc3RfaGVhdCIsImNvcHBlciIsInBpeWciLCJwcmduIiwiYnJiZyIsInB1b3IiLCJyZGd5IiwicmRidSIsInJkeWxidSIsInJkeWxnbiIsInNwZWN0cmFsIiwiY29vbHdhcm0iLCJid3IiLCJzZWlzbWljIiwidHdpbGlnaHQiLCJ0d2lsaWdodF9zaGlmdGVkIiwiaHN2IiwiZmxhZyIsInByaXNtIiwib2NlYW4iLCJnaXN0X2VhcnRoIiwidGVycmFpbiIsImdpc3Rfc3Rlcm4iLCJnbnVwbG90IiwiZ251cGxvdDIiLCJjbXJtYXAiLCJjdWJlaGVsaXgiLCJicmciLCJnaXN0X3JhaW5ib3ciLCJyYWluYm93IiwiamV0IiwibmlweV9zcGVjdHJhbCIsImdpc3RfbmNhciIsIlJhc3RlclRpbGVMYXllclByZXNldHMiLCJ0cnVlQ29sb3IiLCJpbmZyYXJlZCIsImFncmljdWx0dXJlIiwiZm9yZXN0QnVybiIsIm5kdmkiLCJzYXZpIiwibXNhdmkiLCJuZG1pIiwibmJyIiwibmJyMiIsInNpbmdsZUJhbmQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvcmFzdGVyLXRpbGUvcmFzdGVyLXRpbGUtbGF5ZXItc2NoZW1hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBrZXlNaXJyb3IgZnJvbSAna2V5bWlycm9yJztcblxuZXhwb3J0IGNvbnN0IFJhc3RlclRpbGVMYXllckNvbG9yTWFwcyA9IGtleU1pcnJvcih7XG4gIGNmYXN0aWU6IG51bGwsXG4gIHJwbHVtYm86IG51bGwsXG4gIHNjaHdhcnp3YWxkOiBudWxsLFxuICB2aXJpZGlzOiBudWxsLFxuICBwbGFzbWE6IG51bGwsXG4gIGluZmVybm86IG51bGwsXG4gIG1hZ21hOiBudWxsLFxuICBjaXZpZGlzOiBudWxsLFxuICBncmV5czogbnVsbCxcbiAgcHVycGxlczogbnVsbCxcbiAgYmx1ZXM6IG51bGwsXG4gIGdyZWVuczogbnVsbCxcbiAgb3JhbmdlczogbnVsbCxcbiAgcmVkczogbnVsbCxcbiAgeWxvcmJyOiBudWxsLFxuICB5bG9ycmQ6IG51bGwsXG4gIG9ycmQ6IG51bGwsXG4gIHB1cmQ6IG51bGwsXG4gIHJkcHU6IG51bGwsXG4gIGJ1cHU6IG51bGwsXG4gIGduYnU6IG51bGwsXG4gIHB1YnU6IG51bGwsXG4gIHlsZ25idTogbnVsbCxcbiAgcHVidWduOiBudWxsLFxuICBidWduOiBudWxsLFxuICB5bGduOiBudWxsLFxuICBiaW5hcnk6IG51bGwsXG4gIGdyYXk6IG51bGwsXG4gIGJvbmU6IG51bGwsXG4gIHBpbms6IG51bGwsXG4gIHNwcmluZzogbnVsbCxcbiAgc3VtbWVyOiBudWxsLFxuICBhdXR1bW46IG51bGwsXG4gIHdpbnRlcjogbnVsbCxcbiAgY29vbDogbnVsbCxcbiAgd2lzdGlhOiBudWxsLFxuICBob3Q6IG51bGwsXG4gIGFmbWhvdDogbnVsbCxcbiAgZ2lzdF9oZWF0OiBudWxsLFxuICBjb3BwZXI6IG51bGwsXG4gIHBpeWc6IG51bGwsXG4gIHByZ246IG51bGwsXG4gIGJyYmc6IG51bGwsXG4gIHB1b3I6IG51bGwsXG4gIHJkZ3k6IG51bGwsXG4gIHJkYnU6IG51bGwsXG4gIHJkeWxidTogbnVsbCxcbiAgcmR5bGduOiBudWxsLFxuICBzcGVjdHJhbDogbnVsbCxcbiAgY29vbHdhcm06IG51bGwsXG4gIGJ3cjogbnVsbCxcbiAgc2Vpc21pYzogbnVsbCxcbiAgdHdpbGlnaHQ6IG51bGwsXG4gIHR3aWxpZ2h0X3NoaWZ0ZWQ6IG51bGwsXG4gIGhzdjogbnVsbCxcbiAgZmxhZzogbnVsbCxcbiAgcHJpc206IG51bGwsXG4gIG9jZWFuOiBudWxsLFxuICBnaXN0X2VhcnRoOiBudWxsLFxuICB0ZXJyYWluOiBudWxsLFxuICBnaXN0X3N0ZXJuOiBudWxsLFxuICBnbnVwbG90OiBudWxsLFxuICBnbnVwbG90MjogbnVsbCxcbiAgY21ybWFwOiBudWxsLFxuICBjdWJlaGVsaXg6IG51bGwsXG4gIGJyZzogbnVsbCxcbiAgZ2lzdF9yYWluYm93OiBudWxsLFxuICByYWluYm93OiBudWxsLFxuICBqZXQ6IG51bGwsXG4gIG5pcHlfc3BlY3RyYWw6IG51bGwsXG4gIGdpc3RfbmNhcjogbnVsbFxufSk7XG5cbmV4cG9ydCBjb25zdCBSYXN0ZXJUaWxlTGF5ZXJQcmVzZXRzID0ga2V5TWlycm9yKHtcbiAgdHJ1ZUNvbG9yOiBudWxsLFxuICBpbmZyYXJlZDogbnVsbCxcbiAgYWdyaWN1bHR1cmU6IG51bGwsXG4gIGZvcmVzdEJ1cm46IG51bGwsXG4gIG5kdmk6IG51bGwsXG4gIHNhdmk6IG51bGwsXG4gIG1zYXZpOiBudWxsLFxuICBuZG1pOiBudWxsLFxuICBuYnI6IG51bGwsXG4gIG5icjI6IG51bGwsXG4gIHNpbmdsZUJhbmQ6IG51bGxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsSUFBQUEsVUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBSEE7QUFDQTs7QUFJTyxJQUFNQyx3QkFBd0IsR0FBQUMsT0FBQSxDQUFBRCx3QkFBQSxHQUFHLElBQUFFLHFCQUFTLEVBQUM7RUFDaERDLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxHQUFHLEVBQUUsSUFBSTtFQUNUQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxTQUFTLEVBQUUsSUFBSTtFQUNmQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxNQUFNLEVBQUUsSUFBSTtFQUNaQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxHQUFHLEVBQUUsSUFBSTtFQUNUQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxRQUFRLEVBQUUsSUFBSTtFQUNkQyxnQkFBZ0IsRUFBRSxJQUFJO0VBQ3RCQyxHQUFHLEVBQUUsSUFBSTtFQUNUQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsT0FBTyxFQUFFLElBQUk7RUFDYkMsVUFBVSxFQUFFLElBQUk7RUFDaEJDLE9BQU8sRUFBRSxJQUFJO0VBQ2JDLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLE1BQU0sRUFBRSxJQUFJO0VBQ1pDLFNBQVMsRUFBRSxJQUFJO0VBQ2ZDLEdBQUcsRUFBRSxJQUFJO0VBQ1RDLFlBQVksRUFBRSxJQUFJO0VBQ2xCQyxPQUFPLEVBQUUsSUFBSTtFQUNiQyxHQUFHLEVBQUUsSUFBSTtFQUNUQyxhQUFhLEVBQUUsSUFBSTtFQUNuQkMsU0FBUyxFQUFFO0FBQ2IsQ0FBQyxDQUFDO0FBRUssSUFBTUMsc0JBQXNCLEdBQUF6RSxPQUFBLENBQUF5RSxzQkFBQSxHQUFHLElBQUF4RSxxQkFBUyxFQUFDO0VBQzlDeUUsU0FBUyxFQUFFLElBQUk7RUFDZkMsUUFBUSxFQUFFLElBQUk7RUFDZEMsV0FBVyxFQUFFLElBQUk7RUFDakJDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxHQUFHLEVBQUUsSUFBSTtFQUNUQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxVQUFVLEVBQUU7QUFDZCxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=