import { GetTileDataProps, ImageData, TerrainData, AssetRequestData, CategoricalColormapOptions } from './types';
/**
 * Create dataUrl image from bitmap array
 * @param bitmap - RGBA byte bitmap array
 * @param width - width of the image
 * @param height - height of the image
 * @returns base64 data url of the image
 */
export declare function getImageDataURL(bitmap: Uint8Array, width: number, height: number): string | null;
/**
 * Load images required for raster tile
 * @param assetRequests - STAC asset requests
 * @param colormapId - colormap id
 * @param categoricalOptions - categorical options requred for making of categorical colormap
 * @returns images map
 */
export declare function loadImages(assetRequests: AssetRequestData[], colormapId: string, categoricalOptions: CategoricalColormapOptions): Promise<ImageData>;
/**
 * Get the request data for loading a single or multi asset STAC metadata object.
 * @param options STAC metadata object and user-defined parameters.
 * @returns Image data, or null if the STAC metadata object is not supported.
 */
export declare function getSTACImageRequests(options: GetTileDataProps): Promise<AssetRequestData[] | null>;
/**
 * Load images defined by a STAC metadata object plus user-defined parameters
 */
export declare function loadSTACImageData(requests: AssetRequestData[]): Promise<ImageData>;
/**
 * Utility function that forms an asset request based on given parameters.
 */
export declare function getAssetRequest({ url, rasterServerUrl, params, options, useMask, responseRequiredBandIndices }: {
    url: string;
    rasterServerUrl: string;
    params?: URLSearchParams | null;
    options: RequestInit;
    useMask?: boolean;
    responseRequiredBandIndices?: number[] | null;
}): Promise<AssetRequestData>;
/**
 * Create base64 image data url for categorical colormap
 * @param categoricalOptions - color map configuration and min-max values of categorical band
 * @returns base64 image data url
 */
export declare function getCategoricalColormapDataUrl(categoricalOptions: CategoricalColormapOptions): string | null;
/**
 * Load terrain mesh from raster tile server
 * @param props - properties to load terrain data
 * @returns terrain mesh data
 */
export declare function loadTerrain(props: {
    index: {
        x: number;
        y: number;
        z: number;
    };
    signal: AbortSignal;
    rasterTileServerUrls: string[];
    boundsForGeometry?: [number, number, number, number];
}): Promise<TerrainData | null>;
