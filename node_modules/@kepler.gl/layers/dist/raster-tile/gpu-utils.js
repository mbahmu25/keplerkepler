"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.COLORMAP_TEXTURE_PARAMETERS = void 0;
exports.generateCategoricalColormapTexture = generateCategoricalColormapTexture;
exports.getCombineBandsModule = getCombineBandsModule;
exports.getImageMaskModule = getImageMaskModule;
exports.getModules = getModules;
exports.loadImage = loadImage;
exports.loadNpyArray = loadNpyArray;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _core = require("@loaders.gl/core");
var _images = require("@loaders.gl/images");
var _textures = require("@loaders.gl/textures");
var _constants = _interopRequireDefault(require("@luma.gl/constants"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants2 = require("@kepler.gl/constants");
var _deckglLayers = require("@kepler.gl/deckgl-layers");
var _utils = require("@kepler.gl/utils");
var _rasterTileUtils = require("./raster-tile-utils");
var _requestThrottle = require("./request-throttle");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Functions and constants for handling webgl/luma.gl/deck.gl entities
 */
var combineBandsFloat = _deckglLayers.RasterWebGL.combineBandsFloat,
  combineBandsInt = _deckglLayers.RasterWebGL.combineBandsInt,
  combineBandsUint = _deckglLayers.RasterWebGL.combineBandsUint,
  maskFloat = _deckglLayers.RasterWebGL.maskFloat,
  maskInt = _deckglLayers.RasterWebGL.maskInt,
  maskUint = _deckglLayers.RasterWebGL.maskUint,
  linearRescale = _deckglLayers.RasterWebGL.linearRescale,
  gammaContrast = _deckglLayers.RasterWebGL.gammaContrast,
  sigmoidalContrast = _deckglLayers.RasterWebGL.sigmoidalContrast,
  normalizedDifference = _deckglLayers.RasterWebGL.normalizedDifference,
  enhancedVegetationIndex = _deckglLayers.RasterWebGL.enhancedVegetationIndex,
  soilAdjustedVegetationIndex = _deckglLayers.RasterWebGL.soilAdjustedVegetationIndex,
  modifiedSoilAdjustedVegetationIndex = _deckglLayers.RasterWebGL.modifiedSoilAdjustedVegetationIndex,
  colormapModule = _deckglLayers.RasterWebGL.colormap,
  filter = _deckglLayers.RasterWebGL.filter,
  saturation = _deckglLayers.RasterWebGL.saturation,
  reorderBands = _deckglLayers.RasterWebGL.reorderBands,
  rgbaImage = _deckglLayers.RasterWebGL.rgbaImage;
/**
 * Describe WebGL2 Texture parameters to use for given input data type
 */

/**
 * Convert TypedArray to WebGL2 Texture Parameters
 */
function getWebGL2TextureParameters(data) {
  if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
    return {
      // Note: texture data has no auto-rescaling; pixel values stay as 0-255
      format: _constants["default"].R8UI,
      dataFormat: _constants["default"].RED_INTEGER,
      type: _constants["default"].UNSIGNED_BYTE
    };
  }
  if (data instanceof Uint16Array) {
    return {
      format: _constants["default"].R16UI,
      dataFormat: _constants["default"].RED_INTEGER,
      type: _constants["default"].UNSIGNED_SHORT
    };
  }
  if (data instanceof Uint32Array) {
    return {
      format: _constants["default"].R32UI,
      dataFormat: _constants["default"].RED_INTEGER,
      type: _constants["default"].UNSIGNED_INT
    };
  }
  if (data instanceof Int8Array) {
    return {
      format: _constants["default"].R8I,
      dataFormat: _constants["default"].RED_INTEGER,
      type: _constants["default"].BYTE
    };
  }
  if (data instanceof Int16Array) {
    return {
      format: _constants["default"].R16I,
      dataFormat: _constants["default"].RED_INTEGER,
      type: _constants["default"].SHORT
    };
  }
  if (data instanceof Int32Array) {
    return {
      format: _constants["default"].R32I,
      dataFormat: _constants["default"].RED_INTEGER,
      type: _constants["default"].INT
    };
  }
  if (data instanceof Float32Array) {
    return {
      format: _constants["default"].R32F,
      dataFormat: _constants["default"].RED,
      type: _constants["default"].FLOAT
    };
  }
  if (data instanceof Float64Array) {
    return {
      format: _constants["default"].R32F,
      dataFormat: _constants["default"].RED,
      type: _constants["default"].FLOAT
    };
  }

  // For exhaustive check above; following should never occur
  // https://stackoverflow.com/a/58009992
  var unexpectedInput = data;
  throw new Error(unexpectedInput);
}

/**
 * Discrete-valued colormaps (e.g. from the output of
 * classification algorithms) in the raster layer. Previously, the values passed to
 * `TEXTURE_MIN_FILTER` and `TEXTURE_MAG_FILTER` were `GL.LINEAR`, which meant that the GPU would
 * linearly interpolate values between two neighboring colormap pixel values. Setting these values
 * to NEAREST means that the GPU will choose the nearest value on the texture2D lookup operation,
 * which fixes precision issues for discrete-valued colormaps. This should be ok for continuous
 * colormaps as long as the color difference between each pixel on the colormap is small.
 */
var COLORMAP_TEXTURE_PARAMETERS = exports.COLORMAP_TEXTURE_PARAMETERS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants["default"].TEXTURE_MIN_FILTER, _constants["default"].NEAREST), _constants["default"].TEXTURE_MAG_FILTER, _constants["default"].NEAREST), _constants["default"].TEXTURE_WRAP_S, _constants["default"].CLAMP_TO_EDGE), _constants["default"].TEXTURE_WRAP_T, _constants["default"].CLAMP_TO_EDGE);
var DEFAULT_8BIT_TEXTURE_PARAMETERS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants["default"].TEXTURE_MIN_FILTER, _constants["default"].LINEAR_MIPMAP_LINEAR), _constants["default"].TEXTURE_MAG_FILTER, _constants["default"].LINEAR), _constants["default"].TEXTURE_WRAP_S, _constants["default"].CLAMP_TO_EDGE), _constants["default"].TEXTURE_WRAP_T, _constants["default"].CLAMP_TO_EDGE);
var DEFAULT_HIGH_BIT_TEXTURE_PARAMETERS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants["default"].TEXTURE_MIN_FILTER, _constants["default"].NEAREST), _constants["default"].TEXTURE_MAG_FILTER, _constants["default"].NEAREST), _constants["default"].TEXTURE_WRAP_S, _constants["default"].CLAMP_TO_EDGE), _constants["default"].TEXTURE_WRAP_T, _constants["default"].CLAMP_TO_EDGE);

/**
 * Select correct module type for "combineBands"
 *
 * combineBands joins up to four 2D arrays (contained in imageBands) into a single "rgba" image
 * texture on the GPU. That shader code needs to have the same data type as the actual image data.
 * E.g. for float data the texture needs to be `sampler2D`, for uint data the texture needs to be
 * `usampler2D` and for int data the texture needs to be `isampler2D`.
 */
function getCombineBandsModule(imageBands) {
  // Each image array is expected/required to be of the same data type
  switch (imageBands[0].format) {
    case _constants["default"].R8UI:
      return combineBandsUint;
    case _constants["default"].R16UI:
      return combineBandsUint;
    case _constants["default"].R32UI:
      return combineBandsUint;
    case _constants["default"].R8I:
      return combineBandsInt;
    case _constants["default"].R16I:
      return combineBandsInt;
    case _constants["default"].R32I:
      return combineBandsInt;
    case _constants["default"].R32F:
      return combineBandsFloat;
    default:
      throw new Error('bad format');
  }
}

/** Select correct image masking shader module for mask data type
 * The imageMask could (at least in the future, theoretically) be of a different data format than
 * the imageBands data itself.
 */
function getImageMaskModule(imageMask) {
  switch (imageMask.format) {
    case _constants["default"].R8UI:
      return maskUint;
    case _constants["default"].R16UI:
      return maskUint;
    case _constants["default"].R32UI:
      return maskUint;
    case _constants["default"].R8I:
      return maskInt;
    case _constants["default"].R16I:
      return maskInt;
    case _constants["default"].R32I:
      return maskInt;
    case _constants["default"].R32F:
      return maskFloat;
    default:
      throw new Error('bad format');
  }
}

/**
 * Load image and wrap with default WebGL texture parameters
 *
 * @param url URL to load image
 * @param textureParams parameters to pass to Texture2D
 *
 * @return image object to pass to Texture2D constructor
 */
function loadImage(_x) {
  return _loadImage.apply(this, arguments);
}
function _loadImage() {
  _loadImage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(url) {
    var textureParams,
      requestOptions,
      response,
      image,
      _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          textureParams = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          requestOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
          _context.next = 4;
          return (0, _core.fetchFile)(url, requestOptions);
        case 4:
          response = _context.sent;
          _context.next = 7;
          return (0, _core.parse)(response, _images.ImageLoader);
        case 7:
          image = _context.sent;
          return _context.abrupt("return", _objectSpread({
            data: image,
            parameters: DEFAULT_8BIT_TEXTURE_PARAMETERS,
            format: _constants["default"].RGB
          }, textureParams));
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _loadImage.apply(this, arguments);
}
/**
 * Load NPY Array
 *
 * The NPY format is described here: https://numpy.org/doc/stable/reference/generated/numpy.lib.format.html.
 * It's designed to be a very simple file format to hold an N-dimensional block of data. The header describes the data type, shape, and order (either C or Fortran) of the array.
 *
 * @param url URL to load NPY Array
 * @param split Whether to split single typed array representing an N-dimensional array into an Array with each dimension as its own typed array
 *
 * @return image object to pass to Texture2D constructor
 */
function loadNpyArray(_x2, _x3, _x4) {
  return _loadNpyArray.apply(this, arguments);
}
/**
 * Create texture data for categorical colormap scale
 * @param categoricalOptions - color map configuration and min-max values of categorical band
 * @returns texture data
 */
function _loadNpyArray() {
  _loadNpyArray = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(request, split, options) {
    var numAttempts, asset;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          numAttempts = 1 + (0, _utils.getApplicationConfig)().rasterServerMaxRetries;
          _context3.next = 3;
          return (0, _requestThrottle.getRequestThrottle)().throttleRequest(request.rasterServerUrl, /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
            var attempt, _request$options$sign, _getLoaderOptions, npyOptions, response, data, header, shape, _getWebGL2TexturePara, format, dataFormat, type, _shape, z, height, width, mipmaps, parameters, channels, channelSize, i, _getApplicationConfig, _error$response;
            return _regenerator["default"].wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  attempt = 0;
                case 1:
                  if (!(attempt < numAttempts)) {
                    _context2.next = 33;
                    break;
                  }
                  _context2.prev = 2;
                  _getLoaderOptions = (0, _constants2.getLoaderOptions)(), npyOptions = _getLoaderOptions.npy;
                  _context2.next = 6;
                  return (0, _core.load)(request.url, _textures.NPYLoader, {
                    npy: npyOptions,
                    fetch: options === null || options === void 0 ? void 0 : options.fetch
                  });
                case 6:
                  response = _context2.sent;
                  if (!(!response || !response.data || (_request$options$sign = request.options.signal) !== null && _request$options$sign !== void 0 && _request$options$sign.aborted)) {
                    _context2.next = 9;
                    break;
                  }
                  return _context2.abrupt("return", null);
                case 9:
                  // Float64 data needs to be coerced to Float32 for the GPU
                  if (response.data instanceof Float64Array) {
                    response.data = Float32Array.from(response.data);
                  }
                  data = response.data, header = response.header;
                  shape = header.shape;
                  _getWebGL2TexturePara = getWebGL2TextureParameters(data), format = _getWebGL2TexturePara.format, dataFormat = _getWebGL2TexturePara.dataFormat, type = _getWebGL2TexturePara.type; // TODO: check height-width or width-height
                  // Regardless, images usually square
                  // TODO: handle cases of 256x256x1 instead of 1x256x256
                  _shape = (0, _slicedToArray2["default"])(shape, 3), z = _shape[0], height = _shape[1], width = _shape[2]; // Since we now use WebGL2 data types for 8-bit textures, we set the following for all textures
                  mipmaps = false;
                  parameters = DEFAULT_HIGH_BIT_TEXTURE_PARAMETERS;
                  if (split) {
                    _context2.next = 18;
                    break;
                  }
                  return _context2.abrupt("return", {
                    data: data,
                    width: width,
                    height: height,
                    format: format,
                    dataFormat: dataFormat,
                    type: type,
                    parameters: parameters,
                    mipmaps: mipmaps
                  });
                case 18:
                  // Split into individual arrays
                  channels = [];
                  channelSize = height * width;
                  for (i = 0; i < z; i++) {
                    channels.push({
                      data: data.subarray(i * channelSize, (i + 1) * channelSize),
                      width: width,
                      height: height,
                      format: format,
                      dataFormat: dataFormat,
                      type: type,
                      parameters: parameters,
                      mipmaps: mipmaps
                    });
                  }
                  return _context2.abrupt("return", channels);
                case 24:
                  _context2.prev = 24;
                  _context2.t0 = _context2["catch"](2);
                  if (!(attempt < numAttempts && _context2.t0 instanceof _core.FetchError && (_getApplicationConfig = (0, _utils.getApplicationConfig)().rasterServerServerErrorsToRetry) !== null && _getApplicationConfig !== void 0 && _getApplicationConfig.includes((_error$response = _context2.t0.response) === null || _error$response === void 0 ? void 0 : _error$response.status))) {
                    _context2.next = 30;
                    break;
                  }
                  _context2.next = 29;
                  return (0, _commonUtils.sleep)((0, _utils.getApplicationConfig)().rasterServerRetryDelay);
                case 29:
                  return _context2.abrupt("continue", 30);
                case 30:
                  attempt++;
                  _context2.next = 1;
                  break;
                case 33:
                  return _context2.abrupt("return", null);
                case 34:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, null, [[2, 24]]);
          })));
        case 3:
          asset = _context3.sent;
          return _context3.abrupt("return", asset);
        case 5:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _loadNpyArray.apply(this, arguments);
}
function generateCategoricalColormapTexture(categoricalOptions) {
  var data = (0, _rasterTileUtils.generateCategoricalBitmapArray)(categoricalOptions);
  return {
    data: data,
    width: _rasterTileUtils.CATEGORICAL_TEXTURE_WIDTH,
    height: 1,
    format: _constants["default"].RGBA,
    dataFormat: _constants["default"].RGBA,
    type: _constants["default"].UNSIGNED_BYTE,
    parameters: COLORMAP_TEXTURE_PARAMETERS,
    mipmaps: false
  };
}

// TODO: would probably be simpler to only pass in the props actually used by this function. That
// would mean a smaller object than RenderSubLayersProps
// eslint-disable-next-line max-statements, complexity
function getModules(_ref) {
  var images = _ref.images,
    props = _ref.props;
  var moduleProps = {};
  // Array of luma.gl WebGL modules to pass to the RasterLayer
  var modules = [];

  // use rgba image directly. Used for raster .pmtiles rendering
  if (images.imageRgba) {
    modules.push(rgbaImage);

    // no support for other modules atm for direct rgba mode
    return {
      modules: modules,
      moduleProps: moduleProps
    };
  }
  if (!props) {
    return {
      modules: modules,
      moduleProps: moduleProps
    };
  }
  var renderBandIndexes = props.renderBandIndexes,
    nonLinearRescaling = props.nonLinearRescaling,
    linearRescalingFactor = props.linearRescalingFactor,
    minPixelValue = props.minPixelValue,
    maxPixelValue = props.maxPixelValue,
    gammaContrastFactor = props.gammaContrastFactor,
    sigmoidalContrastFactor = props.sigmoidalContrastFactor,
    sigmoidalBiasFactor = props.sigmoidalBiasFactor,
    saturationValue = props.saturationValue,
    bandCombination = props.bandCombination,
    filterEnabled = props.filterEnabled,
    filterRange = props.filterRange,
    dataType = props.dataType,
    minCategoricalBandValue = props.minCategoricalBandValue,
    maxCategoricalBandValue = props.maxCategoricalBandValue,
    hasCategoricalColorMap = props.hasCategoricalColorMap;
  if (Array.isArray(images.imageBands) && images.imageBands.length > 0) {
    modules.push(getCombineBandsModule(images.imageBands));
  }
  if (images.imageMask) {
    modules.push(getImageMaskModule(images.imageMask));
    // In general, data masks are 0 for nodata and the maximum value for valid data, e.g. 255 or
    // 65535 for uint8 or uint16 data, respectively
    moduleProps.maskKeepMin = 1;
  }
  if (Array.isArray(renderBandIndexes)) {
    modules.push(reorderBands);
    moduleProps.ordering = renderBandIndexes;
  }
  var globalRange = maxPixelValue - minPixelValue;
  // Fix rescaling if we are sure that dataset is categorical
  if (hasCategoricalColorMap) {
    modules.push(linearRescale);
    moduleProps.linearRescaleScaler = 1 / maxPixelValue;
    moduleProps.linearRescaleOffset = 0;
  } else if ((0, _rasterTileUtils.isRescalingAllowed)(bandCombination)) {
    if (!nonLinearRescaling) {
      var _linearRescalingFacto = (0, _slicedToArray2["default"])(linearRescalingFactor, 2),
        min = _linearRescalingFacto[0],
        max = _linearRescalingFacto[1];
      var localRange = max - min;

      // Add linear rescaling module
      modules.push(linearRescale);

      // Divide by local range * global range
      moduleProps.linearRescaleScaler = 1 / (localRange * globalRange);

      // Subtract off the local min
      moduleProps.linearRescaleOffset = -min;

      // Clamp to [0, 1] done automatically?
    } else {
      modules.push(linearRescale);
      moduleProps.linearRescaleScaler = 1 / maxPixelValue;
      moduleProps.linearRescaleOffset = 0;
      modules.push(gammaContrast);
      moduleProps.gammaContrastValue = gammaContrastFactor;
      modules.push(sigmoidalContrast);
      moduleProps.sigmoidalContrast = sigmoidalContrastFactor;
      moduleProps.sigmoidalBias = sigmoidalBiasFactor;
    }
    if (Number.isFinite(saturationValue) && saturationValue !== 1) {
      modules.push(saturation);
      moduleProps.saturationValue = saturationValue;
    }
  }
  switch (bandCombination) {
    case 'normalizedDifference':
      modules.push(normalizedDifference);
      break;
    case 'enhancedVegetationIndex':
      modules.push(enhancedVegetationIndex);
      break;
    case 'soilAdjustedVegetationIndex':
      modules.push(soilAdjustedVegetationIndex);
      break;
    case 'modifiedSoilAdjustedVegetationIndex':
      modules.push(modifiedSoilAdjustedVegetationIndex);
      break;
    default:
      break;
  }
  if ((0, _rasterTileUtils.isFilterAllowed)(bandCombination) && filterEnabled) {
    modules.push(filter);
    moduleProps.filterMin1 = filterRange[0];
    moduleProps.filterMax1 = filterRange[1];
  }

  // Apply colormap
  if ((0, _rasterTileUtils.isColormapAllowed)(bandCombination) && images.imageColormap) {
    modules.push(colormapModule);
    moduleProps.minCategoricalBandValue = minCategoricalBandValue;
    moduleProps.maxCategoricalBandValue = maxCategoricalBandValue;
    moduleProps.dataTypeMaxValue = _rasterTileUtils.dtypeMaxValue[dataType];
    moduleProps.maxPixelValue = maxPixelValue;
  }
  return {
    modules: modules,
    moduleProps: moduleProps
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,