"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rasterVisConfigs = exports.ZOOM_RANGES = exports.RASTER_COLOR_RESET_PARAMS = exports.PRESET_OPTIONS = exports.MAX_PIXEL_VALUES = exports.DEFAULT_BAND_MAPPINGS = exports.DATA_SOURCE_IDS = exports.DATA_SOURCE_COLOR_DEFAULTS = exports.COLORMAP_OPTIONS = exports.CATEGORICAL_COLORMAP_ID = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _rasterTileLayerSchema = require("./raster-tile-layer-schema");
var _types = require("./types");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Known Data Source IDs that work with current STAC Layer limitations
 */
var DATA_SOURCE_IDS = exports.DATA_SOURCE_IDS = /*#__PURE__*/function (DATA_SOURCE_IDS) {
  DATA_SOURCE_IDS["SENTINEL_2_L1C"] = "sentinel-2-l1c";
  DATA_SOURCE_IDS["SENTINEL_2_L1A"] = "sentinel-2-l2a";
  DATA_SOURCE_IDS["SENTINEL_2_C1_L2A"] = "sentinel-2-c1-l2a";
  DATA_SOURCE_IDS["SENTINEL_2_PRE_C1_L2A"] = "sentinel-2-pre-c1-l2a";
  DATA_SOURCE_IDS["LANDSAT_C2_L1"] = "landsat-c2-l1";
  DATA_SOURCE_IDS["LANDSAT_C2_L2"] = "landsat-c2-l2";
  DATA_SOURCE_IDS["MODIS_09A1_061"] = "modis-09A1-061";
  DATA_SOURCE_IDS["MODIS_43A4_061"] = "modis-43A4-061";
  DATA_SOURCE_IDS["MOIDS_09Q1_061"] = "modis-09Q1-061";
  return DATA_SOURCE_IDS;
}({});
var RASTER_COLOR_RESET_PARAMS = exports.RASTER_COLOR_RESET_PARAMS = {
  gammaContrastFactor: 1,
  sigmoidalContrastFactor: 0,
  sigmoidalBiasFactor: 0.5,
  saturationValue: 1.0,
  dynamicColor: false
};
var DEFAULT_SENTINEL_COLOR_DEFAULTS = {
  gammaContrastFactor: 2.2,
  sigmoidalContrastFactor: 23,
  sigmoidalBiasFactor: 0.12,
  saturationValue: 2.0
};
var DEFAULT_MODIS_COLOR_DEFAULTS = {
  gammaContrastFactor: 2.0,
  sigmoidalContrastFactor: 8,
  sigmoidalBiasFactor: 0.13,
  saturationValue: 1.1
};
var DEFAULT_SENTINEL_BAND_MAPPING = {
  coastal: 'B01',
  blue: 'B02',
  green: 'B03',
  red: 'B04',
  rededge1: 'B05',
  rededge2: 'B06',
  rededge3: 'B07',
  nir: 'B08',
  nir08: 'B8A',
  nir09: 'B09',
  cirrus: 'B10',
  swir11: 'B11',
  swir16: 'B11',
  swir12: 'B12',
  swir22: 'B12'
};
var DEFAULT_MODIS_BAND_MAPPING = {
  sur_refl_b01: 'B01',
  sur_refl_b02: 'B02',
  sur_refl_b03: 'B03',
  sur_refl_b04: 'B04',
  sur_refl_b05: 'B05',
  sur_refl_b06: 'B06',
  sur_refl_b07: 'B07',
  Nadir_Reflectance_Band1: 'B01',
  Nadir_Reflectance_Band2: 'B02',
  Nadir_Reflectance_Band3: 'B03',
  Nadir_Reflectance_Band4: 'B04',
  Nadir_Reflectance_Band5: 'B05',
  Nadir_Reflectance_Band6: 'B06',
  Nadir_Reflectance_Band7: 'B07'
};
var DEFAULT_LANDSAT_C2_L1_BAND_MAPPING = {
  green: 'B01',
  red: 'B02',
  nir08: 'B03',
  nir09: 'B04'
};
var DEFAULT_LANDSAT_C2_L2_BAND_MAPPING = {
  blue: 'B01',
  green: 'B02',
  red: 'B03',
  nir08: 'B04',
  swir16: 'B05',
  lwir: 'B06',
  swir22: 'B07',
  coastal: 'B01',
  lwir11: 'B06'
};
var DEFAULT_BAND_MAPPINGS = exports.DEFAULT_BAND_MAPPINGS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, DATA_SOURCE_IDS.SENTINEL_2_L1C, DEFAULT_SENTINEL_BAND_MAPPING), DATA_SOURCE_IDS.SENTINEL_2_L1A, DEFAULT_SENTINEL_BAND_MAPPING), DATA_SOURCE_IDS.SENTINEL_2_C1_L2A, DEFAULT_SENTINEL_BAND_MAPPING), DATA_SOURCE_IDS.SENTINEL_2_PRE_C1_L2A, DEFAULT_SENTINEL_BAND_MAPPING), DATA_SOURCE_IDS.LANDSAT_C2_L1, DEFAULT_LANDSAT_C2_L1_BAND_MAPPING), DATA_SOURCE_IDS.LANDSAT_C2_L2, DEFAULT_LANDSAT_C2_L2_BAND_MAPPING), DATA_SOURCE_IDS.MODIS_09A1_061, DEFAULT_MODIS_BAND_MAPPING), DATA_SOURCE_IDS.MODIS_43A4_061, DEFAULT_MODIS_BAND_MAPPING), DATA_SOURCE_IDS.MOIDS_09Q1_061, DEFAULT_MODIS_BAND_MAPPING);

/**
 * Per-data source color rescaling defaults for known collections
 */
var DATA_SOURCE_COLOR_DEFAULTS = exports.DATA_SOURCE_COLOR_DEFAULTS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, DATA_SOURCE_IDS.SENTINEL_2_L1C, DEFAULT_SENTINEL_COLOR_DEFAULTS), DATA_SOURCE_IDS.SENTINEL_2_L1A, DEFAULT_SENTINEL_COLOR_DEFAULTS), DATA_SOURCE_IDS.SENTINEL_2_C1_L2A, DEFAULT_SENTINEL_COLOR_DEFAULTS), DATA_SOURCE_IDS.SENTINEL_2_PRE_C1_L2A, DEFAULT_SENTINEL_COLOR_DEFAULTS), DATA_SOURCE_IDS.LANDSAT_C2_L1, DEFAULT_SENTINEL_COLOR_DEFAULTS), DATA_SOURCE_IDS.LANDSAT_C2_L2, DEFAULT_SENTINEL_COLOR_DEFAULTS), DATA_SOURCE_IDS.MODIS_09A1_061, DEFAULT_MODIS_COLOR_DEFAULTS), DATA_SOURCE_IDS.MODIS_43A4_061, DEFAULT_MODIS_COLOR_DEFAULTS), DATA_SOURCE_IDS.MOIDS_09Q1_061, DEFAULT_MODIS_COLOR_DEFAULTS);

/**
 * Available "presets"
 *
 * I define a "preset" as one specific manner of loading bands and combining them on the frontend.
 * In the future I expect we'll want a UI that gives the user full flexibility.
 */
var PRESET_OPTIONS = exports.PRESET_OPTIONS = {
  trueColor: {
    label: 'True Color',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.trueColor,
    bandCombination: _types.BandCombination.Rgb,
    commonNames: ['red', 'green', 'blue']
  },
  infrared: {
    label: 'Infrared',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.infrared,
    bandCombination: _types.BandCombination.Rgb,
    commonNames: ['nir', 'red', 'green'],
    description: 'False-color infrared composite. Near-infrared, red, green mapped to RGB'
  },
  agriculture: {
    label: 'Agriculture',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.agriculture,
    bandCombination: _types.BandCombination.Rgb,
    commonNames: ['swir16', 'nir', 'blue'],
    description: 'False-color agriculture composite. Short-wave infrared 1, near-infrared, blue mapped to RGB.'
  },
  forestBurn: {
    label: 'Forest Burn',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.forestBurn,
    bandCombination: _types.BandCombination.Rgb,
    commonNames: ['swir22', 'nir', 'blue'],
    description: 'False-color forest burn composite. Short-wave infrared 2, near-infrared, blue mapped to RGB'
  },
  ndvi: {
    label: 'NDVI',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.ndvi,
    bandCombination: _types.BandCombination.NormalizedDifference,
    commonNames: ['nir', 'red'],
    description: 'Normalized Difference Vegetation Index',
    infoUrl: 'https://www.usgs.gov/core-science-systems/nli/landsat/landsat-normalized-difference-vegetation-index'
  },
  // Comment this out for now, because in testing it looks like there's an overflow of some sort;
  // index values should be between -1 and 1, but values look way out of bounds
  // evi: {
  //   label: 'EVI',
  //   id: RasterTileLayerPresets.evi,
  //   bandCombination: 'enhancedVegetationIndex',
  //   commonNames: ['nir', 'red', 'blue']
  // },
  savi: {
    label: 'SAVI',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.savi,
    bandCombination: _types.BandCombination.SoilAdjustedVegetationIndex,
    commonNames: ['nir', 'red'],
    description: 'Soil Adjusted Vegetation Index',
    infoUrl: 'https://www.usgs.gov/core-science-systems/nli/landsat/landsat-soil-adjusted-vegetation-index'
  },
  msavi: {
    label: 'MSAVI',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.msavi,
    bandCombination: _types.BandCombination.ModifiedSoilAdjustedVegetationIndex,
    commonNames: ['nir', 'red'],
    description: 'Modified Soil Adjusted Vegetation Index',
    infoUrl: 'https://www.usgs.gov/core-science-systems/nli/landsat/landsat-modified-soil-adjusted-vegetation-index'
  },
  ndmi: {
    label: 'NDMI',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.ndmi,
    bandCombination: _types.BandCombination.NormalizedDifference,
    commonNames: ['nir', 'swir16'],
    description: 'Normalized Difference Moisture Index',
    infoUrl: 'https://www.usgs.gov/core-science-systems/nli/landsat/normalized-difference-moisture-index'
  },
  nbr: {
    label: 'NBR',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.nbr,
    bandCombination: _types.BandCombination.NormalizedDifference,
    commonNames: ['nir', 'swir22'],
    description: 'Normalized Burn Ratio',
    infoUrl: 'https://www.usgs.gov/core-science-systems/nli/landsat/landsat-normalized-burn-ratio'
  },
  nbr2: {
    label: 'NBR 2',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.nbr2,
    bandCombination: _types.BandCombination.NormalizedDifference,
    commonNames: ['swir16', 'swir22'],
    description: 'Normalized Burn Ratio 2',
    infoUrl: 'https://www.usgs.gov/core-science-systems/nli/landsat/landsat-normalized-burn-ratio-2'
  },
  singleBand: {
    label: 'Single Band',
    id: _rasterTileLayerSchema.RasterTileLayerPresets.singleBand,
    bandCombination: _types.BandCombination.Single,
    description: 'Render a single band data'
  }
};

/**
 * Valid zoom ranges for each data source
 *
 * The maximum zoom is derived from the resolution of each data source.
 * The minimum zoom relates to the number of overviews in the COGs at the source. The more
 * overviews, the easier it is to create downsampled tiles. The minimum zooms can be reduced but it
 * takes longer to serve low-zoom tiles since the server must read from many image sources.
 */
// TODO: use render:max_overview_gsd from STAC
var ZOOM_RANGES = exports.ZOOM_RANGES = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, DATA_SOURCE_IDS.SENTINEL_2_C1_L2A, [8, 13]), DATA_SOURCE_IDS.SENTINEL_2_L1A, [8, 13]), DATA_SOURCE_IDS.SENTINEL_2_L1C, [8, 13]), DATA_SOURCE_IDS.SENTINEL_2_PRE_C1_L2A, [8, 13]), DATA_SOURCE_IDS.LANDSAT_C2_L1, [7, 12]), DATA_SOURCE_IDS.LANDSAT_C2_L2, [7, 12]), DATA_SOURCE_IDS.MODIS_09A1_061, [7, 13]), DATA_SOURCE_IDS.MODIS_43A4_061, [7, 13]), DATA_SOURCE_IDS.MOIDS_09Q1_061, [7, 13]);

/**
 * Bit depth for each data source
 * Sentinel-2 is 12-bit; Landsat-8 is 16-bit; Planet is 12-bit; NAIP is 8-bit
 */
// TODO: use range value and dtype in STAC collection instead of this
var MAX_PIXEL_VALUES = exports.MAX_PIXEL_VALUES = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, DATA_SOURCE_IDS.SENTINEL_2_C1_L2A, Math.pow(2, 12) - 1), DATA_SOURCE_IDS.SENTINEL_2_L1A, Math.pow(2, 12) - 1), DATA_SOURCE_IDS.SENTINEL_2_L1C, Math.pow(2, 12) - 1), DATA_SOURCE_IDS.SENTINEL_2_PRE_C1_L2A, Math.pow(2, 12) - 1), DATA_SOURCE_IDS.LANDSAT_C2_L1, Math.pow(2, 16) - 1), DATA_SOURCE_IDS.LANDSAT_C2_L2, Math.pow(2, 16) - 1), DATA_SOURCE_IDS.MODIS_09A1_061, Math.pow(2, 12) - 1), DATA_SOURCE_IDS.MODIS_43A4_061, Math.pow(2, 12) - 1), DATA_SOURCE_IDS.MOIDS_09Q1_061, Math.pow(2, 12) - 1);

/**
 * Id for categorical colormap. Unlike most colormaps. Categorical colormap image is created
 * from colormap set in visConfig
 */
var CATEGORICAL_COLORMAP_ID = exports.CATEGORICAL_COLORMAP_ID = '_categorical';

/**
 * A list of available colormaps. Colormaps are originally derived from
 * matplotlib, then via rio-tiler. Colormaps are 10x256 PNG images that are
 * loaded as textures
 */

var COLORMAP_OPTIONS = exports.COLORMAP_OPTIONS = [{
  label: 'Cfastie',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.cfastie
}, {
  label: 'Rplumbo',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rplumbo
}, {
  label: 'Schwarzwald',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.schwarzwald
}, {
  label: 'Viridis',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.viridis
}, {
  label: 'Plasma',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.plasma
}, {
  label: 'Inferno',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.inferno
}, {
  label: 'Magma',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.magma
}, {
  label: 'Cividis',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.cividis
}, {
  label: 'Greys',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.greys
}, {
  label: 'Purples',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.purples
}, {
  label: 'Blues',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.blues
}, {
  label: 'Greens',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.greens
}, {
  label: 'Oranges',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.oranges
}, {
  label: 'Reds',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.reds
}, {
  label: 'Yl-Or-Br',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.ylorbr
}, {
  label: 'Yl-Or-Rd',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.ylorrd
}, {
  label: 'Or-Rd',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.orrd
}, {
  label: 'Pu-Rd',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.purd
}, {
  label: 'Rd-Pu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rdpu
}, {
  label: 'Bu-Pu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.bupu
}, {
  label: 'Gn-Bu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gnbu
}, {
  label: 'Pu-Bu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.pubu
}, {
  label: 'Yl-Gn-Bu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.ylgnbu
}, {
  label: 'Pu-Bu-Gn',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.pubugn
}, {
  label: 'Blue-Gn',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.bugn
}, {
  label: 'Yl-Gn',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.ylgn
}, {
  label: 'W-n-B',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.binary
}, {
  label: 'B-n-W',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gray
}, {
  label: 'Bone',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.bone
}, {
  label: 'Pink',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.pink
}, {
  label: 'Spring',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.spring
}, {
  label: 'Summer',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.summer
}, {
  label: 'Autumn',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.autumn
}, {
  label: 'Winter',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.winter
}, {
  label: 'Cool',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.cool
}, {
  label: 'Wistia',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.wistia
}, {
  label: 'Hot',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.hot
}, {
  label: 'Afmhot',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.afmhot
}, {
  label: 'Heat',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gist_heat
}, {
  label: 'Copper',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.copper
}, {
  label: 'Pi-Green',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.piyg
}, {
  label: 'Pr-Gn',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.prgn
}, {
  label: 'Br-Bg',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.brbg
}, {
  label: 'Pu-Or',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.puor
}, {
  label: 'Rd-Gy',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rdgy
}, {
  label: 'Rd-Bu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rdbu
}, {
  label: 'Rd-Yl-Bu',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rdylbu
}, {
  label: 'Rd-Yl-Gn',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rdylgn
}, {
  label: 'Spectral',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.spectral
}, {
  label: 'Cool-Warm',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.coolwarm
}, {
  label: 'B-W-R',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.bwr
}, {
  label: 'Seismic',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.seismic
}, {
  label: 'Twilight',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.twilight
}, {
  label: 'Twilight Shifted',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.twilight_shifted
}, {
  label: 'HSV',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.hsv
}, {
  label: 'Flag',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.flag
}, {
  label: 'Prism',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.prism
}, {
  label: 'Ocean',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.ocean
}, {
  label: 'Gist Earth',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gist_earth
}, {
  label: 'Terrain',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.terrain
}, {
  label: 'Gist Stern',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gist_stern
}, {
  label: 'Gnuplot',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gnuplot
}, {
  label: 'Gnuplot2',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gnuplot2
}, {
  label: 'Cmrmap',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.cmrmap
}, {
  label: 'Cubehelix',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.cubehelix
}, {
  label: 'Brg',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.brg
}, {
  label: 'Gist Rainbow',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gist_rainbow
}, {
  label: 'Rainbow',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.rainbow
}, {
  label: 'Jet',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.jet
}, {
  label: 'Nipy Spectral',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.nipy_spectral
}, {
  label: 'Gist NCAR',
  id: _rasterTileLayerSchema.RasterTileLayerColorMaps.gist_ncar
}];
var STAC_SEARCH_PROVIDERS = [
// {
//   label: 'Microsoft Planetary Computer',
//   id: 'microsoft'
// },
{
  label: 'Element 84 Earth Search (AWS)',
  id: 'earth-search'
}];

/**
 * Configuration settings to be exposed through the UI
 */
var rasterVisConfigs = exports.rasterVisConfigs = {
  preset: {
    type: 'object-select',
    defaultValue: 'trueColor',
    label: 'Preset',
    options: Object.values(PRESET_OPTIONS),
    property: 'preset',
    group: ''
  },
  useSTACSearching: {
    type: 'boolean',
    property: 'useSTACSearching',
    defaultValue: false,
    label: 'Use STAC Searching'
  },
  stacSearchProvider: {
    type: 'object-select',
    defaultValue: 'earth-search',
    label: 'STAC Search Provider',
    options: STAC_SEARCH_PROVIDERS,
    property: 'stacSearchProvider'
  },
  startDate: {
    type: 'input',
    defaultValue: '2020-02-02',
    label: 'Start Date',
    property: 'startDate'
  },
  endDate: {
    type: 'input',
    defaultValue: '2020-03-02',
    label: 'End Date',
    property: 'endDate'
  },
  dynamicColor: {
    type: 'boolean',
    defaultValue: false,
    label: 'Dynamic Color',
    group: '',
    property: 'dynamicColor',
    description: 'Use a dynamic color scale based on data visible in the viewport'
  },
  colormapId: {
    type: 'object-select',
    defaultValue: 'cfastie',
    label: 'Colormap',
    options: COLORMAP_OPTIONS,
    property: 'colormapId',
    group: ''
  },
  // kepler's visConfig from kepler.gl https://github.com/foursquare/kepler.gl/blob/490a8938ffa1fac025e8d1997481acc1bffe4abd/src/layers/layer-factory.js#L228
  // key `colorRange` is required becuase it is hardcoded in kepler.gl
  // to make shallow copy of the visConfig item
  // https://github.com/foursquare/kepler.gl/blob/490a8938ffa1fac025e8d1997481acc1bffe4abd/src/reducers/vis-state-merger.js#L736
  colorRange: 'colorRange',
  linearRescalingFactor: {
    defaultValue: [0, 1],
    // group: "color"
    isRanged: true,
    label: 'Linear Rescaling Factor',
    property: 'linearRescalingFactor',
    range: [0, 1],
    step: 0.01,
    type: 'number'
  },
  // Non-linear rescaling for true-color images
  // If false, implies linear rescaling
  nonLinearRescaling: {
    type: 'boolean',
    property: 'nonLinearRescaling',
    defaultValue: true,
    // group: undefined
    label: 'Non-Linear Rescaling'
  },
  gammaContrastFactor: {
    defaultValue: 1,
    // group: "color"
    isRanged: false,
    label: 'Gamma Contrast',
    property: 'gammaContrastFactor',
    range: [0, 3],
    step: 0.05,
    type: 'number'
  },
  sigmoidalContrastFactor: {
    defaultValue: 0,
    // group: "color"
    isRanged: false,
    label: 'Sigmoidal Contrast',
    property: 'sigmoidalContrastFactor',
    range: [0, 50],
    step: 1,
    type: 'number'
  },
  sigmoidalBiasFactor: {
    defaultValue: 0.5,
    // group: "color"
    isRanged: false,
    label: 'Sigmoidal Bias',
    property: 'sigmoidalBiasFactor',
    range: [0, 1],
    step: 0.01,
    type: 'number'
  },
  saturationValue: {
    defaultValue: 1,
    // group: "color"
    isRanged: false,
    label: 'Saturation',
    property: 'saturationValue',
    range: [0, 2],
    step: 0.05,
    type: 'number'
  },
  filterEnabled: {
    type: 'boolean',
    property: 'filterEnabled',
    defaultValue: false,
    // group: undefined
    label: 'Filter'
  },
  filterRange: {
    defaultValue: [-1, 1],
    // group: "color"
    isRanged: true,
    label: 'Filter',
    property: 'filterRange',
    range: [-1, 1],
    step: 0.01,
    type: 'number'
  },
  opacity: {
    defaultValue: 1,
    // group: "color"
    isRanged: false,
    label: 'Opacity',
    property: 'opacity',
    range: [0, 1],
    step: 0.05,
    type: 'number'
  },
  _stacQuery: {
    defaultValue: null,
    type: 'input'
  },
  singleBandName: {
    type: 'object-select',
    defaultValue: null,
    label: 'Name of single band to render',
    // defined dynamically from STAC item/collection
    options: [],
    property: 'singleBandName',
    group: ''
  },
  enableTerrain: {
    type: 'boolean',
    defaultValue: true,
    label: 'Enable 3D terrain',
    group: '',
    property: 'enableTerrain',
    description: 'Use terrain when terrain data is available. By default enabled for 3D Map.'
  },
  enableTerrainTopView: {
    type: 'boolean',
    defaultValue: false,
    label: 'Enable in Top view',
    group: '',
    property: 'enableTerrainTopView'
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,