"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BandCombination = void 0;
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var BandCombination = exports.BandCombination = /*#__PURE__*/function (BandCombination) {
  BandCombination["Single"] = "single";
  BandCombination["Rgb"] = "rgb";
  BandCombination["NormalizedDifference"] = "normalizedDifference";
  BandCombination["EnhancedVegetationIndex"] = "enhancedVegetationIndex";
  BandCombination["SoilAdjustedVegetationIndex"] = "soilAdjustedVegetationIndex";
  BandCombination["ModifiedSoilAdjustedVegetationIndex"] = "modifiedSoilAdjustedVegetationIndex";
  return BandCombination;
}({});
/**
 * Identifiers of STAC assets to load
 *
 * These identifiers should match the keys of the STAC assets object. Refer to
 * https://github.com/radiantearth/stac-spec/blob/master/item-spec/item-spec.md#assets
 */
/**
 * Indexes of bands within each asset that should be loaded.
 *
 * Each asset refers to a single Cloud-Optimized GeoTIFF file on disk. Each COG has a width, height,
 * and one or more bands.
 *
 * This array of indexes must be the same length as the list of AssetIds. The nth band index
 * describes the which index from the nth asset id to load.
 */
/**
 * An array of integers representing how bands should be reordered on the GPU. This allows for
 * faster changing of bands for single-asset raster data, such as NAIP. Will be null for multi-asset
 * STAC items.
 */
/** User-provided information for how to render a preset */
/**
 * Custom fields we pass on to the getTileData callback
 * Anything required to know _what data to load_ should be passed in here.
 */
/** Properties provided to getTileData by the deck.gl TileLayer */
/** Properties passed into the deck.gl TileLayer getTileData callback */
/** Required information on how to render each preset */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,