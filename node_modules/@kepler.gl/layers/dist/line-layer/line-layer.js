"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neighborRequiredColumns = exports.neighborOptionalColumns = exports.lineVisConfigs = exports.lineRequiredColumns = exports.linePosAccessor = exports.lineOptionalColumns = exports.lineColumnLabels = exports.geoarrowRequiredColumns = exports["default"] = exports.COLUMN_MODE_POINTS = exports.COLUMN_MODE_NEIGHBORS = exports.COLUMN_MODE_GEOARROW = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extensions = require("@deck.gl/extensions");
var _deckglArrowLayers = require("@kepler.gl/deckgl-arrow-layers");
var _deckglLayers = require("@kepler.gl/deckgl-layers");
var _lineLayerIcon = _interopRequireDefault(require("./line-layer-icon"));
var _arcLayer = _interopRequireDefault(require("../arc-layer/arc-layer"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var lineRequiredColumns = exports.lineRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];
var lineOptionalColumns = exports.lineOptionalColumns = ['alt0', 'alt1'];
var neighborRequiredColumns = exports.neighborRequiredColumns = ['lat', 'lng', 'neighbors'];
var neighborOptionalColumns = exports.neighborOptionalColumns = ['alt'];
var geoarrowRequiredColumns = exports.geoarrowRequiredColumns = ['geoarrow0', 'geoarrow1'];
var lineColumnLabels = exports.lineColumnLabels = {
  lat0: 'arc.lat0',
  lng0: 'arc.lng0',
  lat1: 'arc.lat1',
  lng1: 'arc.lng1',
  alt0: 'line.alt0',
  alt1: 'line.alt1'
};
var lineVisConfigs = exports.lineVisConfigs = {
  opacity: 'opacity',
  thickness: 'thickness',
  colorRange: 'colorRange',
  sizeRange: 'strokeWidthRange',
  targetColor: 'targetColor',
  elevationScale: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.elevationScale), {}, {
    defaultValue: 1
  })
};
var COLUMN_MODE_POINTS = exports.COLUMN_MODE_POINTS = 'points';
var COLUMN_MODE_NEIGHBORS = exports.COLUMN_MODE_NEIGHBORS = 'neighbors';
var COLUMN_MODE_GEOARROW = exports.COLUMN_MODE_GEOARROW = 'geoarrow';
var SUPPORTED_COLUMN_MODES = [{
  key: COLUMN_MODE_POINTS,
  label: 'Points',
  requiredColumns: lineRequiredColumns,
  optionalColumns: lineOptionalColumns
}, {
  key: COLUMN_MODE_NEIGHBORS,
  label: 'Point and Neighbors',
  requiredColumns: neighborRequiredColumns,
  optionalColumns: neighborOptionalColumns
}, {
  key: COLUMN_MODE_GEOARROW,
  label: 'Geoarrow Points',
  requiredColumns: geoarrowRequiredColumns
}];
var brushingExtension = new _extensions.BrushingExtension();
var arrowCPUFilterExtension = new _deckglLayers.FilterArrowExtension();
var linePosAccessor = exports.linePosAccessor = function linePosAccessor(_ref, columnMode) {
  var lat0 = _ref.lat0,
    lng0 = _ref.lng0,
    lat1 = _ref.lat1,
    lng1 = _ref.lng1,
    alt0 = _ref.alt0,
    alt1 = _ref.alt1,
    lat = _ref.lat,
    lng = _ref.lng,
    alt = _ref.alt,
    geoarrow0 = _ref.geoarrow0,
    geoarrow1 = _ref.geoarrow1;
  return function (dc) {
    switch (columnMode) {
      case COLUMN_MODE_GEOARROW:
        return function (d) {
          var start = dc.valueAt(d.index, geoarrow0.fieldIdx);
          var end = dc.valueAt(d.index, geoarrow1.fieldIdx);
          return [start.get(0), start.get(1), 0, end.get(2), end.get(3), 0];
        };
      case COLUMN_MODE_NEIGHBORS:
        return function (d) {
          var startPos = (0, _utils.maybeHexToGeo)(dc, d, lat, lng);
          // only return source point if columnMode is COLUMN_MODE_NEIGHBORS

          return [startPos ? startPos[0] : dc.valueAt(d.index, lng.fieldIdx), startPos ? startPos[1] : dc.valueAt(d.index, lat.fieldIdx), (alt === null || alt === void 0 ? void 0 : alt.fieldIdx) > -1 ? dc.valueAt(d.index, alt.fieldIdx) : 0];
        };
      default:
        // COLUMN_MODE_POINTS
        return function (d) {
          // lat or lng column could be hex column
          // we assume string value is hex and try to convert it to geo lat lng
          var startPos = (0, _utils.maybeHexToGeo)(dc, d, lat0, lng0);
          var endPos = (0, _utils.maybeHexToGeo)(dc, d, lat1, lng1);
          return [startPos ? startPos[0] : dc.valueAt(d.index, lng0.fieldIdx), startPos ? startPos[1] : dc.valueAt(d.index, lat0.fieldIdx), alt0 && alt0.fieldIdx > -1 ? dc.valueAt(d.index, alt0.fieldIdx) : 0, endPos ? endPos[0] : dc.valueAt(d.index, lng1.fieldIdx), endPos ? endPos[1] : dc.valueAt(d.index, lat1.fieldIdx), alt1 && (alt1 === null || alt1 === void 0 ? void 0 : alt1.fieldIdx) > -1 ? dc.valueAt(d.index, alt1.fieldIdx) : 0];
        };
    }
  };
};
var LineLayer = exports["default"] = /*#__PURE__*/function (_ArcLayer) {
  function LineLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, LineLayer);
    _this = _callSuper(this, LineLayer, [props]);
    _this.registerVisConfig(lineVisConfigs);
    _this.getPositionAccessor = function (dataContainer) {
      return linePosAccessor(_this.config.columns, _this.config.columnMode)(dataContainer);
    };
    return _this;
  }
  (0, _inherits2["default"])(LineLayer, _ArcLayer);
  return (0, _createClass2["default"])(LineLayer, [{
    key: "type",
    get: function get() {
      return 'line';
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _lineLayerIcon["default"];
    }
  }, {
    key: "columnLabels",
    get: function get() {
      return lineColumnLabels;
    }
  }, {
    key: "columnPairs",
    get: function get() {
      return this.defaultLinkColumnPairs;
    }
  }, {
    key: "supportedColumnModes",
    get: function get() {
      return SUPPORTED_COLUMN_MODES;
    }
  }, {
    key: "visualChannels",
    get: function get() {
      var visualChannels = _superPropGet(LineLayer, "visualChannels", this, 1);
      return _objectSpread(_objectSpread({}, visualChannels), {}, {
        sourceColor: _objectSpread(_objectSpread({}, visualChannels.sourceColor), {}, {
          accessor: 'getColor'
        })
      });
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var data = opts.data,
        gpuFilter = opts.gpuFilter,
        objectHovered = opts.objectHovered,
        interactionConfig = opts.interactionConfig,
        dataset = opts.dataset;
      var layerProps = {
        widthScale: this.config.visConfig.thickness * _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER,
        elevationScale: this.config.visConfig.elevationScale
      };
      var updateTriggers = _objectSpread({
        getPosition: this.config.columns,
        getFilterValue: gpuFilter.filterValueUpdateTriggers,
        getFiltered: this.filteredIndexTrigger
      }, this.getVisualChannelUpdateTriggers());
      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var hoveredObject = this.hasHoveredObject(objectHovered);
      var useArrowLayer = Boolean(this.geoArrowVector0);
      var LineLayerClass = _deckglLayers.EnhancedLineLayer;
      var experimentalPropOverrides = {};
      if (useArrowLayer) {
        LineLayerClass = _deckglArrowLayers.GeoArrowArcLayer;
        experimentalPropOverrides = {
          data: dataset.dataContainer.getTable(),
          getSourcePosition: this.geoArrowVector0,
          getTargetPosition: this.geoArrowVector1
        };
      }
      return [
      // base layer
      new LineLayerClass(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), this.getBrushingExtensionProps(interactionConfig, 'source_target')), data), experimentalPropOverrides), layerProps), {}, {
        updateTriggers: updateTriggers,
        extensions: [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [brushingExtension], (0, _toConsumableArray2["default"])(useArrowLayer ? [arrowCPUFilterExtension] : [])),
        _subLayerProps: {
          'geo-arrow-arc-layer': {
            type: _deckglLayers.EnhancedLineLayer
          }
        }
      }))].concat((0, _toConsumableArray2["default"])(hoveredObject ? [new _deckglLayers.EnhancedLineLayer(_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), layerProps), {}, {
        data: [hoveredObject],
        getColor: this.config.highlightColor,
        getTargetColor: this.config.highlightColor,
        getWidth: data.getWidth
      }))] : []));
    }
  }, {
    key: "getLegendVisualChannels",
    value: function getLegendVisualChannels() {
      var _channels$sourceColor;
      var channels = this.visualChannels;
      if ((_channels$sourceColor = channels.sourceColor) !== null && _channels$sourceColor !== void 0 && _channels$sourceColor.field && this.config[channels.sourceColor.field]) {
        // Remove targetColor to avoid duplicate legend
        channels = _objectSpread({}, channels);
        delete channels.targetColor;
      }
      return channels;
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref2) {
      var _ref2$fieldPairs = _ref2.fieldPairs,
        fieldPairs = _ref2$fieldPairs === void 0 ? [] : _ref2$fieldPairs;
      if (fieldPairs.length < 2) {
        return {
          props: []
        };
      }
      var defaultAltColumn = {
        value: null,
        fieldIdx: -1,
        optional: true
      };
      var props = {
        // connect the first two point layer with line
        // TODO: fill default columns by parsing supported_column_modes
        columns: {
          lat0: fieldPairs[0].pair.lat,
          lng0: fieldPairs[0].pair.lng,
          alt0: fieldPairs[0].pair.altitude ? _objectSpread(_objectSpread({}, defaultAltColumn), fieldPairs[0].pair.altitude) : _objectSpread({}, defaultAltColumn),
          lat1: fieldPairs[1].pair.lat,
          lng1: fieldPairs[1].pair.lng,
          alt1: fieldPairs[1].pair.altitude ? _objectSpread(_objectSpread({}, defaultAltColumn), fieldPairs[1].pair.altitude) : _objectSpread({}, defaultAltColumn),
          lat: _objectSpread({}, defaultAltColumn),
          lng: _objectSpread({}, defaultAltColumn),
          alt: _objectSpread({}, defaultAltColumn),
          neighbors: _objectSpread({}, defaultAltColumn),
          geoarrow0: _objectSpread({}, defaultAltColumn),
          geoarrow1: _objectSpread({}, defaultAltColumn)
        },
        label: "".concat(fieldPairs[0].defaultName, " -> ").concat(fieldPairs[1].defaultName, " line"),
        isVisible: false
      };
      return {
        props: [props]
      };
    }
  }]);
}(_arcLayer["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,