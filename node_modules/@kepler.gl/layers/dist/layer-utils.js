"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignPointPairToLayerColumn = assignPointPairToLayerColumn;
exports.createGeoArrowPointVector = createGeoArrowPointVector;
exports.getBoundsFromArrowMetadata = getBoundsFromArrowMetadata;
exports.getColumnModeRequiredColumns = getColumnModeRequiredColumns;
exports.getFilteredIndex = getFilteredIndex;
exports.getGeoArrowPointFields = getGeoArrowPointFields;
exports.getGeoArrowPointLayerProps = getGeoArrowPointLayerProps;
exports.getGeojsonLayerMetaFromArrow = getGeojsonLayerMetaFromArrow;
exports.getHoveredObjectFromArrow = getHoveredObjectFromArrow;
exports.getNeighbors = getNeighbors;
exports.getSatisfiedColumnMode = getSatisfiedColumnMode;
exports.isGeoArrowPointField = isGeoArrowPointField;
exports.isLayerHoveredFromArrow = isLayerHoveredFromArrow;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var arrow = _interopRequireWildcard(require("apache-arrow"));
var _gis = require("@loaders.gl/gis");
var _constants = require("@kepler.gl/constants");
var _arrow = require("@loaders.gl/arrow");
var _wkt = require("@loaders.gl/wkt");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function assignPointPairToLayerColumn(pair, hasAlt) {
  var _pair$pair = pair.pair,
    lat = _pair$pair.lat,
    lng = _pair$pair.lng,
    altitude = _pair$pair.altitude;
  if (!hasAlt) {
    return {
      lat: lat,
      lng: lng
    };
  }
  var defaultAltColumn = {
    value: null,
    fieldIdx: -1,
    optional: true
  };
  return {
    lat: lat,
    lng: lng,
    altitude: altitude ? _objectSpread(_objectSpread({}, defaultAltColumn), altitude) : defaultAltColumn
  };
}
/**
 * Converts a geoarrow.wkb vector into an array of BinaryFeatureCollections.
 * @param geoColumn A vector column with geoarrow.wkb extension.
 * @param options Options for geometry transformation.
 * @returns
 */
function getBinaryGeometriesFromWKBArrow(geoColumn, options) {
  var dataToFeature = [];
  var featureTypes = {
    point: false,
    line: false,
    polygon: false
  };
  var chunks = (options === null || options === void 0 ? void 0 : options.chunkIndex) !== undefined && (options === null || options === void 0 ? void 0 : options.chunkIndex) >= 0 ? [geoColumn.data[options === null || options === void 0 ? void 0 : options.chunkIndex]] : geoColumn.data;
  var globalFeatureIdOffset = (options === null || options === void 0 ? void 0 : options.chunkOffset) || 0;
  var featureIndex = globalFeatureIdOffset;
  var bounds = [Infinity, Infinity, -Infinity, -Infinity];
  chunks.forEach(function (chunk) {
    var geojsonFeatures = [];
    for (var i = 0; i < chunk.length; ++i) {
      // ignore features without any geometry
      if (chunk.valueOffsets[i + 1] - chunk.valueOffsets[i] > 0) {
        var _WKBLoader$parseSync;
        var valuesSlice = chunk.values.slice(chunk.valueOffsets[i], chunk.valueOffsets[i + 1]);
        var geometry = _wkt.WKBLoader === null || _wkt.WKBLoader === void 0 || (_WKBLoader$parseSync = _wkt.WKBLoader.parseSync) === null || _WKBLoader$parseSync === void 0 ? void 0 : _WKBLoader$parseSync.call(_wkt.WKBLoader, valuesSlice.buffer, {
          wkb: {
            shape: 'geojson-geometry'
          }
        });
        var feature = {
          type: 'Feature',
          geometry: geometry,
          properties: {
            index: featureIndex
          }
        };
        geojsonFeatures.push(feature);
        var type = geometry.type;
        featureTypes.polygon = type === 'Polygon' || type === 'MultiPolygon';
        featureTypes.point = type === 'Point' || type === 'MultiPoint';
        featureTypes.line = type === 'LineString' || type === 'MultiLineString';
      }
      featureIndex++;
    }
    var geojsonToBinaryOptions = {
      triangulate: true,
      fixRingWinding: true
    };
    var binaryFeatures = (0, _gis.geojsonToBinary)(geojsonFeatures, geojsonToBinaryOptions);

    // Need to update globalFeatureIds, to take into account previous batches,
    // as geojsonToBinary doesn't have such option.
    var featureTypesArr = ['points', 'lines', 'polygons'];
    featureTypesArr.forEach(function (prop) {
      var features = binaryFeatures[prop];
      if (features) {
        bounds = (0, _arrow.updateBoundsFromGeoArrowSamples)(features.positions.value, features.positions.size, bounds);
        var globalFeatureIds = features.globalFeatureIds,
          numericProps = features.numericProps;
        var index = numericProps.index;
        var len = globalFeatureIds.value.length;
        for (var _i = 0; _i < len; ++_i) {
          globalFeatureIds.value[_i] = index.value[_i];
        }
      }
    });
    dataToFeature.push(binaryFeatures);
  });
  return {
    dataToFeature: dataToFeature,
    featureTypes: featureTypes,
    bounds: bounds,
    fixedRadius: false
  };
}
function getGeojsonLayerMetaFromArrow(_ref) {
  var _geoField$metadata;
  var geoColumn = _ref.geoColumn,
    geoField = _ref.geoField,
    chunkIndex = _ref.chunkIndex;
  var encoding = geoField === null || geoField === void 0 || (_geoField$metadata = geoField.metadata) === null || _geoField$metadata === void 0 ? void 0 : _geoField$metadata.get(_constants.GEOARROW_METADATA_KEY);
  var options = _objectSpread(_objectSpread({}, chunkIndex !== undefined && chunkIndex >= 0 ? {
    chunkIndex: chunkIndex,
    chunkOffset: geoColumn.data[0].length * chunkIndex
  } : {}), {}, {
    triangulate: true,
    calculateMeanCenters: true
  });

  // getBinaryGeometriesFromArrow doesn't support geoarrow.wkb
  if (encoding === _constants.GEOARROW_EXTENSIONS.WKB) {
    return getBinaryGeometriesFromWKBArrow(geoColumn, options);
  }

  // create binary data from arrow data for GeoJsonLayer
  var _getBinaryGeometriesF = (0, _arrow.getBinaryGeometriesFromArrow)(
    // @ts-ignore
    geoColumn, encoding, options),
    binaryGeometries = _getBinaryGeometriesF.binaryGeometries,
    featureTypes = _getBinaryGeometriesF.featureTypes,
    bounds = _getBinaryGeometriesF.bounds,
    meanCenters = _getBinaryGeometriesF.meanCenters;

  // since there is no feature.properties.radius, we set fixedRadius to false
  var fixedRadius = false;
  return {
    dataToFeature: binaryGeometries,
    featureTypes: featureTypes,
    bounds: bounds,
    fixedRadius: fixedRadius,
    centroids: meanCenters
  };
}
function isLayerHoveredFromArrow(objectInfo, layerId) {
  // there could be multiple deck.gl layers created from multiple chunks in arrow table
  // the objectInfo.layer id should be `${this.id}-${i}`
  if (objectInfo !== null && objectInfo !== void 0 && objectInfo.picked) {
    var _objectInfo$layer;
    var deckLayerId = objectInfo === null || objectInfo === void 0 || (_objectInfo$layer = objectInfo.layer) === null || _objectInfo$layer === void 0 || (_objectInfo$layer = _objectInfo$layer.props) === null || _objectInfo$layer === void 0 ? void 0 : _objectInfo$layer.id;
    return deckLayerId.startsWith(layerId);
  }
  return false;
}
function getHoveredObjectFromArrow(objectInfo, dataContainer, layerId, columnAccessor, fieldAccessor) {
  // hover object returns the index of the object in the data array
  // NOTE: this could be done in Deck.gl getPickingInfo(params) and binaryToGeojson()
  if (isLayerHoveredFromArrow(objectInfo, layerId) && objectInfo.index >= 0 && dataContainer) {
    var _field$metadata;
    var col = columnAccessor(dataContainer);
    var rawGeometry = col === null || col === void 0 ? void 0 : col.get(objectInfo.index);
    var field = fieldAccessor(dataContainer);
    var encoding = field === null || field === void 0 || (_field$metadata = field.metadata) === null || _field$metadata === void 0 ? void 0 : _field$metadata.get(_constants.GEOARROW_METADATA_KEY);
    var hoveredFeature = (0, _arrow.parseGeometryFromArrow)(rawGeometry, encoding);
    var properties = dataContainer.rowAsArray(objectInfo.index).reduce(function (prev, cur, i) {
      var _dataContainer$getFie;
      var fieldName = dataContainer === null || dataContainer === void 0 || (_dataContainer$getFie = dataContainer.getField) === null || _dataContainer$getFie === void 0 ? void 0 : _dataContainer$getFie.call(dataContainer, i).name;
      if (fieldName !== field.name) {
        prev[fieldName] = cur;
      }
      return prev;
    }, {});
    return hoveredFeature ? {
      type: 'Feature',
      geometry: hoveredFeature,
      properties: _objectSpread(_objectSpread({}, properties), {}, {
        index: objectInfo.index
      })
    } : null;
  }
  return null;
}

/**
 * find requiredColumns of supported column mode based on column mode
 */
function getColumnModeRequiredColumns(supportedColumnModes, columnMode) {
  var _supportedColumnModes;
  return supportedColumnModes === null || supportedColumnModes === void 0 || (_supportedColumnModes = supportedColumnModes.find(function (_ref2) {
    var key = _ref2.key;
    return key === columnMode;
  })) === null || _supportedColumnModes === void 0 ? void 0 : _supportedColumnModes.requiredColumns;
}

/**
 * Returns geoarrow fields with ARROW:extension:name POINT metadata
 * @param fields Any fields
 * @returns geoarrow fields with ARROW:extension:name POINT metadata
 */
function getGeoArrowPointFields(fields) {
  return fields.filter(function (field) {
    var _field$metadata2;
    return field.type === 'geoarrow' && ((_field$metadata2 = field.metadata) === null || _field$metadata2 === void 0 ? void 0 : _field$metadata2.get(_constants.GEOARROW_METADATA_KEY)) === _constants.GEOARROW_EXTENSIONS.POINT;
  });
}

/**
 * Builds an arrow vector compatible with ARROW:extension:name geoarrow.point.
 * @param getPosition Position accessor.
 * @param numElements Number of elements in the vector.
 * @returns An arrow vector compatible with ARROW:extension:name geoarrow.point.
 */
function createGeoArrowPointVector(dataContainer, getPosition) {
  // TODO update/resize existing vector?
  // TODO find an easier way to create point geo columns
  // in a correct arrow format, as this approach seems too excessive for just a simple interleaved buffer.

  var numElements = dataContainer.numRows();
  var table = dataContainer.getTable();
  var numCoords = numElements > 0 ? getPosition({
    index: 0
  }).length : 2;
  var precision = 2;
  var metadata = new Map();
  metadata.set(_constants.GEOARROW_METADATA_KEY, _constants.GEOARROW_EXTENSIONS.POINT);
  var childField = new arrow.Field('xyz', new arrow.Float(precision), false, metadata);
  var fixedSizeList = new arrow.FixedSizeList(numCoords, childField);
  var floatBuilder = new arrow.FloatBuilder({
    type: new arrow.Float(precision)
  });
  var fixedSizeListBuilder = new arrow.FixedSizeListBuilder({
    type: fixedSizeList
  });
  fixedSizeListBuilder.addChild(floatBuilder);
  var assembledBatches = [];
  var indexData = {
    index: 0
  };
  for (var batchIndex = 0; batchIndex < table.batches.length; ++batchIndex) {
    var numRowsInBatch = table.batches[batchIndex].numRows;
    for (var i = 0; i < numRowsInBatch; ++i) {
      var pos = getPosition(indexData);
      fixedSizeListBuilder.append(pos);
      ++indexData.index;
    }
    assembledBatches.push(fixedSizeListBuilder.flush());
  }
  return arrow.makeVector(assembledBatches);
}

/**
 * Builds a filtered index suitable for FilterArrowExtension.
 * @param numElements Size for filtered index array.
 * @param visibleIndices An array with indices of elements that aren't filtered out.
 * @returns filteredIndex [0|1] array for GPU filtering
 */
function getFilteredIndex(numElements, visibleIndices, existingFilteredIndex) {
  // contents are initialized with zeros by default, meaning not visible
  var filteredIndex = existingFilteredIndex && existingFilteredIndex.length === numElements ? existingFilteredIndex : new Uint8ClampedArray(numElements);
  filteredIndex.fill(0);
  if (visibleIndices) {
    for (var i = 0; i < visibleIndices.length; ++i) {
      filteredIndex[visibleIndices[i]] = 1;
    }
  }
  return filteredIndex;
}

/**
 * Returns an array of neighbors to the specified index.
 * @param neighborsField LayerColumn field with information about neighbors.
 * @param dataContainer Data container.
 * @param index Index of interest.
 * @param getPosition Position accessor.
 * @returns An array with information about neighbors.
 */
function getNeighbors(neighborsField, dataContainer, index, getPosition) {
  if (!neighborsField || neighborsField.fieldIdx < 0) return [];
  var neighborIndices = dataContainer.valueAt(index, neighborsField.fieldIdx);
  // In case of arrow column with an array of indices.
  if (neighborIndices.toArray) {
    neighborIndices = Array.from(neighborIndices.toArray());
  }
  if (!Array.isArray(neighborIndices)) return [];

  // find neighbor
  var neighborsData = neighborIndices.map(function (idx) {
    return {
      index: idx,
      position: getPosition({
        index: idx
      })
    };
  });
  return neighborsData;
}

/**
 * Returns bounds from a geoarrow field.
 * TODO: refactor once metadata extraction from parquet to arrow vectors is in place.
 * @param layerColumn Layer columns for which to check for a bounding box.
 * @param dataContainer Data container with geoarrow metadata.
 * @returns Returns bounding box if exists.
 */
function getBoundsFromArrowMetadata(layerColumn, dataContainer) {
  try {
    var field = dataContainer.getField(layerColumn.fieldIdx);
    var table = dataContainer.getTable();
    var geoMetadata = (0, _gis.getGeoMetadata)({
      metadata: {
        // @ts-expect-error
        geo: table.schema.metadata.get('geo')
      }
    });
    if (geoMetadata) {
      var fieldMetadata = geoMetadata.columns[field.name];
      if (fieldMetadata) {
        var boundsFromMetadata = fieldMetadata['bbox'];
        if (Array.isArray(boundsFromMetadata) && boundsFromMetadata.length === 4) {
          return boundsFromMetadata;
        }
      }
    }
  } catch (error) {
    // ignore for now
  }
  return false;
}

/**
 * Finds and returns the first satisfied column mode based on the provided columns and fields.
 * @param supportedColumnModes - An array of supported column modes to check.
 * @param columns - The available columns.
 * @param fields - Optional table fields to be used for extra verification.
 * @returns The first column mode that satisfies the required conditions, or undefined if none match.
 */
function getSatisfiedColumnMode(columnModes, columns, fields) {
  return columnModes === null || columnModes === void 0 ? void 0 : columnModes.find(function (mode) {
    var _mode$requiredColumns;
    return (_mode$requiredColumns = mode.requiredColumns) === null || _mode$requiredColumns === void 0 ? void 0 : _mode$requiredColumns.every(function (requriedCol) {
      var column = columns === null || columns === void 0 ? void 0 : columns[requriedCol];
      if (column !== null && column !== void 0 && column.value) {
        if (mode.verifyField && fields !== null && fields !== void 0 && fields[column.fieldIdx]) {
          var field = fields[column.fieldIdx];
          return mode.verifyField(field);
        }
        return true;
      }
      return false;
    });
  });
}

/**
 * Returns true if the field is of geoarrow point format.
 * @param field A field.
 * @returns Returns true if the field is of geoarrow point format.
 */
function isGeoArrowPointField(field) {
  var _field$metadata3;
  return field.type === 'geoarrow' && ((_field$metadata3 = field.metadata) === null || _field$metadata3 === void 0 ? void 0 : _field$metadata3.get(_constants.GEOARROW_METADATA_KEY)) === _constants.GEOARROW_EXTENSIONS.POINT;
}

/**
 * Create default geoarrow column props based on the dataset.
 * @param dataset A dataset to create layer props from.
 * @returns  geoarrow column props.
 */
function getGeoArrowPointLayerProps(dataset) {
  var label = dataset.label;
  var altProps = [];
  dataset.fields.forEach(function (field) {
    if (isGeoArrowPointField(field)) {
      altProps.push({
        label: typeof label === 'string' && label.replace(/\.[^/.]+$/, '') || field.name,
        columns: {
          geoarrow: {
            value: field.name,
            fieldIdx: field.fieldIdx
          }
        }
      });
    }
  });
  return altProps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,