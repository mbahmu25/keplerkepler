"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AGGREGATION_NAME = void 0;
exports.aggregate = aggregate;
exports.percentMean = exports.getMode = exports.getFrequency = exports.countUnique = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _d3Array = require("d3-array");
var _constants = require("@kepler.gl/constants");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var identity = function identity(d) {
  return d;
};
var getFrequency = exports.getFrequency = function getFrequency(data) {
  var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  var occur = {};
  for (var i = 0; i < data.length; i++) {
    var val = accessor(data[i]);
    occur[val] = (occur[val] || 0) + 1;
  }
  return occur;
};
var getMode = exports.getMode = function getMode(data, accessor) {
  var occur = getFrequency(data, accessor);
  return Object.keys(occur).reduce(function (prev, key) {
    return occur[prev] >= occur[key] ? prev : key;
  }, Object.keys(occur)[0]);
};
var countUnique = exports.countUnique = function countUnique(data) {
  var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;
  return Object.keys(data.reduce(function (uniques, d) {
    var val = accessor(d);
    uniques[val] = uniques[val] || 0;
    uniques[val] += 1;
    return uniques;
  }, {})).length;
};
var percentMean = exports.percentMean = function percentMean(data, accessor) {
  var getNumerator = accessor.getNumerator,
    getDenominator = accessor.getDenominator;
  var denominator = aggregate(data, _constants.AGGREGATION_TYPES.sum, getDenominator);
  if (denominator <= 0) {
    return 0;
  }
  var result = aggregate(data, _constants.AGGREGATION_TYPES.sum, getNumerator) / denominator;
  return result;
};
function aggregate(data, technique) {
  var accessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;
  switch (technique) {
    case _constants.AGGREGATION_TYPES.average:
      return (0, _d3Array.mean)(data, accessor);
    case 'mean_of_percent':
      return percentMean(data, accessor);
    case _constants.AGGREGATION_TYPES.countUnique:
      return countUnique(data, accessor);
    case _constants.AGGREGATION_TYPES.mode:
      return getMode(data, accessor);
    case _constants.AGGREGATION_TYPES.maximum:
      return (0, _d3Array.max)(data, accessor);
    case _constants.AGGREGATION_TYPES.minimum:
      return (0, _d3Array.min)(data, accessor);
    case _constants.AGGREGATION_TYPES.median:
      return (0, _d3Array.median)(data, accessor);
    case _constants.AGGREGATION_TYPES.stdev:
      return (0, _d3Array.deviation)(data, accessor);
    case _constants.AGGREGATION_TYPES.sum:
      return (0, _d3Array.sum)(data, accessor);
    case _constants.AGGREGATION_TYPES.variance:
      return (0, _d3Array.variance)(data, accessor);
    default:
      return data.length;
  }
}
var AGGREGATION_NAME = exports.AGGREGATION_NAME = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants.AGGREGATION_TYPES.average, 'Average'), _constants.AGGREGATION_TYPES.countUnique, 'Number of Unique'), _constants.AGGREGATION_TYPES.mode, 'Most Often'), _constants.AGGREGATION_TYPES.maximum, 'Max'), _constants.AGGREGATION_TYPES.minimum, 'Min'), _constants.AGGREGATION_TYPES.median, 'Median'), _constants.AGGREGATION_TYPES.stdev, 'Std Deviation'), _constants.AGGREGATION_TYPES.sum, 'Total'), _constants.AGGREGATION_TYPES.variance, 'Variance');

// ratio: both denominator & numerator precent
// average, min, max, median,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,