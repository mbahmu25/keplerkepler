"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _core = require("@deck.gl/core");
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _effect = _interopRequireDefault(require("./effect"));
var _customDeckLightingEffect = _interopRequireDefault(require("./custom-deck-lighting-effect"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var LIGHT_AND_SHADOW_EFFECT_DESC = _objectSpread(_objectSpread({}, _constants.LIGHT_AND_SHADOW_EFFECT), {}, {
  "class": null
});
var LightingEffect = /*#__PURE__*/function (_Effect) {
  // deckEffect: PostProcessEffect | LightingEffect | null;

  function LightingEffect(props) {
    (0, _classCallCheck2["default"])(this, LightingEffect);
    return _callSuper(this, LightingEffect, [props]);
  }
  (0, _inherits2["default"])(LightingEffect, _Effect);
  return (0, _createClass2["default"])(LightingEffect, [{
    key: "_initializeEffect",
    value: function _initializeEffect() {
      this.parameters = _objectSpread(_objectSpread({}, _constants.DEFAULT_LIGHT_AND_SHADOW_PROPS), {}, {
        timezone: _momentTimezone["default"].tz.guess(true)
      }, this.parameters);
      var parameters = this.parameters;
      var ambientLight = new _core.AmbientLight({
        color: parameters.ambientLightColor,
        intensity: parameters.ambientLightIntensity
      });
      var sunLight = new _core._SunLight({
        timestamp: parameters.timestamp,
        color: parameters.sunLightColor,
        intensity: parameters.sunLightIntensity,
        _shadow: true
      });
      this.deckEffect = new _customDeckLightingEffect["default"]({
        ambientLight: ambientLight,
        sunLight: sunLight
      });
      if (this.deckEffect) {
        this.deckEffect.shadowColor = [].concat((0, _toConsumableArray2["default"])((0, _utils.normalizeColor)(parameters.shadowColor)), [parameters.shadowIntensity]);
      }
    }
  }, {
    key: "getDefaultProps",
    value: function getDefaultProps() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _superPropGet(LightingEffect, "getDefaultProps", this, 3)([_objectSpread({
        type: LIGHT_AND_SHADOW_EFFECT_DESC.type
      }, props)]);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      _superPropGet(LightingEffect, "setProps", this, 3)([props]);

      // any uniform updated?
      if (props.parameters) {
        var parameters = this.parameters;
        if (this.type === LIGHT_AND_SHADOW_EFFECT_DESC.type) {
          /** @type {LightingEffect} */
          var effect = this.deckEffect;
          if (effect) {
            effect.shadowColor = [].concat((0, _toConsumableArray2["default"])((0, _utils.normalizeColor)(parameters.shadowColor)), [parameters.shadowIntensity]);
            effect.ambientLight.intensity = parameters.ambientLightIntensity;
            effect.ambientLight.color = parameters.ambientLightColor.slice();
            var sunLight = effect.directionalLights[0];
            if (sunLight) {
              sunLight.intensity = parameters.sunLightIntensity;
              sunLight.color = parameters.sunLightColor.slice();
              sunLight.timestamp = parameters.timestamp;
            }
          }
        }
      }
    }
  }]);
}(_effect["default"]);
var _default = exports["default"] = LightingEffect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,