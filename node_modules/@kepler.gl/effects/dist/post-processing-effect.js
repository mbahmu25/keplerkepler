"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultValueForParameter = exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _core = require("@deck.gl/core");
var _shadertools = require("@luma.gl/shadertools");
var _constants = require("@kepler.gl/constants");
var _effect = _interopRequireDefault(require("./effect"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var POSTPROCESSING_EFFECTS_DESCS = [_objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.ink), {}, {
  "class": _shadertools.ink
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.brightnessContrast), {}, {
  "class": _shadertools.brightnessContrast
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.hueSaturation), {}, {
  "class": _shadertools.hueSaturation
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.vibrance), {}, {
  "class": _shadertools.vibrance
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.sepia), {}, {
  "class": _shadertools.sepia
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.dotScreen), {}, {
  "class": _shadertools.dotScreen
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.colorHalftone), {}, {
  "class": _shadertools.colorHalftone
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.noise), {}, {
  "class": _shadertools.noise
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.triangleBlur), {}, {
  "class": _shadertools.triangleBlur
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.zoomBlur), {}, {
  "class": _shadertools.zoomBlur
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.tiltShift), {}, {
  "class": _shadertools.tiltShift
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.edgeWork), {}, {
  "class": _shadertools.edgeWork
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.vignette), {}, {
  "class": _shadertools.vignette
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.magnify), {}, {
  "class": _shadertools.magnify
}), _objectSpread(_objectSpread({}, _constants.POSTPROCESSING_EFFECTS.hexagonalPixelate), {}, {
  "class": _shadertools.hexagonalPixelate
})];

/**
 * Returns default parameter value based on effect description.
 * @param name Name of the parameter.
 * @param effectDescription Effect's description.
 * @param uniformsDesc Effect's uniforms.
 * @returns
 */
var getDefaultValueForParameter = exports.getDefaultValueForParameter = function getDefaultValueForParameter(name, effectDescription, uniformsDesc) {
  var _ref, _ref2, _description$defaultV;
  var description = effectDescription.find(function (param) {
    return param.name === name;
  });
  var uniform = uniformsDesc[name];
  return (_ref = (_ref2 = (_description$defaultV = description === null || description === void 0 ? void 0 : description.defaultValue) !== null && _description$defaultV !== void 0 ? _description$defaultV : uniform === null || uniform === void 0 ? void 0 : uniform.value) !== null && _ref2 !== void 0 ? _ref2 : uniform) !== null && _ref !== void 0 ? _ref : description === null || description === void 0 ? void 0 : description.min;
};
var PostProcessingEffect = /*#__PURE__*/function (_Effect) {
  // deckEffect: PostProcessEffect | LightingEffect | null;

  function PostProcessingEffect(props) {
    (0, _classCallCheck2["default"])(this, PostProcessingEffect);
    return _callSuper(this, PostProcessingEffect, [props]);
  }
  (0, _inherits2["default"])(PostProcessingEffect, _Effect);
  return (0, _createClass2["default"])(PostProcessingEffect, [{
    key: "_initializeEffect",
    value: function _initializeEffect() {
      var _this = this;
      var effectDesc = POSTPROCESSING_EFFECTS_DESCS.find(function (desc) {
        return desc.type === _this.type;
      });
      if (effectDesc) {
        var _this$deckEffect;
        this.deckEffect = new _core.PostProcessEffect(effectDesc["class"], this.parameters);
        var uniforms = (_this$deckEffect = this.deckEffect) === null || _this$deckEffect === void 0 || (_this$deckEffect = _this$deckEffect.module) === null || _this$deckEffect === void 0 ? void 0 : _this$deckEffect.uniforms;
        if (uniforms) {
          var _this$deckEffect2;
          // get default parameters
          var keys = Object.keys(uniforms);
          var defaultParameters = {};
          keys.forEach(function (key) {
            defaultParameters[key] = getDefaultValueForParameter(key, _this._uiConfig, uniforms);
          });
          this.parameters = _objectSpread(_objectSpread({}, defaultParameters), this.parameters);
          (_this$deckEffect2 = this.deckEffect) === null || _this$deckEffect2 === void 0 || _this$deckEffect2.setProps(this.parameters);
        }
      }
    }
  }, {
    key: "getDefaultProps",
    value: function getDefaultProps() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _superPropGet(PostProcessingEffect, "getDefaultProps", this, 3)([_objectSpread({
        type: _constants.DEFAULT_POST_PROCESSING_EFFECT_TYPE
      }, props)]);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      _superPropGet(PostProcessingEffect, "setProps", this, 3)([props]);

      // any uniform updated?
      if (props.parameters) {
        var _this$deckEffect3;
        (_this$deckEffect3 = this.deckEffect) === null || _this$deckEffect3 === void 0 || _this$deckEffect3.setProps(this.parameters);
      }
    }
  }]);
}(_effect["default"]);
var _default = exports["default"] = PostProcessingEffect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,