"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Effect = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var Effect = exports.Effect = /*#__PURE__*/function () {
  function Effect() {
    var _POSTPROCESSING_EFFEC;
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, Effect);
    (0, _defineProperty2["default"])(this, "id", void 0);
    (0, _defineProperty2["default"])(this, "type", void 0);
    (0, _defineProperty2["default"])(this, "isEnabled", void 0);
    // effect specific parameters for a deck.gl effect (uniforms)
    (0, _defineProperty2["default"])(this, "parameters", void 0);
    // runtime props
    (0, _defineProperty2["default"])(this, "isConfigActive", void 0);
    (0, _defineProperty2["default"])(this, "isJsonEditorActive", void 0);
    (0, _defineProperty2["default"])(this, "deckEffect", void 0);
    (0, _defineProperty2["default"])(this, "_uiConfig", void 0);
    this.id = props.id || "e_".concat((0, _commonUtils.generateHashId)(6));
    var _props = this.getDefaultProps(props);
    this.type = _props.type;
    this.isEnabled = _props.isEnabled;
    this.isConfigActive = _props.isConfigActive;
    this.isJsonEditorActive = _props.isJsonEditorActive;
    this._uiConfig = _constants.LIGHT_AND_SHADOW_EFFECT.type === this.type ? _constants.LIGHT_AND_SHADOW_EFFECT.parameters : ((_POSTPROCESSING_EFFEC = _constants.POSTPROCESSING_EFFECTS[this.type]) === null || _POSTPROCESSING_EFFEC === void 0 ? void 0 : _POSTPROCESSING_EFFEC.parameters) || [];
    this.parameters = (0, _utils.validateEffectParameters)(_props.parameters, this._uiConfig);
    this.deckEffect = null;
    this._initializeEffect();
  }
  return (0, _createClass2["default"])(Effect, [{
    key: "_initializeEffect",
    value: function _initializeEffect() {
      // implemented in subclasses
    }
  }, {
    key: "getDefaultProps",
    value: function getDefaultProps() {
      var _props$isEnabled, _props$isConfigActive, _props$isJsonEditorAc;
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        id: props.id || "e_".concat((0, _commonUtils.generateHashId)(6)),
        type: props.type || _constants.DEFAULT_POST_PROCESSING_EFFECT_TYPE,
        isEnabled: (_props$isEnabled = props.isEnabled) !== null && _props$isEnabled !== void 0 ? _props$isEnabled : true,
        isConfigActive: (_props$isConfigActive = props.isConfigActive) !== null && _props$isConfigActive !== void 0 ? _props$isConfigActive : true,
        isJsonEditorActive: (_props$isJsonEditorAc = props.isJsonEditorActive) !== null && _props$isJsonEditorAc !== void 0 ? _props$isJsonEditorAc : false,
        parameters: _objectSpread({}, props.parameters)
      };
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      var _props$id, _props$type, _props$isEnabled2, _props$isConfigActive2, _props$isJsonEditorAc2;
      this.id = (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : this.id;
      this.type = (_props$type = props.type) !== null && _props$type !== void 0 ? _props$type : this.type;
      this.isEnabled = (_props$isEnabled2 = props.isEnabled) !== null && _props$isEnabled2 !== void 0 ? _props$isEnabled2 : this.isEnabled;
      this.isConfigActive = (_props$isConfigActive2 = props.isConfigActive) !== null && _props$isConfigActive2 !== void 0 ? _props$isConfigActive2 : this.isConfigActive;
      this.isJsonEditorActive = (_props$isJsonEditorAc2 = props.isJsonEditorActive) !== null && _props$isJsonEditorAc2 !== void 0 ? _props$isJsonEditorAc2 : this.isJsonEditorActive;
      this.parameters = _objectSpread(_objectSpread({}, this.parameters), (0, _utils.validateEffectParameters)(props.parameters, this._uiConfig));
    }
  }, {
    key: "isValidToSave",
    value: function isValidToSave() {
      return Boolean(this.type && this.id && this.deckEffect);
    }

    /**
     * Effect specific list of configurable parameters.
     * @returns All parameters are in preffered order.
     */
  }, {
    key: "getParameterDescriptions",
    value: function getParameterDescriptions() {
      return this._uiConfig || [];
    }
  }]);
}();
var _default = exports["default"] = Effect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,