import { AnimationConfig, Timeline, TimeRangeFilter, Filter } from '@kepler.gl/types';
import { KeplerTableModel } from './types';
export declare const TIMELINE_MODES: {
    inner: string;
    outer: string;
};
export declare const TileTimeInterval: {
    YEAR: string;
    MONTH: string;
    DAY: string;
    HOUR: string;
    MINUTE: string;
};
export declare const TIME_INTERVALS_ORDERED: string[];
export declare const LayerToFilterTimeInterval: {
    [x: string]: string;
};
export declare const SAMPLE_TIMELINE: {
    value: number[];
    domain: number[];
    speed: number;
    enableInteraction: boolean;
    isAnimating: boolean;
    step: null;
    mode: string;
};
export declare const getTimelineFromAnimationConfig: (animationConfig: AnimationConfig) => Timeline;
export declare function getIntervalByTicks(ticks: any, start: any, stop: any): string;
/**
 * mappedValue is saved to dataset.fields.filterProps
 * @param dataset {KeplerTable}
 * @param filter
 */
export declare function getFilterMappedValue(dataset: KeplerTableModel<any, any>, filter: Filter): Filter['mappedValue'] | null;
export declare function intervalToFunction(id: string): any;
/**
 * Get initial interval from filter and datasets
 * @param filter
 * @param datasets
 * @returns
 */
export declare function getInitialInterval(filter: Filter, datasets: Record<string, KeplerTableModel<any, any>>): string;
/**
 *
 * @param options
 * @param domain
 */
export declare function filterIntervalOptions(options: any, domain: any): any;
/**
 * Get timeline from filter
 * @param filter TimeRangeFilter filter
 * @returns Timeline
 */
export declare const getTimelineFromFilter: (filter: TimeRangeFilter) => Timeline;
