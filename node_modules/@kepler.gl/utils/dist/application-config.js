"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApplicationConfig = void 0;
exports.initApplicationConfig = initApplicationConfig;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _constants = require("@kepler.gl/constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * A mechanism to override default Kepler values/settings so that we
 * without having to make application-specific changes to the kepler repo.
 */

var DEFAULT_APPLICATION_CONFIG = {
  defaultHtmlName: 'kepler.gl.html',
  defaultImageName: 'kepler.gl.png',
  defaultJsonName: 'kepler.gl.json',
  defaultDataName: 'kepler.gl',
  defaultExportJsonSettings: {
    hasData: true
  },
  baseMapLibraryConfig: {
    maplibre: {
      getMapLib: function getMapLib() {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(require('maplibre-gl'));
        });
      },
      mapLibCssClass: 'maplibregl',
      mapLibAttributionCssClass: 'maplibre-attribution-container',
      mapLibName: 'MapLibre',
      mapLibUrl: 'https://www.maplibre.org/'
    },
    mapbox: {
      getMapLib: function getMapLib() {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(require('mapbox-gl'));
        });
      },
      mapLibCssClass: 'mapboxgl',
      mapLibAttributionCssClass: 'mapbox-attribution-container',
      mapLibName: 'Mapbox',
      mapLibUrl: 'https://www.mapbox.com/'
    }
  },
  cdnUrl: _constants.KEPLER_UNFOLDED_BUCKET,
  plugins: [],
  // The default table class is KeplerTable.
  // TODO include KeplerTable here when the circular dependency with @kepler.gl/table and @kepler.gl/utils are resolved.
  table: null,
  database: null,
  useArrowProgressiveLoading: true,
  showReleaseBanner: true,
  useOnFilteredItemsChange: false,
  // Raster Tile layer config
  enableRasterTileLayer: false,
  rasterServerUseLatestTitiler: true,
  // TODO: provide a default free server or leave blank
  rasterServerUrls: [],
  rasterServerSupportsElevation: true,
  rasterServerMaxRetries: 1,
  rasterServerRetryDelay: 10000,
  rasterServerServerErrorsToRetry: [503],
  rasterServerMaxPerServerRequests: 0,
  rasterServerShowServerInput: false,
  // WMS layer config
  enableWMSLayer: false
};
var applicationConfig = DEFAULT_APPLICATION_CONFIG;
var getApplicationConfig = exports.getApplicationConfig = function getApplicationConfig() {
  return applicationConfig;
};
function initApplicationConfig() {
  var appConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  Object.assign(applicationConfig, appConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,