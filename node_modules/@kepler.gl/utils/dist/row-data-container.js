"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RowDataContainer = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _dataRow = require("./data-row");
var _marked = /*#__PURE__*/_regenerator["default"].mark(rowsIterator),
  _marked2 = /*#__PURE__*/_regenerator["default"].mark(columnIterator); // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * @param dataContainer
 * @param sharedRow
 */
function rowsIterator(dataContainer, sharedRow) {
  var numRows, rowIndex;
  return _regenerator["default"].wrap(function rowsIterator$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        numRows = dataContainer.numRows();
        rowIndex = 0;
      case 2:
        if (!(rowIndex < numRows)) {
          _context.next = 8;
          break;
        }
        _context.next = 5;
        return dataContainer.row(rowIndex, sharedRow);
      case 5:
        ++rowIndex;
        _context.next = 2;
        break;
      case 8:
      case "end":
        return _context.stop();
    }
  }, _marked);
}

/**
 * @param dataContainer
 * @param columnIndex
 */
function columnIterator(dataContainer, columnIndex) {
  var numRows, rowIndex;
  return _regenerator["default"].wrap(function columnIterator$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        numRows = dataContainer.numRows();
        rowIndex = 0;
      case 2:
        if (!(rowIndex < numRows)) {
          _context2.next = 8;
          break;
        }
        _context2.next = 5;
        return dataContainer.valueAt(rowIndex, columnIndex);
      case 5:
        ++rowIndex;
        _context2.next = 2;
        break;
      case 8:
      case "end":
        return _context2.stop();
    }
  }, _marked2);
}

/**
 * A data container where all data is stored internally as a 2D array.
 */
var RowDataContainer = exports.RowDataContainer = /*#__PURE__*/function () {
  function RowDataContainer(data) {
    var _data$rows$;
    (0, _classCallCheck2["default"])(this, RowDataContainer);
    (0, _defineProperty2["default"])(this, "_rows", void 0);
    (0, _defineProperty2["default"])(this, "_numColumns", void 0);
    if (!data.rows) {
      throw Error('RowDataContainer: no rows provided');
    }
    if (!Array.isArray(data.rows)) {
      throw Error("RowDataContainer: rows object isn't an array");
    }
    this._rows = data.rows;
    this._numColumns = ((_data$rows$ = data.rows[0]) === null || _data$rows$ === void 0 ? void 0 : _data$rows$.length) || 0;
  }
  return (0, _createClass2["default"])(RowDataContainer, [{
    key: "numRows",
    value: function numRows() {
      return this._rows.length;
    }
  }, {
    key: "numColumns",
    value: function numColumns() {
      return this._numColumns;
    }
  }, {
    key: "valueAt",
    value: function valueAt(rowIndex, columnIndex) {
      if (this._rows[rowIndex] === null) {
        return null;
      }
      return this._rows[rowIndex][columnIndex];
    }
  }, {
    key: "row",
    value: function row(rowIndex, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      if (tSharedRow) {
        tSharedRow.setSource(this, rowIndex);
        return tSharedRow;
      }
      return new _dataRow.DataRow(this, rowIndex);
    }
  }, {
    key: "rowAsArray",
    value: function rowAsArray(rowIndex) {
      return this._rows[rowIndex];
    }
  }, {
    key: "rows",
    value: function rows(sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      return rowsIterator(this, tSharedRow);
    }
  }, {
    key: "column",
    value: function column(columnIndex) {
      return columnIterator(this, columnIndex);
    }
  }, {
    key: "flattenData",
    value: function flattenData() {
      return this._rows;
    }
  }, {
    key: "getPlainIndex",
    value: function getPlainIndex() {
      return this._rows.map(function (_, i) {
        return i;
      });
    }
  }, {
    key: "map",
    value: function map(func, sharedRow) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      var _options$start = options.start,
        start = _options$start === void 0 ? 0 : _options$start,
        _options$end = options.end,
        end = _options$end === void 0 ? this.numRows() : _options$end;
      var endRow = Math.min(this.numRows(), end);
      var out = [];
      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        out.push(func(row, rowIndex));
      }
      return out;
    }
  }, {
    key: "mapIndex",
    value: function mapIndex(func) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$start2 = options.start,
        start = _options$start2 === void 0 ? 0 : _options$start2,
        _options$end2 = options.end,
        end = _options$end2 === void 0 ? this.numRows() : _options$end2;
      var endRow = Math.min(this.numRows(), end);
      var out = [];
      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {
        out.push(func({
          index: rowIndex
        }, this));
      }
      return out;
    }
  }, {
    key: "find",
    value: function find(func, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      for (var rowIndex = 0; rowIndex < this._rows.length; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        if (func(row, rowIndex)) {
          return row;
        }
      }
      return undefined;
    }
  }, {
    key: "reduce",
    value: function reduce(func, initialValue, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      for (var rowIndex = 0; rowIndex < this._rows.length; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        initialValue = func(initialValue, row, rowIndex);
      }
      return initialValue;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,