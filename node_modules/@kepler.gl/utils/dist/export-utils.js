"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateExportImageSize = calculateExportImageSize;
exports.convertToPng = convertToPng;
exports.dataURItoBlob = dataURItoBlob;
exports["default"] = void 0;
exports.downloadFile = downloadFile;
exports.exportHtml = exportHtml;
exports.exportImage = exportImage;
exports.exportJson = exportJson;
exports.exportMap = exportMap;
exports.exportToJsonString = exportToJsonString;
exports.getMapJSON = getMapJSON;
exports.getScaleFromImageSize = getScaleFromImageSize;
exports.isMSEdge = isMSEdge;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _window = require("global/window");
var _get = _interopRequireDefault(require("lodash/get"));
var _constants = require("@kepler.gl/constants");
var _commonUtils = require("@kepler.gl/common-utils");
var _domToImage = _interopRequireDefault(require("./dom-to-image"));
var _utils = require("./utils");
var _exportMapHtml = require("./export-map-html");
var _applicationConfig = require("./application-config");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var defaultResolution = _constants.OneXResolutionOption;
var defaultRatio = _constants.FourByThreeRatioOption;
function isMSEdge(window) {
  // @ts-ignore msSaveOrOpenBlob was a proprietary addition to the Navigator object, added by Microsoft for Internet Explorer.
  return Boolean(window.navigator && window.navigator.msSaveOrOpenBlob);
}
function getScaleFromImageSize() {
  var imageW = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var imageH = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var mapW = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var mapH = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  if ([imageW, imageH, mapW, mapH].some(function (d) {
    return d <= 0;
  })) {
    return 1;
  }
  var base = imageW / imageH > 1 ? imageW : imageH;
  var mapBase = imageW / imageH > 1 ? mapW : mapH;
  return base / mapBase;
}
function calculateExportImageSize(_ref) {
  var mapW = _ref.mapW,
    mapH = _ref.mapH,
    ratio = _ref.ratio,
    resolution = _ref.resolution;
  if (mapW <= 0 || mapH <= 0) {
    return null;
  }
  var ratioItem = _constants.EXPORT_IMG_RATIO_OPTIONS.find(function (op) {
    return op.id === ratio;
  }) || defaultRatio;
  var resolutionItem = _constants.EXPORT_IMG_RESOLUTION_OPTIONS.find(function (op) {
    return op.id === resolution;
  }) || defaultResolution;
  var _resolutionItem$getSi = resolutionItem.getSize(mapW, mapH),
    scaledWidth = _resolutionItem$getSi.width,
    scaledHeight = _resolutionItem$getSi.height;
  var _ratioItem$getSize = ratioItem.getSize(scaledWidth, scaledHeight),
    imageW = _ratioItem$getSize.width,
    imageH = _ratioItem$getSize.height;
  var _ref2 = ratioItem.id === _constants.EXPORT_IMG_RATIOS.CUSTOM ? {
      scale: undefined
    } : resolutionItem,
    scale = _ref2.scale;
  return {
    scale: scale,
    imageW: imageW,
    imageH: imageH
  };
}
function convertToPng(sourceElem, options) {
  return _domToImage["default"].toPng(sourceElem, options);
}
function dataURItoBlob(dataURI) {
  var binary = (0, _window.atob)(dataURI.split(',')[1]);

  // separate out the mime component
  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

  // write the bytes of the string to an ArrayBuffer
  var ab = new _window.ArrayBuffer(binary.length);

  // create a view into the buffer
  var ia = new _window.Uint8Array(ab);
  for (var i = 0; i < binary.length; i++) {
    ia[i] = binary.charCodeAt(i);
  }
  return new _window.Blob([ab], {
    type: mimeString
  });
}
function downloadFile(fileBlob, fileName) {
  if (isMSEdge(window)) {
    window.navigator.msSaveOrOpenBlob(fileBlob, fileName);
  } else {
    var url = _window.URL.createObjectURL(fileBlob);
    var link = _window.document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', fileName);
    _window.document.body.appendChild(link);
    // in some cases where maps are embedded, e.g. need to
    // create and dispatch an event so that the browser downloads
    // the file instead of navigating to the url
    var evt = new MouseEvent('click', {
      view: window,
      bubbles: false,
      cancelable: true
    });
    link.dispatchEvent(evt);
    _window.document.body.removeChild(link);
    _window.URL.revokeObjectURL(url);
  }
}

/**
 * Whether color is rgb
 * @returns
 */
function exportImage(uiStateExportImage) {
  var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _applicationConfig.getApplicationConfig)().defaultImageName;
  var imageDataUri = uiStateExportImage.imageDataUri;
  if (imageDataUri) {
    var file = dataURItoBlob(imageDataUri);
    downloadFile(file, filename);
  }
}
function exportToJsonString(data) {
  try {
    return JSON.stringify(data);
  } catch (e) {
    if (e instanceof TypeError) return e.message;
    // Non-Standard Error Object Property
    return e.description;
  }
}
function getMapJSON(state) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _applicationConfig.getApplicationConfig)().defaultExportJsonSettings;
  var hasData = options.hasData;
  var schema = state.visState.schema;
  if (!hasData) {
    return schema.getConfigToSave(state);
  }
  var mapToSave = schema.save(state);
  // add file name if title is not provided
  var title = (0, _get["default"])(mapToSave, ['info', 'title']);
  if (!title || !title.length) {
    mapToSave = (0, _utils.set)(['info', 'title'], "keplergl_".concat((0, _commonUtils.generateHashId)(6)), mapToSave);
  }
  return mapToSave;
}
function exportJson(state) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var map = getMapJSON(state, options);
  map.info.source = 'kepler.gl';
  var fileBlob = new _window.Blob([exportToJsonString(map)], {
    type: 'application/json'
  });
  var fileName = state.appName ? "".concat(state.appName, ".json") : (0, _applicationConfig.getApplicationConfig)().defaultJsonName;
  downloadFile(fileBlob, fileName);
}
function exportHtml(state, options) {
  var userMapboxToken = options.userMapboxToken,
    exportMapboxAccessToken = options.exportMapboxAccessToken,
    mode = options.mode;
  var data = _objectSpread(_objectSpread({}, getMapJSON(state)), {}, {
    mapboxApiAccessToken: (userMapboxToken || '') !== '' ? userMapboxToken : exportMapboxAccessToken,
    mode: mode
  });
  var fileBlob = new _window.Blob([(0, _exportMapHtml.exportMapToHTML)(data)], {
    type: 'text/html'
  });
  downloadFile(fileBlob, state.appName ? "".concat(state.appName, ".html") : (0, _applicationConfig.getApplicationConfig)().defaultHtmlName);
}
function exportMap(state) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _applicationConfig.getApplicationConfig)().defaultExportJsonSettings;
  var imageDataUri = state.uiState.exportImage.imageDataUri;
  var thumbnail = imageDataUri ? dataURItoBlob(imageDataUri) : null;
  var mapToSave = getMapJSON(state, options);
  return {
    map: mapToSave,
    thumbnail: thumbnail
  };
}
var exporters = {
  exportImage: exportImage,
  exportJson: exportJson,
  exportHtml: exportHtml
};
var _default = exports["default"] = exporters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,