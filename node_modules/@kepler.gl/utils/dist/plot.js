"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adjustValueToAnimationWindow = adjustValueToAnimationWindow;
exports.binByTime = binByTime;
exports.getAggregationOptiosnBasedOnField = void 0;
exports.getBinThresholds = getBinThresholds;
exports.getChartTitle = getChartTitle;
exports.getDefaultPlotType = getDefaultPlotType;
exports.getFilterDataFunc = getFilterDataFunc;
exports.getLineChart = getLineChart;
exports.getPctChange = getPctChange;
exports.getRangeFilterBins = getRangeFilterBins;
exports.getTimeBins = getTimeBins;
exports.getValueAggrFunc = void 0;
exports.histogramFromDomain = histogramFromDomain;
exports.histogramFromOrdinal = histogramFromOrdinal;
exports.histogramFromThreshold = histogramFromThreshold;
exports.histogramFromValues = histogramFromValues;
exports.isPercentField = isPercentField;
exports.normalizeValue = normalizeValue;
exports.runGpuFilterForPlot = runGpuFilterForPlot;
exports.snapToMarks = snapToMarks;
exports.splitSeries = splitSeries;
exports.updateAggregationByField = updateAggregationByField;
exports.updateRangeFilterPlotType = updateRangeFilterPlotType;
exports.updateTimeFilterPlotType = updateTimeFilterPlotType;
exports.validBin = validBin;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _d3Array = require("d3-array");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _time = require("./time");
var _moment = _interopRequireDefault(require("moment"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _dataUtils = require("./data-utils");
var _aggregation = require("./aggregation");
var _strings = require("./strings");
var _format = require("./format");
var _colorUtils = require("./color-utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// TODO kepler-table module isn't accessible from utils. Add compatible interface to types

/**
 *
 * @param thresholds
 * @param values
 * @param indexes
 */
function histogramFromThreshold(thresholds, values, valueAccessor) {
  var filterEmptyBins = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var getBins = (0, _d3Array.histogram)().domain([thresholds[0], thresholds[thresholds.length - 1]]).thresholds(thresholds);
  if (valueAccessor) {
    getBins.value(valueAccessor);
  }

  // @ts-ignore
  var bins = getBins(values).map(function (bin) {
    return {
      count: bin.length,
      indexes: bin,
      x0: bin.x0,
      x1: bin.x1
    };
  });

  // d3-histogram ignores threshold values outside the domain
  // The first bin.x0 is always equal to the minimum domain value, and the last bin.x1 is always equal to the maximum domain value.

  // bins[0].x0 = thresholds[0];
  // bins[bins.length - 1].x1 = thresholds[thresholds.length - 1];

  // @ts-ignore
  return filterEmptyBins ? bins.filter(function (b) {
    return b.count > 0;
  }) : bins;
}

/**
 *
 * @param values
 * @param numBins
 * @param valueAccessor
 */
function histogramFromValues(values, numBins, valueAccessor) {
  var getBins = (0, _d3Array.histogram)().thresholds(numBins);
  if (valueAccessor) {
    getBins.value(valueAccessor);
  }

  // @ts-ignore d3-array types doesn't match
  return getBins(values).map(function (bin) {
    return {
      count: bin.length,
      indexes: bin,
      x0: bin.x0,
      x1: bin.x1
    };
  }).filter(function (b) {
    var x0 = b.x0,
      x1 = b.x1;
    return (0, _dataUtils.isNumber)(x0) && (0, _dataUtils.isNumber)(x1);
  });
}
function histogramFromOrdinal(domain, values, valueAccessor) {
  // @ts-expect-error to typed to expect strings
  var getBins = (0, _d3Array.histogram)().thresholds(domain);
  if (valueAccessor) {
    // @ts-expect-error to typed to expect strings
    getBins.value(valueAccessor);
  }

  // @ts-expect-error null values aren't expected
  var bins = getBins(values);

  // @ts-ignore d3-array types doesn't match
  return bins.map(function (bin) {
    return {
      count: bin.length,
      indexes: bin,
      x0: bin.x0,
      x1: bin.x0
    };
  });
}

/**
 *
 * @param domain
 * @param values
 * @param numBins
 * @param valueAccessor
 */
function histogramFromDomain(domain, values, numBins, valueAccessor) {
  var getBins = (0, _d3Array.histogram)().thresholds((0, _d3Array.ticks)(domain[0], domain[1], numBins)).domain(domain);
  if (valueAccessor) {
    getBins.value(valueAccessor);
  }

  // @ts-ignore d3-array types doesn't match
  return getBins(values).map(function (bin) {
    return {
      count: bin.length,
      indexes: bin,
      x0: bin.x0,
      x1: bin.x1
    };
  });
}

/**
 * @param filter
 * @param datasets
 * @param interval
 */
function getTimeBins(filter, datasets, interval) {
  var bins = filter.timeBins || {};
  filter.dataId.forEach(function (dataId) {
    // reuse bins if filterData did not change
    if (bins[dataId] && bins[dataId][interval]) {
      return;
    }
    var dataset = datasets[dataId];

    // do not apply current filter
    var indexes = runGpuFilterForPlot(dataset, filter);
    bins = _objectSpread(_objectSpread({}, bins), {}, (0, _defineProperty2["default"])({}, dataId, _objectSpread(_objectSpread({}, bins[dataId]), {}, (0, _defineProperty2["default"])({}, interval, binByTime(indexes, dataset, interval, filter)))));
  });
  return bins;
}
function binByTime(indexes, dataset, interval, filter) {
  // gpuFilters need to be apply to filteredIndex
  var mappedValue = (0, _time.getFilterMappedValue)(dataset, filter);
  if (!mappedValue) {
    return null;
  }
  var intervalBins = getBinThresholds(interval, filter.domain);
  var valueAccessor = function valueAccessor(idx) {
    return mappedValue[idx];
  };
  var bins = histogramFromThreshold(intervalBins, indexes, valueAccessor);
  return bins;
}
function getBinThresholds(interval, domain) {
  var timeInterval = (0, _time.intervalToFunction)(interval);
  var _domain = (0, _slicedToArray2["default"])(domain, 2),
    t0 = _domain[0],
    t1 = _domain[1];
  var floor = timeInterval.floor(t0).getTime();
  var ceiling = timeInterval.ceil(t1).getTime();
  if (!timeInterval) {
    // if time interval is not defined
    // this should not happen
    return [t0, t0 + _constants.durationDay];
  }
  var binThresholds = timeInterval.range(floor, ceiling + 1).map(function (t) {
    return _moment["default"].utc(t).valueOf();
  });
  var lastStep = binThresholds[binThresholds.length - 1];
  if (lastStep === t1) {
    // when last step equal to domain max, add one more step
    binThresholds.push(_moment["default"].utc(timeInterval.offset(lastStep)).valueOf());
  }
  return binThresholds;
}

/**
 * Run GPU filter on current filter result to generate indexes for ploting chart
 * Skip ruuning for the same field
 * @param dataset
 * @param filter
 */
function runGpuFilterForPlot(dataset, filter) {
  var skipIndexes = getSkipIndexes(dataset, filter);
  var _dataset$gpuFilter = dataset.gpuFilter,
    filterValueUpdateTriggers = _dataset$gpuFilter.filterValueUpdateTriggers,
    filterRange = _dataset$gpuFilter.filterRange,
    filterValueAccessor = _dataset$gpuFilter.filterValueAccessor,
    filteredIndex = dataset.filteredIndex;
  var getFilterValue = filterValueAccessor(dataset.dataContainer)();
  var allChannels = Object.keys(filterValueUpdateTriggers).map(function (_, i) {
    return i;
  }).filter(function (i) {
    return Object.values(filterValueUpdateTriggers)[i];
  });
  var skipAll = !allChannels.filter(function (i) {
    return !skipIndexes.includes(i);
  }).length;
  if (skipAll) {
    return filteredIndex;
  }
  var filterData = getFilterDataFunc(filterRange, getFilterValue, dataset.dataContainer, skipIndexes);
  return filteredIndex.filter(filterData);
}
function getSkipIndexes(dataset, filter) {
  // array of gpu filter names
  if (!filter) {
    return [];
  }
  var gpuFilters = Object.values(dataset.gpuFilter.filterValueUpdateTriggers);
  var valueIndex = filter.dataId.findIndex(function (id) {
    return id === dataset.id;
  });
  var filterColumn = filter.name[valueIndex];
  return gpuFilters.reduce(function (accu, item, idx) {
    if (item && filterColumn === item.name) {
      accu.push(idx);
    }
    return accu;
  }, []);
}
function getFilterDataFunc(filterRange, getFilterValue, dataContainer, skips) {
  return function (index) {
    return getFilterValue({
      index: index
    }).every(function (val, i) {
      return skips.includes(i) || val >= filterRange[i][0] && val <= filterRange[i][1];
    });
  };
}
function validBin(b) {
  return b.x0 !== undefined && b.x1 !== undefined;
}

/**
 * Use in slider, given a number and an array of numbers, return the nears number from the array.
 * Takes a value, timesteps and return the actual step.
 * @param value
 * @param marks
 */
function snapToMarks(value, marks) {
  // always use bin x0
  if (!marks.length) {
    // @ts-expect-error looking at the usage null return value isn't expected and requires extra handling in a lot of places
    return null;
  }
  var i = (0, _d3Array.bisectLeft)(marks, value);
  if (i === 0) {
    return marks[i];
  } else if (i === marks.length) {
    return marks[i - 1];
  }
  var idx = marks[i] - value < value - marks[i - 1] ? i : i - 1;
  return marks[idx];
}
function normalizeValue(val, minValue, step, marks) {
  if (marks && marks.length) {
    return snapToMarks(val, marks);
  }
  return (0, _dataUtils.roundValToStep)(minValue, step, val);
}
function isPercentField(field) {
  return field.metadata && field.metadata.numerator && field.metadata.denominator;
}
function updateAggregationByField(field, aggregation) {
  // shouldn't apply sum to percent fiele type
  // default aggregation is average
  return field && isPercentField(field) ? _constants.AGGREGATION_TYPES.average : aggregation || _constants.AGGREGATION_TYPES.average;
}
var getAgregationType = function getAgregationType(field, aggregation) {
  if (isPercentField(field)) {
    return 'mean_of_percent';
  }
  return aggregation;
};
var getAggregationAccessor = function getAggregationAccessor(field, dataContainer, fields) {
  if (isPercentField(field)) {
    var numeratorIdx = fields.findIndex(function (f) {
      return f.name === field.metadata.numerator;
    });
    var denominatorIdx = fields.findIndex(function (f) {
      return f.name === field.metadata.denominator;
    });
    return {
      getNumerator: function getNumerator(i) {
        return dataContainer.valueAt(i, numeratorIdx);
      },
      getDenominator: function getDenominator(i) {
        return dataContainer.valueAt(i, denominatorIdx);
      }
    };
  }
  return function (i) {
    return field.valueAccessor({
      index: i
    });
  };
};
var getValueAggrFunc = exports.getValueAggrFunc = function getValueAggrFunc(field, aggregation, dataset) {
  var dataContainer = dataset.dataContainer,
    fields = dataset.fields;

  // The passed-in field might not have all the fields set (e.g. valueAccessor)
  var datasetField = fields.find(function (f) {
    return field && (f.name === field || f.name === field.name);
  });
  return datasetField && aggregation ? function (bin) {
    return (0, _aggregation.aggregate)(bin.indexes, getAgregationType(datasetField, aggregation),
    // @ts-expect-error can return {getNumerator, getDenominator}
    getAggregationAccessor(datasetField, dataContainer, fields));
  } : function (bin) {
    return bin.count;
  };
};
var getAggregationOptiosnBasedOnField = exports.getAggregationOptiosnBasedOnField = function getAggregationOptiosnBasedOnField(field) {
  if (isPercentField(field)) {
    // don't show sum
    return _constants.TIME_AGGREGATION.filter(function (_ref) {
      var id = _ref.id;
      return id !== _constants.AGGREGATION_TYPES.sum;
    });
  }
  return _constants.TIME_AGGREGATION;
};
function getDelta(bins, y, _interval) {
  // if (WOW[interval]) return getWow(bins, y, interval);
  var lastBin = bins[bins.length - 1];
  return {
    delta: 'last',
    pct: lastBin ? getPctChange(y, lastBin.y) : null
  };
}
function getPctChange(y, y0) {
  if (Number.isFinite(y) && Number.isFinite(y0) && y0 !== 0) {
    return (y - y0) / y0;
  }
  return null;
}

/**
 *
 * @param datasets
 * @param filter
 */
function getLineChart(datasets, filter) {
  var _timeBins;
  var dataId = filter.dataId,
    yAxis = filter.yAxis,
    plotType = filter.plotType,
    lineChart = filter.lineChart;
  var aggregation = plotType.aggregation,
    interval = plotType.interval;
  var seriesDataId = dataId[0];
  var bins = (_timeBins = filter.timeBins) === null || _timeBins === void 0 || (_timeBins = _timeBins[seriesDataId]) === null || _timeBins === void 0 ? void 0 : _timeBins[interval];
  if (lineChart && lineChart.aggregation === aggregation && lineChart.interval === interval && lineChart.yAxis === (yAxis === null || yAxis === void 0 ? void 0 : yAxis.name) &&
  // we need to make sure we validate bins because of cross filter data changes
  (0, _isEqual["default"])(bins, lineChart === null || lineChart === void 0 ? void 0 : lineChart.bins)) {
    // don't update lineChart if plotType hasn't change
    return lineChart;
  }
  var dataset = datasets[seriesDataId];
  var getYValue = getValueAggrFunc(yAxis, aggregation, dataset);
  var init = [];
  var series = (bins || []).reduce(function (accu, bin) {
    var y = getYValue(bin);
    var delta = getDelta(accu, y, interval);
    accu.push(_objectSpread({
      x: bin.x0,
      y: y
    }, delta));
    return accu;
  }, init);
  var yDomain = (0, _d3Array.extent)(series, function (d) {
    return d.y;
  });
  var xDomain = bins ? [bins[0].x0, bins[bins.length - 1].x1] : [];

  // treat missing data as another series
  var split = splitSeries(series);
  var aggrName = _aggregation.AGGREGATION_NAME[aggregation];
  return {
    // @ts-ignore
    yDomain: yDomain,
    // @ts-ignore
    xDomain: xDomain,
    interval: interval,
    aggregation: aggregation,
    // @ts-ignore
    series: split,
    title: "".concat(aggrName, ' of ').concat(yAxis ? yAxis.name : 'Count'),
    fieldType: yAxis ? yAxis.type : 'integer',
    yAxis: yAxis ? yAxis.name : null,
    allTime: {
      title: "All Time Average",
      value: (0, _aggregation.aggregate)(series, _constants.AGGREGATION_TYPES.average, function (d) {
        return d.y;
      })
    },
    // @ts-expect-error bins is Bins[], not a Bins map. Refactor to use correct types.
    bins: bins
  };
}

// split into multiple series when see missing data
function splitSeries(series) {
  var lines = [];
  var temp = [];
  for (var i = 0; i < series.length; i++) {
    var d = series[i];
    if (!(0, _commonUtils.notNullorUndefined)(d.y) && temp.length) {
      // ends temp
      lines.push(temp);
      temp = [];
    } else if ((0, _commonUtils.notNullorUndefined)(d.y)) {
      temp.push(d);
    }
    if (i === series.length - 1 && temp.length) {
      lines.push(temp);
    }
  }
  var markers = lines.length > 1 ? series.filter(function (d) {
    return (0, _commonUtils.notNullorUndefined)(d.y);
  }) : [];
  return {
    lines: lines,
    markers: markers
  };
}
function adjustValueToAnimationWindow(state, filter) {
  var plotType = filter.plotType,
    _filter$value = (0, _slicedToArray2["default"])(filter.value, 2),
    value0 = _filter$value[0],
    value1 = _filter$value[1],
    animationWindow = filter.animationWindow;
  var interval = plotType.interval || (0, _time.getInitialInterval)(filter, state.datasets);
  var bins = getTimeBins(filter, state.datasets, interval);
  var datasetBins = bins && Object.keys(bins).length && Object.values(bins)[0][interval];
  var thresholds = (datasetBins || []).map(function (b) {
    return b.x0;
  });
  var val0 = value0;
  var val1 = value1;
  var idx;
  if (animationWindow === _constants.ANIMATION_WINDOW.interval) {
    val0 = snapToMarks(value1, thresholds);
    idx = thresholds.indexOf(val0);
    val1 = idx > -1 ? datasetBins[idx].x1 : NaN;
  } else {
    // fit current value to window
    val0 = snapToMarks(value0, thresholds);
    val1 = snapToMarks(value1, thresholds);
    if (val0 === val1) {
      idx = thresholds.indexOf(val0);
      if (idx === thresholds.length - 1) {
        val0 = thresholds[idx - 1];
      } else {
        val1 = thresholds[idx + 1];
      }
    }
  }
  var updatedFilter = _objectSpread(_objectSpread({}, filter), {}, {
    plotType: _objectSpread(_objectSpread({}, filter.plotType), {}, {
      interval: interval
    }),
    timeBins: bins,
    value: [val0, val1]
  });
  return updatedFilter;
}

/**
 * Create or update colors for a filter plot
 * @param filter
 * @param datasets
 * @param oldColorsByDataId
 */
function getFilterPlotColorsByDataId(filter, datasets, oldColorsByDataId) {
  var colorsByDataId = oldColorsByDataId || {};
  var _iterator = _createForOfIteratorHelper(filter.dataId),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var dataId = _step.value;
      if (!colorsByDataId[dataId] && datasets[dataId]) {
        colorsByDataId = _objectSpread(_objectSpread({}, colorsByDataId), {}, (0, _defineProperty2["default"])({}, dataId, (0, _colorUtils.rgbToHex)(datasets[dataId].color)));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return colorsByDataId;
}

/**
 *
 * @param filter
 * @param plotType
 * @param datasets
 * @param dataId
 */
function updateTimeFilterPlotType(filter, plotType, datasets, _dataId) {
  var nextFilter = filter;
  var nextPlotType = plotType;
  if ((0, _typeof2["default"])(nextPlotType) !== 'object' || !nextPlotType.aggregation || !nextPlotType.interval) {
    nextPlotType = getDefaultPlotType(filter, datasets);
  }
  if (filter.dataId.length > 1) {
    nextPlotType = _objectSpread(_objectSpread({}, nextPlotType), {}, {
      colorsByDataId: getFilterPlotColorsByDataId(filter, datasets, nextPlotType.colorsByDataId)
    });
  }
  nextFilter = _objectSpread(_objectSpread({}, nextFilter), {}, {
    plotType: nextPlotType
  });
  var bins = getTimeBins(nextFilter, datasets, nextPlotType.interval);
  nextFilter = _objectSpread(_objectSpread({}, nextFilter), {}, {
    timeBins: bins
  });
  if (plotType.type === _constants.PLOT_TYPES.histogram) {
    // Histogram is calculated and memoized in the chart itself
  } else if (plotType.type === _constants.PLOT_TYPES.lineChart) {
    // we should be able to move this into its own component so react will do the shallow comparison for us.
    nextFilter = _objectSpread(_objectSpread({}, nextFilter), {}, {
      lineChart: getLineChart(datasets, nextFilter)
    });
  }
  return nextFilter;
}
function getRangeFilterBins(filter, datasets, numBins) {
  var domain = filter.domain;
  if (!filter.dataId) return null;
  return filter.dataId.reduce(function (acc, dataId, datasetIdx) {
    var _filter$bins;
    if ((_filter$bins = filter.bins) !== null && _filter$bins !== void 0 && _filter$bins[dataId]) {
      // don't recalculate bins
      acc[dataId] = filter.bins[dataId];
      return acc;
    }
    var fieldName = filter.name[datasetIdx];
    if (dataId && fieldName) {
      var dataset = datasets[dataId];
      var field = dataset === null || dataset === void 0 ? void 0 : dataset.getColumnField(fieldName);
      if (dataset && field) {
        var indexes = runGpuFilterForPlot(dataset, filter);
        var valueAccessor = function valueAccessor(index) {
          return field.valueAccessor({
            index: index
          });
        };
        acc[dataId] = histogramFromDomain(domain, indexes, numBins, valueAccessor);
      }
    }
    return acc;
  }, {});
}
function updateRangeFilterPlotType(filter, plotType, datasets, _dataId) {
  var nextFilter = _objectSpread(_objectSpread({}, filter), {}, {
    plotType: plotType
  });

  // if (dataId) {
  //   // clear bins
  //   nextFilter = {
  //     ...nextFilter,
  //     bins: {
  //       ...nextFilter.bins,
  //       [dataId]: null
  //     }
  //   };
  // }

  return _objectSpread(_objectSpread({}, filter), {}, {
    plotType: plotType,
    bins: getRangeFilterBins(nextFilter, datasets, _constants.BINS)
  });
}
function getChartTitle(yAxis, plotType) {
  var yAxisName = yAxis === null || yAxis === void 0 ? void 0 : yAxis.displayName;
  var aggregation = plotType.aggregation;
  if (yAxisName) {
    return (0, _strings.capitalizeFirstLetter)("".concat(aggregation, " ").concat(yAxisName, " over Time"));
  }
  return "Count of Rows over Time";
}
function getDefaultPlotType(filter, datasets) {
  var interval = (0, _time.getInitialInterval)(filter, datasets);
  var defaultTimeFormat = (0, _format.getDefaultTimeFormat)(interval);
  return {
    interval: interval,
    defaultTimeFormat: defaultTimeFormat,
    type: _constants.PLOT_TYPES.histogram,
    aggregation: _constants.AGGREGATION_TYPES.sum
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,