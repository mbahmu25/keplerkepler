"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.observeDimensions = observeDimensions;
exports.unobserveDimensions = unobserveDimensions;
exports.useDimensions = useDimensions;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _throttle = _interopRequireDefault(require("lodash/throttle"));
var _react = require("react");
var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_THROTTLE_DELAY = 100;

// Using a single ResizeObserver for all elements can be 10x
// more performant than using a separate ResizeObserver per element
// https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/z6ienONUb5A/F5-VcUZtBAAJ
var _observerRegistry;
function getObserverRegistry() {
  if (_observerRegistry === undefined) {
    var callbacks = new Map();
    var resizeObserver = new _resizeObserverPolyfill["default"](function (entries, observer) {
      var _iterator = _createForOfIteratorHelper(entries),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _callbacks$get;
          var entry = _step.value;
          (_callbacks$get = callbacks.get(entry.target)) === null || _callbacks$get === void 0 || _callbacks$get(entry, observer);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    _observerRegistry = {
      subscribe: function subscribe(target, callback) {
        if (target instanceof Element) {
          resizeObserver.observe(target);
          callbacks.set(target, callback);
        }
      },
      unsubscribe: function unsubscribe(target) {
        if (target instanceof Element) {
          resizeObserver.unobserve(target);
          callbacks["delete"](target);
        }
      }
    };
  }
  return _observerRegistry;
}
function observeDimensions(target, handleResize) {
  var throttleDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_THROTTLE_DELAY;
  var registry = getObserverRegistry();
  var handler = throttleDelay > 0 ? (0, _throttle["default"])(handleResize, throttleDelay) : handleResize;
  registry.subscribe(target, function (entry) {
    return handler(getSize(target, entry));
  });
}
function unobserveDimensions(target) {
  var registry = getObserverRegistry();
  registry.unsubscribe(target);
}
function getSize(node, entry) {
  if (entry.contentRect) {
    var _entry$contentRect = entry.contentRect,
      width = _entry$contentRect.width,
      height = _entry$contentRect.height;
    return {
      width: width,
      height: height
    };
  }
  if (node.getBoundingClientRect) {
    var _node$getBoundingClie = node.getBoundingClientRect(),
      _width = _node$getBoundingClie.width,
      _height = _node$getBoundingClie.height;
    return {
      width: _width,
      height: _height
    };
  }
  return null;
}

/**
 * Usage example:
 * const [ref, dimensions] = useDimensions<HTMLDivElement>();
 *
 * @param throttleDelay
 * @returns
 */
function useDimensions(nodeRef) {
  var _ref2;
  var throttleDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THROTTLE_DELAY;
  var ref = (0, _react.useRef)(null);
  if (nodeRef) {
    ref = nodeRef;
  }
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    size = _useState2[0],
    setSize = _useState2[1];
  (0, _react.useEffect)(function () {
    var _ref = ref || {},
      current = _ref.current;
    if (!current) {
      return;
    }
    var didUnobserve = false;
    observeDimensions(current, function (entry) {
      if (didUnobserve) return;
      var newSize = getSize(current, entry);
      if (newSize) {
        // @ts-ignore
        setSize(newSize);
      }
    }, throttleDelay);
    return function () {
      didUnobserve = true;
      unobserveDimensions(current);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [throttleDelay, (_ref2 = ref) === null || _ref2 === void 0 ? void 0 : _ref2.current]);
  return [ref, size];
}
var _default = exports["default"] = useDimensions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,