"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiLi4vc3JjL2RhdGEtY29udGFpbmVyLWludGVyZmFjZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1Byb3RvRGF0YXNldEZpZWxkfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7RGF0YVJvdywgU2hhcmVkUm93T3B0aW9uc30gZnJvbSAnLi9kYXRhLXJvdyc7XG5cbi8qKlxuICogU3BlY2lmaWVzIGEgcmFuZ2Ugb2Ygcm93cyBvZiBhIGRhdGEgY29udGFpbmVyIHRoYXQgc2hvdWxkIGJlIHByb2Nlc3NlZC5cbiAqL1xuZXhwb3J0IHR5cGUgUmFuZ2VPcHRpb25zID0ge1xuICBzdGFydD86IG51bWJlcjtcbiAgZW5kPzogbnVtYmVyO1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUNvbnRhaW5lckludGVyZmFjZSB7XG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBkYXRhIGNvbnRhaW5lciB3aXRoIG5ldyBkYXRhLlxuICAgKiBAcGFyYW0gdXBkYXRlRGF0YSB1cGRhdGVkIGRhdGEsIGUuZy4gZm9yIGFycm93IGRhdGEgY29udGFpbmVyLCBpdCdzIGFuIGFycmF5IG9mIGFycm93IGNvbHVtbnM7IGZvciByb3cgZGF0YSBjb250YWluZXIsIGl0J3MgYW4gYXJyYXkgb2Ygcm93cy5cbiAgICovXG4gIHVwZGF0ZT8odXBkYXRlRGF0YTogYW55W10pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygcm93cyBpbiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIEByZXR1cm5zIE51bWJlciBvZiByb3dzIGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICovXG4gIG51bVJvd3MoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIEByZXR1cm5zIE51bWJlciBvZiBjb2x1bW5zIGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICovXG4gIG51bUNvbHVtbnMoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBzdG9yZWQgYXQgdGhlIHNwZWNpZmllZCBjZWxsIGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIHJvd0luZGV4IFJvdyBpbmRleC5cbiAgICogQHBhcmFtIGNvbHVtbkluZGV4IENvbHVtbiBpbmRleC5cbiAgICogQHJldHVybnMgVmFsdWUgYXQgdGhlIHNwZWNpZmllZCBjZWxsLlxuICAgKi9cbiAgdmFsdWVBdChyb3dJbmRleDogbnVtYmVyLCBjb2x1bW5JbmRleDogbnVtYmVyKTogYW55O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByb3cgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICogQHBhcmFtIHJvd0luZGV4IFJvdyBpbmRleC5cbiAgICogQHBhcmFtIHNoYXJlZFJvdyBQYXNzZWQgcm93IGlzIGZpbGxlZCB3aXRoIGNvbnRlbnRzIGZyb20gdGhlIHNwZWNpZmllZCBpbmRleCBhbmQgcmV0dXJuZWQgd2l0aG91dCBleHRyYSByb3cgYWxsb2NhdGlvbnMuXG4gICAqIEByZXR1cm5zIEEgcm93IG9iamVjdC5cbiAgICovXG4gIHJvdyhyb3dJbmRleDogbnVtYmVyLCBzaGFyZWRSb3c/OiBTaGFyZWRSb3dPcHRpb25zKTogRGF0YVJvdztcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc3BlY2lmaWVkIHJvdyBvZiB0aGUgZGF0YSBjb250YWluZXIgcmVwcmVzZW50ZWQgYXMgYW4gYXJyYXkuXG4gICAqIEBwYXJhbSByb3dJbmRleCBSb3cgaW5kZXguXG4gICAqIEByZXR1cm5zIFRoZSBzcGVjaWZpZWQgcm93IHJlcHJlc2VudGVkIGFzIGFuIGFycmF5LlxuICAgKi9cbiAgcm93QXNBcnJheShyb3dJbmRleDogbnVtYmVyKTogYW55W107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaXRlcmF0b3IgdG8gc2VxdWVudGlhbGx5IGFjY2VzcyBhbGwgcm93cyBpbiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBzaGFyZWRSb3cgSW5kaWNhdGVzIHRoYXQgYSB0ZW1wb3Jhcnkgcm93IG9iamVjdCBzaG91bGQgYmUgdXNlZC5cbiAgICogSWYgZW5hYmxlZCwgdGhlIHJldHVybmVkIHJvdyBvYmplY3QgaXMgc2hhcmVkIGJldHdlZW4gY2FsbHNcbiAgICogYW5kIG11c3RuJ3QgYmUgc3RvcmVkIHdpdGhvdXQgY2xvbmluZy5cbiAgICogUGFzc2VkIHJvdyBpcyBmaWxsZWQgd2l0aCBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIHJvdyBhbmQgcmV0dXJuZWQgb24gZWFjaCBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIEFuIGl0ZXJhdG9yIHRvIHNlcXVlbnRpYWxseSBhY2Nlc3MgYWxsIHJvd3MgaW4gdGhlIGRhdGEgY29udGFpbmVyLlxuICAgKi9cbiAgcm93cyhzaGFyZWRSb3c/OiBTaGFyZWRSb3dPcHRpb25zKTogR2VuZXJhdG9yPERhdGFSb3csIHZvaWQsIGFueT47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaXRlcmF0b3IgdG8gc2VxdWVudGlhbGx5IGFjY2VzcyBhbGwgdmFsdWVzIGluIHRoZSBzcGVjaWZpZWQgY29sdW1uIG9mIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGNvbHVtbkluZGV4IENvbHVtbiBpbmRleC5cbiAgICogQHJldHVybnMgQW4gaXRlcmF0b3IgdG8gYWxsIHZhbHVlcyBpbiB0aGUgc3BlY2lmaWVkIGNvbHVtbiBvZiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqL1xuICBjb2x1bW4oY29sdW1uSW5kZXg6IG51bWJlcik6IEdlbmVyYXRvcjxhbnksIHZvaWQsIGFueT47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbHVtbiBvYmplY3QgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICogQHBhcmFtIGNvbHVtbkluZGV4IENvbHVtbiBpbmRleC5cbiAgICogQHJldHVybnMgVGhlIGNvbHVtbiBvYmplY3QgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICovXG4gIGdldENvbHVtbj8oY29sdW1uSW5kZXg6IG51bWJlcik6IHVua25vd247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpZWxkIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKiBAcGFyYW0gY29sdW1uSW5kZXggQ29sdW1uIGluZGV4LlxuICAgKiBAcmV0dXJucyBUaGUgZmllbGQgb2JqZWN0IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAqL1xuICBnZXRGaWVsZD8oY29sdW1uSW5kZXg6IG51bWJlcik6IFByb3RvRGF0YXNldEZpZWxkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIGRhdGEgb2JqZWN0LlxuICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIGRhdGEgb2JqZWN0LlxuICAgKi9cbiAgZ2V0VGFibGU/KCk6IHVua25vd247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY29udGVudHMgb2YgdGhlIGRhdGEgY29udGFpbmVyIGFzIGEgdHdvLWRpbWVuc2lvbmFsIGFycmF5LlxuICAgKiBAcmV0dXJucyBEYXRhLlxuICAgKi9cbiAgZmxhdHRlbkRhdGEoKTogYW55W11bXTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFuIGFycmF5IG9mIGluZGljZXMgd2hlcmUgZWFjaCBpbmRleCByZXByZXNlbnRzIGEgcm93IGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgaW5kaWNlcy5cbiAgICovXG4gIGdldFBsYWluSW5kZXgoKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgcG9wdWxhdGVkIHdpdGggdGhlIHJlc3VsdHMgb2YgY2FsbGluZyB0aGUgcHJvdmlkZWQgY2FsbGJhY2tcbiAgICogb24gZXZlcnkgcm93IGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGZ1bmMgQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgZm9yIGV2ZXJ5IHJvdyBvZiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIFRoZSBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogLSByb3c6IFRoZSBjdXJyZW50IHJvdyBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIGRhdGEgY29udGFpbmVyLlxuICAgKiAtIGluZGV4OiBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgcm93IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBzaGFyZWRSb3cgVHJ1dGh5IHZhbHVlIGluZGljYXRlcyB0aGF0IGEgc2hhcmVkIHJvdyBvYmplY3Qgc2hvdWxkIGJlIHVzZWQuXG4gICAqIE1ha2Ugc3VyZSB0aGUgZnVuYyBjYWxsYmFjayBkb2Vzbid0IHN0b3JlIHRoZSByb3cgb2JqZWN0IGluIHN1Y2ggY2FzZSxcbiAgICogYW5kIGNsb25lIHRoZSByb3cgaW4gY2FzZSB5b3UgbmVlZCB0byBzdG9yZSBpdC5cbiAgICogQHBhcmFtIG9wdGlvbnMgU3BlY2lmeSBzdGFydCBhbmQgZW5kIHJvdyBpbmRpY2VzIHRoYXQgc2hvdWxkIGJlIG1hcHBlZC5cbiAgICogQHJldHVybnMgQSBuZXcgYXJyYXkgd2l0aCBlYWNoIGVsZW1lbnQgYmVpbmcgdGhlIHJlc3VsdCBvZiB0aGUgZnVuYyBjYWxsYmFjay5cbiAgICovXG4gIG1hcChcbiAgICBmdW5jOiAocm93OiBEYXRhUm93LCBpbmRleDogbnVtYmVyKSA9PiBhbnksXG4gICAgc2hhcmVkUm93PzogU2hhcmVkUm93T3B0aW9ucyxcbiAgICBvcHRpb25zPzogUmFuZ2VPcHRpb25zXG4gICk6IGFueVtdO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IHBvcHVsYXRlZCB3aXRoIHRoZSByZXN1bHRzIG9mIGNhbGxpbmcgdGhlIHByb3ZpZGVkIGNhbGxiYWNrLlxuICAgKiBUaGUgY2FsbGJhY2sgaXMgY2FsbGVkIGZvciBldmVyeSByb3cgaW4gdGhlIGRhdGFzZXQsIGJ1dCBvbmx5IHtpbmRleH0gb2JqZWN0IGlzIHBhc3NlZC5cbiAgICogQHBhcmFtIGZ1bmMgQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgZm9yIGV2ZXJ5IHJvdyBvZiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zIFNwZWNpZnkgc3RhcnQgYW5kIGVuZCByb3cgaW5kaWNlcyB0aGF0IHNob3VsZCBiZSBtYXBwZWQuXG4gICAqIEByZXR1cm5zIEEgbmV3IGFycmF5IHdpdGggZWFjaCBlbGVtZW50IGJlaW5nIHRoZSByZXN1bHQgb2YgdGhlIGZ1bmMgY2FsbGJhY2suXG4gICAqL1xuICBtYXBJbmRleChcbiAgICBmdW5jOiAoe2luZGV4fToge2luZGV4OiBudW1iZXJ9LCBkYXRhQ29udGFpbmVyOiBEYXRhQ29udGFpbmVySW50ZXJmYWNlKSA9PiBhbnksXG4gICAgb3B0aW9ucz86IFJhbmdlT3B0aW9uc1xuICApOiBhbnlbXTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHJvdyBpbiB0aGUgcHJvdmlkZWQgZGF0YSBjb250YWluZXIgdGhhdCBzYXRpc2ZpZXMgdGhlIHByb3ZpZGVkIHRlc3RpbmcgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBmdW5jIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZWFjaCB2YWx1ZSBpbiB0aGUgYXJyYXkuXG4gICAqIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogLSByb3c6IFRoZSBjdXJyZW50IHJvdyBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIGRhdGEgY29udGFpbmVyLlxuICAgKiAtIGluZGV4OiBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgcm93IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIEBwYXJhbSBzaGFyZWRSb3cgVHJ1dGh5IHZhbHVlIGluZGljYXRlcyB0aGF0IGEgc2hhcmVkIHJvdyBvYmplY3Qgc2hvdWxkIGJlIHVzZWQuXG4gICAqIE1ha2Ugc3VyZSB0aGUgZnVuYyBjYWxsYmFjayBkb2Vzbid0IHN0b3JlIHRoZSByb3cgb2JqZWN0IGluIHN1Y2ggY2FzZSxcbiAgICogYW5kIGNsb25lIHRoZSByb3cgaW4gY2FzZSB5b3UgbmVlZCB0byBzdG9yZSBpdC5cbiAgICogQHJldHVybnMgRmlyc3QgbWF0Y2hpbmcgcm93IG9yIHVuZGVmaW5lZCBpZiBubyByb3dzIHNhdGlzZnkgdGhlIHRlc3RpbmcgZnVuY3Rpb24uXG4gICAqL1xuICBmaW5kKFxuICAgIGZ1bmM6IChyb3c6IERhdGFSb3csIGluZGV4OiBudW1iZXIpID0+IGFueSxcbiAgICBzaGFyZWRSb3c/OiBTaGFyZWRSb3dPcHRpb25zXG4gICk6IERhdGFSb3cgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGEgcmVkdWNlciBmdW5jdGlvbiBvbiBlYWNoIGVsZW1lbnQgb2YgdGhlIGRhdGEgY29udGFpbmVyLCByZXN1bHRpbmcgaW4gc2luZ2xlIG91dHB1dCB2YWx1ZS5cbiAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGVhY2ggcm93IGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICogVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgKiAtIGFjYzogVGhlIGFjY3VtdWxhdG9yIGFjY3VtdWxhdGVzIGZ1bmMncyByZXR1cm4gdmFsdWVzLlxuICAgKiAtIHJvdzogVGhlIGN1cnJlbnQgcm93IGJlaW5nIHByb2Nlc3NlZCBpbiB0aGUgZGF0YSBjb250YWluZXIuXG4gICAqIC0gaW5kZXg6IFRoZSBpbmRleCBvZiB0aGUgY3VycmVudCByb3cgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZSBkYXRhIGNvbnRhaW5lci5cbiAgICogQHBhcmFtIGluaXRpYWxWYWx1ZSBBIHZhbHVlIHRvIHVzZSBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGZpcnN0IGNhbGwgb2YgdGhlIGZ1bmMuXG4gICAqIEBwYXJhbSBzaGFyZWRSb3cgVHJ1dGh5IHZhbHVlIGluZGljYXRlcyB0aGF0IGEgc2hhcmVkIHJvdyBvYmplY3Qgc2hvdWxkIGJlIHVzZWQuXG4gICAqIE1ha2Ugc3VyZSB0aGUgZnVuYyBjYWxsYmFjayBkb2Vzbid0IHN0b3JlIHRoZSByb3cgb2JqZWN0IGluIHN1Y2ggY2FzZSxcbiAgICogYW5kIGNsb25lIHRoZSByb3cgaW4gY2FzZSB5b3UgbmVlZCB0byBzdG9yZSBpdC5cbiAgICogQHJldHVybnMgVGhlIHNpbmdsZSB2YWx1ZSB0aGF0IHJlc3VsdHMgZnJvbSB0aGUgcmVkdWN0aW9uLlxuICAgKi9cbiAgcmVkdWNlKFxuICAgIGZ1bmM6IChhY2M6IGFueSwgcm93OiBEYXRhUm93LCBpbmRleDogbnVtYmVyKSA9PiBhbnksXG4gICAgaW5pdGlhbFZhbHVlOiBhbnksXG4gICAgc2hhcmVkUm93PzogU2hhcmVkUm93T3B0aW9uc1xuICApOiBhbnk7XG59XG4iXSwibWFwcGluZ3MiOiIiLCJpZ25vcmVMaXN0IjpbXX0=