"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeDeckEffects = computeDeckEffects;
exports.fixEffectOrder = void 0;
exports.reorderEffectOrder = reorderEffectOrder;
exports.validateEffectParameters = validateEffectParameters;
var _suncalc = _interopRequireDefault(require("suncalc"));
var _cloneDeep = _interopRequireDefault(require("lodash/cloneDeep"));
var _constants = require("@kepler.gl/constants");
var _commonUtils = require("@kepler.gl/common-utils");
var _utils = require("./utils");
var _dataUtils = require("./data-utils");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// TODO isolate types - depends on @kepler.gl/schemas

function computeDeckEffects(_ref) {
  var visState = _ref.visState,
    mapState = _ref.mapState;
  // TODO: 1) deck effects per deck context 2) preserved between draws
  return visState.effectOrder.map(function (effectId) {
    var effect = (0, _utils.findById)(effectId)(visState.effects);
    if (effect !== null && effect !== void 0 && effect.isEnabled && effect.deckEffect) {
      updateEffect({
        visState: visState,
        mapState: mapState,
        effect: effect
      });
      return effect.deckEffect;
    }
    return null;
  }).filter(function (effect) {
    return effect;
  });
}

/**
 * Always keep light & shadow effect at the top
 */
var fixEffectOrder = exports.fixEffectOrder = function fixEffectOrder(effects, effectOrder) {
  var lightShadowEffect = effects.find(function (effect) {
    return effect.type === _constants.LIGHT_AND_SHADOW_EFFECT.type;
  });
  if (lightShadowEffect) {
    var ind = effectOrder.indexOf(lightShadowEffect.id);
    if (ind > 0) {
      effectOrder.splice(ind, 1);
      effectOrder.unshift(lightShadowEffect.id);
    }
  }
  return effectOrder;
};
function reorderEffectOrder(effectOrder, originEffectId, destinationEffectId) {
  var activeIndex = effectOrder.indexOf(originEffectId);
  var overIndex = effectOrder.indexOf(destinationEffectId);
  return (0, _commonUtils.arrayMove)(effectOrder, activeIndex, overIndex);
}

/**
 * Check if the current time is daytime at the given location
 * @param {number} lat Latitude
 * @param {number} lon Longitude
 * @param {number} timestamp Milliseconds since the Unix Epoch
 * @returns boolean
 */
function isDaytime(lat, lon, timestamp) {
  var date = new Date(timestamp);
  var _SunCalc$getTimes = _suncalc["default"].getTimes(date, lat, lon),
    sunrise = _SunCalc$getTimes.sunrise,
    sunset = _SunCalc$getTimes.sunset;
  return date >= sunrise && date <= sunset;
}

/**
 * Update effect to match latest vis and map states
 */
function updateEffect(_ref2) {
  var visState = _ref2.visState,
    mapState = _ref2.mapState,
    effect = _ref2.effect;
  if (effect.type === _constants.LIGHT_AND_SHADOW_EFFECT.type) {
    var timestamp = effect.parameters.timestamp;
    var timeMode = effect.parameters.timeMode;
    var sunLight = effect.deckEffect.directionalLights[0];

    // set timestamp for shadow
    if (timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.current) {
      timestamp = Date.now();
      sunLight.timestamp = timestamp;
    } else if (timeMode === _constants.LIGHT_AND_SHADOW_EFFECT_TIME_MODES.animation) {
      var _visState$animationCo;
      timestamp = (_visState$animationCo = visState.animationConfig.currentTime) !== null && _visState$animationCo !== void 0 ? _visState$animationCo : 0;
      if (!timestamp) {
        var filter = visState.filters.find(function (filter) {
          return filter.type === _constants.FILTER_TYPES.timeRange && (filter.view === _constants.FILTER_VIEW_TYPES.enlarged || filter.syncedWithLayerTimeline);
        });
        if (filter) {
          var _filter$value$, _filter$value;
          timestamp = (_filter$value$ = (_filter$value = filter.value) === null || _filter$value === void 0 ? void 0 : _filter$value[0]) !== null && _filter$value$ !== void 0 ? _filter$value$ : 0;
        }
      }
      sunLight.timestamp = timestamp;
    }

    // output uniform shadow during nighttime
    if (isDaytime(mapState.latitude, mapState.longitude, timestamp)) {
      effect.deckEffect.outputUniformShadow = false;
      sunLight.intensity = effect.parameters.sunLightIntensity;
    } else {
      effect.deckEffect.outputUniformShadow = true;
      sunLight.intensity = 0;
    }
  }
}

/**
 * Validates parameters for an effect, clamps numbers to allowed ranges
 * or applies default values in case of wrong non-numeric values.
 * All unknown properties aren't modified.
 * @param parameters Parameters candidate for an effect.
 * @param effectDescription Description of an effect.
 * @returns
 */
function validateEffectParameters() {
  var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var effectDescription = arguments.length > 1 ? arguments[1] : undefined;
  var result = (0, _cloneDeep["default"])(parameters);
  effectDescription.forEach(function (description) {
    var defaultValue = description.defaultValue,
      name = description.name,
      type = description.type,
      min = description.min,
      max = description.max;
    if (!Object.prototype.hasOwnProperty.call(result, name)) return;
    var property = result[name];
    if (type === 'color' || type === 'array') {
      if (!Array.isArray(defaultValue)) return;
      if (property.length !== (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length)) {
        result[name] = defaultValue;
        return;
      }
      defaultValue.forEach(function (v, i) {
        var _defaultValue$i;
        var value = property[i];
        value = Number.isFinite(value) ? (0, _dataUtils.clamp)([min, max], value) : (_defaultValue$i = defaultValue[i]) !== null && _defaultValue$i !== void 0 ? _defaultValue$i : min;
        if (value !== undefined) {
          property[i] = value;
        }
      });
      return;
    }
    var value = Number.isFinite(property) ? (0, _dataUtils.clamp)([min, max], property) : defaultValue !== null && defaultValue !== void 0 ? defaultValue : min;
    if (value !== undefined) {
      result[name] = value;
    }
  });
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,