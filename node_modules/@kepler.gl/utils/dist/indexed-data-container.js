"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexedDataContainer = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _dataRow = require("./data-row");
var _marked = /*#__PURE__*/_regenerator["default"].mark(rowsIterator),
  _marked2 = /*#__PURE__*/_regenerator["default"].mark(columnIterator); // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * @param dataContainer
 * @param indices
 * @param sharedRow
 * @returns
 */
function rowsIterator(dataContainer, indices, sharedRow) {
  var numRows, rowIndex, mappedRowIndex;
  return _regenerator["default"].wrap(function rowsIterator$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        numRows = indices.length;
        rowIndex = 0;
      case 2:
        if (!(rowIndex < numRows)) {
          _context.next = 9;
          break;
        }
        mappedRowIndex = indices[rowIndex];
        _context.next = 6;
        return dataContainer.row(mappedRowIndex, sharedRow);
      case 6:
        ++rowIndex;
        _context.next = 2;
        break;
      case 9:
      case "end":
        return _context.stop();
    }
  }, _marked);
}

/**
 * @param dataContainer
 * @param indices
 * @param columnIndex
 * @returns
 */
function columnIterator(dataContainer, indices, columnIndex) {
  var numRows, rowIndex, mappedRowIndex;
  return _regenerator["default"].wrap(function columnIterator$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        numRows = indices.length;
        rowIndex = 0;
      case 2:
        if (!(rowIndex < numRows)) {
          _context2.next = 9;
          break;
        }
        mappedRowIndex = indices[rowIndex];
        _context2.next = 6;
        return dataContainer.valueAt(mappedRowIndex, columnIndex);
      case 6:
        ++rowIndex;
        _context2.next = 2;
        break;
      case 9:
      case "end":
        return _context2.stop();
    }
  }, _marked2);
}

/**
 * A data container wrapper around another data container.
 * You have to pass an array of indices to reference rows in the parent data container.
 * For example indices [3, 4, 6, 8] means that IndexedDataContainer is going to have
 * 4 rows and row(2) points to 6th row in the referenced data container.
 */
var IndexedDataContainer = exports.IndexedDataContainer = /*#__PURE__*/function () {
  function IndexedDataContainer(parentDataContainer, indices) {
    (0, _classCallCheck2["default"])(this, IndexedDataContainer);
    (0, _defineProperty2["default"])(this, "_parentDataContainer", void 0);
    (0, _defineProperty2["default"])(this, "_indices", void 0);
    this._parentDataContainer = parentDataContainer;
    this._indices = indices;
  }
  return (0, _createClass2["default"])(IndexedDataContainer, [{
    key: "numRows",
    value: function numRows() {
      return this._indices.length;
    }
  }, {
    key: "numColumns",
    value: function numColumns() {
      return this._parentDataContainer.numColumns();
    }

    /**
     * Remaps a local index to an index in the parent dataset
     * @param rowIndex
     * @returns number
     */
  }, {
    key: "_mappedRowIndex",
    value: function _mappedRowIndex(rowIndex) {
      return this._indices[rowIndex];
    }
  }, {
    key: "valueAt",
    value: function valueAt(rowIndex, columnIndex) {
      return this._parentDataContainer.valueAt(this._mappedRowIndex(rowIndex), columnIndex);
    }
  }, {
    key: "row",
    value: function row(rowIndex, sharedRow) {
      return this._parentDataContainer.row(this._mappedRowIndex(rowIndex), sharedRow);
    }
  }, {
    key: "rowAsArray",
    value: function rowAsArray(rowIndex) {
      return this._parentDataContainer.rowAsArray(this._mappedRowIndex(rowIndex));
    }
  }, {
    key: "rows",
    value: function rows(sharedRow) {
      return rowsIterator(this._parentDataContainer, this._indices, sharedRow);
    }
  }, {
    key: "column",
    value: function column(columnIndex) {
      return columnIterator(this._parentDataContainer, this._indices, columnIndex);
    }
  }, {
    key: "getPlainIndex",
    value: function getPlainIndex() {
      return this._indices.map(function (_, i) {
        return i;
      });
    }
  }, {
    key: "flattenData",
    value: function flattenData() {
      var _this = this;
      var tSharedRow = _dataRow.DataRow.createSharedRow(true);
      return this._indices.map(function (_, i) {
        return _this.row(i, tSharedRow).values();
      }, this);
    }
  }, {
    key: "map",
    value: function map(func, sharedRow) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _options$start = options.start,
        start = _options$start === void 0 ? 0 : _options$start,
        _options$end = options.end,
        end = _options$end === void 0 ? this.numRows() : _options$end;
      var endRow = Math.min(this.numRows(), end);
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      var out = [];
      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        out.push(func(row, rowIndex));
      }
      return out;
    }
  }, {
    key: "mapIndex",
    value: function mapIndex(func) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$start2 = options.start,
        start = _options$start2 === void 0 ? 0 : _options$start2,
        _options$end2 = options.end,
        end = _options$end2 === void 0 ? this.numRows() : _options$end2;
      var endRow = Math.min(this.numRows(), end);
      var out = [];
      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {
        out.push(func({
          index: this._mappedRowIndex(rowIndex)
        }, this._parentDataContainer));
      }
      return out;
    }
  }, {
    key: "find",
    value: function find(func, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      for (var rowIndex = 0; rowIndex < this.numRows(); ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        if (func(row, rowIndex)) {
          return row;
        }
      }
      return undefined;
    }
  }, {
    key: "reduce",
    value: function reduce(func, initialValue, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      for (var rowIndex = 0; rowIndex < this._indices.length; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        initialValue = func(initialValue, row, rowIndex);
      }
      return initialValue;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,