"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCustomPaletteColor = addCustomPaletteColor;
exports.addNewQuantativeColorBreakAtIndex = addNewQuantativeColorBreakAtIndex;
exports.colorMaybeToHex = colorMaybeToHex;
exports.colorMaybeToRGB = colorMaybeToRGB;
exports.colorRangeBackwardCompatibility = colorRangeBackwardCompatibility;
exports.createLinearGradient = createLinearGradient;
exports.hasColorMap = hasColorMap;
exports.hexToRgb = hexToRgb;
exports.initializeCustomPalette = initializeCustomPalette;
exports.interpolateHex = interpolateHex;
exports.isHexColor = isHexColor;
exports.isQuaPalette = isQuaPalette;
exports.isRgbColor = isRgbColor;
exports.normalizeColor = normalizeColor;
exports.paletteIsColorBlindSafe = paletteIsColorBlindSafe;
exports.paletteIsSteps = paletteIsSteps;
exports.paletteIsType = paletteIsType;
exports.removeCustomPaletteColor = removeCustomPaletteColor;
exports.reverseColorRange = reverseColorRange;
exports.rgbToHex = rgbToHex;
exports.sortCustomPaletteColor = sortCustomPaletteColor;
exports.updateColorRangeByMatchingPalette = updateColorRangeByMatchingPalette;
exports.updateColorRangeBySelectedPalette = updateColorRangeBySelectedPalette;
exports.updateCustomColorRangeByColorUI = updateCustomColorRangeByColorUI;
exports.updateCustomPaletteColor = updateCustomPaletteColor;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _constants = require("@kepler.gl/constants");
var _commonUtils = require("@kepler.gl/common-utils");
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");
var _utils = require("./utils");
var _console = _interopRequireDefault(require("global/console"));
var _excluded = ["colors"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * get r g b from hex code
 *
 * @param hex
 * @returns array of r g bs
 */
function hexToRgb(hex) {
  var result = isHexColor(hex);
  if (!result) {
    return [0, 0, 0];
  }
  var r = parseInt(result[1], 16);
  var g = parseInt(result[2], 16);
  var b = parseInt(result[3], 16);
  return [r, g, b];
}
function isHexColor(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result;
}
function PadNum(c) {
  var hex = c.toString(16);
  return hex.length === 1 ? "0".concat(hex) : hex;
}

/**
 * get hex from r g b
 *
 * @param rgb
 * @returns hex string
 */
function rgbToHex(_ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 3),
    r = _ref2[0],
    g = _ref2[1],
    b = _ref2[2];
  return "#".concat([r, g, b].map(function (n) {
    return PadNum(n);
  }).join('')).toUpperCase();
}

/**
 * Whether color range has custom color map
 */
function hasColorMap(colorRange) {
  return Array.isArray(colorRange.colorMap) && Boolean(colorRange.colorMap.length);
}

/**
 * given a list of rgb arrays it will generate a linear gradient css rule
 * @param direction
 * @param colors
 * @return
 */
function createLinearGradient(direction, colors) {
  var step = parseFloat((100.0 / colors.length).toFixed(2));
  var bands = colors.map(function (rgb, index) {
    return "rgba(".concat(rgb.join(','), ", 1) ").concat(step * index, "%, rgba(").concat(rgb.join(','), ", 1) ").concat(step * (index + 1), "%");
  });
  return "linear-gradient(to ".concat(direction, ", ").concat(bands.join(','), ")");
}

/**
 * Convert color to RGB
 */
function colorMaybeToRGB(color) {
  if (isRgbColor(color)) {
    return color;
  }
  if (typeof color === 'string') {
    var rgbObj = (0, _d3Color.rgb)(color);
    if (Number.isFinite(rgbObj === null || rgbObj === void 0 ? void 0 : rgbObj.r) && Number.isFinite(rgbObj === null || rgbObj === void 0 ? void 0 : rgbObj.g) && Number.isFinite(rgbObj === null || rgbObj === void 0 ? void 0 : rgbObj.b)) {
      return [rgbObj.r, rgbObj.g, rgbObj.b];
    }
  }
  return null;
}

/**
 * Whether color is rgb
 * @returns
 */
function isRgbColor(color) {
  return Boolean(color && Array.isArray(color) && color.length === 3 && color.every(function (n) {
    return Number.isFinite(n) && n <= 255 && n >= 0;
  }));
}

/**
 * Take color values in 0-255 range and map to [0, 1]
 */
function normalizeColor(color) {
  return color.map(function (component) {
    return component / 255.0;
  });
}

/**
 * Convert color to Hex
 */
function colorMaybeToHex(color) {
  var rgbColor = colorMaybeToRGB(color);
  if (rgbColor) return rgbToHex(rgbColor);
  return '#000000';
}

/**
 * Convert color to Hex
 */

function interpolateHex(hex1, hex2) {
  return (0, _d3Color.rgb)((0, _d3Interpolate.interpolate)(hex1, hex2)(0.5)).hex().toUpperCase();
}
function addNewCategoricalStepAtIndex(colorMap, index, newColor) {
  if (!Array.isArray(colorMap) || !colorMap.length) {
    return colorMap;
  }
  var newColorMap = colorMap.map(function (_ref3) {
    var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
      val = _ref4[0],
      c = _ref4[1];
    return [Array.isArray(val) ? (0, _toConsumableArray2["default"])(val) : val, c];
  });
  newColorMap = (0, _utils.arrayInsert)(newColorMap, index + 1, [null, newColor]);
  return newColorMap;
}
function addNewQuantativeColorBreakAtIndex(colorMap, index, newColors) {
  if (!Array.isArray(colorMap) || !colorMap.length) {
    return colorMap;
  }
  if (colorMap.length < 2) {
    // less then 2, add 1 at end
    // however shouldn't allow delete when there are 2
    return newColors.map(function (c, i) {
      return i === 0 ? colorMap[i] : [null, c];
    });
  }

  // breaks should be 1 less than colors
  var breaks = colorMap.map(function (cm) {
    return cm[0];
  }).slice(0, colorMap.length - 1);

  // insert new break
  var newValue = index >= breaks.length - 1 ? breaks[breaks.length - 1] + (breaks.length > 1 ? breaks[breaks.length - 1] - breaks[breaks.length - 2] : 0) : (breaks[index] + breaks[index + 1]) / 2;
  var newBreaks = (0, _utils.arrayInsert)(breaks, index + 1, newValue);

  // asign breaks to color
  return newColors.map(function (c, i) {
    return i === newColors.length - 1 ? [null, c] : [newBreaks[i] === undefined ? null : newBreaks[i], c];
  });
}

/**
 * Add a new color to custom palette
 */
function addCustomPaletteColor(customPalette, index) {
  var colors = customPalette.colors,
    colorMap = customPalette.colorMap;
  var update = {};
  var newColor = index === colors.length - 1 ? colors[index] : interpolateHex(colors[index], colors[index + 1]);
  update.colors = (0, _utils.arrayInsert)(colors, index + 1, newColor);

  // add color to colorMap
  if (colorMap) {
    update.colorMap = customPalette.type === 'customOrdinal' ? addNewCategoricalStepAtIndex(colorMap, index, newColor) : addNewQuantativeColorBreakAtIndex(colorMap, index, update.colors);
  }
  return _objectSpread(_objectSpread({}, customPalette), update);
}
function replaceColorsInColorRange(colorRange, newColors) {
  var oldColors = colorRange.colors;
  var updated = _objectSpread(_objectSpread({}, colorRange), {}, {
    colors: newColors
  });

  // update color map
  // keep value, replace color
  if (Array.isArray(updated.colorMap)) {
    updated.colorMap = updated.colorMap.map(function (cm, i) {
      return [cm[0], newColors[i]];
    });
  }
  // update colorlegends
  // keep value, replace color
  if (updated.colorLegends) {
    updated.colorLegends = Object.keys(updated.colorLegends).reduce(function (accu, key) {
      var colorIdx = oldColors.findIndex(function (c) {
        return c === key;
      });
      var newColor = newColors[colorIdx];
      return newColor ? _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, newColor, updated.colorLegends[key])) : accu;
    }, {});
  }
  return updated;
}

/**
 * Sort custom palette
 */
function sortCustomPaletteColor(customPalette, oldIndex, newIndex) {
  var colors = customPalette.colors;
  var newColors = (0, _commonUtils.arrayMove)(colors, oldIndex, newIndex);
  var update = replaceColorsInColorRange(customPalette, newColors);

  // @ts-ignore
  return _objectSpread(_objectSpread({}, customPalette), update);
}

/**
 * remove a color in custom palette at index
 */
function removeCustomPaletteColor(customPalette, index) {
  var colors = customPalette.colors,
    colorMap = customPalette.colorMap,
    colorLegends = customPalette.colorLegends;
  var oldValue = colors[index];
  var update = {};
  update.colors = (0, _toConsumableArray2["default"])(colors);
  if (update.colors.length > 1) {
    update.colors.splice(index, 1);
  }
  // update color map
  if (Array.isArray(colorMap)) {
    // find colorMap index
    var colorMapIndex = colorMap.findIndex(function (cm) {
      return cm[1] === oldValue;
    });
    if (colorMapIndex >= 0) {
      update.colorMap = (0, _toConsumableArray2["default"])(colorMap);
      update.colorMap.splice(colorMapIndex, 1);
    }
  }
  // update color legend
  if (colorLegends !== null && colorLegends !== void 0 && colorLegends[oldValue]) {
    update.colorLegends = _objectSpread({}, colorLegends);
    delete update.colorLegends[oldValue];
  }
  return _objectSpread(_objectSpread({}, customPalette), update);
}

/**
 * Update a color in custom palette at index
 */
function updateCustomPaletteColor(customPalette, index, newValue) {
  var colors = customPalette.colors;
  var hex = newValue.toUpperCase();
  var newColors = (0, _toConsumableArray2["default"])(colors);
  newColors[index] = hex;
  var update = replaceColorsInColorRange(customPalette, newColors);

  // @ts-ignore
  return _objectSpread(_objectSpread({}, customPalette), update);
}

/**
 * Get a reversed colorRange
 */
function reverseColorRange(reversed, colorRange) {
  var newColors = colorRange === null || colorRange === void 0 ? void 0 : colorRange.colors.slice().reverse();
  var updated = replaceColorsInColorRange(colorRange, newColors);
  updated.reversed = reversed;
  return updated;
}

/**
 * Whether palette matches current ColorBlindSafe config
 */
function paletteIsColorBlindSafe(palette, colorBlindSafe) {
  return !colorBlindSafe || colorBlindSafe && palette.colorBlindSafe;
}

/**
 * Whether palette matches current steps config
 */
function isQuaPalette(palette) {
  return palette.type === _constants.PALETTE_TYPES.QUA;
}

/**
 * Whether palette matches current steps config
 */
function paletteIsSteps(palette, steps) {
  return !isQuaPalette(palette) || palette.maxStep >= steps;
}

/**
 * Whether palette matches current type config
 */
function paletteIsType(palette, type) {
  return type === 'all' || type === palette.type;
}
/**
 * Find best match palette based on config, update color range by it
 */
function updateColorRangeByMatchingPalette(currentColorRange, config) {
  var steps = config.steps,
    colorBlindSafe = config.colorBlindSafe,
    type = config.type;
  var matchingPalette = _constants.KEPLER_COLOR_PALETTES.filter(function (palette) {
    return (
      // palette match type
      paletteIsType(palette, type) &&
      // palette has same step
      paletteIsSteps(palette, steps) &&
      // palette is colorBlindSafe
      paletteIsColorBlindSafe(palette, colorBlindSafe)
    );
  });
  var bestMatch = matchingPalette.length ? matchingPalette.find(function (p) {
    return p.name === currentColorRange.name;
  }) || matchingPalette[0] : null;
  if (bestMatch) {
    return updateColorRangeBySelectedPalette(currentColorRange, bestMatch, config);
  }
  // we do nothing
  _console["default"].warn("we cant find any preset palette matches requirments: steps=".concat(steps, " && colorBlindSafe=").concat(colorBlindSafe));
  return currentColorRange;
}

/**
 * Update custom palette when reverse the colors in custom palette, since changing 'steps',
 * 'colorBindSafe', 'type' should fall back to predefined palette.
 */
function updateCustomColorRangeByColorUI(oldColorRange, colorConfig) {
  var reversed = colorConfig.reversed;
  var colors = oldColorRange.colors;
  // for custom palette, one can only 'reverse' the colors in custom palette.
  colors.reverse();
  var colorRange = _objectSpread(_objectSpread(_objectSpread({
    name: oldColorRange.name,
    type: oldColorRange.type,
    category: oldColorRange.category,
    colors: colors
  }, reversed ? {
    reversed: reversed
  } : {}), oldColorRange.colorMap ? {
    colorMap: oldColorRange.colorMap
  } : {}), oldColorRange.colorLegends ? {
    colorLegends: oldColorRange.colorLegends
  } : {});
  return replaceColorsInColorRange(colorRange, colorRange.colors);
}

/**
 * Update color range after selecting a palette from color range selectoer
 * Copy over colorMap and colorLegends
 */
function updateColorRangeBySelectedPalette(oldColorRange, colorPalette, colorConfig) {
  var _colorPaletteToColorR = (0, _constants.colorPaletteToColorRange)(colorPalette, colorConfig),
    newColors = _colorPaletteToColorR.colors,
    newColorRange = (0, _objectWithoutProperties2["default"])(_colorPaletteToColorR, _excluded);
  var colorRange = _objectSpread(_objectSpread(_objectSpread({
    colors: oldColorRange.colors
  }, newColorRange), oldColorRange.colorMap ? {
    colorMap: oldColorRange.colorMap
  } : {}), oldColorRange.colorLegends ? {
    colorLegends: oldColorRange.colorLegends
  } : {});
  return replaceColorsInColorRange(colorRange, newColors);
}
var UberNameRegex = new RegExp(/^([A-Za-z ])+/g);
var ColorBrewerRegex = new RegExp(/^ColorBrewer ([A-Za-z1-9])+/g);

/**
 * convert saved colorRange to colorPalette objevt type/name/category/isColorBlind
 */
function colorRangeBackwardCompatibility(colorRange) {
  if (!colorRange || colorRange.type === 'custom' || colorRange.colorMap) {
    // don't do anything to custom color palette, or palette with custom breaks
    return colorRange;
  }
  var trimName;
  if (colorRange.category === 'Uber') {
    var _colorRange$name;
    var matchName = ((_colorRange$name = colorRange.name) !== null && _colorRange$name !== void 0 ? _colorRange$name : '').match(UberNameRegex);
    trimName = matchName ? matchName[0].trim() : null;
    // match Uber Viz Qualitative 1.4 -> Uber Viz Qualitative
  } else if (colorRange.category === 'ColorBrewer') {
    var _colorRange$name2;
    var _matchName = ((_colorRange$name2 = colorRange.name) !== null && _colorRange$name2 !== void 0 ? _colorRange$name2 : '').match(ColorBrewerRegex);
    trimName = _matchName ? _matchName[0].replace('ColorBrewer ', '').trim() : null;
  }
  if (trimName) {
    var matchingPalette = _constants.KEPLER_COLOR_PALETTES.find(function (p) {
      return p.name === trimName;
    });
    if (matchingPalette) {
      return _objectSpread(_objectSpread({}, colorRange), {}, {
        name: trimName,
        type: matchingPalette === null || matchingPalette === void 0 ? void 0 : matchingPalette.type,
        category: matchingPalette.category
      });
    }
  }
  return colorRange;
}

/**
 * Initialize custom palette from current standard color range object
 */
function initializeCustomPalette(colorRange, colorMap) {
  // TODO: check on `isReversed` key, whether we can remove it here
  var customPalette = _objectSpread(_objectSpread({}, colorRange), {}, {
    name: _constants.DEFAULT_CUSTOM_PALETTE.name,
    type: _constants.DEFAULT_CUSTOM_PALETTE.type,
    category: _constants.DEFAULT_CUSTOM_PALETTE.category
  }, colorMap ? {
    colorMap: colorMap
  } : {});

  // only customPalette.colors are needed for custom palette editor with custom ordinal scale
  if (!colorMap && colorRange.type === _constants.SCALE_TYPES.customOrdinal) {
    delete customPalette.colorMap;
  }
  return customPalette;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,