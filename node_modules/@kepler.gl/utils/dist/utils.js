"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ERROR_MESSAGE = void 0;
exports.arrayDifference = arrayDifference;
exports.arrayInsert = arrayInsert;
exports.camelToTitle = camelToTitle;
exports.camelize = void 0;
exports.filterObjectByPredicate = filterObjectByPredicate;
exports.findById = findById;
exports.generateHashIdFromString = generateHashIdFromString;
exports.getError = getError;
exports.hasMobileWidth = hasMobileWidth;
exports.hasPortableWidth = hasPortableWidth;
exports.insertValue = void 0;
exports.isChrome = isChrome;
exports.isFunction = isFunction;
exports.isObject = isObject;
exports.isPlainObject = isPlainObject;
exports.isTest = isTest;
exports.set = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _window = _interopRequireDefault(require("global/window"));
var _strings = require("./strings");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Generate a hash string based on string
 * @param str
 * @returns
 */
function generateHashIdFromString(str) {
  // generate hash string based on string
  var hash = 0;
  var i;
  var chr;
  var len;
  if (str.length === 0) return hash.toString();
  for (i = 0, len = str.length; i < len; i++) {
    chr = str.charCodeAt(i);
    // eslint-disable-next-line no-bitwise
    hash = (hash << 5) - hash + chr;
    // eslint-disable-next-line no-bitwise
    hash |= 0; // Convert to 32bit integer
  }
  return hash.toString(36);
}

/**
 * Detect chrome
 * @returns {boolean} - yes or no
 */
function isChrome() {
  // Chrome 1+
  return _window["default"].chrome && _window["default"].chrome.webstore;
}

/**
 * Convert camel style names to title
 * strokeColor -> Stroke Color
 * @param {string} str
 * @returns {string}
 */
function camelToTitle(str) {
  var breakWord = str.replace(/([A-Z])/g, ' $1');
  return (0, _strings.capitalizeFirstLetter)(breakWord);
}

/**
 * Convert names to camel style
 * Stroke Color -> strokeColor
 * @param {string} str
 * @returns {string}
 */
var camelize = exports.camelize = function camelize(str) {
  return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
    if (Number(match) === 0) return ''; // or if (/\s+/.test(match)) for white spaces
    return index === 0 ? match.toLowerCase() : match.toUpperCase();
  });
};

/**
 * immutably insert value to an Array or Object
 * @param {Array|Object} obj
 * @param {Number|String} key
 * @param {*} value
 * @returns {Array|Object}
 */
var insertValue = exports.insertValue = function insertValue(obj, key, value) {
  if (Array.isArray(obj) && typeof key === 'number') {
    return [].concat((0, _toConsumableArray2["default"])(obj.slice(0, key)), [value], (0, _toConsumableArray2["default"])(obj.slice(key + 1, obj.length)));
  }
  return _objectSpread(_objectSpread({}, obj), {}, (0, _defineProperty2["default"])({}, key, value));
};

/**
 * check if value is a loose object including a plain object, array, function
 * @param {*} value
 */
function isObject(value) {
  return value !== null && ((0, _typeof2["default"])(value) === 'object' || typeof value === 'function');
}

/**
 * whether is an object
 * @returns {boolean} - yes or no
 */
function isPlainObject(obj) {
  return obj === Object(obj) && typeof obj !== 'function' && !Array.isArray(obj);
}
var _setPath = function setPath(_ref, value, obj) {
  var _ref2 = (0, _toArray2["default"])(_ref),
    key = _ref2[0],
    next = _ref2.slice(1);
  // is Object allows js object, array and function
  if (!isObject(obj)) {
    return obj;
  }
  if (next.length === 0) {
    return insertValue(obj, key, value);
  }

  // @ts-ignore
  return insertValue(obj, key, _setPath(next, value, Object.prototype.hasOwnProperty.call(obj, key) ? obj[key] : {}));
};

/**
 * Immutable version of _.set
 * @param {Array<String|Number>} path
 * @param {*} value
 * @param {Object} obj
 * @returns {Object}
 */
// @ts-ignore
var set = exports.set = function set(path, value, obj) {
  return obj === null ? obj : _setPath(path, value, obj);
};
var DEFAULT_ERROR_MESSAGE = exports.DEFAULT_ERROR_MESSAGE = 'Something went wrong';

/**
 * Get error information of unknown type
 * Extracts as much human readable information as possible
 * Ensure result is an Error object suitable for throw or promise rejection
 *
 * @private
 * @param {*}  err - Unknown error
 * @return {string} - human readable error msg
 */
function getError(err) {
  var defaultMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ERROR_MESSAGE;
  if (!err) {
    return defaultMessage;
  }
  if (typeof err === 'string') {
    return err;
  } else if (err instanceof Error) {
    return err.message;
  } else if ((0, _typeof2["default"])(err) === 'object') {
    return Object.prototype.hasOwnProperty.call(err, 'message') ? getError(err.message) : Object.prototype.hasOwnProperty.call(err, 'error') ? getError(err.error) : Object.prototype.hasOwnProperty.call(err, 'err') ? getError(err.err) : JSON.stringify(err);
  }
  return defaultMessage;
}
function arrayInsert(arr, index, val) {
  if (!Array.isArray(arr)) {
    return arr;
  }
  return [].concat((0, _toConsumableArray2["default"])(arr.slice(0, index)), [val], (0, _toConsumableArray2["default"])(arr.slice(index)));
}
function hasMobileWidth(breakPointValues) {
  var mobileWidth = _window["default"].matchMedia("(max-width: ".concat(breakPointValues.palm, "px)"));
  return mobileWidth.matches;
}
function hasPortableWidth(breakPointValues) {
  var mobileWidth = _window["default"].matchMedia("(max-width: ".concat(breakPointValues.desk, "px)"));
  return mobileWidth.matches;
}
function isTest() {
  var _globalThis$process;
  return ((_globalThis$process = globalThis.process) === null || _globalThis$process === void 0 || (_globalThis$process = _globalThis$process.env) === null || _globalThis$process === void 0 ? void 0 : _globalThis$process.NODE_ENV) === 'test';
}

/**
 * Filters an object by an arbitrary predicate
 * Returns a new object containing all elements that match the predicate
 * @param {Object} obj Object to be filtered
 * @param {Function} predicate Predicate by which the object will be filtered
 * @returns {Object}
 */
function filterObjectByPredicate(obj, predicate) {
  return Object.entries(obj).reduce(function (acc, entry) {
    return predicate(entry[0], entry[1]) ? _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, entry[0], entry[1])) : acc;
  }, {});
}
function isFunction(func) {
  return typeof func === 'function';
}
function findById(id) {
  return function (arr) {
    return arr.find(function (a) {
      return a.id === id;
    });
  };
}

/**
 * Returns array difference from
 */
function arrayDifference(source) {
  var initial = [];
  return function (compare) {
    return source.reduce(function (acc, element) {
      var foundElement = findById(element.id)(compare);
      return foundElement ? [].concat((0, _toConsumableArray2["default"])(acc), [foundElement]) : acc;
    }, initial);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,