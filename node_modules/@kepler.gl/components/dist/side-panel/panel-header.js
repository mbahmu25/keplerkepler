"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SaveExportDropdownFactory = exports.PanelHeaderDropdownFactory = exports.PanelAction = exports.CloudStorageDropdownFactory = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reselect = require("reselect");
var _styledComponents2 = require("../common/styled-components");
var _logo = _interopRequireDefault(require("../common/logo"));
var _icons = require("../common/icons");
var _toolbar = _interopRequireDefault(require("../common/toolbar"));
var _toolbarItem = _interopRequireDefault(require("../common/toolbar-item"));
var _localization = require("@kepler.gl/localization");
var _useOnClickOutside = _interopRequireDefault(require("../hooks/use-on-click-outside"));
var _excluded = ["items"],
  _excluded2 = ["items"],
  _excluded3 = ["appName", "appWebsite", "version", "actionItems", "visibleDropdown", "showExportDropdown", "hideExportDropdown"];
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledPanelHeader = _styledComponents["default"].div.attrs(function (props) {
  return {
    className: (0, _classnames["default"])('side-side-panel__header', props.className)
  };
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  padding: 12px 16px 0 16px;\n"])), function (props) {
  return props.theme.sidePanelHeaderBg;
});
var StyledPanelHeaderTop = _styledComponents["default"].div.attrs(function (props) {
  return {
    className: (0, _classnames["default"])('side-panel__header__top', props.className)
  };
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 16px;\n  width: 100%;\n"])));
var StyledPanelTopActions = _styledComponents["default"].div.attrs({
  className: 'side-panel__top__actions'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n"])));
var StyledPanelAction = _styledComponents["default"].div.attrs({
  className: 'side-panel__panel-header__action'
})(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: center;\n  border-radius: 2px;\n  color: ", ";\n  display: flex;\n  height: 26px;\n  justify-content: space-between;\n  margin-left: 4px;\n  padding: 5px;\n  font-weight: bold;\n  p {\n    display: inline-block;\n    margin-right: 6px;\n  }\n  a {\n    height: 20px;\n  }\n\n  &:hover {\n    cursor: pointer;\n    color: ", ";\n\n    a {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.active ? props.theme.textColorHl : props.theme.subtextColor;
}, function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.textColorHl;
});
var StyledToolbar = (0, _styledComponents["default"])(_toolbar["default"])(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n"])));
var PanelAction = exports.PanelAction = /*#__PURE__*/_react["default"].memo(function (_ref) {
  var item = _ref.item,
    showExportDropdown = _ref.showExportDropdown;
  var onClick = (0, _react.useCallback)(function () {
    if (item.dropdownComponent) {
      showExportDropdown(item.id);
    } else {
      item.onClick && item.onClick();
    }
  }, [item, showExportDropdown]);
  return /*#__PURE__*/_react["default"].createElement(StyledPanelAction, {
    id: "".concat(item.id, "-action"),
    "data-tip": true,
    "data-for": "".concat(item.id, "-action"),
    onClick: onClick
  }, item.label ? /*#__PURE__*/_react["default"].createElement("p", null, item.label) : null, /*#__PURE__*/_react["default"].createElement("a", {
    target: item.blank ? '_blank' : '',
    href: item.href,
    rel: "noreferrer"
  }, /*#__PURE__*/_react["default"].createElement(item.iconComponent, (0, _extends2["default"])({
    height: "20px"
  }, item.iconComponentProps))), item.tooltip ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "".concat(item.id, "-action"),
    place: "bottom",
    delayShow: 500,
    effect: "solid"
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: item.tooltip
  })) : null);
});
PanelAction.displayName = 'PanelAction';
var PanelHeaderDropdownFactory = exports.PanelHeaderDropdownFactory = function PanelHeaderDropdownFactory() {
  var PanelHeaderDropdown = function PanelHeaderDropdown(_ref2) {
    var items = _ref2.items,
      show = _ref2.show,
      onClose = _ref2.onClose,
      id = _ref2.id;
    var ref = (0, _useOnClickOutside["default"])(onClose);
    return /*#__PURE__*/_react["default"].createElement(StyledToolbar, {
      show: show,
      className: "".concat(id, "-dropdown")
    }, show ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledPanelDropdown, {
      type: "dark",
      ref: ref,
      className: "panel-header-dropdown__inner"
    }, items.map(function (item) {
      return /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
        id: item.key,
        key: item.key,
        label: item.label,
        icon: item.icon,
        onClick: item.onClick,
        onClose: onClose
      });
    })) : null);
  };
  return PanelHeaderDropdown;
};
var getDropdownItemsSelector = function getDropdownItemsSelector() {
  return (0, _reselect.createSelector)(function (props) {
    return props;
  }, function (props) {
    return (props.items || []).map(function (t) {
      return _objectSpread(_objectSpread({}, t), {}, {
        onClick: t.onClick && t.onClick(props) ? t.onClick(props) : null
      });
    }).filter(function (l) {
      return l.onClick;
    });
  });
};
var SaveExportDropdownFactory = exports.SaveExportDropdownFactory = function SaveExportDropdownFactory(PanelHeaderDropdown) {
  var dropdownItemsSelector = getDropdownItemsSelector();
  var defaultItems = [{
    label: 'toolbar.exportImage',
    icon: _icons.Picture,
    key: 'image',
    onClick: function onClick(props) {
      return props.onExportImage;
    }
  }, {
    label: 'toolbar.exportData',
    icon: _icons.DataTable,
    key: 'data',
    onClick: function onClick(props) {
      return props.onExportData;
    }
  }, {
    label: 'toolbar.exportMap',
    icon: _icons.Map,
    key: 'map',
    onClick: function onClick(props) {
      return props.onExportMap;
    }
  }, {
    label: 'toolbar.saveMap',
    icon: _icons.Save2,
    key: 'save',
    onClick: function onClick(props) {
      return props.onSaveMap;
    }
  }, {
    label: 'toolbar.shareMapURL',
    icon: _icons.Share,
    key: 'share',
    onClick: function onClick(props) {
      return props.onShareMap;
    }
  }];
  var SaveExportDropdown = function SaveExportDropdown(_ref3) {
    var _ref3$items = _ref3.items,
      items = _ref3$items === void 0 ? defaultItems : _ref3$items,
      restProps = (0, _objectWithoutProperties2["default"])(_ref3, _excluded);
    var props = _objectSpread(_objectSpread({}, restProps), {}, {
      items: items
    });
    return /*#__PURE__*/_react["default"].createElement(PanelHeaderDropdown, {
      items: dropdownItemsSelector(props),
      show: props.show,
      onClose: props.onClose,
      id: "save-export"
    });
  };
  SaveExportDropdown.defaultItems = defaultItems;
  return SaveExportDropdown;
};
SaveExportDropdownFactory.deps = [PanelHeaderDropdownFactory];
var CloudStorageDropdownFactory = exports.CloudStorageDropdownFactory = function CloudStorageDropdownFactory(PanelHeaderDropdown) {
  var dropdownItemsSelector = getDropdownItemsSelector();
  var defaultItems = [{
    label: 'Save',
    icon: _icons.Save2,
    key: 'save',
    onClick: function onClick(props) {
      return props.onSaveToStorage;
    }
  }, {
    label: 'Save As',
    icon: _icons.Save2,
    key: 'saveAs',
    onClick: function onClick(props) {
      return props.onSaveAsToStorage;
    }
  }];
  var CloudStorageDropdown = function CloudStorageDropdown(_ref4) {
    var _ref4$items = _ref4.items,
      items = _ref4$items === void 0 ? defaultItems : _ref4$items,
      restProps = (0, _objectWithoutProperties2["default"])(_ref4, _excluded2);
    var props = _objectSpread(_objectSpread({}, restProps), {}, {
      items: items
    });
    return /*#__PURE__*/_react["default"].createElement(PanelHeaderDropdown, {
      items: dropdownItemsSelector(props),
      show: props.show,
      onClose: props.onClose,
      id: "cloud-storage"
    });
  };
  CloudStorageDropdown.defaultItems = defaultItems;
  return CloudStorageDropdown;
};
CloudStorageDropdownFactory.deps = [PanelHeaderDropdownFactory];
PanelHeaderFactory.deps = [SaveExportDropdownFactory, CloudStorageDropdownFactory];
function PanelHeaderFactory(SaveExportDropdown, CloudStorageDropdown) {
  var _PanelHeader;
  return _PanelHeader = /*#__PURE__*/function (_Component) {
    function PanelHeader() {
      (0, _classCallCheck2["default"])(this, PanelHeader);
      return _callSuper(this, PanelHeader, arguments);
    }
    (0, _inherits2["default"])(PanelHeader, _Component);
    return (0, _createClass2["default"])(PanelHeader, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          appName = _this$props.appName,
          appWebsite = _this$props.appWebsite,
          version = _this$props.version,
          actionItems = _this$props.actionItems,
          visibleDropdown = _this$props.visibleDropdown,
          showExportDropdown = _this$props.showExportDropdown,
          hideExportDropdown = _this$props.hideExportDropdown,
          dropdownCallbacks = (0, _objectWithoutProperties2["default"])(_this$props, _excluded3);
        var items = actionItems || [];

        // don't render cloud storage icon if onSaveToStorage is not provided
        if (typeof this.props.onSaveToStorage !== 'function') {
          items = items.filter(function (ai) {
            return ai.id !== 'storage';
          });
        }
        return /*#__PURE__*/_react["default"].createElement(StyledPanelHeader, {
          className: "side-panel__panel-header"
        }, /*#__PURE__*/_react["default"].createElement(StyledPanelHeaderTop, {
          className: "side-panel__panel-header__top"
        }, this.props.logoComponent && /*#__PURE__*/_react["default"].createElement(this.props.logoComponent, {
          appName: appName,
          version: version,
          appWebsite: appWebsite
        }), /*#__PURE__*/_react["default"].createElement(StyledPanelTopActions, null, items.map(function (item) {
          return /*#__PURE__*/_react["default"].createElement("div", {
            className: "side-panel__panel-header__right",
            key: item.id,
            style: {
              position: 'relative'
            }
          }, /*#__PURE__*/_react["default"].createElement(PanelAction, {
            item: item,
            showExportDropdown: showExportDropdown
          }), item.dropdownComponent ? /*#__PURE__*/_react["default"].createElement(item.dropdownComponent, (0, _extends2["default"])({
            onClose: hideExportDropdown,
            show: visibleDropdown === item.id
          }, dropdownCallbacks)) : null);
        }))));
      }
    }]);
  }(_react.Component), (0, _defineProperty2["default"])(_PanelHeader, "defaultProps", {
    logoComponent: _logo["default"],
    actionItems: [{
      id: 'storage',
      iconComponent: _icons.Db,
      tooltip: 'tooltip.cloudStorage',
      onClick: function onClick() {
        return;
      },
      dropdownComponent: CloudStorageDropdown
    }, {
      id: 'save',
      iconComponent: _icons.Save,
      onClick: function onClick() {
        return;
      },
      label: 'Share',
      dropdownComponent: SaveExportDropdown
    }]
  }), _PanelHeader;
}
var _default = exports["default"] = PanelHeaderFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,