"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactIntl = require("react-intl");
var _interactionPanel = _interopRequireDefault(require("./interaction-panel/interaction-panel"));
var _panelTitle = _interopRequireDefault(require("./panel-title"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

InteractionManagerFactory.deps = [_interactionPanel["default"], _panelTitle["default"]];
function InteractionManagerFactory(InteractionPanel, PanelTitle) {
  var InteractionManager = function InteractionManager(_ref) {
    var interactionConfig = _ref.interactionConfig,
      datasets = _ref.datasets,
      visStateActions = _ref.visStateActions,
      panelMetadata = _ref.panelMetadata;
    var onConfigChange = visStateActions.interactionConfigChange,
      setColumnDisplayFormat = visStateActions.setColumnDisplayFormat;
    var intl = (0, _reactIntl.useIntl)();
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-manager"
    }, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
      className: "interaction-manager-title",
      title: intl.formatMessage({
        id: panelMetadata.label
      })
    }), Object.keys(interactionConfig).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(InteractionPanel, {
        datasets: datasets,
        config: interactionConfig[key],
        key: key,
        onConfigChange: onConfigChange,
        setColumnDisplayFormat: setColumnDisplayFormat
      });
    }));
  };
  return InteractionManager;
}
var _default = exports["default"] = InteractionManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdEludGwiLCJfaW50ZXJhY3Rpb25QYW5lbCIsIl9wYW5lbFRpdGxlIiwiSW50ZXJhY3Rpb25NYW5hZ2VyRmFjdG9yeSIsImRlcHMiLCJJbnRlcmFjdGlvblBhbmVsRmFjdG9yeSIsIlBhbmVsVGl0bGVGYWN0b3J5IiwiSW50ZXJhY3Rpb25QYW5lbCIsIlBhbmVsVGl0bGUiLCJJbnRlcmFjdGlvbk1hbmFnZXIiLCJfcmVmIiwiaW50ZXJhY3Rpb25Db25maWciLCJkYXRhc2V0cyIsInZpc1N0YXRlQWN0aW9ucyIsInBhbmVsTWV0YWRhdGEiLCJvbkNvbmZpZ0NoYW5nZSIsImludGVyYWN0aW9uQ29uZmlnQ2hhbmdlIiwic2V0Q29sdW1uRGlzcGxheUZvcm1hdCIsImludGwiLCJ1c2VJbnRsIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInRpdGxlIiwiZm9ybWF0TWVzc2FnZSIsImlkIiwibGFiZWwiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwiY29uZmlnIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NpZGUtcGFuZWwvaW50ZXJhY3Rpb24tbWFuYWdlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlSW50bH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7SW50ZXJhY3Rpb25Db25maWd9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtWaXNTdGF0ZUFjdGlvbnN9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge0RhdGFzZXRzfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcblxuaW1wb3J0IEludGVyYWN0aW9uUGFuZWxGYWN0b3J5IGZyb20gJy4vaW50ZXJhY3Rpb24tcGFuZWwvaW50ZXJhY3Rpb24tcGFuZWwnO1xuaW1wb3J0IFBhbmVsVGl0bGVGYWN0b3J5IGZyb20gJy4vcGFuZWwtdGl0bGUnO1xuXG5pbXBvcnQge1BhbmVsTWV0YX0gZnJvbSAnLi9jb21tb24vdHlwZXMnO1xuXG50eXBlIEludGVyYWN0aW9uTWFuYWdlclByb3BzID0ge1xuICBpbnRlcmFjdGlvbkNvbmZpZzogSW50ZXJhY3Rpb25Db25maWc7XG4gIGRhdGFzZXRzOiBEYXRhc2V0cztcbiAgdmlzU3RhdGVBY3Rpb25zOiB0eXBlb2YgVmlzU3RhdGVBY3Rpb25zO1xuICBwYW5lbE1ldGFkYXRhOiBQYW5lbE1ldGE7XG59O1xuXG5JbnRlcmFjdGlvbk1hbmFnZXJGYWN0b3J5LmRlcHMgPSBbSW50ZXJhY3Rpb25QYW5lbEZhY3RvcnksIFBhbmVsVGl0bGVGYWN0b3J5XTtcblxuZnVuY3Rpb24gSW50ZXJhY3Rpb25NYW5hZ2VyRmFjdG9yeShcbiAgSW50ZXJhY3Rpb25QYW5lbDogUmV0dXJuVHlwZTx0eXBlb2YgSW50ZXJhY3Rpb25QYW5lbEZhY3Rvcnk+LFxuICBQYW5lbFRpdGxlOiBSZXR1cm5UeXBlPHR5cGVvZiBQYW5lbFRpdGxlRmFjdG9yeT5cbikge1xuICBjb25zdCBJbnRlcmFjdGlvbk1hbmFnZXI6IFJlYWN0LkZDPEludGVyYWN0aW9uTWFuYWdlclByb3BzPiA9ICh7XG4gICAgaW50ZXJhY3Rpb25Db25maWcsXG4gICAgZGF0YXNldHMsXG4gICAgdmlzU3RhdGVBY3Rpb25zLFxuICAgIHBhbmVsTWV0YWRhdGFcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHtpbnRlcmFjdGlvbkNvbmZpZ0NoYW5nZTogb25Db25maWdDaGFuZ2UsIHNldENvbHVtbkRpc3BsYXlGb3JtYXR9ID0gdmlzU3RhdGVBY3Rpb25zO1xuICAgIGNvbnN0IGludGwgPSB1c2VJbnRsKCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW50ZXJhY3Rpb24tbWFuYWdlclwiPlxuICAgICAgICA8UGFuZWxUaXRsZVxuICAgICAgICAgIGNsYXNzTmFtZT1cImludGVyYWN0aW9uLW1hbmFnZXItdGl0bGVcIlxuICAgICAgICAgIHRpdGxlPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBwYW5lbE1ldGFkYXRhLmxhYmVsfSl9XG4gICAgICAgIC8+XG4gICAgICAgIHtPYmplY3Qua2V5cyhpbnRlcmFjdGlvbkNvbmZpZykubWFwKGtleSA9PiAoXG4gICAgICAgICAgPEludGVyYWN0aW9uUGFuZWxcbiAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgIGNvbmZpZz17aW50ZXJhY3Rpb25Db25maWdba2V5XX1cbiAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgb25Db25maWdDaGFuZ2U9e29uQ29uZmlnQ2hhbmdlfVxuICAgICAgICAgICAgc2V0Q29sdW1uRGlzcGxheUZvcm1hdD17c2V0Q29sdW1uRGlzcGxheUZvcm1hdH1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIEludGVyYWN0aW9uTWFuYWdlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJhY3Rpb25NYW5hZ2VyRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUQsT0FBQTtBQU1BLElBQUFFLGlCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxXQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFYQTtBQUNBOztBQXFCQUkseUJBQXlCLENBQUNDLElBQUksR0FBRyxDQUFDQyw0QkFBdUIsRUFBRUMsc0JBQWlCLENBQUM7QUFFN0UsU0FBU0gseUJBQXlCQSxDQUNoQ0ksZ0JBQTRELEVBQzVEQyxVQUFnRCxFQUNoRDtFQUNBLElBQU1DLGtCQUFxRCxHQUFHLFNBQXhEQSxrQkFBcURBLENBQUFDLElBQUEsRUFLckQ7SUFBQSxJQUpKQyxpQkFBaUIsR0FBQUQsSUFBQSxDQUFqQkMsaUJBQWlCO01BQ2pCQyxRQUFRLEdBQUFGLElBQUEsQ0FBUkUsUUFBUTtNQUNSQyxlQUFlLEdBQUFILElBQUEsQ0FBZkcsZUFBZTtNQUNmQyxhQUFhLEdBQUFKLElBQUEsQ0FBYkksYUFBYTtJQUViLElBQWdDQyxjQUFjLEdBQTRCRixlQUFlLENBQWxGRyx1QkFBdUI7TUFBa0JDLHNCQUFzQixHQUFJSixlQUFlLENBQXpDSSxzQkFBc0I7SUFDdEUsSUFBTUMsSUFBSSxHQUFHLElBQUFDLGtCQUFPLEVBQUMsQ0FBQztJQUN0QixvQkFDRXRCLE1BQUEsWUFBQXVCLGFBQUE7TUFBS0MsU0FBUyxFQUFDO0lBQXFCLGdCQUNsQ3hCLE1BQUEsWUFBQXVCLGFBQUEsQ0FBQ1osVUFBVTtNQUNUYSxTQUFTLEVBQUMsMkJBQTJCO01BQ3JDQyxLQUFLLEVBQUVKLElBQUksQ0FBQ0ssYUFBYSxDQUFDO1FBQUNDLEVBQUUsRUFBRVYsYUFBYSxDQUFDVztNQUFLLENBQUM7SUFBRSxDQUN0RCxDQUFDLEVBQ0RDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDaEIsaUJBQWlCLENBQUMsQ0FBQ2lCLEdBQUcsQ0FBQyxVQUFBQyxHQUFHO01BQUEsb0JBQ3JDaEMsTUFBQSxZQUFBdUIsYUFBQSxDQUFDYixnQkFBZ0I7UUFDZkssUUFBUSxFQUFFQSxRQUFTO1FBQ25Ca0IsTUFBTSxFQUFFbkIsaUJBQWlCLENBQUNrQixHQUFHLENBQUU7UUFDL0JBLEdBQUcsRUFBRUEsR0FBSTtRQUNUZCxjQUFjLEVBQUVBLGNBQWU7UUFDL0JFLHNCQUFzQixFQUFFQTtNQUF1QixDQUNoRCxDQUFDO0lBQUEsQ0FDSCxDQUNFLENBQUM7RUFFVixDQUFDO0VBRUQsT0FBT1Isa0JBQWtCO0FBQzNCO0FBQUMsSUFBQXNCLFFBQUEsR0FBQUMsT0FBQSxjQUVjN0IseUJBQXlCIiwiaWdub3JlTGlzdCI6W119