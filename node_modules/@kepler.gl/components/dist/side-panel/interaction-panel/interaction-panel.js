"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _switch = _interopRequireDefault(require("../../common/switch"));
var _brushConfig = _interopRequireDefault(require("./brush-config"));
var _tooltipConfig = _interopRequireDefault(require("./tooltip-config"));
var _styledComponents2 = require("../../common/styled-components");
var _icons = require("../../common/icons");
var _localization = require("@kepler.gl/localization");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledInteractionPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding-bottom: 6px;\n"])));
InteractionPanelFactory.deps = [_tooltipConfig["default"], _brushConfig["default"]];
var INTERACTION_CONFIG_ICONS = {
  tooltip: _icons.Messages,
  geocoder: _icons.Pin,
  brush: _icons.Crosshairs,
  coordinate: _icons.CursorClick
};
function InteractionPanelFactory(TooltipConfig, BrushConfig) {
  var InteractionPanel = function InteractionPanel(_ref) {
    var config = _ref.config,
      onConfigChange = _ref.onConfigChange,
      datasets = _ref.datasets,
      setColumnDisplayFormat = _ref.setColumnDisplayFormat,
      _ref$interactionConfi = _ref.interactionConfigIcons,
      interactionConfigIcons = _ref$interactionConfi === void 0 ? INTERACTION_CONFIG_ICONS : _ref$interactionConfi;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isConfigActive = _useState2[0],
      setIsConfigAction = _useState2[1];
    var _updateConfig = (0, _react.useCallback)(function (newProp) {
      onConfigChange(_objectSpread(_objectSpread({}, config), newProp));
    }, [onConfigChange, config]);
    var onDisplayFormatChange = (0, _react.useCallback)(function (dataId, column, displayFormat) {
      setColumnDisplayFormat(dataId, (0, _defineProperty2["default"])({}, column, displayFormat));
    }, [setColumnDisplayFormat]);
    var togglePanelActive = (0, _react.useCallback)(function () {
      setIsConfigAction(!isConfigActive);
    }, [setIsConfigAction, isConfigActive]);
    var enabled = config.enabled;
    var toggleEnableConfig = (0, _react.useCallback)(function () {
      _updateConfig({
        enabled: !enabled
      });
    }, [_updateConfig, enabled]);
    var onChange = (0, _react.useCallback)(function (newConfig) {
      return _updateConfig({
        config: newConfig
      });
    }, [_updateConfig]);
    var IconComponent = interactionConfigIcons[config.id];
    var template = null;
    switch (config.id) {
      case 'tooltip':
        template = /*#__PURE__*/_react["default"].createElement(TooltipConfig, {
          datasets: datasets,
          config: config.config,
          onChange: onChange,
          onDisplayFormatChange: onDisplayFormatChange
        });
        break;
      case 'brush':
        template = /*#__PURE__*/_react["default"].createElement(BrushConfig, {
          config: config.config,
          onChange: onChange
        });
        break;
      default:
        break;
    }
    return /*#__PURE__*/_react["default"].createElement(StyledInteractionPanel, {
      className: "interaction-panel"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledPanelHeader, {
      className: "interaction-panel__header",
      onClick: togglePanelActive
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelHeaderContent, {
      className: "interaction-panel__header__content"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-panel__header__icon icon"
    }, IconComponent ? /*#__PURE__*/_react["default"].createElement(IconComponent, {
      height: "16px"
    }) : null), /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-panel__header__title"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelHeaderTitle, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: config.label
    })))), /*#__PURE__*/_react["default"].createElement("div", {
      className: "interaction-panel__header__actions"
    }, /*#__PURE__*/_react["default"].createElement(_switch["default"], {
      checked: config.enabled,
      id: "".concat(config.id, "-toggle"),
      onChange: toggleEnableConfig,
      secondary: true
    }))), config.enabled && template && /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelContent, {
      className: "interaction-panel__content"
    }, template));
  };
  return InteractionPanel;
}
var _default = exports["default"] = InteractionPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,