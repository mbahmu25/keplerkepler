"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _reactIntl = require("react-intl");
var _localization = require("@kepler.gl/localization");
var _styledComponents2 = require("../../common/styled-components");
var _datasetTag = _interopRequireDefault(require("../common/dataset-tag"));
var _tooltipChicklet = _interopRequireDefault(require("./tooltip-config/tooltip-chicklet"));
var _switch = _interopRequireDefault(require("../../common/switch"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _constants = require("@kepler.gl/constants");
var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TooltipConfigWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .item-selector > div > div {\n    overflow: visible;\n  }\n"])));
var ButtonWrapper = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: inherit;\n  padding: 0;\n\n  .button.clear-all {\n    background: transparent;\n    color: ", ";\n    margin: 0 0 0 8px;\n    padding: 0;\n\n    &:hover {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.textColor;
});
var CompareSwitchWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  font-size: ", ";\n  justify-content: space-between;\n  line-height: 11px;\n  margin-bottom: 8px;\n"])), function (props) {
  return props.theme.labelColor;
}, function (props) {
  return props.theme.inputFontSize;
});
TooltipConfigFactory.deps = [_datasetTag["default"], _fieldSelector["default"]];
function TooltipConfigFactory(DatasetTag, FieldSelector) {
  var DatasetTooltipConfig = function DatasetTooltipConfig(_ref) {
    var config = _ref.config,
      onChange = _ref.onChange,
      dataset = _ref.dataset,
      onDisplayFormatChange = _ref.onDisplayFormatChange;
    var dataId = dataset.id;
    var handleClick = (0, _react.useCallback)(function () {
      return onChange(_objectSpread(_objectSpread({}, config), {}, {
        fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2["default"])({}, dataId, []))
      }));
    }, [config, dataId, onChange]);
    var findSelectedHelper = (0, _react.useCallback)(function (selected, tooltipFields) {
      return selected.map(function (f) {
        return tooltipFields.find(function (tooltipField) {
          return tooltipField.name === f.name;
        }) || {
          name: f.name,
          // default initial tooltip is null
          format: null
        };
      });
    }, []);
    var handleSelect = (0, _react.useCallback)(function (selected) {
      var newConfig = _objectSpread(_objectSpread({}, config), {}, {
        fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2["default"])({}, dataId, findSelectedHelper(selected, config.fieldsToShow[dataId])))
      });
      onChange(newConfig);
    }, [config, dataId, onChange, findSelectedHelper]);
    var handleReorderItems = (0, _react.useCallback)(function (newOrder) {
      return onChange(_objectSpread(_objectSpread({}, config), {}, {
        fieldsToShow: _objectSpread(_objectSpread({}, config.fieldsToShow), {}, (0, _defineProperty2["default"])({}, dataId, newOrder))
      }));
    }, [config, dataId, onChange]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
      key: dataId
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SBFlexboxNoMargin, null, /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: dataset
    }), Boolean(config.fieldsToShow[dataId].length) && /*#__PURE__*/_react["default"].createElement(ButtonWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.Button, {
      className: "clear-all",
      onClick: handleClick,
      width: "54px",
      secondary: true
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "fieldSelector.clearAll"
    })))), /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      fields: dataset.fields,
      value: config.fieldsToShow[dataId],
      onSelect: handleSelect,
      reorderItems: handleReorderItems,
      closeOnSelect: false,
      multiSelect: true,
      inputTheme: "secondary",
      CustomChickletComponent: (0, _tooltipChicklet["default"])(dataId, config, onChange, dataset.fields, onDisplayFormatChange)
    }));
  };
  var TooltipConfig = function TooltipConfig(_ref2) {
    var config = _ref2.config,
      datasets = _ref2.datasets,
      _onChange = _ref2.onChange,
      onDisplayFormatChange = _ref2.onDisplayFormatChange,
      intl = _ref2.intl;
    var handleChange = (0, _react.useCallback)(function (option) {
      return _onChange(_objectSpread(_objectSpread({}, config), {}, {
        compareType: option
      }));
    }, [config, _onChange]);
    return /*#__PURE__*/_react["default"].createElement(TooltipConfigWrapper, null, Object.keys(config.fieldsToShow).map(function (dataId) {
      return dataId === _constants.GEOCODER_DATASET_NAME ? null : /*#__PURE__*/_react["default"].createElement(DatasetTooltipConfig, {
        key: dataId,
        config: config,
        onChange: _onChange,
        dataset: datasets[dataId],
        onDisplayFormatChange: onDisplayFormatChange
      });
    }), /*#__PURE__*/_react["default"].createElement(CompareSwitchWrapper, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "compare.modeLabel"
    }), /*#__PURE__*/_react["default"].createElement(_switch["default"], {
      checked: config.compareMode,
      id: "compare-mode-toggle",
      onChange: function onChange() {
        var newConfig = _objectSpread(_objectSpread({}, config), {}, {
          compareMode: !config.compareMode
        });
        _onChange(newConfig);
      },
      secondary: true
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "compare.typeLabel"
    })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      disabled: !config.compareMode,
      displayOption: function displayOption(d) {
        return intl.formatMessage({
          id: "compare.types.".concat(d)
        });
      },
      selectedItems: config.compareType,
      options: Object.values(_constants.COMPARE_TYPES),
      multiSelect: false,
      searchable: false,
      inputTheme: 'secondary',
      getOptionValue: function getOptionValue(d) {
        return d;
      },
      onChange: handleChange
    })));
  };
  return (0, _reactIntl.injectIntl)(TooltipConfig);
}
var _default = exports["default"] = TooltipConfigFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,