"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PanelHeaderActionFactory;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _styledComponents2 = require("../common/styled-components");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var HeaderActionWrapper = _styledComponents["default"].div.attrs(function (props) {
  return {
    dataTestId: props.testId
  };
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: ", "px;\n  display: flex;\n  align-items: center;\n  color: ", ";\n\n  cursor: pointer;\n\n  &:hover {\n    color: ", ";\n  }\n\n  &.disabled {\n    cursor: none;\n    pointer-events: none;\n    opacity: 0.3;\n  }\n"])), function (props) {
  return props.flush ? 0 : 8;
}, function (props) {
  return props.active ? props.theme.panelHeaderIconActive : props.theme.panelHeaderIcon;
}, function (props) {
  return props.hoverColor ? props.theme[props.hoverColor] : props.theme.panelHeaderIconHover;
});
PanelHeaderActionFactory.deps = [];
// Need to use react class to access props.component
function PanelHeaderActionFactory() {
  var PanelHeaderActionUnmemoized = function PanelHeaderActionUnmemoized(_ref) {
    var onClick = _ref.onClick,
      tooltip = _ref.tooltip,
      id = _ref.id,
      _ref$active = _ref.active,
      active = _ref$active === void 0 ? false : _ref$active,
      flush = _ref.flush,
      hoverColor = _ref.hoverColor,
      tooltipType = _ref.tooltipType,
      disabled = _ref.disabled,
      className = _ref.className,
      IconComponent = _ref.IconComponent,
      testId = _ref.testId;
    return /*#__PURE__*/_react["default"].createElement(HeaderActionWrapper, {
      className: (0, _classnames["default"])('panel--header__action', _objectSpread({
        disabled: disabled
      }, className ? (0, _defineProperty2["default"])({}, className, true) : {})),
      active: active,
      hoverColor: hoverColor,
      flush: flush
    }, IconComponent ? /*#__PURE__*/_react["default"].createElement(IconComponent, {
      className: "panel--header__action__component",
      "data-testid": testId,
      "data-tip": true,
      "data-for": "".concat(tooltip, "_").concat(id),
      height: "16px",
      onClick: onClick
    }) : null, tooltip ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
      id: "".concat(tooltip, "_").concat(id),
      effect: "solid",
      delayShow: 500,
      type: tooltipType
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: tooltip
    }))) : null);
  };
  var PanelHeaderAction = /*#__PURE__*/_react["default"].memo(PanelHeaderActionUnmemoized);
  PanelHeaderAction.displayName = 'PanelHeaderAction';
  return PanelHeaderAction;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,