"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reselect = require("reselect");
var _styledComponents = require("../common/styled-components");
var _mapStyleSelector = _interopRequireDefault(require("./map-style-panel/map-style-selector"));
var _mapLayerSelector = _interopRequireDefault(require("./map-style-panel/map-layer-selector"));
var _panelTitle = _interopRequireDefault(require("../side-panel/panel-title"));
var _icons = require("../common/icons");
var _reactIntl = require("react-intl");
var _localization = require("@kepler.gl/localization");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
MapManagerFactory.deps = [_mapStyleSelector["default"], _mapLayerSelector["default"], _panelTitle["default"]];
function MapManagerFactory(MapStyleSelector, LayerGroupSelector, PanelTitle) {
  var MapManager = /*#__PURE__*/function (_Component) {
    function MapManager() {
      var _this;
      (0, _classCallCheck2["default"])(this, MapManager);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, MapManager, [].concat(args));
      (0, _defineProperty2["default"])(_this, "state", {
        isSelecting: false
      });
      (0, _defineProperty2["default"])(_this, "_toggleSelecting", function () {
        _this.setState({
          isSelecting: !_this.state.isSelecting
        });
      });
      (0, _defineProperty2["default"])(_this, "_selectStyle", function (val) {
        var mapStyleActions = _this.props.mapStyleActions;
        var mapStyleChange = mapStyleActions.mapStyleChange;
        mapStyleChange(val);
        _this._toggleSelecting();
      });
      (0, _defineProperty2["default"])(_this, "getCustomMapStylesActions", (0, _reselect.createSelector)(function (props) {
        return props.mapStyle.mapStyles;
      }, function (props) {
        return props.mapStyleActions;
      }, function (mapStyles, mapStyleActions) {
        var actionsPerCustomStyle = {};
        Object.values(mapStyles).filter(function (mapStyle) {
          return Boolean(mapStyle.custom);
        }).forEach(function (_ref) {
          var id = _ref.id;
          actionsPerCustomStyle[id] = [{
            id: "remove-map-style-".concat(id),
            IconComponent: _icons.Trash,
            tooltip: 'tooltip.removeBaseMapStyle',
            onClick: function onClick() {
              return mapStyleActions.removeCustomMapStyle({
                id: id
              });
            }
          }];
        });
        return actionsPerCustomStyle;
      }));
      return _this;
    }
    (0, _inherits2["default"])(MapManager, _Component);
    return (0, _createClass2["default"])(MapManager, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          mapStyle = _this$props.mapStyle,
          intl = _this$props.intl,
          mapStyleActions = _this$props.mapStyleActions,
          showAddMapStyleModal = _this$props.showAddMapStyleModal,
          panelMetadata = _this$props.panelMetadata;
        var currentStyle = mapStyle.mapStyles[mapStyle.styleType] || {};
        var editableLayers = currentStyle.layerGroups || [];
        var customMapStylesActions = this.getCustomMapStylesActions(this.props);
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: "map-style-panel"
        }, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
          className: "map-manager-title",
          title: intl.formatMessage({
            id: panelMetadata.label
          })
        }, /*#__PURE__*/_react["default"].createElement(_styledComponents.Button, {
          className: "add-map-style-button",
          onClick: showAddMapStyleModal
        }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
          height: "12px"
        }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
          id: 'mapManager.addMapStyle'
        }))), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(MapStyleSelector, {
          mapStyle: mapStyle,
          isSelecting: this.state.isSelecting,
          onChange: this._selectStyle,
          toggleActive: this._toggleSelecting,
          customMapStylesActions: customMapStylesActions
        }), editableLayers.length ? /*#__PURE__*/_react["default"].createElement(LayerGroupSelector, {
          layers: mapStyle.visibleLayerGroups,
          editableLayers: editableLayers,
          topLayers: mapStyle.topLayerGroups,
          onChange: mapStyleActions.mapConfigChange,
          threeDBuildingColor: mapStyle.threeDBuildingColor,
          on3dBuildingColorChange: mapStyleActions.set3dBuildingColor,
          backgroundColor: mapStyle.backgroundColor,
          onBackgroundColorChange: mapStyleActions.setBackgroundColor
        }) : null));
      }
    }]);
  }(_react.Component);
  return (0, _reactIntl.injectIntl)(MapManager);
}
var _default = exports["default"] = MapManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,