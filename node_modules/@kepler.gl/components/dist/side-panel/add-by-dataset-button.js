"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _react2 = _interopRequireDefault(require("@tippyjs/react"));
var _icons = require("../common/icons");
var _styledComponents2 = require("../common/styled-components");
var _typeahead = _interopRequireDefault(require("../common/item-selector/typeahead"));
var _accessor = _interopRequireDefault(require("../common/item-selector/accessor"));
var _reactIntl = require("react-intl");
var _context = require("../context");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var DropdownContainer = _styledComponents["default"].div.attrs({
  className: 'add-layer-menu-dropdown'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .list-selector {\n    border-top: 1px solid ", ";\n    width: 100%;\n    /* disable scrolling, currently set to 280px internally */\n    max-height: unset;\n  }\n  .list__item > div {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    line-height: 18px;\n    padding: 0;\n    svg {\n      margin-right: 10px;\n    }\n  }\n"])), function (props) {
  return props.theme.secondaryInputBorderColor;
});
var DropdownMenu = _styledComponents["default"].div.attrs({
  className: 'dropdown-menu'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  min-width: 240px;\n  max-width: 240px;\n  position: absolute;\n  top: 100%;\n  left: -53px;\n  z-index: 5;\n"])));
var ListItemWrapper = _styledComponents["default"].div.attrs({
  className: 'dropdown-menu-list-item-wrapper'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  color: ", ";\n  font-size: 11px;\n  letter-spacing: 0.2px;\n  overflow: auto;\n  .dataset-color {\n    flex-shrink: 0;\n    margin-top: 3px;\n  }\n  .dataset-name {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n"])), function (props) {
  return props.theme.textColor;
});
var TYPEAHEAD_CLASS = 'typeahead';
var TYPEAHEAD_INPUT_CLASS = 'typeahead__input';
var ListItem = function ListItem(_ref) {
  var value = _ref.value;
  return /*#__PURE__*/_react["default"].createElement(ListItemWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.DatasetSquare, {
    className: "dataset-color",
    backgroundColor: value.color
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "dataset-name",
    title: value.label
  }, value.label));
};
var AddByDatasetButton = function AddByDatasetButton(_ref2) {
  var datasets = _ref2.datasets,
    onAdd = _ref2.onAdd,
    buttonIntlId = _ref2.buttonIntlId,
    width = _ref2.width,
    className = _ref2.className,
    inactive = _ref2.inactive;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    tippyInstance = _useState2[0],
    setTippyInstance = _useState2[1];
  var options = (0, _react.useMemo)(function () {
    return Object.values(datasets).map(function (ds) {
      return {
        label: ds.label,
        value: ds.id,
        color: ds.color
      };
    });
  }, [datasets]);
  var onClickBtn = (0, _react.useCallback)(function () {
    if (options.length === 1) {
      onAdd(options[0].value);
    }
    return;
  }, [options, onAdd]);
  var onOptionSelected = (0, _react.useCallback)(function (option) {
    if (!option) {
      return;
    }
    onAdd(option.value);
    if (tippyInstance) {
      // @ts-ignore
      tippyInstance.hide();
    }
  }, [onAdd, tippyInstance]);
  var intl = (0, _reactIntl.useIntl)();
  var buttonRendered = /*#__PURE__*/_react["default"].createElement(_styledComponents2.Button, {
    tabIndex: -1,
    className: className || 'add-by-dataset-button',
    width: width,
    onClick: onClickBtn,
    disabled: !options.length || inactive
  }, /*#__PURE__*/_react["default"].createElement(_icons.Add, {
    height: "12px"
  }), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: buttonIntlId
  }));
  return options.length === 1 ? buttonRendered : /*#__PURE__*/_react["default"].createElement(_context.RootContext.Consumer, null, function (context) {
    return /*#__PURE__*/_react["default"].createElement(_react2["default"], {
      trigger: "click",
      arrow: false,
      interactive: true,
      placement: "bottom",
      appendTo: (context === null || context === void 0 ? void 0 : context.current) || 'parent'
      // @ts-ignore
      ,
      onCreate: setTippyInstance,
      duration: 0,
      content: /*#__PURE__*/_react["default"].createElement(DropdownMenu, null, /*#__PURE__*/_react["default"].createElement(DropdownContainer, null, /*#__PURE__*/_react["default"].createElement(_typeahead["default"], {
        className: TYPEAHEAD_CLASS,
        customClasses: {
          results: 'list-selector',
          input: TYPEAHEAD_INPUT_CLASS,
          listItem: 'list__item'
        },
        placeholder: intl ? intl.formatMessage({
          id: 'placeholder.search'
        }) : 'Search',
        selectedItems: null,
        options: options,
        displayOption: _accessor["default"].generateOptionToStringFor('label'),
        filterOption: 'label',
        searchable: true,
        onOptionSelected: onOptionSelected,
        customListItemComponent: ListItem
      })))
    }, buttonRendered);
  });
};
var _default = exports["default"] = AddByDatasetButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,