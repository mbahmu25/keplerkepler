import React, { ComponentType } from 'react';
import PanelHeaderActionFactory from '../../side-panel/panel-header-action';
import { StyledPanelHeaderProps } from '../../common/styled-components';
import { RGBColor, Filter, Field } from '@kepler.gl/types';
import { KeplerTable } from '@kepler.gl/table';
interface StyledFilterHeaderProps extends StyledPanelHeaderProps {
    $labelRCGColorValues: RGBColor[];
}
export declare const StyledFilterHeader: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<Omit<import("styled-components/dist/types").FastOmit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof StyledPanelHeaderProps> & StyledPanelHeaderProps, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}, StyledFilterHeaderProps>> & Omit<import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledPanelHeaderProps>>, keyof React.Component<any, {}, any>>;
export declare type FilterPanelHeaderProps = {
    className?: string;
    datasets: KeplerTable[];
    filter: Filter;
    removeFilter: () => void;
    actionItems?: {
        key: string;
        tooltip: string;
        onClick: () => void;
        icon: React.ElementType;
    }[];
    actionIcons?: {
        delete: ComponentType;
    };
    allAvailableFields?: Field[];
    idx?: number;
    children: React.ReactNode;
};
declare function FilterPanelHeaderFactory(PanelHeaderAction: ReturnType<typeof PanelHeaderActionFactory>): React.ComponentType<FilterPanelHeaderProps>;
declare namespace FilterPanelHeaderFactory {
    var deps: (typeof PanelHeaderActionFactory)[];
}
export default FilterPanelHeaderFactory;
