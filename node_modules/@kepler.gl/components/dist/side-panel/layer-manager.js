"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LayerBlendingSelector = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntl = require("react-intl");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _layerList = _interopRequireDefault(require("./layer-panel/layer-list"));
var _datasetLayerGroup = _interopRequireDefault(require("./layer-panel/dataset-layer-group"));
var _panelViewListToggle = _interopRequireDefault(require("./panel-view-list-toggle"));
var _panelTitle = _interopRequireDefault(require("./panel-title"));
var _datasetSection = _interopRequireDefault(require("./layer-panel/dataset-section"));
var _addLayerButton = _interopRequireDefault(require("./layer-panel/add-layer-button"));
var _itemSelector = _interopRequireDefault(require("../common/item-selector/item-selector"));
var _styledComponents2 = require("../common/styled-components");
var _infoHelper = _interopRequireDefault(require("../common/info-helper"));
var _constants = require("@kepler.gl/constants");
var _templateObject, _templateObject2;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var LayerBlendingSelector = exports.LayerBlendingSelector = /*#__PURE__*/_react["default"].memo(function (_ref) {
  var layerBlending = _ref.layerBlending,
    updateLayerBlending = _ref.updateLayerBlending,
    intl = _ref.intl,
    className = _ref.className;
  var labeledLayerBlendings = Object.keys(_constants.LAYER_BLENDINGS).reduce(function (acc, current) {
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, intl.formatMessage({
      id: _constants.LAYER_BLENDINGS[current].label
    }), current));
  }, {});
  var onChange = (0, _react.useCallback)(function (blending) {
    return updateLayerBlending(labeledLayerBlendings[blending]);
  }, [updateLayerBlending, labeledLayerBlendings]);
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: "layerBlending.title"
  })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: intl.formatMessage({
      id: _constants.LAYER_BLENDINGS[layerBlending].label
    }),
    options: Object.keys(labeledLayerBlendings),
    multiSelect: false,
    searchable: false,
    onChange: onChange
  }));
});
LayerBlendingSelector.displayName = 'LayerBlendingSelector';
var InfoHelperWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  float: right;\n"])));
var OverlayBlendingSelectorTitleRow = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n"])));
var OverlayBlendingSelector = /*#__PURE__*/_react["default"].memo(function (_ref2) {
  var overlayBlending = _ref2.overlayBlending,
    updateOverlayBlending = _ref2.updateOverlayBlending,
    intl = _ref2.intl,
    infoHelper = _ref2.infoHelper;
  var labeledOverlayBlendings = Object.keys(_constants.OVERLAY_BLENDINGS).reduce(function (acc, current) {
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, intl.formatMessage({
      id: _constants.OVERLAY_BLENDINGS[current].label
    }), current));
  }, {});
  var onChange = (0, _react.useCallback)(function (blending) {
    return updateOverlayBlending(labeledOverlayBlendings[blending]);
  }, [updateOverlayBlending, labeledOverlayBlendings]);
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(OverlayBlendingSelectorTitleRow, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: "overlayBlending.title"
  })), /*#__PURE__*/_react["default"].createElement(InfoHelperWrapper, null, infoHelper)), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: intl.formatMessage({
      id: _constants.OVERLAY_BLENDINGS[overlayBlending].label
    }),
    options: Object.keys(labeledOverlayBlendings),
    multiSelect: false,
    searchable: false,
    onChange: onChange
  }));
});
OverlayBlendingSelector.displayName = 'OverlayBlendingSelector';
LayerManagerFactory.deps = [_layerList["default"], _datasetLayerGroup["default"], _panelViewListToggle["default"], _panelTitle["default"], _datasetSection["default"], _addLayerButton["default"], _infoHelper["default"]];
function LayerManagerFactory(LayerList, DatasetLayerGroup, PanelViewListToggle, PanelTitle, DatasetSection, AddLayerButton, InfoHelper) {
  var LayerManager = /*#__PURE__*/function (_Component) {
    function LayerManager() {
      var _this;
      (0, _classCallCheck2["default"])(this, LayerManager);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, LayerManager, [].concat(args));
      (0, _defineProperty2["default"])(_this, "_addLayer", function (dataset) {
        var visStateActions = _this.props.visStateActions;
        visStateActions.addLayer(undefined, dataset);
      });
      (0, _defineProperty2["default"])(_this, "_togglePanelListView", function (listView) {
        var uiStateActions = _this.props.uiStateActions;
        uiStateActions.togglePanelListView({
          panelId: 'layer',
          listView: listView
        });
      });
      return _this;
    }
    (0, _inherits2["default"])(LayerManager, _Component);
    return (0, _createClass2["default"])(LayerManager, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          layers = _this$props.layers,
          datasets = _this$props.datasets,
          intl = _this$props.intl,
          layerOrder = _this$props.layerOrder,
          showAddDataModal = _this$props.showAddDataModal,
          updateTableColor = _this$props.updateTableColor,
          showDatasetTable = _this$props.showDatasetTable,
          removeDataset = _this$props.removeDataset,
          uiStateActions = _this$props.uiStateActions,
          visStateActions = _this$props.visStateActions,
          mapStateActions = _this$props.mapStateActions,
          panelListView = _this$props.panelListView,
          panelMetadata = _this$props.panelMetadata;
        var isSortByDatasetMode = panelListView === _constants.PANEL_VIEW_TOGGLES.byDataset;
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: "layer-manager"
        }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(PanelViewListToggle, {
          togglePanelListView: this._togglePanelListView,
          mode: panelListView
        })), /*#__PURE__*/_react["default"].createElement(DatasetSection, {
          datasets: datasets,
          showDatasetTable: showDatasetTable,
          updateTableColor: updateTableColor,
          removeDataset: removeDataset,
          showDeleteDataset: true,
          showDatasetList: !isSortByDatasetMode,
          showAddDataModal: showAddDataModal
        }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelDivider, null), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(PanelTitle, {
          className: "layer-manager-title",
          title: intl.formatMessage({
            id: panelMetadata.label
          })
        }, /*#__PURE__*/_react["default"].createElement(AddLayerButton, {
          datasets: datasets,
          onAdd: this._addLayer
        }))), /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, isSortByDatasetMode ? /*#__PURE__*/_react["default"].createElement(DatasetLayerGroup, {
          datasets: datasets,
          showDatasetTable: showDatasetTable,
          layers: layers,
          updateTableColor: updateTableColor,
          removeDataset: removeDataset,
          layerOrder: layerOrder,
          layerClasses: this.props.layerClasses,
          uiStateActions: uiStateActions,
          visStateActions: visStateActions,
          mapStateActions: mapStateActions,
          showDeleteDataset: true
        }) :
        /*#__PURE__*/
        // TODO replace ignore
        // @ts-ignore
        _react["default"].createElement(LayerList, {
          layers: layers,
          datasets: datasets,
          layerOrder: layerOrder,
          uiStateActions: uiStateActions,
          visStateActions: visStateActions,
          mapStateActions: mapStateActions,
          layerClasses: this.props.layerClasses
        })), /*#__PURE__*/_react["default"].createElement(LayerBlendingSelector, {
          layerBlending: this.props.layerBlending,
          updateLayerBlending: visStateActions.updateLayerBlending,
          intl: intl
        }), /*#__PURE__*/_react["default"].createElement(OverlayBlendingSelector, {
          overlayBlending: this.props.overlayBlending,
          updateOverlayBlending: visStateActions.updateOverlayBlending,
          intl: intl,
          infoHelper: /*#__PURE__*/_react["default"].createElement(InfoHelper, {
            id: "overlayBlending-description",
            description: 'overlayBlending.description'
          })
        }));
      }
    }]);
  }(_react.Component);
  return (0, _reactIntl.injectIntl)(LayerManager);
}
var _default = exports["default"] = LayerManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,