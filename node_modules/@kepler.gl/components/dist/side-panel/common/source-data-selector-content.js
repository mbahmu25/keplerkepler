"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _datasetTag = _interopRequireDefault(require("./dataset-tag"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

SourceDataSelectorContentFactory.deps = [_datasetTag["default"]];
function SourceDataSelectorContentFactory(DatasetTag) {
  var DatasetItem = function DatasetItem(_ref) {
    var value = _ref.value;
    return /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: value
    });
  };
  var SourceDataSelectorContent = function SourceDataSelectorContent(_ref2) {
    var className = _ref2.className,
      datasets = _ref2.datasets,
      dataId = _ref2.dataId,
      inputTheme = _ref2.inputTheme,
      onSelect = _ref2.onSelect,
      defaultValue = _ref2.defaultValue,
      disabled = _ref2.disabled;
    var dsOptions = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (ds) {
        return {
          label: ds.label,
          value: ds.id,
          color: ds.color
        };
      });
    }, [datasets]);
    var selectedItems = (0, _react.useMemo)(function () {
      return dataId ? (Array.isArray(dataId) && dataId || [dataId]).map(function (id) {
        return datasets[id];
      }) : [];
    }, [dataId, datasets]);
    return /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      className: className,
      inputTheme: inputTheme,
      selectedItems: selectedItems,
      options: dsOptions,
      getOptionValue: 'value',
      filterOption: 'label',
      multiSelect: false,
      onChange: onSelect,
      placeholder: defaultValue,
      disabled: disabled,
      displayOption: 'label',
      DropDownLineItemRenderComponent: DatasetItem
    });
  };
  return SourceDataSelectorContent;
}
var _default = exports["default"] = SourceDataSelectorContentFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfaXRlbVNlbGVjdG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9kYXRhc2V0VGFnIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU291cmNlRGF0YVNlbGVjdG9yQ29udGVudEZhY3RvcnkiLCJkZXBzIiwiRGF0YXNldFRhZ0ZhY3RvcnkiLCJEYXRhc2V0VGFnIiwiRGF0YXNldEl0ZW0iLCJfcmVmIiwidmFsdWUiLCJjcmVhdGVFbGVtZW50IiwiZGF0YXNldCIsIlNvdXJjZURhdGFTZWxlY3RvckNvbnRlbnQiLCJfcmVmMiIsImNsYXNzTmFtZSIsImRhdGFzZXRzIiwiZGF0YUlkIiwiaW5wdXRUaGVtZSIsIm9uU2VsZWN0IiwiZGVmYXVsdFZhbHVlIiwiZGlzYWJsZWQiLCJkc09wdGlvbnMiLCJ1c2VNZW1vIiwidmFsdWVzIiwibWFwIiwiZHMiLCJsYWJlbCIsImlkIiwiY29sb3IiLCJzZWxlY3RlZEl0ZW1zIiwiQXJyYXkiLCJpc0FycmF5Iiwib3B0aW9ucyIsImdldE9wdGlvblZhbHVlIiwiZmlsdGVyT3B0aW9uIiwibXVsdGlTZWxlY3QiLCJvbkNoYW5nZSIsInBsYWNlaG9sZGVyIiwiZGlzcGxheU9wdGlvbiIsIkRyb3BEb3duTGluZUl0ZW1SZW5kZXJDb21wb25lbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lkZS1wYW5lbC9jb21tb24vc291cmNlLWRhdGEtc2VsZWN0b3ItY29udGVudC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgSXRlbVNlbGVjdG9yIGZyb20gJy4uLy4uL2NvbW1vbi9pdGVtLXNlbGVjdG9yL2l0ZW0tc2VsZWN0b3InO1xuaW1wb3J0IERhdGFzZXRUYWdGYWN0b3J5IGZyb20gJy4vZGF0YXNldC10YWcnO1xuaW1wb3J0IHtTb3VyY2VEYXRhU2VsZWN0b3JQcm9wc30gZnJvbSAnLi90eXBlcyc7XG5cblNvdXJjZURhdGFTZWxlY3RvckNvbnRlbnRGYWN0b3J5LmRlcHMgPSBbRGF0YXNldFRhZ0ZhY3RvcnldO1xuXG5mdW5jdGlvbiBTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50RmFjdG9yeShEYXRhc2V0VGFnKSB7XG4gIGNvbnN0IERhdGFzZXRJdGVtID0gKHt2YWx1ZX0pID0+IDxEYXRhc2V0VGFnIGRhdGFzZXQ9e3ZhbHVlfSAvPjtcblxuICBjb25zdCBTb3VyY2VEYXRhU2VsZWN0b3JDb250ZW50ID0gKHtcbiAgICBjbGFzc05hbWUsXG4gICAgZGF0YXNldHMsXG4gICAgZGF0YUlkLFxuICAgIGlucHV0VGhlbWUsXG4gICAgb25TZWxlY3QsXG4gICAgZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkXG4gIH06IFNvdXJjZURhdGFTZWxlY3RvclByb3BzKSA9PiB7XG4gICAgY29uc3QgZHNPcHRpb25zID0gdXNlTWVtbyhcbiAgICAgICgpID0+XG4gICAgICAgIE9iamVjdC52YWx1ZXMoZGF0YXNldHMpLm1hcChkcyA9PiAoe1xuICAgICAgICAgIGxhYmVsOiBkcy5sYWJlbCxcbiAgICAgICAgICB2YWx1ZTogZHMuaWQsXG4gICAgICAgICAgY29sb3I6IGRzLmNvbG9yXG4gICAgICAgIH0pKSxcbiAgICAgIFtkYXRhc2V0c11cbiAgICApO1xuXG4gICAgY29uc3Qgc2VsZWN0ZWRJdGVtcyA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiAoZGF0YUlkID8gKChBcnJheS5pc0FycmF5KGRhdGFJZCkgJiYgZGF0YUlkKSB8fCBbZGF0YUlkXSkubWFwKGlkID0+IGRhdGFzZXRzW2lkXSkgOiBbXSksXG4gICAgICBbZGF0YUlkLCBkYXRhc2V0c11cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxJdGVtU2VsZWN0b3JcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgIGlucHV0VGhlbWU9e2lucHV0VGhlbWV9XG4gICAgICAgIHNlbGVjdGVkSXRlbXM9e3NlbGVjdGVkSXRlbXN9XG4gICAgICAgIG9wdGlvbnM9e2RzT3B0aW9uc31cbiAgICAgICAgZ2V0T3B0aW9uVmFsdWU9eyd2YWx1ZSd9XG4gICAgICAgIGZpbHRlck9wdGlvbj17J2xhYmVsJ31cbiAgICAgICAgbXVsdGlTZWxlY3Q9e2ZhbHNlfVxuICAgICAgICBvbkNoYW5nZT17b25TZWxlY3R9XG4gICAgICAgIHBsYWNlaG9sZGVyPXtkZWZhdWx0VmFsdWV9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgZGlzcGxheU9wdGlvbj17J2xhYmVsJ31cbiAgICAgICAgRHJvcERvd25MaW5lSXRlbVJlbmRlckNvbXBvbmVudD17RGF0YXNldEl0ZW19XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFNvdXJjZURhdGFTZWxlY3RvckNvbnRlbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvdXJjZURhdGFTZWxlY3RvckNvbnRlbnRGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFdBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUE4QyxTQUFBSSx5QkFBQUMsQ0FBQSw2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