"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DatasetTitleFactory;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _layers = require("@kepler.gl/layers");
var _styledComponents2 = require("../../common/styled-components");
var _icons = require("../../common/icons");
var _datasetTag = _interopRequireDefault(require("./dataset-tag"));
var _customPicker = _interopRequireDefault(require("../layer-panel/custom-picker"));
var _ = require("../..");
var _utils = require("@kepler.gl/utils");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledDatasetTitle = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  display: flex;\n  align-items: flex-start;\n\n  .source-data-arrow {\n    height: 16px;\n  }\n  &:hover {\n    cursor: ", ";\n\n    .dataset-name {\n      color: ", ";\n    }\n\n    .dataset-action {\n      color: ", ";\n      opacity: 1;\n    }\n\n    .dataset-action:hover {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.clickable ? 'pointer' : 'auto';
}, function (props) {
  return props.clickable ? props.theme.textColorHl : props.theme.textColor;
}, function (props) {
  return props.theme.textColor;
}, function (props) {
  return props.theme.textColorHl;
});
var DataTagAction = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-left: 12px;\n  height: 16px;\n  opacity: 0;\n"])));
var ShowDataTable = function ShowDataTable(_ref) {
  var id = _ref.id,
    showDatasetTable = _ref.showDatasetTable;
  return /*#__PURE__*/_react["default"].createElement(DataTagAction, {
    className: "dataset-action show-data-table",
    "data-tip": true,
    "data-for": "data-table-".concat(id)
  }, /*#__PURE__*/_react["default"].createElement(_layers.Table, {
    height: "16px",
    onClick: function onClick(e) {
      e.stopPropagation();
      showDatasetTable === null || showDatasetTable === void 0 || showDatasetTable(id);
    }
  }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "data-table-".concat(id),
    effect: "solid"
  }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'datasetTitle.showDataTable'
  }))));
};
var RemoveDataset = function RemoveDataset(_ref2) {
  var datasetKey = _ref2.datasetKey,
    removeDataset = _ref2.removeDataset;
  return /*#__PURE__*/_react["default"].createElement(DataTagAction, {
    className: "dataset-action remove-dataset",
    "data-tip": true,
    "data-for": "delete-".concat(datasetKey)
  }, /*#__PURE__*/_react["default"].createElement(_icons.Trash, {
    height: "16px",
    onClick: function onClick(e) {
      e.stopPropagation();
      removeDataset === null || removeDataset === void 0 || removeDataset(datasetKey);
    }
  }), /*#__PURE__*/_react["default"].createElement(_styledComponents2.Tooltip, {
    id: "delete-".concat(datasetKey),
    effect: "solid",
    type: "error"
  }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'datasetTitle.removeDataset'
  }))));
};
DatasetTitleFactory.deps = [_datasetTag["default"]];
function DatasetTitleFactory(DatasetTag) {
  var DatasetTitle = function DatasetTitle(_ref3) {
    var showDatasetTable = _ref3.showDatasetTable,
      showDeleteDataset = _ref3.showDeleteDataset,
      onTitleClick = _ref3.onTitleClick,
      removeDataset = _ref3.removeDataset,
      dataset = _ref3.dataset,
      updateTableColor = _ref3.updateTableColor;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      displayColorPicker = _useState2[0],
      setDisplayColorPicker = _useState2[1];
    var root = (0, _react.useRef)(null);
    var datasetId = dataset.id;
    var _handleClick = (0, _react.useCallback)(function () {
      setDisplayColorPicker(!displayColorPicker);
    }, [setDisplayColorPicker, displayColorPicker]);
    var _handleClosePicker = (0, _react.useCallback)(function () {
      setDisplayColorPicker(false);
    }, [setDisplayColorPicker]);
    var _handleCustomPicker = (0, _react.useCallback)(function (color) {
      updateTableColor(datasetId, [color.rgb.r, color.rgb.g, color.rgb.b]);
    }, [updateTableColor, datasetId]);
    var _onClickTitle = (0, _react.useCallback)(function (e) {
      e.stopPropagation();
      if (typeof onTitleClick === 'function') {
        onTitleClick();
      } else if (typeof showDatasetTable === 'function') {
        if (dataset.disableDataOperation) return;
        showDatasetTable(datasetId);
      }
    }, [onTitleClick, showDatasetTable, datasetId, dataset.disableDataOperation]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "custom-palette-panel",
      ref: root
    }, /*#__PURE__*/_react["default"].createElement(StyledDatasetTitle, {
      className: "source-data-title",
      clickable: Boolean(showDatasetTable || onTitleClick)
    }, /*#__PURE__*/_react["default"].createElement(DatasetTag, {
      dataset: dataset,
      onClick: _onClickTitle,
      updateTableColor: updateTableColor,
      onClickSquare: _handleClick
    }), /*#__PURE__*/_react["default"].createElement(_.Portaled, {
      isOpened: displayColorPicker !== false,
      left: 110,
      top: -50,
      onClose: _handleClosePicker
    }, /*#__PURE__*/_react["default"].createElement(_customPicker["default"], {
      color: (0, _utils.rgbToHex)(dataset.color),
      onChange: _handleCustomPicker
    })), showDatasetTable ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.CenterFlexbox, {
      className: "source-data-arrow"
    }, /*#__PURE__*/_react["default"].createElement(_icons.ArrowRight, {
      height: "12px"
    })) : null, showDatasetTable && !dataset.disableDataOperation ? /*#__PURE__*/_react["default"].createElement(ShowDataTable, {
      id: datasetId,
      showDatasetTable: showDatasetTable
    }) : null, showDeleteDataset ? /*#__PURE__*/_react["default"].createElement(RemoveDataset, {
      datasetKey: datasetId,
      removeDataset: removeDataset
    }) : null));
  };
  return DatasetTitle;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9jYWxpemF0aW9uIiwiX2xheWVycyIsIl9zdHlsZWRDb21wb25lbnRzMiIsIl9pY29ucyIsIl9kYXRhc2V0VGFnIiwiX2N1c3RvbVBpY2tlciIsIl8iLCJfdXRpbHMiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiU3R5bGVkRGF0YXNldFRpdGxlIiwic3R5bGVkIiwiZGl2IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDIiLCJwcm9wcyIsInRoZW1lIiwidGV4dENvbG9yIiwiY2xpY2thYmxlIiwidGV4dENvbG9ySGwiLCJEYXRhVGFnQWN0aW9uIiwiU2hvd0RhdGFUYWJsZSIsIl9yZWYiLCJpZCIsInNob3dEYXRhc2V0VGFibGUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiY29uY2F0IiwiVGFibGUiLCJoZWlnaHQiLCJvbkNsaWNrIiwic3RvcFByb3BhZ2F0aW9uIiwiVG9vbHRpcCIsImVmZmVjdCIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJSZW1vdmVEYXRhc2V0IiwiX3JlZjIiLCJkYXRhc2V0S2V5IiwicmVtb3ZlRGF0YXNldCIsIlRyYXNoIiwidHlwZSIsIkRhdGFzZXRUaXRsZUZhY3RvcnkiLCJkZXBzIiwiRGF0YXNldFRhZ0ZhY3RvcnkiLCJEYXRhc2V0VGFnIiwiRGF0YXNldFRpdGxlIiwiX3JlZjMiLCJzaG93RGVsZXRlRGF0YXNldCIsIm9uVGl0bGVDbGljayIsImRhdGFzZXQiLCJ1cGRhdGVUYWJsZUNvbG9yIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiZGlzcGxheUNvbG9yUGlja2VyIiwic2V0RGlzcGxheUNvbG9yUGlja2VyIiwicm9vdCIsInVzZVJlZiIsImRhdGFzZXRJZCIsIl9oYW5kbGVDbGljayIsInVzZUNhbGxiYWNrIiwiX2hhbmRsZUNsb3NlUGlja2VyIiwiX2hhbmRsZUN1c3RvbVBpY2tlciIsImNvbG9yIiwicmdiIiwiZyIsImIiLCJfb25DbGlja1RpdGxlIiwiZGlzYWJsZURhdGFPcGVyYXRpb24iLCJyZWYiLCJCb29sZWFuIiwib25DbGlja1NxdWFyZSIsIlBvcnRhbGVkIiwiaXNPcGVuZWQiLCJsZWZ0IiwidG9wIiwib25DbG9zZSIsInJnYlRvSGV4Iiwib25DaGFuZ2UiLCJDZW50ZXJGbGV4Ym94IiwiQXJyb3dSaWdodCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWRlLXBhbmVsL2NvbW1vbi9kYXRhc2V0LXRpdGxlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvbG9jYWxpemF0aW9uJztcblxuaW1wb3J0IHtUYWJsZX0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuaW1wb3J0IHtDZW50ZXJGbGV4Ym94LCBUb29sdGlwfSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtBcnJvd1JpZ2h0LCBUcmFzaH0gZnJvbSAnLi4vLi4vY29tbW9uL2ljb25zJztcbmltcG9ydCBEYXRhc2V0VGFnRmFjdG9yeSBmcm9tICcuL2RhdGFzZXQtdGFnJztcbmltcG9ydCBDdXN0b21QaWNrZXIgZnJvbSAnLi4vbGF5ZXItcGFuZWwvY3VzdG9tLXBpY2tlcic7XG5pbXBvcnQge1BvcnRhbGVkfSBmcm9tICcuLi8uLic7XG5pbXBvcnQge3JnYlRvSGV4fSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcbmltcG9ydCB7b3BlbkRlbGV0ZU1vZGFsLCBWaXNTdGF0ZUFjdGlvbnMsIEFjdGlvbkhhbmRsZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge1JHQkNvbG9yfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7U3R5bGVkRGF0YXNldFRpdGxlUHJvcHMsIFJlbW92ZURhdGFzZXRQcm9wcywgU2hvd0RhdGFUYWJsZVByb3BzfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgU3R5bGVkRGF0YXNldFRpdGxlID0gc3R5bGVkLmRpdjxTdHlsZWREYXRhc2V0VGl0bGVQcm9wcz5gXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnRleHRDb2xvcn07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuXG4gIC5zb3VyY2UtZGF0YS1hcnJvdyB7XG4gICAgaGVpZ2h0OiAxNnB4O1xuICB9XG4gICY6aG92ZXIge1xuICAgIGN1cnNvcjogJHtwcm9wcyA9PiAocHJvcHMuY2xpY2thYmxlID8gJ3BvaW50ZXInIDogJ2F1dG8nKX07XG5cbiAgICAuZGF0YXNldC1uYW1lIHtcbiAgICAgIGNvbG9yOiAke3Byb3BzID0+IChwcm9wcy5jbGlja2FibGUgPyBwcm9wcy50aGVtZS50ZXh0Q29sb3JIbCA6IHByb3BzLnRoZW1lLnRleHRDb2xvcil9O1xuICAgIH1cblxuICAgIC5kYXRhc2V0LWFjdGlvbiB7XG4gICAgICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS50ZXh0Q29sb3J9O1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG5cbiAgICAuZGF0YXNldC1hY3Rpb246aG92ZXIge1xuICAgICAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGV4dENvbG9ySGx9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgRGF0YVRhZ0FjdGlvbiA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBoZWlnaHQ6IDE2cHg7XG4gIG9wYWNpdHk6IDA7XG5gO1xuXG50eXBlIE1pbmlEYXRhc2V0ID0ge1xuICBpZDogc3RyaW5nO1xuICBjb2xvcjogUkdCQ29sb3I7XG4gIGxhYmVsPzogc3RyaW5nO1xuICBkaXNhYmxlRGF0YU9wZXJhdGlvbj86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBEYXRhc2V0VGl0bGVQcm9wcyA9IHtcbiAgZGF0YXNldDogTWluaURhdGFzZXQ7XG4gIHNob3dEZWxldGVEYXRhc2V0OiBib29sZWFuO1xuICBvblRpdGxlQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICBzaG93RGF0YXNldFRhYmxlPzogQWN0aW9uSGFuZGxlcjx0eXBlb2YgVmlzU3RhdGVBY3Rpb25zLnNob3dEYXRhc2V0VGFibGU+O1xuICB1cGRhdGVUYWJsZUNvbG9yOiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnMudXBkYXRlVGFibGVDb2xvcj47XG4gIHJlbW92ZURhdGFzZXQ/OiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBvcGVuRGVsZXRlTW9kYWw+O1xufTtcblxuY29uc3QgU2hvd0RhdGFUYWJsZSA9ICh7aWQsIHNob3dEYXRhc2V0VGFibGV9OiBTaG93RGF0YVRhYmxlUHJvcHMpID0+IChcbiAgPERhdGFUYWdBY3Rpb24gY2xhc3NOYW1lPVwiZGF0YXNldC1hY3Rpb24gc2hvdy1kYXRhLXRhYmxlXCIgZGF0YS10aXAgZGF0YS1mb3I9e2BkYXRhLXRhYmxlLSR7aWR9YH0+XG4gICAgPFRhYmxlXG4gICAgICBoZWlnaHQ9XCIxNnB4XCJcbiAgICAgIG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzaG93RGF0YXNldFRhYmxlPy4oaWQpO1xuICAgICAgfX1cbiAgICAvPlxuICAgIDxUb29sdGlwIGlkPXtgZGF0YS10YWJsZS0ke2lkfWB9IGVmZmVjdD1cInNvbGlkXCI+XG4gICAgICA8c3Bhbj5cbiAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9eydkYXRhc2V0VGl0bGUuc2hvd0RhdGFUYWJsZSd9IC8+XG4gICAgICA8L3NwYW4+XG4gICAgPC9Ub29sdGlwPlxuICA8L0RhdGFUYWdBY3Rpb24+XG4pO1xuXG5jb25zdCBSZW1vdmVEYXRhc2V0ID0gKHtkYXRhc2V0S2V5LCByZW1vdmVEYXRhc2V0fTogUmVtb3ZlRGF0YXNldFByb3BzKSA9PiAoXG4gIDxEYXRhVGFnQWN0aW9uXG4gICAgY2xhc3NOYW1lPVwiZGF0YXNldC1hY3Rpb24gcmVtb3ZlLWRhdGFzZXRcIlxuICAgIGRhdGEtdGlwXG4gICAgZGF0YS1mb3I9e2BkZWxldGUtJHtkYXRhc2V0S2V5fWB9XG4gID5cbiAgICA8VHJhc2hcbiAgICAgIGhlaWdodD1cIjE2cHhcIlxuICAgICAgb25DbGljaz17ZSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJlbW92ZURhdGFzZXQ/LihkYXRhc2V0S2V5KTtcbiAgICAgIH19XG4gICAgLz5cbiAgICA8VG9vbHRpcCBpZD17YGRlbGV0ZS0ke2RhdGFzZXRLZXl9YH0gZWZmZWN0PVwic29saWRcIiB0eXBlPVwiZXJyb3JcIj5cbiAgICAgIDxzcGFuPlxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17J2RhdGFzZXRUaXRsZS5yZW1vdmVEYXRhc2V0J30gLz5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L1Rvb2x0aXA+XG4gIDwvRGF0YVRhZ0FjdGlvbj5cbik7XG5cbkRhdGFzZXRUaXRsZUZhY3RvcnkuZGVwcyA9IFtEYXRhc2V0VGFnRmFjdG9yeV07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERhdGFzZXRUaXRsZUZhY3RvcnkoXG4gIERhdGFzZXRUYWc6IFJldHVyblR5cGU8dHlwZW9mIERhdGFzZXRUYWdGYWN0b3J5PlxuKTogUmVhY3QuRkM8RGF0YXNldFRpdGxlUHJvcHM+IHtcbiAgY29uc3QgRGF0YXNldFRpdGxlOiBSZWFjdC5GQzxEYXRhc2V0VGl0bGVQcm9wcz4gPSAoe1xuICAgIHNob3dEYXRhc2V0VGFibGUsXG4gICAgc2hvd0RlbGV0ZURhdGFzZXQsXG4gICAgb25UaXRsZUNsaWNrLFxuICAgIHJlbW92ZURhdGFzZXQsXG4gICAgZGF0YXNldCxcbiAgICB1cGRhdGVUYWJsZUNvbG9yXG4gIH0pID0+IHtcbiAgICBjb25zdCBbZGlzcGxheUNvbG9yUGlja2VyLCBzZXREaXNwbGF5Q29sb3JQaWNrZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IHJvb3QgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3QgZGF0YXNldElkID0gZGF0YXNldC5pZDtcbiAgICBjb25zdCBfaGFuZGxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBzZXREaXNwbGF5Q29sb3JQaWNrZXIoIWRpc3BsYXlDb2xvclBpY2tlcik7XG4gICAgfSwgW3NldERpc3BsYXlDb2xvclBpY2tlciwgZGlzcGxheUNvbG9yUGlja2VyXSk7XG5cbiAgICBjb25zdCBfaGFuZGxlQ2xvc2VQaWNrZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBzZXREaXNwbGF5Q29sb3JQaWNrZXIoZmFsc2UpO1xuICAgIH0sIFtzZXREaXNwbGF5Q29sb3JQaWNrZXJdKTtcbiAgICBjb25zdCBfaGFuZGxlQ3VzdG9tUGlja2VyID0gdXNlQ2FsbGJhY2soXG4gICAgICAoY29sb3I6IHtyZ2I6IFJlY29yZDxzdHJpbmcsIG51bWJlcj59KSA9PiB7XG4gICAgICAgIHVwZGF0ZVRhYmxlQ29sb3IoZGF0YXNldElkLCBbY29sb3IucmdiLnIsIGNvbG9yLnJnYi5nLCBjb2xvci5yZ2IuYl0pO1xuICAgICAgfSxcbiAgICAgIFt1cGRhdGVUYWJsZUNvbG9yLCBkYXRhc2V0SWRdXG4gICAgKTtcblxuICAgIGNvbnN0IF9vbkNsaWNrVGl0bGUgPSB1c2VDYWxsYmFjayhcbiAgICAgIChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAodHlwZW9mIG9uVGl0bGVDbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9uVGl0bGVDbGljaygpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzaG93RGF0YXNldFRhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGRhdGFzZXQuZGlzYWJsZURhdGFPcGVyYXRpb24pIHJldHVybjtcbiAgICAgICAgICBzaG93RGF0YXNldFRhYmxlKGRhdGFzZXRJZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbb25UaXRsZUNsaWNrLCBzaG93RGF0YXNldFRhYmxlLCBkYXRhc2V0SWQsIGRhdGFzZXQuZGlzYWJsZURhdGFPcGVyYXRpb25dXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImN1c3RvbS1wYWxldHRlLXBhbmVsXCIgcmVmPXtyb290fT5cbiAgICAgICAgPFN0eWxlZERhdGFzZXRUaXRsZVxuICAgICAgICAgIGNsYXNzTmFtZT1cInNvdXJjZS1kYXRhLXRpdGxlXCJcbiAgICAgICAgICBjbGlja2FibGU9e0Jvb2xlYW4oc2hvd0RhdGFzZXRUYWJsZSB8fCBvblRpdGxlQ2xpY2spfVxuICAgICAgICA+XG4gICAgICAgICAgPERhdGFzZXRUYWdcbiAgICAgICAgICAgIGRhdGFzZXQ9e2RhdGFzZXR9XG4gICAgICAgICAgICBvbkNsaWNrPXtfb25DbGlja1RpdGxlfVxuICAgICAgICAgICAgdXBkYXRlVGFibGVDb2xvcj17dXBkYXRlVGFibGVDb2xvcn1cbiAgICAgICAgICAgIG9uQ2xpY2tTcXVhcmU9e19oYW5kbGVDbGlja31cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxQb3J0YWxlZFxuICAgICAgICAgICAgaXNPcGVuZWQ9e2Rpc3BsYXlDb2xvclBpY2tlciAhPT0gZmFsc2V9XG4gICAgICAgICAgICBsZWZ0PXsxMTB9XG4gICAgICAgICAgICB0b3A9ey01MH1cbiAgICAgICAgICAgIG9uQ2xvc2U9e19oYW5kbGVDbG9zZVBpY2tlcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q3VzdG9tUGlja2VyIGNvbG9yPXtyZ2JUb0hleChkYXRhc2V0LmNvbG9yKX0gb25DaGFuZ2U9e19oYW5kbGVDdXN0b21QaWNrZXJ9IC8+XG4gICAgICAgICAgPC9Qb3J0YWxlZD5cbiAgICAgICAgICB7c2hvd0RhdGFzZXRUYWJsZSA/IChcbiAgICAgICAgICAgIDxDZW50ZXJGbGV4Ym94IGNsYXNzTmFtZT1cInNvdXJjZS1kYXRhLWFycm93XCI+XG4gICAgICAgICAgICAgIDxBcnJvd1JpZ2h0IGhlaWdodD1cIjEycHhcIiAvPlxuICAgICAgICAgICAgPC9DZW50ZXJGbGV4Ym94PlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIHtzaG93RGF0YXNldFRhYmxlICYmICFkYXRhc2V0LmRpc2FibGVEYXRhT3BlcmF0aW9uID8gKFxuICAgICAgICAgICAgPFNob3dEYXRhVGFibGUgaWQ9e2RhdGFzZXRJZH0gc2hvd0RhdGFzZXRUYWJsZT17c2hvd0RhdGFzZXRUYWJsZX0gLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICB7c2hvd0RlbGV0ZURhdGFzZXQgPyAoXG4gICAgICAgICAgICA8UmVtb3ZlRGF0YXNldCBkYXRhc2V0S2V5PXtkYXRhc2V0SWR9IHJlbW92ZURhdGFzZXQ9e3JlbW92ZURhdGFzZXR9IC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvU3R5bGVkRGF0YXNldFRpdGxl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