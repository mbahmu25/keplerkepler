"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DatasetTagFactory;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _localization = require("@kepler.gl/localization");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _ = require("../..");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function nop() {
  return;
}
var DatasetTagWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  color: ", ";\n  font-size: 11px;\n  letter-spacing: 0.2px;\n  overflow: auto;\n\n  .dataset-color {\n    flex-shrink: 0;\n    margin-top: 3px;\n  }\n\n  .dataset-name {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n"])), function (props) {
  return props.theme.textColor;
});
var DatasetColorPicker = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n"])));
var UpdateTableColor = function UpdateTableColor(_ref) {
  var children = _ref.children,
    id = _ref.id;
  return /*#__PURE__*/_react["default"].createElement(DatasetColorPicker, {
    className: "dataset-action update-color",
    "data-tip": true,
    "data-for": "update-color-".concat(id)
  }, children);
};
function DatasetTagFactory() {
  var DatasetTag = function DatasetTag(_ref2) {
    var _ref2$onClick = _ref2.onClick,
      onClick = _ref2$onClick === void 0 ? nop : _ref2$onClick,
      _ref2$onClickSquare = _ref2.onClickSquare,
      onClickSquare = _ref2$onClickSquare === void 0 ? nop : _ref2$onClickSquare,
      dataset = _ref2.dataset,
      updateTableColor = _ref2.updateTableColor;
    return /*#__PURE__*/_react["default"].createElement(DatasetTagWrapper, {
      className: "source-data-tag"
    }, /*#__PURE__*/_react["default"].createElement(UpdateTableColor, {
      id: dataset.id
    }, /*#__PURE__*/_react["default"].createElement(_.DatasetSquare, {
      className: "dataset-color",
      backgroundColor: dataset.color,
      onClick: onClickSquare,
      "data-tip": true,
      "data-for": "update-color-".concat(dataset.id)
    }), updateTableColor ? /*#__PURE__*/_react["default"].createElement(_.Tooltip, {
      id: "update-color-".concat(dataset.id),
      effect: "solid"
    }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'Update color'
    }))) : null), /*#__PURE__*/_react["default"].createElement("div", {
      className: "dataset-name",
      title: dataset.label,
      onClick: onClick
    }, dataset.label));
  };
  return DatasetTag;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9sb2NhbGl6YXRpb24iLCJfc3R5bGVkQ29tcG9uZW50cyIsIl8iLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwibm9wIiwiRGF0YXNldFRhZ1dyYXBwZXIiLCJzdHlsZWQiLCJkaXYiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsInByb3BzIiwidGhlbWUiLCJ0ZXh0Q29sb3IiLCJEYXRhc2V0Q29sb3JQaWNrZXIiLCJVcGRhdGVUYWJsZUNvbG9yIiwiX3JlZiIsImNoaWxkcmVuIiwiaWQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiY29uY2F0IiwiRGF0YXNldFRhZ0ZhY3RvcnkiLCJEYXRhc2V0VGFnIiwiX3JlZjIiLCJfcmVmMiRvbkNsaWNrIiwib25DbGljayIsIl9yZWYyJG9uQ2xpY2tTcXVhcmUiLCJvbkNsaWNrU3F1YXJlIiwiZGF0YXNldCIsInVwZGF0ZVRhYmxlQ29sb3IiLCJEYXRhc2V0U3F1YXJlIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJUb29sdGlwIiwiZWZmZWN0IiwiRm9ybWF0dGVkTWVzc2FnZSIsInRpdGxlIiwibGFiZWwiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lkZS1wYW5lbC9jb21tb24vZGF0YXNldC10YWcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvbG9jYWxpemF0aW9uJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtEYXRhc2V0U3F1YXJlLCBUb29sdGlwfSBmcm9tICcuLi8uLic7XG5pbXBvcnQge1VwZGF0ZVRhYmxlQ29sb3JUeXBlc30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1JHQkNvbG9yfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7VmlzU3RhdGVBY3Rpb25zLCBBY3Rpb25IYW5kbGVyfSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuXG5mdW5jdGlvbiBub3AoKSB7XG4gIHJldHVybjtcbn1cblxuY29uc3QgRGF0YXNldFRhZ1dyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBjb2xvcjogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS50ZXh0Q29sb3J9O1xuICBmb250LXNpemU6IDExcHg7XG4gIGxldHRlci1zcGFjaW5nOiAwLjJweDtcbiAgb3ZlcmZsb3c6IGF1dG87XG5cbiAgLmRhdGFzZXQtY29sb3Ige1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgIG1hcmdpbi10b3A6IDNweDtcbiAgfVxuXG4gIC5kYXRhc2V0LW5hbWUge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgfVxuYDtcblxuY29uc3QgRGF0YXNldENvbG9yUGlja2VyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbmA7XG5cbmNvbnN0IFVwZGF0ZVRhYmxlQ29sb3IgPSAoe2NoaWxkcmVuLCBpZH06IFVwZGF0ZVRhYmxlQ29sb3JUeXBlcykgPT4gKFxuICA8RGF0YXNldENvbG9yUGlja2VyXG4gICAgY2xhc3NOYW1lPVwiZGF0YXNldC1hY3Rpb24gdXBkYXRlLWNvbG9yXCJcbiAgICBkYXRhLXRpcFxuICAgIGRhdGEtZm9yPXtgdXBkYXRlLWNvbG9yLSR7aWR9YH1cbiAgPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9EYXRhc2V0Q29sb3JQaWNrZXI+XG4pO1xuXG50eXBlIE1pbmlEYXRhc2V0ID0ge1xuICBpZDogc3RyaW5nO1xuICBjb2xvcjogUkdCQ29sb3I7XG4gIGxhYmVsPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgRGF0YXNldFRhZ1Byb3BzID0ge1xuICBpZD86IHN0cmluZztcbiAgZGF0YXNldDogTWluaURhdGFzZXQ7XG4gIHVwZGF0ZVRhYmxlQ29sb3I/OiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnMudXBkYXRlVGFibGVDb2xvcj47XG4gIG9uQ2xpY2s/OiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD47XG4gIG9uQ2xpY2tTcXVhcmU/OiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlcjxIVE1MRGl2RWxlbWVudD47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXRhc2V0VGFnRmFjdG9yeSgpOiBSZWFjdC5GQzxEYXRhc2V0VGFnUHJvcHM+IHtcbiAgY29uc3QgRGF0YXNldFRhZyA9ICh7XG4gICAgb25DbGljayA9IG5vcCxcbiAgICBvbkNsaWNrU3F1YXJlID0gbm9wLFxuICAgIGRhdGFzZXQsXG4gICAgdXBkYXRlVGFibGVDb2xvclxuICB9OiBEYXRhc2V0VGFnUHJvcHMpID0+IChcbiAgICA8RGF0YXNldFRhZ1dyYXBwZXIgY2xhc3NOYW1lPVwic291cmNlLWRhdGEtdGFnXCI+XG4gICAgICA8VXBkYXRlVGFibGVDb2xvciBpZD17ZGF0YXNldC5pZH0+XG4gICAgICAgIDxEYXRhc2V0U3F1YXJlXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZGF0YXNldC1jb2xvclwiXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPXtkYXRhc2V0LmNvbG9yfVxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2tTcXVhcmV9XG4gICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICBkYXRhLWZvcj17YHVwZGF0ZS1jb2xvci0ke2RhdGFzZXQuaWR9YH1cbiAgICAgICAgLz5cbiAgICAgICAge3VwZGF0ZVRhYmxlQ29sb3IgPyAoXG4gICAgICAgICAgPFRvb2x0aXAgaWQ9e2B1cGRhdGUtY29sb3ItJHtkYXRhc2V0LmlkfWB9IGVmZmVjdD1cInNvbGlkXCI+XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9eydVcGRhdGUgY29sb3InfSAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L1VwZGF0ZVRhYmxlQ29sb3I+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhdGFzZXQtbmFtZVwiIHRpdGxlPXtkYXRhc2V0LmxhYmVsfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAge2RhdGFzZXQubGFiZWx9XG4gICAgICA8L2Rpdj5cbiAgICA8L0RhdGFzZXRUYWdXcmFwcGVyPlxuICApO1xuXG4gIHJldHVybiBEYXRhc2V0VGFnO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGlCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxDQUFBLEdBQUFILE9BQUE7QUFBNkMsSUFBQUksZUFBQSxFQUFBQyxnQkFBQSxFQU43QztBQUNBO0FBVUEsU0FBU0MsR0FBR0EsQ0FBQSxFQUFHO0VBQ2I7QUFDRjtBQUVBLElBQU1DLGlCQUFpQixHQUFHQyw0QkFBTSxDQUFDQyxHQUFHLENBQUFMLGVBQUEsS0FBQUEsZUFBQSxPQUFBTSx1QkFBQSx5U0FFekIsVUFBQUMsS0FBSztFQUFBLE9BQUlBLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyxTQUFTO0FBQUEsRUFleEM7QUFFRCxJQUFNQyxrQkFBa0IsR0FBR04sNEJBQU0sQ0FBQ0MsR0FBRyxDQUFBSixnQkFBQSxLQUFBQSxnQkFBQSxPQUFBSyx1QkFBQSx3Q0FFcEM7QUFFRCxJQUFNSyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCQSxDQUFBQyxJQUFBO0VBQUEsSUFBS0MsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7SUFBRUMsRUFBRSxHQUFBRixJQUFBLENBQUZFLEVBQUU7RUFBQSxvQkFDckNwQixNQUFBLFlBQUFxQixhQUFBLENBQUNMLGtCQUFrQjtJQUNqQk0sU0FBUyxFQUFDLDZCQUE2QjtJQUN2QyxnQkFBUTtJQUNSLDRCQUFBQyxNQUFBLENBQTBCSCxFQUFFO0VBQUcsR0FFOUJELFFBQ2lCLENBQUM7QUFBQSxDQUN0QjtBQWdCYyxTQUFTSyxpQkFBaUJBLENBQUEsRUFBOEI7RUFDckUsSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQVVBLENBQUFDLEtBQUE7SUFBQSxJQUFBQyxhQUFBLEdBQUFELEtBQUEsQ0FDZEUsT0FBTztNQUFQQSxPQUFPLEdBQUFELGFBQUEsY0FBR25CLEdBQUcsR0FBQW1CLGFBQUE7TUFBQUUsbUJBQUEsR0FBQUgsS0FBQSxDQUNiSSxhQUFhO01BQWJBLGFBQWEsR0FBQUQsbUJBQUEsY0FBR3JCLEdBQUcsR0FBQXFCLG1CQUFBO01BQ25CRSxPQUFPLEdBQUFMLEtBQUEsQ0FBUEssT0FBTztNQUNQQyxnQkFBZ0IsR0FBQU4sS0FBQSxDQUFoQk0sZ0JBQWdCO0lBQUEsb0JBRWhCaEMsTUFBQSxZQUFBcUIsYUFBQSxDQUFDWixpQkFBaUI7TUFBQ2EsU0FBUyxFQUFDO0lBQWlCLGdCQUM1Q3RCLE1BQUEsWUFBQXFCLGFBQUEsQ0FBQ0osZ0JBQWdCO01BQUNHLEVBQUUsRUFBRVcsT0FBTyxDQUFDWDtJQUFHLGdCQUMvQnBCLE1BQUEsWUFBQXFCLGFBQUEsQ0FBQ2hCLENBQUEsQ0FBQTRCLGFBQWE7TUFDWlgsU0FBUyxFQUFDLGVBQWU7TUFDekJZLGVBQWUsRUFBRUgsT0FBTyxDQUFDSSxLQUFNO01BQy9CUCxPQUFPLEVBQUVFLGFBQWM7TUFDdkIsZ0JBQVE7TUFDUiw0QkFBQVAsTUFBQSxDQUEwQlEsT0FBTyxDQUFDWCxFQUFFO0lBQUcsQ0FDeEMsQ0FBQyxFQUNEWSxnQkFBZ0IsZ0JBQ2ZoQyxNQUFBLFlBQUFxQixhQUFBLENBQUNoQixDQUFBLENBQUErQixPQUFPO01BQUNoQixFQUFFLGtCQUFBRyxNQUFBLENBQWtCUSxPQUFPLENBQUNYLEVBQUUsQ0FBRztNQUFDaUIsTUFBTSxFQUFDO0lBQU8sZ0JBQ3ZEckMsTUFBQSxZQUFBcUIsYUFBQSw0QkFDRXJCLE1BQUEsWUFBQXFCLGFBQUEsQ0FBQ2xCLGFBQUEsQ0FBQW1DLGdCQUFnQjtNQUFDbEIsRUFBRSxFQUFFO0lBQWUsQ0FBRSxDQUNuQyxDQUNDLENBQUMsR0FDUixJQUNZLENBQUMsZUFDbkJwQixNQUFBLFlBQUFxQixhQUFBO01BQUtDLFNBQVMsRUFBQyxjQUFjO01BQUNpQixLQUFLLEVBQUVSLE9BQU8sQ0FBQ1MsS0FBTTtNQUFDWixPQUFPLEVBQUVBO0lBQVEsR0FDbEVHLE9BQU8sQ0FBQ1MsS0FDTixDQUNZLENBQUM7RUFBQSxDQUNyQjtFQUVELE9BQU9mLFVBQVU7QUFDbkIiLCJpZ25vcmVMaXN0IjpbXX0=