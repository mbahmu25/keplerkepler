"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _constants = require("@kepler.gl/constants");
var _layerConfigurator = _interopRequireDefault(require("./layer-configurator"));
var _layerPanelHeader = _interopRequireDefault(require("./layer-panel-header"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var PanelWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 12px;\n  border-radius: 1px;\n  z-index: 1000;\n  &.dragging {\n    cursor: move;\n  }\n"])));
LayerPanelFactory.deps = [_layerConfigurator["default"], _layerPanelHeader["default"]];
function LayerPanelFactory(LayerConfigurator, LayerPanelHeader) {
  var LayerPanel = /*#__PURE__*/function (_Component) {
    function LayerPanel() {
      var _this;
      (0, _classCallCheck2["default"])(this, LayerPanel);
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }
      _this = _callSuper(this, LayerPanel, [].concat(_args));
      (0, _defineProperty2["default"])(_this, "updateLayerConfig", function (newProp) {
        _this.props.layerConfigChange(_this.props.layer, newProp);
      });
      (0, _defineProperty2["default"])(_this, "updateLayerType", function (newType) {
        _this.props.layerTypeChange(_this.props.layer, newType);
      });
      (0, _defineProperty2["default"])(_this, "updateLayerVisConfig", function (newVisConfig) {
        _this.props.layerVisConfigChange(_this.props.layer, newVisConfig);
      });
      (0, _defineProperty2["default"])(_this, "updateLayerColorUI", function () {
        var _this$props;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        (_this$props = _this.props).layerColorUIChange.apply(_this$props, [_this.props.layer].concat(args));
      });
      (0, _defineProperty2["default"])(_this, "updateLayerTextLabel", function () {
        var _this$props2;
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        (_this$props2 = _this.props).layerTextLabelChange.apply(_this$props2, [_this.props.layer].concat(args));
      });
      (0, _defineProperty2["default"])(_this, "updateLayerVisualChannelConfig", function (newConfig, channel, newVisConfig) {
        _this.props.layerVisualChannelConfigChange(_this.props.layer, newConfig, channel, newVisConfig);
      });
      (0, _defineProperty2["default"])(_this, "_updateLayerLabel", function (_ref) {
        var value = _ref.target.value;
        _this.updateLayerConfig({
          label: value
        });
      });
      (0, _defineProperty2["default"])(_this, "_toggleVisibility", function (e) {
        e.stopPropagation();
        var isVisible = !_this.props.layer.config.isVisible;
        _this.props.layerToggleVisibility(_this.props.layer.id, isVisible);
      });
      (0, _defineProperty2["default"])(_this, "_resetIsValid", function (e) {
        e === null || e === void 0 || e.stopPropagation();
        // Make the layer valid and visible again after an error
        _this.props.layerSetIsValid(_this.props.layer, true);
      });
      (0, _defineProperty2["default"])(_this, "_toggleEnableConfig", function (e) {
        e === null || e === void 0 || e.stopPropagation();
        var isConfigActive = _this.props.layer.config.isConfigActive;
        _this.updateLayerConfig({
          isConfigActive: !isConfigActive
        });
      });
      (0, _defineProperty2["default"])(_this, "_removeLayer", function (e) {
        e === null || e === void 0 || e.stopPropagation();
        _this.props.removeLayer(_this.props.layer.id);
      });
      (0, _defineProperty2["default"])(_this, "_zoomToLayer", function (e) {
        var _this$props$layer;
        e === null || e === void 0 || e.stopPropagation();
        var bounds = (_this$props$layer = _this.props.layer) === null || _this$props$layer === void 0 || (_this$props$layer = _this$props$layer.meta) === null || _this$props$layer === void 0 ? void 0 : _this$props$layer.bounds;
        bounds && _this.props.zoomToLayer(bounds);
      });
      (0, _defineProperty2["default"])(_this, "_duplicateLayer", function (e) {
        e === null || e === void 0 || e.stopPropagation();
        _this.props.duplicateLayer(_this.props.layer.id);
      });
      return _this;
    }
    (0, _inherits2["default"])(LayerPanel, _Component);
    return (0, _createClass2["default"])(LayerPanel, [{
      key: "render",
      value: function render() {
        var _splitMap$layers;
        var _this$props3 = this.props,
          layer = _this$props3.layer,
          datasets = _this$props3.datasets,
          isDraggable = _this$props3.isDraggable,
          layerTypeOptions = _this$props3.layerTypeOptions,
          listeners = _this$props3.listeners,
          splitMap = _this$props3.splitMap;
        var config = layer.config,
          isValid = layer.isValid;
        var isConfigActive = config.isConfigActive;
        var allowDuplicate = typeof layer.isValidToSave === 'function' && layer.isValidToSave() && isValid;
        var layerVisInSplitMap = splitMap === null || splitMap === void 0 || (_splitMap$layers = splitMap.layers) === null || _splitMap$layers === void 0 ? void 0 : _splitMap$layers[layer.id];
        return /*#__PURE__*/_react["default"].createElement(PanelWrapper, {
          className: "layer-panel ".concat(this.props.className),
          "data-testid": _constants.dataTestIds.layerPanel,
          style: this.props.style,
          onMouseDown: this.props.onMouseDown,
          onTouchStart: this.props.onTouchStart
        }, /*#__PURE__*/_react["default"].createElement(LayerPanelHeader, {
          isConfigActive: isConfigActive,
          layerId: layer.id,
          isVisible: layerVisInSplitMap !== null && layerVisInSplitMap !== void 0 ? layerVisInSplitMap : config.isVisible,
          isValid: isValid,
          label: config.label,
          labelRCGColorValues: config.dataId ? datasets[config.dataId].color : null,
          layerType: layer.type,
          allowDuplicate: allowDuplicate,
          onToggleEnableConfig: this._toggleEnableConfig,
          onToggleVisibility: this._toggleVisibility,
          onResetIsValid: this._resetIsValid,
          onUpdateLayerLabel: this._updateLayerLabel,
          onRemoveLayer: this._removeLayer,
          onZoomToLayer: this._zoomToLayer,
          onDuplicateLayer: this._duplicateLayer,
          isDragNDropEnabled: isDraggable,
          listeners: listeners
        }), isConfigActive && /*#__PURE__*/_react["default"].createElement(LayerConfigurator, {
          layer: layer,
          datasets: datasets,
          layerTypeOptions: layerTypeOptions,
          openModal: this.props.openModal,
          updateLayerColorUI: this.updateLayerColorUI,
          updateLayerConfig: this.updateLayerConfig,
          updateLayerVisualChannelConfig: this.updateLayerVisualChannelConfig,
          updateLayerType: this.updateLayerType,
          updateLayerTextLabel: this.updateLayerTextLabel,
          updateLayerVisConfig: this.updateLayerVisConfig
        }));
      }
    }]);
  }(_react.Component);
  return LayerPanel;
}
var _default = exports["default"] = LayerPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,