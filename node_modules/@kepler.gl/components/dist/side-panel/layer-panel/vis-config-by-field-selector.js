"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactIntl = require("react-intl");
var _utils = require("@kepler.gl/utils");
var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));
var _infoHelper = _interopRequireDefault(require("../../common/info-helper"));
var _styledComponents = require("../../common/styled-components");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

VisConfigByFieldSelectorFactory.deps = [_infoHelper["default"], _fieldSelector["default"]];
function VisConfigByFieldSelectorFactory(InfoHelper, FieldSelector) {
  var VisConfigByFieldSelector = function VisConfigByFieldSelector(_ref) {
    var id = _ref.id,
      property = _ref.property,
      selectedField = _ref.selectedField,
      description = _ref.description,
      label = _ref.label,
      intl = _ref.intl,
      updateField = _ref.updateField,
      fields = _ref.fields,
      placeholder = _ref.placeholder,
      disabled = _ref.disabled;
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, {
      disabled: disabled
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents.PanelLabel, null, label && /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
      id: label
    }) || /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
      id: "layer.propertyBasedOn",
      values: {
        property: intl.formatMessage({
          id: "property.".concat((0, _utils.camelize)(property)),
          defaultMessage: property
        })
      }
    })), description && /*#__PURE__*/_react["default"].createElement(InfoHelper, {
      description: description,
      property: property,
      id: "".concat(id, "-").concat(property)
    })), /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      fields: fields,
      value: selectedField && selectedField.name,
      placeholder: placeholder,
      onSelect: function onSelect(items) {
        return updateField(Array.isArray(items) ? items === null || items === void 0 ? void 0 : items[0] : items);
      },
      disabled: disabled,
      erasable: true
    }));
  };
  return (0, _reactIntl.injectIntl)(VisConfigByFieldSelector);
}
var _default = exports["default"] = VisConfigByFieldSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdEludGwiLCJfdXRpbHMiLCJfZmllbGRTZWxlY3RvciIsIl9pbmZvSGVscGVyIiwiX3N0eWxlZENvbXBvbmVudHMiLCJWaXNDb25maWdCeUZpZWxkU2VsZWN0b3JGYWN0b3J5IiwiZGVwcyIsIkluZm9IZWxwZXJGYWN0b3J5IiwiRmllbGRTZWxlY3RvckZhY3RvcnkiLCJJbmZvSGVscGVyIiwiRmllbGRTZWxlY3RvciIsIlZpc0NvbmZpZ0J5RmllbGRTZWxlY3RvciIsIl9yZWYiLCJpZCIsInByb3BlcnR5Iiwic2VsZWN0ZWRGaWVsZCIsImRlc2NyaXB0aW9uIiwibGFiZWwiLCJpbnRsIiwidXBkYXRlRmllbGQiLCJmaWVsZHMiLCJwbGFjZWhvbGRlciIsImRpc2FibGVkIiwiY3JlYXRlRWxlbWVudCIsIlNpZGVQYW5lbFNlY3Rpb24iLCJQYW5lbExhYmVsV3JhcHBlciIsIlBhbmVsTGFiZWwiLCJGb3JtYXR0ZWRNZXNzYWdlIiwidmFsdWVzIiwiZm9ybWF0TWVzc2FnZSIsImNvbmNhdCIsImNhbWVsaXplIiwiZGVmYXVsdE1lc3NhZ2UiLCJ2YWx1ZSIsIm5hbWUiLCJvblNlbGVjdCIsIml0ZW1zIiwiQXJyYXkiLCJpc0FycmF5IiwiZXJhc2FibGUiLCJpbmplY3RJbnRsIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NpZGUtcGFuZWwvbGF5ZXItcGFuZWwvdmlzLWNvbmZpZy1ieS1maWVsZC1zZWxlY3Rvci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZSwgaW5qZWN0SW50bCwgV3JhcHBlZENvbXBvbmVudFByb3BzfSBmcm9tICdyZWFjdC1pbnRsJztcblxuaW1wb3J0IHtGaWVsZH0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5cbmltcG9ydCB7Y2FtZWxpemV9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IEZpZWxkU2VsZWN0b3JGYWN0b3J5IGZyb20gJy4uLy4uL2NvbW1vbi9maWVsZC1zZWxlY3Rvcic7XG5pbXBvcnQgSW5mb0hlbHBlckZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL2luZm8taGVscGVyJztcbmltcG9ydCB7UGFuZWxMYWJlbCwgUGFuZWxMYWJlbFdyYXBwZXIsIFNpZGVQYW5lbFNlY3Rpb259IGZyb20gJy4uLy4uL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5cbnR5cGUgVmlzQ29uZmlnQnlGaWVsZFNlbGVjdG9yUHJvcHMgPSB7XG4gIGZpZWxkczogRmllbGRbXTtcbiAgaWQ6IHN0cmluZztcbiAgcHJvcGVydHk6IHN0cmluZztcbiAgdXBkYXRlRmllbGQ6ICh2YWw6IHN0cmluZyB8IEZpZWxkIHwgbnVsbCkgPT4gdm9pZDtcbiAgc2NhbGVUeXBlPzogc3RyaW5nO1xuICBzZWxlY3RlZEZpZWxkPzogRmllbGQ7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBsYWJlbD86IHN0cmluZztcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn0gJiBXcmFwcGVkQ29tcG9uZW50UHJvcHM7XG5cblZpc0NvbmZpZ0J5RmllbGRTZWxlY3RvckZhY3RvcnkuZGVwcyA9IFtJbmZvSGVscGVyRmFjdG9yeSwgRmllbGRTZWxlY3RvckZhY3RvcnldO1xuXG5mdW5jdGlvbiBWaXNDb25maWdCeUZpZWxkU2VsZWN0b3JGYWN0b3J5KFxuICBJbmZvSGVscGVyOiBSZXR1cm5UeXBlPHR5cGVvZiBJbmZvSGVscGVyRmFjdG9yeT4sXG4gIEZpZWxkU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIEZpZWxkU2VsZWN0b3JGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IFZpc0NvbmZpZ0J5RmllbGRTZWxlY3RvcjogUmVhY3QuRkM8VmlzQ29uZmlnQnlGaWVsZFNlbGVjdG9yUHJvcHM+ID0gKHtcbiAgICBpZCxcbiAgICBwcm9wZXJ0eSxcbiAgICBzZWxlY3RlZEZpZWxkLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIGxhYmVsLFxuICAgIGludGwsXG4gICAgdXBkYXRlRmllbGQsXG4gICAgZmllbGRzLFxuICAgIHBsYWNlaG9sZGVyLFxuICAgIGRpc2FibGVkXG4gIH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFNpZGVQYW5lbFNlY3Rpb24gZGlzYWJsZWQ9e2Rpc2FibGVkfT5cbiAgICAgICAgPFBhbmVsTGFiZWxXcmFwcGVyPlxuICAgICAgICAgIDxQYW5lbExhYmVsPlxuICAgICAgICAgICAgeyhsYWJlbCAmJiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17bGFiZWx9IC8+KSB8fCAoXG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlXG4gICAgICAgICAgICAgICAgaWQ9XCJsYXllci5wcm9wZXJ0eUJhc2VkT25cIlxuICAgICAgICAgICAgICAgIHZhbHVlcz17e1xuICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IGludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBgcHJvcGVydHkuJHtjYW1lbGl6ZShwcm9wZXJ0eSl9YCxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6IHByb3BlcnR5XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvUGFuZWxMYWJlbD5cbiAgICAgICAgICB7ZGVzY3JpcHRpb24gJiYgKFxuICAgICAgICAgICAgPEluZm9IZWxwZXIgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufSBwcm9wZXJ0eT17cHJvcGVydHl9IGlkPXtgJHtpZH0tJHtwcm9wZXJ0eX1gfSAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvUGFuZWxMYWJlbFdyYXBwZXI+XG4gICAgICAgIDxGaWVsZFNlbGVjdG9yXG4gICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgdmFsdWU9e3NlbGVjdGVkRmllbGQgJiYgc2VsZWN0ZWRGaWVsZC5uYW1lfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgICBvblNlbGVjdD17aXRlbXMgPT4gdXBkYXRlRmllbGQoQXJyYXkuaXNBcnJheShpdGVtcykgPyBpdGVtcz8uWzBdIDogaXRlbXMpfVxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICBlcmFzYWJsZVxuICAgICAgICAvPlxuICAgICAgPC9TaWRlUGFuZWxTZWN0aW9uPlxuICAgICk7XG4gIH07XG4gIHJldHVybiBpbmplY3RJbnRsKFZpc0NvbmZpZ0J5RmllbGRTZWxlY3Rvcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpc0NvbmZpZ0J5RmllbGRTZWxlY3RvckZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFJQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxjQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxXQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxpQkFBQSxHQUFBTCxPQUFBO0FBWEE7QUFDQTs7QUF5QkFNLCtCQUErQixDQUFDQyxJQUFJLEdBQUcsQ0FBQ0Msc0JBQWlCLEVBQUVDLHlCQUFvQixDQUFDO0FBRWhGLFNBQVNILCtCQUErQkEsQ0FDdENJLFVBQWdELEVBQ2hEQyxhQUFzRCxFQUN0RDtFQUNBLElBQU1DLHdCQUFpRSxHQUFHLFNBQXBFQSx3QkFBaUVBLENBQUFDLElBQUEsRUFXakU7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