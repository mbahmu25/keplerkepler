"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggregationTypeSelector = void 0;
exports["default"] = LayerConfiguratorFactory;
exports.getVisConfiguratorProps = exports.getLayerFields = exports.getLayerDataset = exports.getLayerConfiguratorProps = exports.getLayerChannelConfigProps = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _localization = require("@kepler.gl/localization");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _itemSelector = _interopRequireDefault(require("../../common/item-selector/item-selector"));
var _styledComponents2 = require("../../common/styled-components");
var _sourceDataSelector = _interopRequireDefault(require("../common/source-data-selector"));
var _aggrScaleSelector = _interopRequireDefault(require("./aggr-scale-selector"));
var _channelByValueSelector = _interopRequireDefault(require("./channel-by-value-selector"));
var _howToButton = _interopRequireDefault(require("./how-to-button"));
var _layerColorSelector = require("./layer-color-selector");
var _layerColumnModeConfig = _interopRequireDefault(require("./layer-column-mode-config"));
var _layerConfigGroup = _interopRequireWildcard(require("./layer-config-group"));
var _layerErrorMessage = _interopRequireDefault(require("./layer-error-message"));
var _layerTypeSelector = _interopRequireDefault(require("./layer-type-selector"));
var _textLabelPanel = _interopRequireDefault(require("./text-label-panel"));
var _visConfigSlider = _interopRequireDefault(require("./vis-config-slider"));
var _visConfigSwitch = _interopRequireDefault(require("./vis-config-switch"));
var _vectorTileLayerConfigurator = _interopRequireDefault(require("./vector-tile-layer-configurator"));
var _constants = require("@kepler.gl/constants");
var _table = require("@kepler.gl/table");
var _utils = require("@kepler.gl/utils");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/* eslint-disable complexity */
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var StyledLayerConfigurator = _styledComponents["default"].div.attrs({
  className: 'layer-panel__config'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  margin-top: ", ";\n  padding: ", ";\n  border-left: ", " dashed\n    ", ";\n"])), function (props) {
  return props.theme.layerConfiguratorMargin;
}, function (props) {
  return props.theme.layerConfiguratorPadding;
}, function (props) {
  return props.theme.layerConfiguratorBorder;
}, function (props) {
  return props.theme.layerConfiguratorBorderColor;
});
var StyledLayerVisualConfigurator = _styledComponents["default"].div.attrs({
  className: 'layer-panel__config__visualC-config'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 12px;\n"])));
var getLayerFields = exports.getLayerFields = function getLayerFields(datasets, layer) {
  var _layer$config;
  return datasets[((_layer$config = layer.config) === null || _layer$config === void 0 ? void 0 : _layer$config.dataId) || ''] ? datasets[layer.config.dataId].fields : [];
};

/** Return any to be able to customize the Dataset entity */
var getLayerDataset = exports.getLayerDataset = function getLayerDataset(datasets, layer) {
  var _layer$config2;
  return datasets[((_layer$config2 = layer.config) === null || _layer$config2 === void 0 ? void 0 : _layer$config2.dataId) || ''];
};
var getLayerConfiguratorProps = exports.getLayerConfiguratorProps = function getLayerConfiguratorProps(props) {
  return {
    layer: props.layer,
    fields: getLayerFields(props.datasets, props.layer),
    onChange: props.updateLayerConfig,
    setColorUI: props.updateLayerColorUI
  };
};
var getVisConfiguratorProps = exports.getVisConfiguratorProps = function getVisConfiguratorProps(props) {
  return {
    layer: props.layer,
    fields: getLayerFields(props.datasets, props.layer),
    onChange: props.updateLayerVisConfig,
    setColorUI: props.updateLayerColorUI
  };
};
var getLayerChannelConfigProps = exports.getLayerChannelConfigProps = function getLayerChannelConfigProps(props) {
  return {
    layer: props.layer,
    dataset: getLayerDataset(props.datasets, props.layer),
    fields: getLayerFields(props.datasets, props.layer),
    onChange: props.updateLayerVisualChannelConfig,
    setColorUI: props.updateLayerColorUI
  };
};
LayerConfiguratorFactory.deps = [_sourceDataSelector["default"], _visConfigSlider["default"], _textLabelPanel["default"], _layerConfigGroup["default"], _channelByValueSelector["default"], _layerColumnModeConfig["default"], _layerTypeSelector["default"], _visConfigSwitch["default"], _layerColorSelector.LayerColorSelectorFactory, _layerColorSelector.LayerColorRangeSelectorFactory, _layerColorSelector.ArcLayerColorSelectorFactory, _aggrScaleSelector["default"], _vectorTileLayerConfigurator["default"]];
function LayerConfiguratorFactory(SourceDataSelector, VisConfigSlider, TextLabelPanel, LayerConfigGroup, ChannelByValueSelector, LayerColumnModeConfig, LayerTypeSelector, VisConfigSwitch, LayerColorSelector, LayerColorRangeSelector, ArcLayerColorSelector, AggrScaleSelector, VectorTileLayerConfigurator) {
  var LayerConfigurator = /*#__PURE__*/function (_Component) {
    function LayerConfigurator() {
      var _this;
      (0, _classCallCheck2["default"])(this, LayerConfigurator);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, LayerConfigurator, [].concat(args));
      (0, _defineProperty2["default"])(_this, "handleSelectColumnMode", function (key) {
        var updateLayerConfig = _this.props.updateLayerConfig;
        updateLayerConfig({
          columnMode: key
        });
      });
      return _this;
    }
    (0, _inherits2["default"])(LayerConfigurator, _Component);
    return (0, _createClass2["default"])(LayerConfigurator, [{
      key: "_renderPointLayerConfig",
      value: function _renderPointLayerConfig(props) {
        return this._renderScatterplotLayerConfig(props, true);
      }
    }, {
      key: "_renderIconLayerConfig",
      value: function _renderIconLayerConfig(props) {
        return this._renderScatterplotLayerConfig(props, false);
      }
    }, {
      key: "_renderVectorTileLayerConfig",
      value: function _renderVectorTileLayerConfig(props) {
        return /*#__PURE__*/_react["default"].createElement(VectorTileLayerConfigurator, props);
      }
    }, {
      key: "_renderScatterplotLayerConfig",
      value: function _renderScatterplotLayerConfig(_ref, showInteractionControls) {
        var layer = _ref.layer,
          visConfiguratorProps = _ref.visConfiguratorProps,
          layerChannelConfigProps = _ref.layerChannelConfigProps,
          layerConfiguratorProps = _ref.layerConfiguratorProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled || {
          label: 'layer.color'
        }, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), layer.type === _constants.LAYER_TYPES.point ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.outline, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps)), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          disabled: !layer.config.visConfig.outline
        })))) : null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, !layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {
          label: false,
          disabled: Boolean(layer.config.sizeField)
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps, {
          label: false,
          disabled: !layer.config.sizeField || layer.config.visConfig.fixedRadius
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedRadius, visConfiguratorProps)) : null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.billboard, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(TextLabelPanel, {
          id: layer.id,
          fields: visConfiguratorProps.fields,
          updateLayerTextLabel: this.props.updateLayerTextLabel,
          textLabel: layer.config.textLabel
        }), showInteractionControls ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.interaction',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.allowHover, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.showNeighborOnHover, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.showHighlightColor, visConfiguratorProps)))) : null);
      }
    }, {
      key: "_renderClusterLayerConfig",
      value: function _renderClusterLayerConfig(_ref2) {
        var layer = _ref2.layer,
          visConfiguratorProps = _ref2.visConfiguratorProps,
          layerChannelConfigProps = _ref2.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react["default"].createElement(AggrScaleSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.color
        })), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, layer.visConfigSettings.colorAggregation.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(AggregationTypeSelector, (0, _extends2["default"])({}, layer.visConfigSettings.colorAggregation, layerChannelConfigProps, {
          channel: layer.visualChannels.color
        })) : null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.clusterRadius, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps)))));
      }
    }, {
      key: "_renderHeatmapLayerConfig",
      value: function _renderHeatmapLayerConfig(_ref3) {
        var layer = _ref3.layer,
          visConfiguratorProps = _ref3.visConfiguratorProps,
          layerChannelConfigProps = _ref3.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius'
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {
          label: false
        }))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.weight'
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.weight
        }, layerChannelConfigProps))));
      }
    }, {
      key: "_renderGridLayerConfig",
      value: function _renderGridLayerConfig(props) {
        return this._renderAggregationLayerConfig(props);
      }
    }, {
      key: "_renderHexagonLayerConfig",
      value: function _renderHexagonLayerConfig(props) {
        return this._renderAggregationLayerConfig(props);
      }
    }, {
      key: "_renderAggregationLayerConfig",
      value: function _renderAggregationLayerConfig(_ref4) {
        var layer = _ref4.layer,
          visConfiguratorProps = _ref4.visConfiguratorProps,
          layerChannelConfigProps = _ref4.layerChannelConfigProps;
        var config = layer.config;
        var _config$visConfig = config.visConfig,
          enable3d = _config$visConfig.enable3d,
          fixedHeight = _config$visConfig.fixedHeight;
        var elevationByDescription = 'layer.elevationByDescription';
        var colorByDescription = 'layer.colorByDescription';
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(AggrScaleSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.color
        })), /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, layer.visConfigSettings.colorAggregation.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(AggregationTypeSelector, (0, _extends2["default"])({}, layer.visConfigSettings.colorAggregation, layerChannelConfigProps, {
          description: colorByDescription,
          channel: layer.visualChannels.color
        })) : null, layer.visConfigSettings.percentile && layer.visConfigSettings.percentile.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.percentile, visConfiguratorProps)) : null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.worldUnitSize, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.coverage, visConfiguratorProps)))), layer.visConfigSettings.enable3d ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.enable3d, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: 'layerVisConfigs.heightMultiplier'
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.size,
          description: elevationByDescription,
          disabled: !enable3d
        })), layer.visConfigSettings.sizeAggregation.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(AggregationTypeSelector, (0, _extends2["default"])({}, layer.visConfigSettings.sizeAggregation, layerChannelConfigProps, {
          channel: layer.visualChannels.size
        })) : null, /*#__PURE__*/_react["default"].createElement(AggrScaleSelector, (0, _extends2["default"])({}, layerChannelConfigProps, {
          channel: layer.visualChannels.size,
          label: 'Height Scale'
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: 'layerVisConfigs.heightRange',
          disabled: fixedHeight
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)), layer.visConfigSettings.elevationPercentile.condition(layer.config) ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationPercentile, visConfiguratorProps)) : null)) : null);
      }

      // TODO: Shan move these into layer class
    }, {
      key: "_renderHexagonIdLayerConfig",
      value: function _renderHexagonIdLayerConfig(_ref5) {
        var layer = _ref5.layer,
          visConfiguratorProps = _ref5.visConfiguratorProps,
          layerConfiguratorProps = _ref5.layerConfiguratorProps,
          layerChannelConfigProps = _ref5.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {
          label: 'layer.fillColor',
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps, {
          disabled: !layer.config.visConfig.filled
        })))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.outline, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps)), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.strokeOpacity, visConfiguratorProps, {
          disabled: !layer.config.visConfig.outline
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          disabled: !layer.config.visConfig.outline
        })))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.coverage',
          collapsible: true
        }, !layer.config.coverageField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.coverage, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.coverageRange, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.coverage
        }, layerChannelConfigProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.enable3d, visConfiguratorProps, {
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: 'layerVisConfigs.heightMultiplier'
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: "layerVisConfigs.heightRange"
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(TextLabelPanel, {
          id: layer.id,
          fields: visConfiguratorProps.fields,
          updateLayerTextLabel: this.props.updateLayerTextLabel,
          textLabel: layer.config.textLabel
        }));
      }
    }, {
      key: "_renderArcLayerConfig",
      value: function _renderArcLayerConfig(args) {
        return this._renderLineLayerConfig(args);
      }
    }, {
      key: "_renderLineLayerConfig",
      value: function _renderLineLayerConfig(_ref6) {
        var layer = _ref6.layer,
          visConfiguratorProps = _ref6.visConfiguratorProps,
          layerConfiguratorProps = _ref6.layerConfiguratorProps,
          layerChannelConfigProps = _ref6.layerChannelConfigProps;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.sourceColor
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(ArcLayerColorSelector, {
          layer: layer,
          setColorUI: layerConfiguratorProps.setColorUI,
          onChangeConfig: layerConfiguratorProps.onChange,
          onChangeVisConfig: visConfiguratorProps.onChange
        }), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.stroke',
          collapsible: true
        }, layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          disabled: !layer.config.sizeField,
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), layer.visConfigSettings.elevationScale ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: "layerVisConfigs.elevationScale",
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps))) : null);
      }
    }, {
      key: "_renderTripLayerConfig",
      value: function _renderTripLayerConfig(_ref7) {
        var layer = _ref7.layer,
          visConfiguratorProps = _ref7.visConfiguratorProps,
          layerConfiguratorProps = _ref7.layerConfiguratorProps,
          layerChannelConfigProps = _ref7.layerChannelConfigProps;
        var _layer$meta$featureTy = layer.meta.featureTypes,
          featureTypes = _layer$meta$featureTy === void 0 ? {} : _layer$meta$featureTy;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.color',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
          label: "layer.strokeWidth",
          collapsible: true
        }), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.billboard, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, featureTypes.polygon ? layer.visConfigSettings.stroked : {}, {
          label: "layer.trailLength",
          description: "layer.trailLengthDescription",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.trailLength, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fadeTrail, visConfiguratorProps)))));
      }
    }, {
      key: "_renderGeojsonLayerConfig",
      value: function _renderGeojsonLayerConfig(_ref8) {
        var layer = _ref8.layer,
          visConfiguratorProps = _ref8.visConfiguratorProps,
          layerConfiguratorProps = _ref8.layerConfiguratorProps,
          layerChannelConfigProps = _ref8.layerChannelConfigProps;
        var _layer$meta$featureTy2 = layer.meta.featureTypes,
          featureTypes = _layer$meta$featureTy2 === void 0 ? {} : _layer$meta$featureTy2,
          visConfig = layer.config.visConfig;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, featureTypes.polygon || featureTypes.point ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {
          label: "layer.fillColor",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))) : null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.stroked, visConfiguratorProps, {
          label: "layer.strokeColor",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps)), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.strokeOpacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, featureTypes.polygon ? layer.visConfigSettings.stroked : {}, {
          label: "layer.strokeWidth",
          collapsible: true
        }), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), featureTypes.polygon ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.enable3d, {
          disabled: !visConfig.filled,
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.height
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.wireframe)))) : null, featureTypes.point ? /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.radius',
          collapsible: true
        }, !layer.config.radiusField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {
          label: false,
          disabled: Boolean(layer.config.radiusField)
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps, {
          label: false,
          disabled: !layer.config.radiusField
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.radius
        }, layerChannelConfigProps)))) : null);
      }
    }, {
      key: "_render3DLayerConfig",
      value: function _render3DLayerConfig(_ref9) {
        var layer = _ref9.layer,
          visConfiguratorProps = _ref9.visConfiguratorProps;
        return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.3DModel',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.Input, {
          type: "file",
          accept: ".glb,.gltf",
          onChange: function onChange(e) {
            if (e.target.files && e.target.files[0]) {
              var url = URL.createObjectURL(e.target.files[0]);
              visConfiguratorProps.onChange({
                scenegraph: url
              });
            }
          }
        })), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.3DModelOptions',
          collapsible: true
        }, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeScale, visConfiguratorProps, {
          disabled: false
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.angleX, visConfiguratorProps, {
          disabled: false
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.angleY, visConfiguratorProps, {
          disabled: false
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.angleZ, visConfiguratorProps, {
          disabled: false
        }))));
      }
    }, {
      key: "_renderS2LayerConfig",
      value: function _renderS2LayerConfig(_ref10) {
        var layer = _ref10.layer,
          visConfiguratorProps = _ref10.visConfiguratorProps,
          layerConfiguratorProps = _ref10.layerConfiguratorProps,
          layerChannelConfigProps = _ref10.layerChannelConfigProps;
        var visConfig = layer.config.visConfig;
        return /*#__PURE__*/_react["default"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {
          label: "layer.fillColor",
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.color
        }, layerChannelConfigProps)), layer.config.colorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, layer.visConfigSettings.stroked, visConfiguratorProps, {
          label: "layer.strokeColor",
          collapsible: true
        }), layer.config.strokeColorField ? /*#__PURE__*/_react["default"].createElement(LayerColorRangeSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          property: "strokeColorRange"
        })) : /*#__PURE__*/_react["default"].createElement(LayerColorSelector, (0, _extends2["default"])({}, visConfiguratorProps, {
          selectedColor: layer.config.visConfig.strokeColor,
          property: "strokeColor"
        })), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.strokeColor
        }, layerChannelConfigProps))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, {
          label: "layer.strokeWidth",
          collapsible: true
        }), layer.config.sizeField ? /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {
          label: false
        })) : /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {
          label: false
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.size
        }, layerChannelConfigProps)))), /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.enable3d, {
          disabled: !visConfig.filled,
          collapsible: true
        }), /*#__PURE__*/_react["default"].createElement(ChannelByValueSelector, (0, _extends2["default"])({
          channel: layer.visualChannels.height
        }, layerChannelConfigProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {
          label: 'layerVisConfigs.heightMultiplier'
        })), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(VisConfigSlider, (0, _extends2["default"])({}, layer.visConfigSettings.heightRange, visConfiguratorProps, {
          label: "layerVisConfigs.heightRange"
        })), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, layer.visConfigSettings.fixedHeight, visConfiguratorProps)), /*#__PURE__*/_react["default"].createElement(VisConfigSwitch, (0, _extends2["default"])({}, visConfiguratorProps, layer.visConfigSettings.wireframe)))));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          layer = _this$props.layer,
          datasets = _this$props.datasets,
          openModal = _this$props.openModal,
          updateLayerConfig = _this$props.updateLayerConfig,
          layerTypeOptions = _this$props.layerTypeOptions,
          updateLayerType = _this$props.updateLayerType,
          _this$props$disableTy = _this$props.disableTypeSelect,
          disableTypeSelect = _this$props$disableTy === void 0 ? false : _this$props$disableTy;
        var _ref11 = layer.config.dataId ? datasets[layer.config.dataId] : {},
          _ref11$fields = _ref11.fields,
          fields = _ref11$fields === void 0 ? [] : _ref11$fields,
          _ref11$fieldPairs = _ref11.fieldPairs,
          fieldPairs = _ref11$fieldPairs === void 0 ? undefined : _ref11$fieldPairs;
        var config = layer.config;
        var visConfiguratorProps = getVisConfiguratorProps(this.props);
        var layerConfiguratorProps = getLayerConfiguratorProps(this.props);
        var layerChannelConfigProps = getLayerChannelConfigProps(this.props);
        var dataset = getLayerDataset(datasets, layer);
        var renderTemplate = layer.type && "_render".concat((0, _utils.capitalizeFirstLetter)(layer.type), "LayerConfig");

        // show only datasets that can be used by the layer
        var sourceDataSelectorOptions = Object.keys(datasets).reduce(function (acc, id) {
          return (0, _table.matchDatasetType)(datasets[id], layer) ? _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, id, datasets[id])) : acc;
        }, {});
        return /*#__PURE__*/_react["default"].createElement(StyledLayerConfigurator, null, layer.layerInfoModal && !layer.supportedColumnModes ?
        /*#__PURE__*/
        // TODO figure out handler type. String or return type of layer.layerInfoModal ?
        _react["default"].createElement(_howToButton["default"], {
          onClick: function onClick() {
            return openModal(layer.layerInfoModal);
          }
        }) : null, /*#__PURE__*/_react["default"].createElement(LayerConfigGroup, {
          label: 'layer.basic',
          collapsible: true,
          expanded: !layer.hasAllColumns()
        }, /*#__PURE__*/_react["default"].createElement(LayerTypeSelector, {
          selected: layer.type,
          disabled: disableTypeSelect,
          options: layerTypeOptions
          // @ts-ignore
          ,
          onSelect: updateLayerType
        }), /*#__PURE__*/_react["default"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
          datasets: sourceDataSelectorOptions,
          id: layer.id,
          dataId: config.dataId
          // @ts-ignore
          ,
          onSelect: function onSelect(value) {
            return updateLayerConfig({
              dataId: value
            });
          }
        }), /*#__PURE__*/_react["default"].createElement(LayerColumnModeConfig, {
          layer: layer,
          supportedColumnModes: layer.supportedColumnModes,
          id: layer.id,
          layerConfig: layer.config
          // TODO figure out handler type. String or return type of layer.layerInfoModal ?
          ,
          openModal: openModal,
          updateLayerConfig: updateLayerConfig,
          updateLayerType: updateLayerType,
          fields: fields,
          fieldPairs: fieldPairs
        })), layer.errorMessage ? /*#__PURE__*/_react["default"].createElement(_layerErrorMessage["default"], {
          errorMessage: layer.errorMessage
        }) : null), renderTemplate && this[renderTemplate] && this[renderTemplate]({
          layer: layer,
          dataset: dataset,
          visConfiguratorProps: visConfiguratorProps,
          layerChannelConfigProps: layerChannelConfigProps,
          layerConfiguratorProps: layerConfiguratorProps
        }));
      }
    }]);
  }(_react.Component);
  return LayerConfigurator;
}
var AggregationTypeSelector = exports.AggregationTypeSelector = function AggregationTypeSelector(_ref12) {
  var channel = _ref12.channel,
    layer = _ref12.layer,
    _onChange = _ref12.onChange;
  var field = channel.field,
    aggregation = channel.aggregation,
    key = channel.key;
  var selectedField = layer.config[field];
  var visConfig = layer.config.visConfig;

  // aggregation should only be selectable when field is selected
  var layerAggregationTypes = layer.getAggregationOptions(key);
  var aggregationOptions = _constants.AGGREGATION_TYPE_OPTIONS.filter(function (_ref13) {
    var id = _ref13.id;
    return layerAggregationTypes.includes(id);
  });
  var selectedAggregation = aggregation ? aggregationOptions.find(function (_ref14) {
    var id = _ref14.id;
    return id === visConfig[aggregation];
  }) : [];
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'layer.aggregateBy',
    values: {
      field: selectedField.displayName
    }
  })), /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
    selectedItems: selectedAggregation,
    options: aggregationOptions,
    displayOption: "label",
    getOptionValue: "id",
    multiSelect: false,
    searchable: false,
    onChange: function onChange(value) {
      return _onChange({
        visConfig: _objectSpread(_objectSpread({}, layer.config.visConfig), {}, (0, _defineProperty2["default"])({}, aggregation, value))
      }, channel.key);
    }
  }));
};
/* eslint-enable max-params */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9jYWxpemF0aW9uIiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3N0eWxlZENvbXBvbmVudHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2l0ZW1TZWxlY3RvciIsIl9zdHlsZWRDb21wb25lbnRzMiIsIl9zb3VyY2VEYXRhU2VsZWN0b3IiLCJfYWdnclNjYWxlU2VsZWN0b3IiLCJfY2hhbm5lbEJ5VmFsdWVTZWxlY3RvciIsIl9ob3dUb0J1dHRvbiIsIl9sYXllckNvbG9yU2VsZWN0b3IiLCJfbGF5ZXJDb2x1bW5Nb2RlQ29uZmlnIiwiX2xheWVyQ29uZmlnR3JvdXAiLCJfbGF5ZXJFcnJvck1lc3NhZ2UiLCJfbGF5ZXJUeXBlU2VsZWN0b3IiLCJfdGV4dExhYmVsUGFuZWwiLCJfdmlzQ29uZmlnU2xpZGVyIiwiX3Zpc0NvbmZpZ1N3aXRjaCIsIl92ZWN0b3JUaWxlTGF5ZXJDb25maWd1cmF0b3IiLCJfY29uc3RhbnRzIiwiX3RhYmxlIiwiX3V0aWxzIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RlbXBsYXRlT2JqZWN0MiIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiU3R5bGVkTGF5ZXJDb25maWd1cmF0b3IiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwicHJvcHMiLCJ0aGVtZSIsImxheWVyQ29uZmlndXJhdG9yTWFyZ2luIiwibGF5ZXJDb25maWd1cmF0b3JQYWRkaW5nIiwibGF5ZXJDb25maWd1cmF0b3JCb3JkZXIiLCJsYXllckNvbmZpZ3VyYXRvckJvcmRlckNvbG9yIiwiU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3IiLCJnZXRMYXllckZpZWxkcyIsImV4cG9ydHMiLCJkYXRhc2V0cyIsImxheWVyIiwiX2xheWVyJGNvbmZpZyIsImNvbmZpZyIsImRhdGFJZCIsImZpZWxkcyIsImdldExheWVyRGF0YXNldCIsIl9sYXllciRjb25maWcyIiwiZ2V0TGF5ZXJDb25maWd1cmF0b3JQcm9wcyIsIm9uQ2hhbmdlIiwidXBkYXRlTGF5ZXJDb25maWciLCJzZXRDb2xvclVJIiwidXBkYXRlTGF5ZXJDb2xvclVJIiwiZ2V0VmlzQ29uZmlndXJhdG9yUHJvcHMiLCJ1cGRhdGVMYXllclZpc0NvbmZpZyIsImdldExheWVyQ2hhbm5lbENvbmZpZ1Byb3BzIiwiZGF0YXNldCIsInVwZGF0ZUxheWVyVmlzdWFsQ2hhbm5lbENvbmZpZyIsIkxheWVyQ29uZmlndXJhdG9yRmFjdG9yeSIsImRlcHMiLCJTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5IiwiVmlzQ29uZmlnU2xpZGVyRmFjdG9yeSIsIlRleHRMYWJlbFBhbmVsRmFjdG9yeSIsIkxheWVyQ29uZmlnR3JvdXBGYWN0b3J5IiwiQ2hhbm5lbEJ5VmFsdWVTZWxlY3RvckZhY3RvcnkiLCJMYXllckNvbHVtbk1vZGVDb25maWdGYWN0b3J5IiwiTGF5ZXJUeXBlU2VsZWN0b3JGYWN0b3J5IiwiVmlzQ29uZmlnU3dpdGNoRmFjdG9yeSIsIkxheWVyQ29sb3JTZWxlY3RvckZhY3RvcnkiLCJMYXllckNvbG9yUmFuZ2VTZWxlY3RvckZhY3RvcnkiLCJBcmNMYXllckNvbG9yU2VsZWN0b3JGYWN0b3J5IiwiQWdnclNjYWxlU2VsZWN0b3JGYWN0b3J5IiwiVmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yRmFjdG9yeSIsIlNvdXJjZURhdGFTZWxlY3RvciIsIlZpc0NvbmZpZ1NsaWRlciIsIlRleHRMYWJlbFBhbmVsIiwiTGF5ZXJDb25maWdHcm91cCIsIkNoYW5uZWxCeVZhbHVlU2VsZWN0b3IiLCJMYXllckNvbHVtbk1vZGVDb25maWciLCJMYXllclR5cGVTZWxlY3RvciIsIlZpc0NvbmZpZ1N3aXRjaCIsIkxheWVyQ29sb3JTZWxlY3RvciIsIkxheWVyQ29sb3JSYW5nZVNlbGVjdG9yIiwiQXJjTGF5ZXJDb2xvclNlbGVjdG9yIiwiQWdnclNjYWxlU2VsZWN0b3IiLCJWZWN0b3JUaWxlTGF5ZXJDb25maWd1cmF0b3IiLCJMYXllckNvbmZpZ3VyYXRvciIsIl9Db21wb25lbnQiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNvbmNhdCIsImtleSIsImNvbHVtbk1vZGUiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsInZhbHVlIiwiX3JlbmRlclBvaW50TGF5ZXJDb25maWciLCJfcmVuZGVyU2NhdHRlcnBsb3RMYXllckNvbmZpZyIsIl9yZW5kZXJJY29uTGF5ZXJDb25maWciLCJfcmVuZGVyVmVjdG9yVGlsZUxheWVyQ29uZmlnIiwiY3JlYXRlRWxlbWVudCIsIl9yZWYiLCJzaG93SW50ZXJhY3Rpb25Db250cm9scyIsInZpc0NvbmZpZ3VyYXRvclByb3BzIiwibGF5ZXJDaGFubmVsQ29uZmlnUHJvcHMiLCJsYXllckNvbmZpZ3VyYXRvclByb3BzIiwiX2V4dGVuZHMyIiwidmlzQ29uZmlnU2V0dGluZ3MiLCJmaWxsZWQiLCJsYWJlbCIsImNvbGxhcHNpYmxlIiwiY2hhbm5lbCIsInZpc3VhbENoYW5uZWxzIiwiY29sb3IiLCJjb2xvckZpZWxkIiwiQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQiLCJvcGFjaXR5IiwidHlwZSIsIkxBWUVSX1RZUEVTIiwicG9pbnQiLCJvdXRsaW5lIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VDb2xvckZpZWxkIiwicHJvcGVydHkiLCJzZWxlY3RlZENvbG9yIiwidmlzQ29uZmlnIiwidGhpY2tuZXNzIiwiZGlzYWJsZWQiLCJzaXplRmllbGQiLCJyYWRpdXMiLCJyYWRpdXNSYW5nZSIsImZpeGVkUmFkaXVzIiwic2l6ZSIsImJpbGxib2FyZCIsImlkIiwidXBkYXRlTGF5ZXJUZXh0TGFiZWwiLCJ0ZXh0TGFiZWwiLCJhbGxvd0hvdmVyIiwic2hvd05laWdoYm9yT25Ib3ZlciIsInNob3dIaWdobGlnaHRDb2xvciIsIl9yZW5kZXJDbHVzdGVyTGF5ZXJDb25maWciLCJfcmVmMiIsImNvbG9yQWdncmVnYXRpb24iLCJjb25kaXRpb24iLCJBZ2dyZWdhdGlvblR5cGVTZWxlY3RvciIsImNsdXN0ZXJSYWRpdXMiLCJfcmVuZGVySGVhdG1hcExheWVyQ29uZmlnIiwiX3JlZjMiLCJ3ZWlnaHQiLCJfcmVuZGVyR3JpZExheWVyQ29uZmlnIiwiX3JlbmRlckFnZ3JlZ2F0aW9uTGF5ZXJDb25maWciLCJfcmVuZGVySGV4YWdvbkxheWVyQ29uZmlnIiwiX3JlZjQiLCJfY29uZmlnJHZpc0NvbmZpZyIsImVuYWJsZTNkIiwiZml4ZWRIZWlnaHQiLCJlbGV2YXRpb25CeURlc2NyaXB0aW9uIiwiY29sb3JCeURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJwZXJjZW50aWxlIiwid29ybGRVbml0U2l6ZSIsImNvdmVyYWdlIiwiZWxldmF0aW9uU2NhbGUiLCJzaXplQWdncmVnYXRpb24iLCJzaXplUmFuZ2UiLCJlbGV2YXRpb25QZXJjZW50aWxlIiwiX3JlbmRlckhleGFnb25JZExheWVyQ29uZmlnIiwiX3JlZjUiLCJzdHJva2VPcGFjaXR5IiwiY292ZXJhZ2VGaWVsZCIsImNvdmVyYWdlUmFuZ2UiLCJfcmVuZGVyQXJjTGF5ZXJDb25maWciLCJfcmVuZGVyTGluZUxheWVyQ29uZmlnIiwiX3JlZjYiLCJzb3VyY2VDb2xvciIsIm9uQ2hhbmdlQ29uZmlnIiwib25DaGFuZ2VWaXNDb25maWciLCJfcmVuZGVyVHJpcExheWVyQ29uZmlnIiwiX3JlZjciLCJfbGF5ZXIkbWV0YSRmZWF0dXJlVHkiLCJtZXRhIiwiZmVhdHVyZVR5cGVzIiwicG9seWdvbiIsInN0cm9rZWQiLCJ0cmFpbExlbmd0aCIsImZhZGVUcmFpbCIsIl9yZW5kZXJHZW9qc29uTGF5ZXJDb25maWciLCJfcmVmOCIsIl9sYXllciRtZXRhJGZlYXR1cmVUeTIiLCJoZWlnaHQiLCJ3aXJlZnJhbWUiLCJyYWRpdXNGaWVsZCIsIl9yZW5kZXIzRExheWVyQ29uZmlnIiwiX3JlZjkiLCJGcmFnbWVudCIsIklucHV0IiwiYWNjZXB0IiwidGFyZ2V0IiwiZmlsZXMiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzY2VuZWdyYXBoIiwic2l6ZVNjYWxlIiwiYW5nbGVYIiwiYW5nbGVZIiwiYW5nbGVaIiwiX3JlbmRlclMyTGF5ZXJDb25maWciLCJfcmVmMTAiLCJoZWlnaHRSYW5nZSIsInJlbmRlciIsIl90aGlzJHByb3BzIiwib3Blbk1vZGFsIiwibGF5ZXJUeXBlT3B0aW9ucyIsInVwZGF0ZUxheWVyVHlwZSIsIl90aGlzJHByb3BzJGRpc2FibGVUeSIsImRpc2FibGVUeXBlU2VsZWN0IiwiX3JlZjExIiwiX3JlZjExJGZpZWxkcyIsIl9yZWYxMSRmaWVsZFBhaXJzIiwiZmllbGRQYWlycyIsInVuZGVmaW5lZCIsInJlbmRlclRlbXBsYXRlIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwic291cmNlRGF0YVNlbGVjdG9yT3B0aW9ucyIsInJlZHVjZSIsImFjYyIsIm1hdGNoRGF0YXNldFR5cGUiLCJsYXllckluZm9Nb2RhbCIsInN1cHBvcnRlZENvbHVtbk1vZGVzIiwib25DbGljayIsImV4cGFuZGVkIiwiaGFzQWxsQ29sdW1ucyIsInNlbGVjdGVkIiwib3B0aW9ucyIsIm9uU2VsZWN0IiwibGF5ZXJDb25maWciLCJlcnJvck1lc3NhZ2UiLCJDb21wb25lbnQiLCJfcmVmMTIiLCJmaWVsZCIsImFnZ3JlZ2F0aW9uIiwic2VsZWN0ZWRGaWVsZCIsImxheWVyQWdncmVnYXRpb25UeXBlcyIsImdldEFnZ3JlZ2F0aW9uT3B0aW9ucyIsImFnZ3JlZ2F0aW9uT3B0aW9ucyIsIkFHR1JFR0FUSU9OX1RZUEVfT1BUSU9OUyIsIl9yZWYxMyIsImluY2x1ZGVzIiwic2VsZWN0ZWRBZ2dyZWdhdGlvbiIsImZpbmQiLCJfcmVmMTQiLCJTaWRlUGFuZWxTZWN0aW9uIiwiUGFuZWxMYWJlbCIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJ2YWx1ZXMiLCJkaXNwbGF5TmFtZSIsInNlbGVjdGVkSXRlbXMiLCJkaXNwbGF5T3B0aW9uIiwiZ2V0T3B0aW9uVmFsdWUiLCJtdWx0aVNlbGVjdCIsInNlYXJjaGFibGUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lkZS1wYW5lbC9sYXllci1wYW5lbC9sYXllci1jb25maWd1cmF0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBGcmFnbWVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBJdGVtU2VsZWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL2l0ZW0tc2VsZWN0b3IvaXRlbS1zZWxlY3Rvcic7XG5pbXBvcnQge0lucHV0LCBQYW5lbExhYmVsLCBTaWRlUGFuZWxTZWN0aW9ufSBmcm9tICcuLi8uLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgU291cmNlRGF0YVNlbGVjdG9yRmFjdG9yeSBmcm9tICcuLi9jb21tb24vc291cmNlLWRhdGEtc2VsZWN0b3InO1xuaW1wb3J0IEFnZ3JTY2FsZVNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL2FnZ3Itc2NhbGUtc2VsZWN0b3InO1xuaW1wb3J0IENoYW5uZWxCeVZhbHVlU2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vY2hhbm5lbC1ieS12YWx1ZS1zZWxlY3Rvcic7XG5pbXBvcnQgSG93VG9CdXR0b24gZnJvbSAnLi9ob3ctdG8tYnV0dG9uJztcbmltcG9ydCB7XG4gIEFyY0xheWVyQ29sb3JTZWxlY3RvckZhY3RvcnksXG4gIExheWVyQ29sb3JSYW5nZVNlbGVjdG9yRmFjdG9yeSxcbiAgTGF5ZXJDb2xvclNlbGVjdG9yRmFjdG9yeVxufSBmcm9tICcuL2xheWVyLWNvbG9yLXNlbGVjdG9yJztcbmltcG9ydCBMYXllckNvbHVtbk1vZGVDb25maWdGYWN0b3J5IGZyb20gJy4vbGF5ZXItY29sdW1uLW1vZGUtY29uZmlnJztcbmltcG9ydCBMYXllckNvbmZpZ0dyb3VwRmFjdG9yeSwge0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50fSBmcm9tICcuL2xheWVyLWNvbmZpZy1ncm91cCc7XG5pbXBvcnQgTGF5ZXJFcnJvck1lc3NhZ2UgZnJvbSAnLi9sYXllci1lcnJvci1tZXNzYWdlJztcbmltcG9ydCBMYXllclR5cGVTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9sYXllci10eXBlLXNlbGVjdG9yJztcbmltcG9ydCBUZXh0TGFiZWxQYW5lbEZhY3RvcnkgZnJvbSAnLi90ZXh0LWxhYmVsLXBhbmVsJztcbmltcG9ydCBWaXNDb25maWdTbGlkZXJGYWN0b3J5IGZyb20gJy4vdmlzLWNvbmZpZy1zbGlkZXInO1xuaW1wb3J0IFZpc0NvbmZpZ1N3aXRjaEZhY3RvcnkgZnJvbSAnLi92aXMtY29uZmlnLXN3aXRjaCc7XG5pbXBvcnQgVmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yRmFjdG9yeSBmcm9tICcuL3ZlY3Rvci10aWxlLWxheWVyLWNvbmZpZ3VyYXRvcic7XG5cbmltcG9ydCB7QWN0aW9uSGFuZGxlciwgdG9nZ2xlTW9kYWx9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge0FHR1JFR0FUSU9OX1RZUEVfT1BUSU9OUywgTEFZRVJfVFlQRVN9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7QWdncmVnYXRpb25MYXllciwgTGF5ZXIsIExheWVyQmFzZUNvbmZpZywgVmlzdWFsQ2hhbm5lbH0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuXG5pbXBvcnQge21hdGNoRGF0YXNldFR5cGUsIERhdGFzZXRzfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcbmltcG9ydCB7Q29sb3JVSSwgTGF5ZXJWaXNDb25maWcsIE5lc3RlZFBhcnRpYWx9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtjYXBpdGFsaXplRmlyc3RMZXR0ZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuXG50eXBlIExheWVyQ29uZmlndXJhdG9yUHJvcHMgPSB7XG4gIGxheWVyOiBMYXllcjtcbiAgZGF0YXNldHM6IERhdGFzZXRzO1xuICBsYXllclR5cGVPcHRpb25zOiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGljb246IFJlYWN0LkVsZW1lbnRUeXBlO1xuICAgIHJlcXVpcmVEYXRhOiBib29sZWFuO1xuICB9W107XG4gIG9wZW5Nb2RhbDogQWN0aW9uSGFuZGxlcjx0eXBlb2YgdG9nZ2xlTW9kYWw+O1xuICB1cGRhdGVMYXllckNvbmZpZzogKG5ld0NvbmZpZzogUGFydGlhbDxMYXllckJhc2VDb25maWc+KSA9PiB2b2lkO1xuICB1cGRhdGVMYXllclR5cGU6IChuZXdUeXBlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHVwZGF0ZUxheWVyVmlzQ29uZmlnOiAobmV3VmlzQ29uZmlnOiBQYXJ0aWFsPExheWVyVmlzQ29uZmlnPikgPT4gdm9pZDtcbiAgdXBkYXRlTGF5ZXJWaXN1YWxDaGFubmVsQ29uZmlnOiAoXG4gICAgbmV3Q29uZmlnOiBQYXJ0aWFsPExheWVyQmFzZUNvbmZpZz4sXG4gICAgY2hhbm5lbDogc3RyaW5nLFxuICAgIG5ld1Zpc0NvbmZpZz86IFBhcnRpYWw8TGF5ZXJWaXNDb25maWc+XG4gICkgPT4gdm9pZDtcbiAgdXBkYXRlTGF5ZXJDb2xvclVJOiAocHJvcDogc3RyaW5nLCBuZXdDb25maWc6IE5lc3RlZFBhcnRpYWw8Q29sb3JVST4pID0+IHZvaWQ7XG4gIHVwZGF0ZUxheWVyVGV4dExhYmVsOiAoaWR4OiBudW1iZXIgfCAnYWxsJywgcHJvcDogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB2b2lkO1xuICBkaXNhYmxlVHlwZVNlbGVjdD86IGJvb2xlYW47XG59O1xuXG50eXBlIEFnZ3JlZ2F0aW9uU2VsZWN0b3JQcm9wcyA9IHtcbiAgY2hhbm5lbDogVmlzdWFsQ2hhbm5lbDtcbiAgbGF5ZXI6IEFnZ3JlZ2F0aW9uTGF5ZXI7XG4gIG9uQ2hhbmdlOiAoXG4gICAgdmFsOiBSZWNvcmQ8XG4gICAgICBzdHJpbmcsXG4gICAgICBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgb2JqZWN0IHwgcmVhZG9ubHkgKHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBvYmplY3QpW10gfCBudWxsXG4gICAgPixcbiAgICBrZXk6IHN0cmluZ1xuICApID0+IHZvaWQ7XG59O1xuXG5jb25zdCBTdHlsZWRMYXllckNvbmZpZ3VyYXRvciA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdsYXllci1wYW5lbF9fY29uZmlnJ1xufSlgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLXRvcDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5sYXllckNvbmZpZ3VyYXRvck1hcmdpbn07XG4gIHBhZGRpbmc6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUubGF5ZXJDb25maWd1cmF0b3JQYWRkaW5nfTtcbiAgYm9yZGVyLWxlZnQ6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUubGF5ZXJDb25maWd1cmF0b3JCb3JkZXJ9IGRhc2hlZFxuICAgICR7cHJvcHMgPT4gcHJvcHMudGhlbWUubGF5ZXJDb25maWd1cmF0b3JCb3JkZXJDb2xvcn07XG5gO1xuXG5jb25zdCBTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvciA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdsYXllci1wYW5lbF9fY29uZmlnX192aXN1YWxDLWNvbmZpZydcbn0pYFxuICBtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IGdldExheWVyRmllbGRzID0gKGRhdGFzZXRzOiBEYXRhc2V0cywgbGF5ZXI6IExheWVyKSA9PlxuICBkYXRhc2V0c1tsYXllci5jb25maWc/LmRhdGFJZCB8fCAnJ10gPyBkYXRhc2V0c1tsYXllci5jb25maWcuZGF0YUlkXS5maWVsZHMgOiBbXTtcblxuLyoqIFJldHVybiBhbnkgdG8gYmUgYWJsZSB0byBjdXN0b21pemUgdGhlIERhdGFzZXQgZW50aXR5ICovXG5leHBvcnQgY29uc3QgZ2V0TGF5ZXJEYXRhc2V0ID0gKGRhdGFzZXRzOiBEYXRhc2V0cywgbGF5ZXI6IExheWVyKTogYW55ID0+XG4gIGRhdGFzZXRzW2xheWVyLmNvbmZpZz8uZGF0YUlkIHx8ICcnXTtcblxuZXhwb3J0IGNvbnN0IGdldExheWVyQ29uZmlndXJhdG9yUHJvcHMgPSAocHJvcHM6IExheWVyQ29uZmlndXJhdG9yUHJvcHMpID0+ICh7XG4gIGxheWVyOiBwcm9wcy5sYXllcixcbiAgZmllbGRzOiBnZXRMYXllckZpZWxkcyhwcm9wcy5kYXRhc2V0cywgcHJvcHMubGF5ZXIpLFxuICBvbkNoYW5nZTogcHJvcHMudXBkYXRlTGF5ZXJDb25maWcsXG4gIHNldENvbG9yVUk6IHByb3BzLnVwZGF0ZUxheWVyQ29sb3JVSVxufSk7XG5cbmV4cG9ydCBjb25zdCBnZXRWaXNDb25maWd1cmF0b3JQcm9wcyA9IChwcm9wczogTGF5ZXJDb25maWd1cmF0b3JQcm9wcykgPT4gKHtcbiAgbGF5ZXI6IHByb3BzLmxheWVyLFxuICBmaWVsZHM6IGdldExheWVyRmllbGRzKHByb3BzLmRhdGFzZXRzLCBwcm9wcy5sYXllciksXG4gIG9uQ2hhbmdlOiBwcm9wcy51cGRhdGVMYXllclZpc0NvbmZpZyxcbiAgc2V0Q29sb3JVSTogcHJvcHMudXBkYXRlTGF5ZXJDb2xvclVJXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldExheWVyQ2hhbm5lbENvbmZpZ1Byb3BzID0gKHByb3BzOiBMYXllckNvbmZpZ3VyYXRvclByb3BzKSA9PiAoe1xuICBsYXllcjogcHJvcHMubGF5ZXIsXG4gIGRhdGFzZXQ6IGdldExheWVyRGF0YXNldChwcm9wcy5kYXRhc2V0cywgcHJvcHMubGF5ZXIpLFxuICBmaWVsZHM6IGdldExheWVyRmllbGRzKHByb3BzLmRhdGFzZXRzLCBwcm9wcy5sYXllciksXG4gIG9uQ2hhbmdlOiBwcm9wcy51cGRhdGVMYXllclZpc3VhbENoYW5uZWxDb25maWcsXG4gIHNldENvbG9yVUk6IHByb3BzLnVwZGF0ZUxheWVyQ29sb3JVSVxufSk7XG5cbkxheWVyQ29uZmlndXJhdG9yRmFjdG9yeS5kZXBzID0gW1xuICBTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5LFxuICBWaXNDb25maWdTbGlkZXJGYWN0b3J5LFxuICBUZXh0TGFiZWxQYW5lbEZhY3RvcnksXG4gIExheWVyQ29uZmlnR3JvdXBGYWN0b3J5LFxuICBDaGFubmVsQnlWYWx1ZVNlbGVjdG9yRmFjdG9yeSxcbiAgTGF5ZXJDb2x1bW5Nb2RlQ29uZmlnRmFjdG9yeSxcbiAgTGF5ZXJUeXBlU2VsZWN0b3JGYWN0b3J5LFxuICBWaXNDb25maWdTd2l0Y2hGYWN0b3J5LFxuICBMYXllckNvbG9yU2VsZWN0b3JGYWN0b3J5LFxuICBMYXllckNvbG9yUmFuZ2VTZWxlY3RvckZhY3RvcnksXG4gIEFyY0xheWVyQ29sb3JTZWxlY3RvckZhY3RvcnksXG4gIEFnZ3JTY2FsZVNlbGVjdG9yRmFjdG9yeSxcbiAgVmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yRmFjdG9yeVxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGF5ZXJDb25maWd1cmF0b3JGYWN0b3J5KFxuICBTb3VyY2VEYXRhU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIFNvdXJjZURhdGFTZWxlY3RvckZhY3Rvcnk+LFxuICBWaXNDb25maWdTbGlkZXI6IFJldHVyblR5cGU8dHlwZW9mIFZpc0NvbmZpZ1NsaWRlckZhY3Rvcnk+LFxuICBUZXh0TGFiZWxQYW5lbDogUmV0dXJuVHlwZTx0eXBlb2YgVGV4dExhYmVsUGFuZWxGYWN0b3J5PixcbiAgTGF5ZXJDb25maWdHcm91cDogUmV0dXJuVHlwZTx0eXBlb2YgTGF5ZXJDb25maWdHcm91cEZhY3Rvcnk+LFxuICBDaGFubmVsQnlWYWx1ZVNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBDaGFubmVsQnlWYWx1ZVNlbGVjdG9yRmFjdG9yeT4sXG4gIExheWVyQ29sdW1uTW9kZUNvbmZpZzogUmV0dXJuVHlwZTx0eXBlb2YgTGF5ZXJDb2x1bW5Nb2RlQ29uZmlnRmFjdG9yeT4sXG4gIExheWVyVHlwZVNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBMYXllclR5cGVTZWxlY3RvckZhY3Rvcnk+LFxuICBWaXNDb25maWdTd2l0Y2g6IFJldHVyblR5cGU8dHlwZW9mIFZpc0NvbmZpZ1N3aXRjaEZhY3Rvcnk+LFxuICBMYXllckNvbG9yU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIExheWVyQ29sb3JTZWxlY3RvckZhY3Rvcnk+LFxuICBMYXllckNvbG9yUmFuZ2VTZWxlY3RvcjogUmV0dXJuVHlwZTx0eXBlb2YgTGF5ZXJDb2xvclJhbmdlU2VsZWN0b3JGYWN0b3J5PixcbiAgQXJjTGF5ZXJDb2xvclNlbGVjdG9yOiBSZXR1cm5UeXBlPHR5cGVvZiBBcmNMYXllckNvbG9yU2VsZWN0b3JGYWN0b3J5PixcbiAgQWdnclNjYWxlU2VsZWN0b3I6IFJldHVyblR5cGU8dHlwZW9mIEFnZ3JTY2FsZVNlbGVjdG9yRmFjdG9yeT4sXG4gIFZlY3RvclRpbGVMYXllckNvbmZpZ3VyYXRvcjogUmV0dXJuVHlwZTx0eXBlb2YgVmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yRmFjdG9yeT5cbik6IFJlYWN0LkNvbXBvbmVudFR5cGU8TGF5ZXJDb25maWd1cmF0b3JQcm9wcz4ge1xuICBjbGFzcyBMYXllckNvbmZpZ3VyYXRvciBleHRlbmRzIENvbXBvbmVudDxMYXllckNvbmZpZ3VyYXRvclByb3BzPiB7XG4gICAgX3JlbmRlclBvaW50TGF5ZXJDb25maWcocHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJTY2F0dGVycGxvdExheWVyQ29uZmlnKHByb3BzLCB0cnVlKTtcbiAgICB9XG5cbiAgICBfcmVuZGVySWNvbkxheWVyQ29uZmlnKHByb3BzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVuZGVyU2NhdHRlcnBsb3RMYXllckNvbmZpZyhwcm9wcywgZmFsc2UpO1xuICAgIH1cblxuICAgIF9yZW5kZXJWZWN0b3JUaWxlTGF5ZXJDb25maWcocHJvcHMpIHtcbiAgICAgIHJldHVybiA8VmVjdG9yVGlsZUxheWVyQ29uZmlndXJhdG9yIHsuLi5wcm9wc30gLz47XG4gICAgfVxuXG4gICAgX3JlbmRlclNjYXR0ZXJwbG90TGF5ZXJDb25maWcoXG4gICAgICB7bGF5ZXIsIHZpc0NvbmZpZ3VyYXRvclByb3BzLCBsYXllckNoYW5uZWxDb25maWdQcm9wcywgbGF5ZXJDb25maWd1cmF0b3JQcm9wc30sXG4gICAgICBzaG93SW50ZXJhY3Rpb25Db250cm9sc1xuICAgICkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgICAgIHsvKiBGaWxsIENvbG9yICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICB7Li4uKGxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmZpbGxlZCB8fCB7bGFiZWw6ICdsYXllci5jb2xvcid9KX1cbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9XG4gICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7bGF5ZXIuY29uZmlnLmNvbG9yRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclNlbGVjdG9yIHsuLi5sYXllckNvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBvdXRsaW5lIGNvbG9yICovfVxuICAgICAgICAgIHtsYXllci50eXBlID09PSBMQVlFUl9UWVBFUy5wb2ludCA/IChcbiAgICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vdXRsaW5lfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc3Ryb2tlQ29sb3J9XG4gICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7bGF5ZXIuY29uZmlnLnN0cm9rZUNvbG9yRmllbGQgPyAoXG4gICAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gcHJvcGVydHk9XCJzdHJva2VDb2xvclJhbmdlXCIgLz5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8TGF5ZXJDb2xvclNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZENvbG9yPXtsYXllci5jb25maWcudmlzQ29uZmlnLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICAgICAgcHJvcGVydHk9XCJzdHJva2VDb2xvclwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy50aGlja25lc3N9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy52aXNDb25maWcub3V0bGluZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICAgICkgOiBudWxsfVxuXG4gICAgICAgICAgey8qIFJhZGl1cyAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLnJhZGl1cyd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgeyFsYXllci5jb25maWcuc2l6ZUZpZWxkID8gKFxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnJhZGl1c31cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtCb29sZWFuKGxheWVyLmNvbmZpZy5zaXplRmllbGQpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5yYWRpdXNSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXshbGF5ZXIuY29uZmlnLnNpemVGaWVsZCB8fCBsYXllci5jb25maWcudmlzQ29uZmlnLmZpeGVkUmFkaXVzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zaXplfVxuICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zaXplRmllbGQgPyAoXG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaFxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmZpeGVkUmFkaXVzfVxuICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5iaWxsYm9hcmR9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIHRleHQgbGFiZWwgKi99XG4gICAgICAgICAgPFRleHRMYWJlbFBhbmVsXG4gICAgICAgICAgICBpZD17bGF5ZXIuaWR9XG4gICAgICAgICAgICBmaWVsZHM9e3Zpc0NvbmZpZ3VyYXRvclByb3BzLmZpZWxkc31cbiAgICAgICAgICAgIHVwZGF0ZUxheWVyVGV4dExhYmVsPXt0aGlzLnByb3BzLnVwZGF0ZUxheWVyVGV4dExhYmVsfVxuICAgICAgICAgICAgdGV4dExhYmVsPXtsYXllci5jb25maWcudGV4dExhYmVsfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICB7LyogSW50ZXJhY3Rpb24gKi99XG4gICAgICAgICAge3Nob3dJbnRlcmFjdGlvbkNvbnRyb2xzID8gKFxuICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5pbnRlcmFjdGlvbid9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5hbGxvd0hvdmVyfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2hvd05laWdoYm9yT25Ib3Zlcn1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zaG93SGlnaGxpZ2h0Q29sb3J9XG4gICAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9TdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbmRlckNsdXN0ZXJMYXllckNvbmZpZyh7bGF5ZXIsIHZpc0NvbmZpZ3VyYXRvclByb3BzLCBsYXllckNoYW5uZWxDb25maWdQcm9wc30pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogQ29sb3IgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5jb2xvcid9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDxBZ2dyU2NhbGVTZWxlY3RvciB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9IGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfSAvPlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9XG4gICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIHtsYXllci52aXNDb25maWdTZXR0aW5ncy5jb2xvckFnZ3JlZ2F0aW9uLmNvbmRpdGlvbihsYXllci5jb25maWcpID8gKFxuICAgICAgICAgICAgICAgIDxBZ2dyZWdhdGlvblR5cGVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNvbG9yQWdncmVnYXRpb259XG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3BhY2l0eX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogQ2x1c3RlciBSYWRpdXMgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5yYWRpdXMnfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNsdXN0ZXJSYWRpdXN9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucmFkaXVzUmFuZ2V9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICA8L1N0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVuZGVySGVhdG1hcExheWVyQ29uZmlnKHtsYXllciwgdmlzQ29uZmlndXJhdG9yUHJvcHMsIGxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgICAgIHsvKiBDb2xvciAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLmNvbG9yJ30gY29sbGFwc2libGU+XG4gICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICB7LyogUmFkaXVzICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIucmFkaXVzJ30+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5yYWRpdXN9XG4gICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgey8qIFdlaWdodCAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLndlaWdodCd9PlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMud2VpZ2h0fVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgPC9TdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbmRlckdyaWRMYXllckNvbmZpZyhwcm9wcykge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckFnZ3JlZ2F0aW9uTGF5ZXJDb25maWcocHJvcHMpO1xuICAgIH1cblxuICAgIF9yZW5kZXJIZXhhZ29uTGF5ZXJDb25maWcocHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJBZ2dyZWdhdGlvbkxheWVyQ29uZmlnKHByb3BzKTtcbiAgICB9XG5cbiAgICBfcmVuZGVyQWdncmVnYXRpb25MYXllckNvbmZpZyh7bGF5ZXIsIHZpc0NvbmZpZ3VyYXRvclByb3BzLCBsYXllckNoYW5uZWxDb25maWdQcm9wc30pIHtcbiAgICAgIGNvbnN0IHtjb25maWd9ID0gbGF5ZXI7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHZpc0NvbmZpZzoge2VuYWJsZTNkLCBmaXhlZEhlaWdodH1cbiAgICAgIH0gPSBjb25maWc7XG4gICAgICBjb25zdCBlbGV2YXRpb25CeURlc2NyaXB0aW9uID0gJ2xheWVyLmVsZXZhdGlvbkJ5RGVzY3JpcHRpb24nO1xuICAgICAgY29uc3QgY29sb3JCeURlc2NyaXB0aW9uID0gJ2xheWVyLmNvbG9yQnlEZXNjcmlwdGlvbic7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogQ29sb3IgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5jb2xvcid9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9XG4gICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8QWdnclNjYWxlU2VsZWN0b3Igey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfSBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn0gLz5cbiAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAge2xheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNvbG9yQWdncmVnYXRpb24uY29uZGl0aW9uKGxheWVyLmNvbmZpZykgPyAoXG4gICAgICAgICAgICAgICAgPEFnZ3JlZ2F0aW9uVHlwZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuY29sb3JBZ2dyZWdhdGlvbn1cbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtjb2xvckJ5RGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5jb2xvcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAge2xheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnBlcmNlbnRpbGUgJiZcbiAgICAgICAgICAgICAgbGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucGVyY2VudGlsZS5jb25kaXRpb24obGF5ZXIuY29uZmlnKSA/IChcbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucGVyY2VudGlsZX1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlciB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Mub3BhY2l0eX0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogQ2VsbCBzaXplICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIucmFkaXVzJ30gY29sbGFwc2libGU+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy53b3JsZFVuaXRTaXplfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmNvdmVyYWdlfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBFbGV2YXRpb24gKi99XG4gICAgICAgICAge2xheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVuYWJsZTNkID8gKFxuICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVuYWJsZTNkfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZWxldmF0aW9uU2NhbGV9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXsnbGF5ZXJWaXNDb25maWdzLmhlaWdodE11bHRpcGxpZXInfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnNpemV9XG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17ZWxldmF0aW9uQnlEZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshZW5hYmxlM2R9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7bGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2l6ZUFnZ3JlZ2F0aW9uLmNvbmRpdGlvbihsYXllci5jb25maWcpID8gKFxuICAgICAgICAgICAgICAgICAgPEFnZ3JlZ2F0aW9uVHlwZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zaXplQWdncmVnYXRpb259XG4gICAgICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgPEFnZ3JTY2FsZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zaXplfVxuICAgICAgICAgICAgICAgICAgbGFiZWw9eydIZWlnaHQgU2NhbGUnfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVSYW5nZX1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXsnbGF5ZXJWaXNDb25maWdzLmhlaWdodFJhbmdlJ31cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtmaXhlZEhlaWdodH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2hcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maXhlZEhlaWdodH1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHtsYXllci52aXNDb25maWdTZXR0aW5ncy5lbGV2YXRpb25QZXJjZW50aWxlLmNvbmRpdGlvbihsYXllci5jb25maWcpID8gKFxuICAgICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZWxldmF0aW9uUGVyY2VudGlsZX1cbiAgICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9TdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogU2hhbiBtb3ZlIHRoZXNlIGludG8gbGF5ZXIgY2xhc3NcbiAgICBfcmVuZGVySGV4YWdvbklkTGF5ZXJDb25maWcoe1xuICAgICAgbGF5ZXIsXG4gICAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNoYW5uZWxDb25maWdQcm9wc1xuICAgIH0pIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogRmlsbCAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmZpbGxlZH1cbiAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgIGxhYmVsPXsnbGF5ZXIuZmlsbENvbG9yJ31cbiAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuY29sb3J9XG4gICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7bGF5ZXIuY29uZmlnLmNvbG9yRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclNlbGVjdG9yIHsuLi5sYXllckNvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5vcGFjaXR5fVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy52aXNDb25maWcuZmlsbGVkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogT3V0bGluZSAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm91dGxpbmV9XG4gICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zdHJva2VDb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBwcm9wZXJ0eT1cInN0cm9rZUNvbG9yUmFuZ2VcIiAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvclxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBzZWxlY3RlZENvbG9yPXtsYXllci5jb25maWcudmlzQ29uZmlnLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICAgIHByb3BlcnR5PVwic3Ryb2tlQ29sb3JcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zdHJva2VPcGFjaXR5fVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy52aXNDb25maWcub3V0bGluZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy50aGlja25lc3N9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXshbGF5ZXIuY29uZmlnLnZpc0NvbmZpZy5vdXRsaW5lfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogQ292ZXJhZ2UgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci5jb3ZlcmFnZSd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgeyFsYXllci5jb25maWcuY292ZXJhZ2VGaWVsZCA/IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5jb3ZlcmFnZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5jb3ZlcmFnZVJhbmdlfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvdmVyYWdlfVxuICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIGhlaWdodCAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVuYWJsZTNkfVxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgY29sbGFwc2libGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zaXplfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZWxldmF0aW9uU2NhbGV9XG4gICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgbGFiZWw9eydsYXllclZpc0NvbmZpZ3MuaGVpZ2h0TXVsdGlwbGllcid9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9XCJsYXllclZpc0NvbmZpZ3MuaGVpZ2h0UmFuZ2VcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maXhlZEhlaWdodH0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogdGV4dCBsYWJlbCAqL31cbiAgICAgICAgICA8VGV4dExhYmVsUGFuZWxcbiAgICAgICAgICAgIGlkPXtsYXllci5pZH1cbiAgICAgICAgICAgIGZpZWxkcz17dmlzQ29uZmlndXJhdG9yUHJvcHMuZmllbGRzfVxuICAgICAgICAgICAgdXBkYXRlTGF5ZXJUZXh0TGFiZWw9e3RoaXMucHJvcHMudXBkYXRlTGF5ZXJUZXh0TGFiZWx9XG4gICAgICAgICAgICB0ZXh0TGFiZWw9e2xheWVyLmNvbmZpZy50ZXh0TGFiZWx9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgX3JlbmRlckFyY0xheWVyQ29uZmlnKGFyZ3MpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJMaW5lTGF5ZXJDb25maWcoYXJncyk7XG4gICAgfVxuXG4gICAgX3JlbmRlckxpbmVMYXllckNvbmZpZyh7XG4gICAgICBsYXllcixcbiAgICAgIHZpc0NvbmZpZ3VyYXRvclByb3BzLFxuICAgICAgbGF5ZXJDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzXG4gICAgfSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFN0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgICAgIHsvKiBDb2xvciAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLmNvbG9yJ30gY29sbGFwc2libGU+XG4gICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zb3VyY2VDb2xvcn1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuY29sb3JGaWVsZCA/IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JSYW5nZVNlbGVjdG9yIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxBcmNMYXllckNvbG9yU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBsYXllcj17bGF5ZXJ9XG4gICAgICAgICAgICAgICAgc2V0Q29sb3JVST17bGF5ZXJDb25maWd1cmF0b3JQcm9wcy5zZXRDb2xvclVJfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlQ29uZmlnPXtsYXllckNvbmZpZ3VyYXRvclByb3BzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlVmlzQ29uZmlnPXt2aXNDb25maWd1cmF0b3JQcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIHRoaWNrbmVzcyAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLnN0cm9rZSd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zaXplRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2l6ZVJhbmdlfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWxheWVyLmNvbmZpZy5zaXplRmllbGR9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy50aGlja25lc3N9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBlbGV2YXRpb24gc2NhbGUgKi99XG4gICAgICAgICAge2xheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVsZXZhdGlvblNjYWxlID8gKFxuICAgICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9XCJsYXllclZpc0NvbmZpZ3MuZWxldmF0aW9uU2NhbGVcIiBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5lbGV2YXRpb25TY2FsZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIF9yZW5kZXJUcmlwTGF5ZXJDb25maWcoe1xuICAgICAgbGF5ZXIsXG4gICAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNoYW5uZWxDb25maWdQcm9wc1xuICAgIH0pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWV0YToge2ZlYXR1cmVUeXBlcyA9IHt9fVxuICAgICAgfSA9IGxheWVyO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgey8qIENvbG9yICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwIGxhYmVsPXsnbGF5ZXIuY29sb3InfSBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5jb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvciB7Li4ubGF5ZXJDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIFN0cm9rZSBXaWR0aCAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IGxhYmVsPVwibGF5ZXIuc3Ryb2tlV2lkdGhcIiBjb2xsYXBzaWJsZT5cbiAgICAgICAgICAgIHtsYXllci5jb25maWcuc2l6ZUZpZWxkID8gKFxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnNpemVSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy50aGlja25lc3N9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuYmlsbGJvYXJkfSB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuc2l6ZX1cbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBUcmFpbCBMZW5ndGgqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgey4uLihmZWF0dXJlVHlwZXMucG9seWdvbiA/IGxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnN0cm9rZWQgOiB7fSl9XG4gICAgICAgICAgICBsYWJlbD1cImxheWVyLnRyYWlsTGVuZ3RoXCJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPVwibGF5ZXIudHJhaWxMZW5ndGhEZXNjcmlwdGlvblwiXG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnRyYWlsTGVuZ3RofVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTd2l0Y2ggey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmZhZGVUcmFpbH0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIF9yZW5kZXJHZW9qc29uTGF5ZXJDb25maWcoe1xuICAgICAgbGF5ZXIsXG4gICAgICB2aXNDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICBsYXllckNoYW5uZWxDb25maWdQcm9wc1xuICAgIH0pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWV0YToge2ZlYXR1cmVUeXBlcyA9IHt9fSxcbiAgICAgICAgY29uZmlnOiB7dmlzQ29uZmlnfVxuICAgICAgfSA9IGxheWVyO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICAgICAgey8qIEZpbGwgQ29sb3IgKi99XG4gICAgICAgICAge2ZlYXR1cmVUeXBlcy5wb2x5Z29uIHx8IGZlYXR1cmVUeXBlcy5wb2ludCA/IChcbiAgICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maWxsZWR9XG4gICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgbGFiZWw9XCJsYXllci5maWxsQ29sb3JcIlxuICAgICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2xheWVyLmNvbmZpZy5jb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICAgIDxMYXllckNvbG9yUmFuZ2VTZWxlY3RvciB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IC8+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvciB7Li4ubGF5ZXJDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cbiAgICAgICAgICApIDogbnVsbH1cblxuICAgICAgICAgIHsvKiBzdHJva2UgY29sb3IgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zdHJva2VkfVxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgbGFiZWw9XCJsYXllci5zdHJva2VDb2xvclwiXG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zdHJva2VDb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBwcm9wZXJ0eT1cInN0cm9rZUNvbG9yUmFuZ2VcIiAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvclxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBzZWxlY3RlZENvbG9yPXtsYXllci5jb25maWcudmlzQ29uZmlnLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICAgIHByb3BlcnR5PVwic3Ryb2tlQ29sb3JcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zdHJva2VPcGFjaXR5fVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIFN0cm9rZSBXaWR0aCAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgey4uLihmZWF0dXJlVHlwZXMucG9seWdvbiA/IGxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnN0cm9rZWQgOiB7fSl9XG4gICAgICAgICAgICBsYWJlbD1cImxheWVyLnN0cm9rZVdpZHRoXCJcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zaXplRmllbGQgPyAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2l6ZVJhbmdlfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnRoaWNrbmVzc31cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPENoYW5uZWxCeVZhbHVlU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBjaGFubmVsPXtsYXllci52aXN1YWxDaGFubmVscy5zaXplfVxuICAgICAgICAgICAgICAgIHsuLi5sYXllckNoYW5uZWxDb25maWdQcm9wc31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIEVsZXZhdGlvbiAqL31cbiAgICAgICAgICB7ZmVhdHVyZVR5cGVzLnBvbHlnb24gPyAoXG4gICAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5lbmFibGUzZH1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF2aXNDb25maWcuZmlsbGVkfVxuICAgICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVsZXZhdGlvblNjYWxlfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMuaGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaFxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmZpeGVkSGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPFZpc0NvbmZpZ1N3aXRjaCB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9IHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy53aXJlZnJhbWV9IC8+XG4gICAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgKSA6IG51bGx9XG5cbiAgICAgICAgICB7LyogUmFkaXVzICovfVxuICAgICAgICAgIHtmZWF0dXJlVHlwZXMucG9pbnQgPyAoXG4gICAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLnJhZGl1cyd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgICB7IWxheWVyLmNvbmZpZy5yYWRpdXNGaWVsZCA/IChcbiAgICAgICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MucmFkaXVzfVxuICAgICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgICAgbGFiZWw9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e0Jvb2xlYW4obGF5ZXIuY29uZmlnLnJhZGl1c0ZpZWxkKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5yYWRpdXNSYW5nZX1cbiAgICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshbGF5ZXIuY29uZmlnLnJhZGl1c0ZpZWxkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgY2hhbm5lbD17bGF5ZXIudmlzdWFsQ2hhbm5lbHMucmFkaXVzfVxuICAgICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvU3R5bGVkTGF5ZXJWaXN1YWxDb25maWd1cmF0b3I+XG4gICAgICApO1xuICAgIH1cblxuICAgIF9yZW5kZXIzRExheWVyQ29uZmlnKHtsYXllciwgdmlzQ29uZmlndXJhdG9yUHJvcHN9KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci4zRE1vZGVsJ30gY29sbGFwc2libGU+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICAgICAgICBhY2NlcHQ9XCIuZ2xiLC5nbHRmXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5maWxlcyAmJiBlLnRhcmdldC5maWxlc1swXSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChlLnRhcmdldC5maWxlc1swXSk7XG4gICAgICAgICAgICAgICAgICB2aXNDb25maWd1cmF0b3JQcm9wcy5vbkNoYW5nZSh7c2NlbmVncmFwaDogdXJsfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgbGFiZWw9eydsYXllci4zRE1vZGVsT3B0aW9ucyd9IGNvbGxhcHNpYmxlPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3Muc2l6ZVNjYWxlfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VmlzQ29uZmlnU2xpZGVyXG4gICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5hbmdsZVh9XG4gICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2ZhbHNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmFuZ2xlWX1cbiAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuYW5nbGVafVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtmYWxzZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBfcmVuZGVyUzJMYXllckNvbmZpZyh7XG4gICAgICBsYXllcixcbiAgICAgIHZpc0NvbmZpZ3VyYXRvclByb3BzLFxuICAgICAgbGF5ZXJDb25maWd1cmF0b3JQcm9wcyxcbiAgICAgIGxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzXG4gICAgfSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjb25maWc6IHt2aXNDb25maWd9XG4gICAgICB9ID0gbGF5ZXI7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllclZpc3VhbENvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7LyogQ29sb3IgKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXBcbiAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maWxsZWR9XG4gICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICBsYWJlbD1cImxheWVyLmZpbGxDb2xvclwiXG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5jb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvciB7Li4ubGF5ZXJDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXIgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLm9wYWNpdHl9IHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuXG4gICAgICAgICAgey8qIFN0cm9rZSAqL31cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cFxuICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLnN0cm9rZWR9XG4gICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICBsYWJlbD1cImxheWVyLnN0cm9rZUNvbG9yXCJcbiAgICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgPlxuICAgICAgICAgICAge2xheWVyLmNvbmZpZy5zdHJva2VDb2xvckZpZWxkID8gKFxuICAgICAgICAgICAgICA8TGF5ZXJDb2xvclJhbmdlU2VsZWN0b3Igey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBwcm9wZXJ0eT1cInN0cm9rZUNvbG9yUmFuZ2VcIiAvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPExheWVyQ29sb3JTZWxlY3RvclxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBzZWxlY3RlZENvbG9yPXtsYXllci5jb25maWcudmlzQ29uZmlnLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICAgIHByb3BlcnR5PVwic3Ryb2tlQ29sb3JcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnN0cm9rZUNvbG9yfVxuICAgICAgICAgICAgICB7Li4ubGF5ZXJDaGFubmVsQ29uZmlnUHJvcHN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvTGF5ZXJDb25maWdHcm91cD5cblxuICAgICAgICAgIHsvKiBTdHJva2UgV2lkdGggKi99XG4gICAgICAgICAgPExheWVyQ29uZmlnR3JvdXAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSBsYWJlbD1cImxheWVyLnN0cm9rZVdpZHRoXCIgY29sbGFwc2libGU+XG4gICAgICAgICAgICB7bGF5ZXIuY29uZmlnLnNpemVGaWVsZCA/IChcbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5zaXplUmFuZ2V9XG4gICAgICAgICAgICAgICAgey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfVxuICAgICAgICAgICAgICAgIGxhYmVsPXtmYWxzZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MudGhpY2tuZXNzfVxuICAgICAgICAgICAgICAgIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc31cbiAgICAgICAgICAgICAgICBsYWJlbD17ZmFsc2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbmZpZ0dyb3VwQ29sbGFwc2libGVDb250ZW50PlxuICAgICAgICAgICAgICA8Q2hhbm5lbEJ5VmFsdWVTZWxlY3RvclxuICAgICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLnNpemV9XG4gICAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG5cbiAgICAgICAgICB7LyogRWxldmF0aW9uICovfVxuICAgICAgICAgIDxMYXllckNvbmZpZ0dyb3VwXG4gICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICB7Li4ubGF5ZXIudmlzQ29uZmlnU2V0dGluZ3MuZW5hYmxlM2R9XG4gICAgICAgICAgICBkaXNhYmxlZD17IXZpc0NvbmZpZy5maWxsZWR9XG4gICAgICAgICAgICBjb2xsYXBzaWJsZVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxDaGFubmVsQnlWYWx1ZVNlbGVjdG9yXG4gICAgICAgICAgICAgIGNoYW5uZWw9e2xheWVyLnZpc3VhbENoYW5uZWxzLmhlaWdodH1cbiAgICAgICAgICAgICAgey4uLmxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxWaXNDb25maWdTbGlkZXJcbiAgICAgICAgICAgICAgey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLmVsZXZhdGlvblNjYWxlfVxuICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgIGxhYmVsPXsnbGF5ZXJWaXNDb25maWdzLmhlaWdodE11bHRpcGxpZXInfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDb25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgICAgPFZpc0NvbmZpZ1NsaWRlclxuICAgICAgICAgICAgICAgIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5oZWlnaHRSYW5nZX1cbiAgICAgICAgICAgICAgICB7Li4udmlzQ29uZmlndXJhdG9yUHJvcHN9XG4gICAgICAgICAgICAgICAgbGFiZWw9XCJsYXllclZpc0NvbmZpZ3MuaGVpZ2h0UmFuZ2VcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoIHsuLi5sYXllci52aXNDb25maWdTZXR0aW5ncy5maXhlZEhlaWdodH0gey4uLnZpc0NvbmZpZ3VyYXRvclByb3BzfSAvPlxuICAgICAgICAgICAgICA8VmlzQ29uZmlnU3dpdGNoIHsuLi52aXNDb25maWd1cmF0b3JQcm9wc30gey4uLmxheWVyLnZpc0NvbmZpZ1NldHRpbmdzLndpcmVmcmFtZX0gLz5cbiAgICAgICAgICAgIDwvQ29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgPC9MYXllckNvbmZpZ0dyb3VwPlxuICAgICAgICA8L1N0eWxlZExheWVyVmlzdWFsQ29uZmlndXJhdG9yPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBoYW5kbGVTZWxlY3RDb2x1bW5Nb2RlID0gKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCB7dXBkYXRlTGF5ZXJDb25maWd9ID0gdGhpcy5wcm9wcztcbiAgICAgIHVwZGF0ZUxheWVyQ29uZmlnKHtjb2x1bW5Nb2RlOiBrZXl9KTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBsYXllcixcbiAgICAgICAgZGF0YXNldHMsXG4gICAgICAgIG9wZW5Nb2RhbCxcbiAgICAgICAgdXBkYXRlTGF5ZXJDb25maWcsXG4gICAgICAgIGxheWVyVHlwZU9wdGlvbnMsXG4gICAgICAgIHVwZGF0ZUxheWVyVHlwZSxcbiAgICAgICAgZGlzYWJsZVR5cGVTZWxlY3QgPSBmYWxzZVxuICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7ZmllbGRzID0gW10sIGZpZWxkUGFpcnMgPSB1bmRlZmluZWR9ID0gbGF5ZXIuY29uZmlnLmRhdGFJZFxuICAgICAgICA/IGRhdGFzZXRzW2xheWVyLmNvbmZpZy5kYXRhSWRdXG4gICAgICAgIDoge307XG4gICAgICBjb25zdCB7Y29uZmlnfSA9IGxheWVyO1xuXG4gICAgICBjb25zdCB2aXNDb25maWd1cmF0b3JQcm9wcyA9IGdldFZpc0NvbmZpZ3VyYXRvclByb3BzKHRoaXMucHJvcHMpO1xuICAgICAgY29uc3QgbGF5ZXJDb25maWd1cmF0b3JQcm9wcyA9IGdldExheWVyQ29uZmlndXJhdG9yUHJvcHModGhpcy5wcm9wcyk7XG4gICAgICBjb25zdCBsYXllckNoYW5uZWxDb25maWdQcm9wcyA9IGdldExheWVyQ2hhbm5lbENvbmZpZ1Byb3BzKHRoaXMucHJvcHMpO1xuICAgICAgY29uc3QgZGF0YXNldCA9IGdldExheWVyRGF0YXNldChkYXRhc2V0cywgbGF5ZXIpO1xuICAgICAgY29uc3QgcmVuZGVyVGVtcGxhdGUgPSBsYXllci50eXBlICYmIGBfcmVuZGVyJHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIobGF5ZXIudHlwZSl9TGF5ZXJDb25maWdgO1xuXG4gICAgICAvLyBzaG93IG9ubHkgZGF0YXNldHMgdGhhdCBjYW4gYmUgdXNlZCBieSB0aGUgbGF5ZXJcbiAgICAgIGNvbnN0IHNvdXJjZURhdGFTZWxlY3Rvck9wdGlvbnMgPSBPYmplY3Qua2V5cyhkYXRhc2V0cykucmVkdWNlKFxuICAgICAgICAoYWNjLCBpZCkgPT4gKG1hdGNoRGF0YXNldFR5cGUoZGF0YXNldHNbaWRdLCBsYXllcikgPyB7Li4uYWNjLCBbaWRdOiBkYXRhc2V0c1tpZF19IDogYWNjKSxcbiAgICAgICAge31cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRMYXllckNvbmZpZ3VyYXRvcj5cbiAgICAgICAgICB7bGF5ZXIubGF5ZXJJbmZvTW9kYWwgJiYgIWxheWVyLnN1cHBvcnRlZENvbHVtbk1vZGVzID8gKFxuICAgICAgICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGhhbmRsZXIgdHlwZS4gU3RyaW5nIG9yIHJldHVybiB0eXBlIG9mIGxheWVyLmxheWVySW5mb01vZGFsID9cbiAgICAgICAgICAgIDxIb3dUb0J1dHRvbiBvbkNsaWNrPXsoKSA9PiBvcGVuTW9kYWwobGF5ZXIubGF5ZXJJbmZvTW9kYWwgYXMgYW55KX0gLz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8TGF5ZXJDb25maWdHcm91cCBsYWJlbD17J2xheWVyLmJhc2ljJ30gY29sbGFwc2libGUgZXhwYW5kZWQ9eyFsYXllci5oYXNBbGxDb2x1bW5zKCl9PlxuICAgICAgICAgICAgPExheWVyVHlwZVNlbGVjdG9yXG4gICAgICAgICAgICAgIHNlbGVjdGVkPXtsYXllci50eXBlfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZVR5cGVTZWxlY3R9XG4gICAgICAgICAgICAgIG9wdGlvbnM9e2xheWVyVHlwZU9wdGlvbnN9XG4gICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgb25TZWxlY3Q9e3VwZGF0ZUxheWVyVHlwZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q29uZmlnR3JvdXBDb2xsYXBzaWJsZUNvbnRlbnQ+XG4gICAgICAgICAgICAgIDxTb3VyY2VEYXRhU2VsZWN0b3JcbiAgICAgICAgICAgICAgICBkYXRhc2V0cz17c291cmNlRGF0YVNlbGVjdG9yT3B0aW9uc31cbiAgICAgICAgICAgICAgICBpZD17bGF5ZXIuaWR9XG4gICAgICAgICAgICAgICAgZGF0YUlkPXtjb25maWcuZGF0YUlkfVxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBvblNlbGVjdD17KHZhbHVlOiBzdHJpbmcpID0+IHVwZGF0ZUxheWVyQ29uZmlnKHtkYXRhSWQ6IHZhbHVlfSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxMYXllckNvbHVtbk1vZGVDb25maWdcbiAgICAgICAgICAgICAgICBsYXllcj17bGF5ZXJ9XG4gICAgICAgICAgICAgICAgc3VwcG9ydGVkQ29sdW1uTW9kZXM9e2xheWVyLnN1cHBvcnRlZENvbHVtbk1vZGVzfVxuICAgICAgICAgICAgICAgIGlkPXtsYXllci5pZH1cbiAgICAgICAgICAgICAgICBsYXllckNvbmZpZz17bGF5ZXIuY29uZmlnfVxuICAgICAgICAgICAgICAgIC8vIFRPRE8gZmlndXJlIG91dCBoYW5kbGVyIHR5cGUuIFN0cmluZyBvciByZXR1cm4gdHlwZSBvZiBsYXllci5sYXllckluZm9Nb2RhbCA/XG4gICAgICAgICAgICAgICAgb3Blbk1vZGFsPXtvcGVuTW9kYWwgYXMgYW55fVxuICAgICAgICAgICAgICAgIHVwZGF0ZUxheWVyQ29uZmlnPXt1cGRhdGVMYXllckNvbmZpZ31cbiAgICAgICAgICAgICAgICB1cGRhdGVMYXllclR5cGU9e3VwZGF0ZUxheWVyVHlwZX1cbiAgICAgICAgICAgICAgICBmaWVsZHM9e2ZpZWxkc31cbiAgICAgICAgICAgICAgICBmaWVsZFBhaXJzPXtmaWVsZFBhaXJzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Db25maWdHcm91cENvbGxhcHNpYmxlQ29udGVudD5cbiAgICAgICAgICAgIHtsYXllci5lcnJvck1lc3NhZ2UgPyA8TGF5ZXJFcnJvck1lc3NhZ2UgZXJyb3JNZXNzYWdlPXtsYXllci5lcnJvck1lc3NhZ2V9IC8+IDogbnVsbH1cbiAgICAgICAgICA8L0xheWVyQ29uZmlnR3JvdXA+XG4gICAgICAgICAge3JlbmRlclRlbXBsYXRlICYmXG4gICAgICAgICAgICB0aGlzW3JlbmRlclRlbXBsYXRlXSAmJlxuICAgICAgICAgICAgdGhpc1tyZW5kZXJUZW1wbGF0ZV0oe1xuICAgICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgICAgZGF0YXNldCxcbiAgICAgICAgICAgICAgdmlzQ29uZmlndXJhdG9yUHJvcHMsXG4gICAgICAgICAgICAgIGxheWVyQ2hhbm5lbENvbmZpZ1Byb3BzLFxuICAgICAgICAgICAgICBsYXllckNvbmZpZ3VyYXRvclByb3BzXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgPC9TdHlsZWRMYXllckNvbmZpZ3VyYXRvcj5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIExheWVyQ29uZmlndXJhdG9yO1xufVxuXG5leHBvcnQgY29uc3QgQWdncmVnYXRpb25UeXBlU2VsZWN0b3IgPSAoe2NoYW5uZWwsIGxheWVyLCBvbkNoYW5nZX06IEFnZ3JlZ2F0aW9uU2VsZWN0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7ZmllbGQsIGFnZ3JlZ2F0aW9uLCBrZXl9ID0gY2hhbm5lbDtcbiAgY29uc3Qgc2VsZWN0ZWRGaWVsZCA9IGxheWVyLmNvbmZpZ1tmaWVsZF07XG4gIGNvbnN0IHt2aXNDb25maWd9ID0gbGF5ZXIuY29uZmlnO1xuXG4gIC8vIGFnZ3JlZ2F0aW9uIHNob3VsZCBvbmx5IGJlIHNlbGVjdGFibGUgd2hlbiBmaWVsZCBpcyBzZWxlY3RlZFxuICBjb25zdCBsYXllckFnZ3JlZ2F0aW9uVHlwZXMgPSBsYXllci5nZXRBZ2dyZWdhdGlvbk9wdGlvbnMoa2V5KTtcblxuICBjb25zdCBhZ2dyZWdhdGlvbk9wdGlvbnMgPSBBR0dSRUdBVElPTl9UWVBFX09QVElPTlMuZmlsdGVyKCh7aWR9KSA9PlxuICAgIGxheWVyQWdncmVnYXRpb25UeXBlcy5pbmNsdWRlcyhpZClcbiAgKTtcblxuICBjb25zdCBzZWxlY3RlZEFnZ3JlZ2F0aW9uID0gYWdncmVnYXRpb25cbiAgICA/IGFnZ3JlZ2F0aW9uT3B0aW9ucy5maW5kKCh7aWR9KSA9PiBpZCA9PT0gdmlzQ29uZmlnW2FnZ3JlZ2F0aW9uXSlcbiAgICA6IFtdO1xuXG4gIHJldHVybiAoXG4gICAgPFNpZGVQYW5lbFNlY3Rpb24+XG4gICAgICA8UGFuZWxMYWJlbD5cbiAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2VcbiAgICAgICAgICBpZD17J2xheWVyLmFnZ3JlZ2F0ZUJ5J31cbiAgICAgICAgICB2YWx1ZXM9e3tcbiAgICAgICAgICAgIGZpZWxkOiBzZWxlY3RlZEZpZWxkLmRpc3BsYXlOYW1lXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvUGFuZWxMYWJlbD5cbiAgICAgIDxJdGVtU2VsZWN0b3JcbiAgICAgICAgc2VsZWN0ZWRJdGVtcz17c2VsZWN0ZWRBZ2dyZWdhdGlvbn1cbiAgICAgICAgb3B0aW9ucz17YWdncmVnYXRpb25PcHRpb25zfVxuICAgICAgICBkaXNwbGF5T3B0aW9uPVwibGFiZWxcIlxuICAgICAgICBnZXRPcHRpb25WYWx1ZT1cImlkXCJcbiAgICAgICAgbXVsdGlTZWxlY3Q9e2ZhbHNlfVxuICAgICAgICBzZWFyY2hhYmxlPXtmYWxzZX1cbiAgICAgICAgb25DaGFuZ2U9e3ZhbHVlID0+XG4gICAgICAgICAgb25DaGFuZ2UoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZpc0NvbmZpZzoge1xuICAgICAgICAgICAgICAgIC4uLmxheWVyLmNvbmZpZy52aXNDb25maWcsXG4gICAgICAgICAgICAgICAgW2FnZ3JlZ2F0aW9uIGFzIHN0cmluZ106IHZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFubmVsLmtleVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgLz5cbiAgICA8L1NpZGVQYW5lbFNlY3Rpb24+XG4gICk7XG59O1xuLyogZXNsaW50LWVuYWJsZSBtYXgtcGFyYW1zICovXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLGlCQUFBLEdBQUFDLHNCQUFBLENBQUFKLE9BQUE7QUFFQSxJQUFBSyxhQUFBLEdBQUFELHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBTSxrQkFBQSxHQUFBTixPQUFBO0FBRUEsSUFBQU8sbUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFRLGtCQUFBLEdBQUFKLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBUyx1QkFBQSxHQUFBTCxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVUsWUFBQSxHQUFBTixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQVcsbUJBQUEsR0FBQVgsT0FBQTtBQUtBLElBQUFZLHNCQUFBLEdBQUFSLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBYSxpQkFBQSxHQUFBWCx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQWMsa0JBQUEsR0FBQVYsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFlLGtCQUFBLEdBQUFYLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBZ0IsZUFBQSxHQUFBWixzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQWlCLGdCQUFBLEdBQUFiLHNCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBa0IsZ0JBQUEsR0FBQWQsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFtQiw0QkFBQSxHQUFBZixzQkFBQSxDQUFBSixPQUFBO0FBR0EsSUFBQW9CLFVBQUEsR0FBQXBCLE9BQUE7QUFHQSxJQUFBcUIsTUFBQSxHQUFBckIsT0FBQTtBQUVBLElBQUFzQixNQUFBLEdBQUF0QixPQUFBO0FBQXVELElBQUF1QixlQUFBLEVBQUFDLGdCQUFBLEVBbkN2RDtBQUNBO0FBRUE7QUFBQSxTQUFBQyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQXhCLHdCQUFBd0IsQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUEsc0JBQUFBLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxjQUFBUixDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFXLFFBQUFuQixDQUFBLEVBQUFFLENBQUEsUUFBQUMsQ0FBQSxHQUFBUSxNQUFBLENBQUFTLElBQUEsQ0FBQXBCLENBQUEsT0FBQVcsTUFBQSxDQUFBVSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFYLE1BQUEsQ0FBQVUscUJBQUEsQ0FBQXJCLENBQUEsR0FBQUUsQ0FBQSxLQUFBb0IsQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQXJCLENBQUEsV0FBQVMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFFLENBQUEsRUFBQXNCLFVBQUEsT0FBQXJCLENBQUEsQ0FBQXNCLElBQUEsQ0FBQUMsS0FBQSxDQUFBdkIsQ0FBQSxFQUFBbUIsQ0FBQSxZQUFBbkIsQ0FBQTtBQUFBLFNBQUF3QixjQUFBM0IsQ0FBQSxhQUFBRSxDQUFBLE1BQUFBLENBQUEsR0FBQTBCLFNBQUEsQ0FBQUMsTUFBQSxFQUFBM0IsQ0FBQSxVQUFBQyxDQUFBLFdBQUF5QixTQUFBLENBQUExQixDQUFBLElBQUEwQixTQUFBLENBQUExQixDQUFBLFFBQUFBLENBQUEsT0FBQWlCLE9BQUEsQ0FBQVIsTUFBQSxDQUFBUixDQUFBLE9BQUEyQixPQUFBLFdBQUE1QixDQUFBLFFBQUE2QixnQkFBQSxhQUFBL0IsQ0FBQSxFQUFBRSxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBUyxNQUFBLENBQUFxQix5QkFBQSxHQUFBckIsTUFBQSxDQUFBc0IsZ0JBQUEsQ0FBQWpDLENBQUEsRUFBQVcsTUFBQSxDQUFBcUIseUJBQUEsQ0FBQTdCLENBQUEsS0FBQWdCLE9BQUEsQ0FBQVIsTUFBQSxDQUFBUixDQUFBLEdBQUEyQixPQUFBLFdBQUE1QixDQUFBLElBQUFTLE1BQUEsQ0FBQUMsY0FBQSxDQUFBWixDQUFBLEVBQUFFLENBQUEsRUFBQVMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixDQUFBLEVBQUFELENBQUEsaUJBQUFGLENBQUE7QUFBQSxTQUFBa0MsV0FBQS9CLENBQUEsRUFBQW1CLENBQUEsRUFBQXRCLENBQUEsV0FBQXNCLENBQUEsT0FBQWEsZ0JBQUEsYUFBQWIsQ0FBQSxPQUFBYywyQkFBQSxhQUFBakMsQ0FBQSxFQUFBa0MseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFqQixDQUFBLEVBQUF0QixDQUFBLFlBQUFtQyxnQkFBQSxhQUFBaEMsQ0FBQSxFQUFBcUMsV0FBQSxJQUFBbEIsQ0FBQSxDQUFBSSxLQUFBLENBQUF2QixDQUFBLEVBQUFILENBQUE7QUFBQSxTQUFBcUMsMEJBQUEsY0FBQWxDLENBQUEsSUFBQXNDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUEzQixJQUFBLENBQUFzQixPQUFBLENBQUFDLFNBQUEsQ0FBQUUsT0FBQSxpQ0FBQXRDLENBQUEsYUFBQWtDLHlCQUFBLFlBQUFBLDBCQUFBLGFBQUFsQyxDQUFBO0FBcUVBLElBQU15Qyx1QkFBdUIsR0FBR0MsNEJBQU0sQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLENBQUM7RUFDL0NDLFNBQVMsRUFBRTtBQUNiLENBQUMsQ0FBQyxDQUFBbkQsZUFBQSxLQUFBQSxlQUFBLE9BQUFvRCx1QkFBQSw0SEFFYyxVQUFBQyxLQUFLO0VBQUEsT0FBSUEsS0FBSyxDQUFDQyxLQUFLLENBQUNDLHVCQUF1QjtBQUFBLEdBQy9DLFVBQUFGLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLEtBQUssQ0FBQ0Usd0JBQXdCO0FBQUEsR0FDekMsVUFBQUgsS0FBSztFQUFBLE9BQUlBLEtBQUssQ0FBQ0MsS0FBSyxDQUFDRyx1QkFBdUI7QUFBQSxHQUN2RCxVQUFBSixLQUFLO0VBQUEsT0FBSUEsS0FBSyxDQUFDQyxLQUFLLENBQUNJLDRCQUE0QjtBQUFBLEVBQ3REO0FBRUQsSUFBTUMsNkJBQTZCLEdBQUdYLDRCQUFNLENBQUNDLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDO0VBQ3JEQyxTQUFTLEVBQUU7QUFDYixDQUFDLENBQUMsQ0FBQWxELGdCQUFBLEtBQUFBLGdCQUFBLE9BQUFtRCx1QkFBQSwyQ0FFRDtBQUVNLElBQU1RLGNBQWMsR0FBQUMsT0FBQSxDQUFBRCxjQUFBLEdBQUcsU0FBakJBLGNBQWNBLENBQUlFLFFBQWtCLEVBQUVDLEtBQVk7RUFBQSxJQUFBQyxhQUFBO0VBQUEsT0FDN0RGLFFBQVEsQ0FBQyxFQUFBRSxhQUFBLEdBQUFELEtBQUssQ0FBQ0UsTUFBTSxjQUFBRCxhQUFBLHVCQUFaQSxhQUFBLENBQWNFLE1BQU0sS0FBSSxFQUFFLENBQUMsR0FBR0osUUFBUSxDQUFDQyxLQUFLLENBQUNFLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLE1BQU0sR0FBRyxFQUFFO0FBQUE7O0FBRWxGO0FBQ08sSUFBTUMsZUFBZSxHQUFBUCxPQUFBLENBQUFPLGVBQUEsR0FBRyxTQUFsQkEsZUFBZUEsQ0FBSU4sUUFBa0IsRUFBRUMsS0FBWTtFQUFBLElBQUFNLGNBQUE7RUFBQSxPQUM5RFAsUUFBUSxDQUFDLEVBQUFPLGNBQUEsR0FBQU4sS0FBSyxDQUFDRSxNQUFNLGNBQUFJLGNBQUEsdUJBQVpBLGNBQUEsQ0FBY0gsTUFBTSxLQUFJLEVBQUUsQ0FBQztBQUFBO0FBRS9CLElBQU1JLHlCQUF5QixHQUFBVCxPQUFBLENBQUFTLHlCQUFBLEdBQUcsU0FBNUJBLHlCQUF5QkEsQ0FBSWpCLEtBQTZCO0VBQUEsT0FBTTtJQUMzRVUsS0FBSyxFQUFFVixLQUFLLENBQUNVLEtBQUs7SUFDbEJJLE1BQU0sRUFBRVAsY0FBYyxDQUFDUCxLQUFLLENBQUNTLFFBQVEsRUFBRVQsS0FBSyxDQUFDVSxLQUFLLENBQUM7SUFDbkRRLFFBQVEsRUFBRWxCLEtBQUssQ0FBQ21CLGlCQUFpQjtJQUNqQ0MsVUFBVSxFQUFFcEIsS0FBSyxDQUFDcUI7RUFDcEIsQ0FBQztBQUFBLENBQUM7QUFFSyxJQUFNQyx1QkFBdUIsR0FBQWQsT0FBQSxDQUFBYyx1QkFBQSxHQUFHLFNBQTFCQSx1QkFBdUJBLENBQUl0QixLQUE2QjtFQUFBLE9BQU07SUFDekVVLEtBQUssRUFBRVYsS0FBSyxDQUFDVSxLQUFLO0lBQ2xCSSxNQUFNLEVBQUVQLGNBQWMsQ0FBQ1AsS0FBSyxDQUFDUyxRQUFRLEVBQUVULEtBQUssQ0FBQ1UsS0FBSyxDQUFDO0lBQ25EUSxRQUFRLEVBQUVsQixLQUFLLENBQUN1QixvQkFBb0I7SUFDcENILFVBQVUsRUFBRXBCLEtBQUssQ0FBQ3FCO0VBQ3BCLENBQUM7QUFBQSxDQUFDO0FBRUssSUFBTUcsMEJBQTBCLEdBQUFoQixPQUFBLENBQUFnQiwwQkFBQSxHQUFHLFNBQTdCQSwwQkFBMEJBLENBQUl4QixLQUE2QjtFQUFBLE9BQU07SUFDNUVVLEtBQUssRUFBRVYsS0FBSyxDQUFDVSxLQUFLO0lBQ2xCZSxPQUFPLEVBQUVWLGVBQWUsQ0FBQ2YsS0FBSyxDQUFDUyxRQUFRLEVBQUVULEtBQUssQ0FBQ1UsS0FBSyxDQUFDO0lBQ3JESSxNQUFNLEVBQUVQLGNBQWMsQ0FBQ1AsS0FBSyxDQUFDUyxRQUFRLEVBQUVULEtBQUssQ0FBQ1UsS0FBSyxDQUFDO0lBQ25EUSxRQUFRLEVBQUVsQixLQUFLLENBQUMwQiw4QkFBOEI7SUFDOUNOLFVBQVUsRUFBRXBCLEtBQUssQ0FBQ3FCO0VBQ3BCLENBQUM7QUFBQSxDQUFDO0FBRUZNLHdCQUF3QixDQUFDQyxJQUFJLEdBQUcsQ0FDOUJDLDhCQUF5QixFQUN6QkMsMkJBQXNCLEVBQ3RCQywwQkFBcUIsRUFDckJDLDRCQUF1QixFQUN2QkMsa0NBQTZCLEVBQzdCQyxpQ0FBNEIsRUFDNUJDLDZCQUF3QixFQUN4QkMsMkJBQXNCLEVBQ3RCQyw2Q0FBeUIsRUFDekJDLGtEQUE4QixFQUM5QkMsZ0RBQTRCLEVBQzVCQyw2QkFBd0IsRUFDeEJDLHVDQUFrQyxDQUNuQztBQUVjLFNBQVNkLHdCQUF3QkEsQ0FDOUNlLGtCQUFnRSxFQUNoRUMsZUFBMEQsRUFDMURDLGNBQXdELEVBQ3hEQyxnQkFBNEQsRUFDNURDLHNCQUF3RSxFQUN4RUMscUJBQXNFLEVBQ3RFQyxpQkFBOEQsRUFDOURDLGVBQTBELEVBQzFEQyxrQkFBZ0UsRUFDaEVDLHVCQUEwRSxFQUMxRUMscUJBQXNFLEVBQ3RFQyxpQkFBOEQsRUFDOURDLDJCQUFrRixFQUNyQztFQUFBLElBQ3ZDQyxpQkFBaUIsMEJBQUFDLFVBQUE7SUFBQSxTQUFBRCxrQkFBQTtNQUFBLElBQUFFLEtBQUE7TUFBQSxJQUFBQyxnQkFBQSxtQkFBQUgsaUJBQUE7TUFBQSxTQUFBSSxJQUFBLEdBQUFqRixTQUFBLENBQUFDLE1BQUEsRUFBQWlGLElBQUEsT0FBQUMsS0FBQSxDQUFBRixJQUFBLEdBQUFHLElBQUEsTUFBQUEsSUFBQSxHQUFBSCxJQUFBLEVBQUFHLElBQUE7UUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFwRixTQUFBLENBQUFvRixJQUFBO01BQUE7TUFBQUwsS0FBQSxHQUFBekUsVUFBQSxPQUFBdUUsaUJBQUEsS0FBQVEsTUFBQSxDQUFBSCxJQUFBO01BQUEsSUFBQS9FLGdCQUFBLGFBQUE0RSxLQUFBLDRCQXMyQkksVUFBQ08sR0FBVyxFQUFLO1FBQ3hDLElBQU83QyxpQkFBaUIsR0FBSXNDLEtBQUEsQ0FBS3pELEtBQUssQ0FBL0JtQixpQkFBaUI7UUFDeEJBLGlCQUFpQixDQUFDO1VBQUM4QyxVQUFVLEVBQUVEO1FBQUcsQ0FBQyxDQUFDO01BQ3RDLENBQUM7TUFBQSxPQUFBUCxLQUFBO0lBQUE7SUFBQSxJQUFBUyxVQUFBLGFBQUFYLGlCQUFBLEVBQUFDLFVBQUE7SUFBQSxXQUFBVyxhQUFBLGFBQUFaLGlCQUFBO01BQUFTLEdBQUE7TUFBQUksS0FBQSxFQXgyQkQsU0FBQUMsdUJBQXVCQSxDQUFDckUsS0FBSyxFQUFFO1FBQzdCLE9BQU8sSUFBSSxDQUFDc0UsNkJBQTZCLENBQUN0RSxLQUFLLEVBQUUsSUFBSSxDQUFDO01BQ3hEO0lBQUM7TUFBQWdFLEdBQUE7TUFBQUksS0FBQSxFQUVELFNBQUFHLHNCQUFzQkEsQ0FBQ3ZFLEtBQUssRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQ3NFLDZCQUE2QixDQUFDdEUsS0FBSyxFQUFFLEtBQUssQ0FBQztNQUN6RDtJQUFDO01BQUFnRSxHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBSSw0QkFBNEJBLENBQUN4RSxLQUFLLEVBQUU7UUFDbEMsb0JBQU8zRSxNQUFBLFlBQUFvSixhQUFBLENBQUNuQiwyQkFBMkIsRUFBS3RELEtBQVEsQ0FBQztNQUNuRDtJQUFDO01BQUFnRSxHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBRSw2QkFBNkJBLENBQUFJLElBQUEsRUFFM0JDLHVCQUF1QixFQUN2QjtRQUFBLElBRkNqRSxLQUFLLEdBQUFnRSxJQUFBLENBQUxoRSxLQUFLO1VBQUVrRSxvQkFBb0IsR0FBQUYsSUFBQSxDQUFwQkUsb0JBQW9CO1VBQUVDLHVCQUF1QixHQUFBSCxJQUFBLENBQXZCRyx1QkFBdUI7VUFBRUMsc0JBQXNCLEdBQUFKLElBQUEsQ0FBdEJJLHNCQUFzQjtRQUc3RSxvQkFDRXpKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ25FLDZCQUE2QixxQkFFNUJqRixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ0MsTUFBTSxJQUFJO1VBQUNDLEtBQUssRUFBRTtRQUFhLENBQUMsRUFDekROLG9CQUFvQjtVQUN4Qk8sV0FBVztRQUFBLGlCQUVYOUosTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNDO1FBQU0sR0FDaENULHVCQUF1QixDQUM1QixDQUFDLEVBQ0RuRSxLQUFLLENBQUNFLE1BQU0sQ0FBQzJFLFVBQVUsZ0JBQ3RCbEssTUFBQSxZQUFBb0osYUFBQSxDQUFDdEIsdUJBQXVCLEVBQUt5QixvQkFBdUIsQ0FBQyxnQkFFckR2SixNQUFBLFlBQUFvSixhQUFBLENBQUN2QixrQkFBa0IsRUFBSzRCLHNCQUF5QixDQUNsRCxlQUVEekosTUFBQSxZQUFBb0osYUFBQSxDQUFDeEksaUJBQUEsQ0FBQXVKLDZCQUE2QixxQkFDNUJuSyxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUFLckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNTLE9BQU8sRUFBTWIsb0JBQW9CLENBQUcsQ0FDcEQsQ0FDZixDQUFDLEVBR2xCbEUsS0FBSyxDQUFDZ0YsSUFBSSxLQUFLQyxzQkFBVyxDQUFDQyxLQUFLLGdCQUMvQnZLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQixNQUFBa0MsU0FBQSxpQkFDWHJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDYSxPQUFPLEVBQy9CakIsb0JBQW9CO1VBQ3hCTyxXQUFXO1FBQUEsaUJBRVg5SixNQUFBLFlBQUFvSixhQUFBLENBQUMzQixzQkFBc0IsTUFBQWlDLFNBQUE7VUFDckJLLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ1M7UUFBWSxHQUN0Q2pCLHVCQUF1QixDQUM1QixDQUFDLEVBQ0RuRSxLQUFLLENBQUNFLE1BQU0sQ0FBQ21GLGdCQUFnQixnQkFDNUIxSyxNQUFBLFlBQUFvSixhQUFBLENBQUN0Qix1QkFBdUIsTUFBQTRCLFNBQUEsaUJBQUtILG9CQUFvQjtVQUFFb0IsUUFBUSxFQUFDO1FBQWtCLEVBQUUsQ0FBQyxnQkFFakYzSyxNQUFBLFlBQUFvSixhQUFBLENBQUN2QixrQkFBa0IsTUFBQTZCLFNBQUEsaUJBQ2JILG9CQUFvQjtVQUN4QnFCLGFBQWEsRUFBRXZGLEtBQUssQ0FBQ0UsTUFBTSxDQUFDc0YsU0FBUyxDQUFDSixXQUFZO1VBQ2xERSxRQUFRLEVBQUM7UUFBYSxFQUN2QixDQUNGLGVBQ0QzSyxNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ21CLFNBQVMsRUFDakN2QixvQkFBb0I7VUFDeEJ3QixRQUFRLEVBQUUsQ0FBQzFGLEtBQUssQ0FBQ0UsTUFBTSxDQUFDc0YsU0FBUyxDQUFDTDtRQUFRLEVBQzNDLENBQzRCLENBQ2YsQ0FBQyxHQUNqQixJQUFJLGVBR1J4SyxNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxjQUFlO1VBQUNDLFdBQVc7UUFBQSxHQUNqRCxDQUFDekUsS0FBSyxDQUFDRSxNQUFNLENBQUN5RixTQUFTLGdCQUN0QmhMLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3NCLE1BQU0sRUFDOUIxQixvQkFBb0I7VUFDeEJNLEtBQUssRUFBRSxLQUFNO1VBQ2JrQixRQUFRLEVBQUU3RyxPQUFPLENBQUNtQixLQUFLLENBQUNFLE1BQU0sQ0FBQ3lGLFNBQVM7UUFBRSxFQUMzQyxDQUFDLGdCQUVGaEwsTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDdUIsV0FBVyxFQUNuQzNCLG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFLEtBQU07VUFDYmtCLFFBQVEsRUFBRSxDQUFDMUYsS0FBSyxDQUFDRSxNQUFNLENBQUN5RixTQUFTLElBQUkzRixLQUFLLENBQUNFLE1BQU0sQ0FBQ3NGLFNBQVMsQ0FBQ007UUFBWSxFQUN6RSxDQUNGLGVBQ0RuTCxNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0I7UUFBSyxHQUMvQjVCLHVCQUF1QixDQUM1QixDQUFDLEVBQ0RuRSxLQUFLLENBQUNFLE1BQU0sQ0FBQ3lGLFNBQVMsZ0JBQ3JCaEwsTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDd0IsV0FBVyxFQUNuQzVCLG9CQUFvQixDQUN6QixDQUFDLEdBQ0EsSUFBSSxlQUNSdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDMEIsU0FBUyxFQUFNOUIsb0JBQW9CLENBQUcsQ0FDdEQsQ0FDZixDQUFDLGVBR25CdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDN0IsY0FBYztVQUNiK0QsRUFBRSxFQUFFakcsS0FBSyxDQUFDaUcsRUFBRztVQUNiN0YsTUFBTSxFQUFFOEQsb0JBQW9CLENBQUM5RCxNQUFPO1VBQ3BDOEYsb0JBQW9CLEVBQUUsSUFBSSxDQUFDNUcsS0FBSyxDQUFDNEcsb0JBQXFCO1VBQ3REQyxTQUFTLEVBQUVuRyxLQUFLLENBQUNFLE1BQU0sQ0FBQ2lHO1FBQVUsQ0FDbkMsQ0FBQyxFQUdEbEMsdUJBQXVCLGdCQUN0QnRKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFLG1CQUFvQjtVQUFDQyxXQUFXO1FBQUEsZ0JBQ3ZEOUosTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDOEIsVUFBVSxFQUFNbEMsb0JBQW9CLENBQUcsQ0FBQyxlQUNyRnZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDK0IsbUJBQW1CLEVBQzNDbkMsb0JBQW9CLENBQ3pCLENBQUMsZUFDRnZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hCLGVBQWUsTUFBQThCLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ2dDLGtCQUFrQixFQUMxQ3BDLG9CQUFvQixDQUN6QixDQUM0QixDQUNmLENBQUMsR0FDakIsSUFDeUIsQ0FBQztNQUVwQztJQUFDO01BQUFaLEdBQUE7TUFBQUksS0FBQSxFQUVELFNBQUE2Qyx5QkFBeUJBLENBQUFDLEtBQUEsRUFBeUQ7UUFBQSxJQUF2RHhHLEtBQUssR0FBQXdHLEtBQUEsQ0FBTHhHLEtBQUs7VUFBRWtFLG9CQUFvQixHQUFBc0MsS0FBQSxDQUFwQnRDLG9CQUFvQjtVQUFFQyx1QkFBdUIsR0FBQXFDLEtBQUEsQ0FBdkJyQyx1QkFBdUI7UUFDN0Usb0JBQ0V4SixNQUFBLFlBQUFvSixhQUFBLENBQUNuRSw2QkFBNkIscUJBRTVCakYsTUFBQSxZQUFBb0osYUFBQSxDQUFDNUIsZ0JBQWdCO1VBQUNxQyxLQUFLLEVBQUUsYUFBYztVQUFDQyxXQUFXO1FBQUEsZ0JBQ2pEOUosTUFBQSxZQUFBb0osYUFBQSxDQUFDdEIsdUJBQXVCLEVBQUt5QixvQkFBdUIsQ0FBQyxlQUNyRHZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3BCLGlCQUFpQixNQUFBMEIsU0FBQSxpQkFBS0YsdUJBQXVCO1VBQUVPLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ0M7UUFBTSxFQUFFLENBQUMsZUFDdkZqSyxNQUFBLFlBQUFvSixhQUFBLENBQUMzQixzQkFBc0IsTUFBQWlDLFNBQUE7VUFDckJLLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ0M7UUFBTSxHQUNoQ1QsdUJBQXVCLENBQzVCLENBQUMsZUFDRnhKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIsUUFDM0I5RSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ21DLGdCQUFnQixDQUFDQyxTQUFTLENBQUMxRyxLQUFLLENBQUNFLE1BQU0sQ0FBQyxnQkFDL0R2RixNQUFBLFlBQUFvSixhQUFBLENBQUM0Qyx1QkFBdUIsTUFBQXRDLFNBQUEsaUJBQ2xCckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNtQyxnQkFBZ0IsRUFDeEN0Qyx1QkFBdUI7VUFDM0JPLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ0M7UUFBTSxFQUNyQyxDQUFDLEdBQ0EsSUFBSSxlQUNSakssTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDUyxPQUFPLEVBQU1iLG9CQUFvQixDQUFHLENBQ3BELENBQ2YsQ0FBQyxlQUduQnZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFLGNBQWU7VUFBQ0MsV0FBVztRQUFBLGdCQUNsRDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3NDLGFBQWEsRUFBTTFDLG9CQUFvQixDQUFHLENBQUMsZUFDeEZ2SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3VCLFdBQVcsRUFBTTNCLG9CQUFvQixDQUFHLENBQ3hELENBQ2YsQ0FDVyxDQUFDO01BRXBDO0lBQUM7TUFBQVosR0FBQTtNQUFBSSxLQUFBLEVBRUQsU0FBQW1ELHlCQUF5QkEsQ0FBQUMsS0FBQSxFQUF5RDtRQUFBLElBQXZEOUcsS0FBSyxHQUFBOEcsS0FBQSxDQUFMOUcsS0FBSztVQUFFa0Usb0JBQW9CLEdBQUE0QyxLQUFBLENBQXBCNUMsb0JBQW9CO1VBQUVDLHVCQUF1QixHQUFBMkMsS0FBQSxDQUF2QjNDLHVCQUF1QjtRQUM3RSxvQkFDRXhKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ25FLDZCQUE2QixxQkFFNUJqRixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxhQUFjO1VBQUNDLFdBQVc7UUFBQSxnQkFDakQ5SixNQUFBLFlBQUFvSixhQUFBLENBQUN0Qix1QkFBdUIsRUFBS3lCLG9CQUF1QixDQUFDLGVBQ3JEdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDeEksaUJBQUEsQ0FBQXVKLDZCQUE2QixxQkFDNUJuSyxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUFLckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNTLE9BQU8sRUFBTWIsb0JBQW9CLENBQUcsQ0FDcEQsQ0FDZixDQUFDLGVBRW5CdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDNUIsZ0JBQWdCO1VBQUNxQyxLQUFLLEVBQUU7UUFBZSxnQkFDdEM3SixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNzQixNQUFNLEVBQzlCMUIsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUU7UUFBTSxFQUNkLENBQ2UsQ0FBQyxlQUVuQjdKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFO1FBQWUsZ0JBQ3RDN0osTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNvQztRQUFPLEdBQ2pDNUMsdUJBQXVCLENBQzVCLENBQ2UsQ0FDVyxDQUFDO01BRXBDO0lBQUM7TUFBQWIsR0FBQTtNQUFBSSxLQUFBLEVBRUQsU0FBQXNELHNCQUFzQkEsQ0FBQzFILEtBQUssRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQzJILDZCQUE2QixDQUFDM0gsS0FBSyxDQUFDO01BQ2xEO0lBQUM7TUFBQWdFLEdBQUE7TUFBQUksS0FBQSxFQUVELFNBQUF3RCx5QkFBeUJBLENBQUM1SCxLQUFLLEVBQUU7UUFDL0IsT0FBTyxJQUFJLENBQUMySCw2QkFBNkIsQ0FBQzNILEtBQUssQ0FBQztNQUNsRDtJQUFDO01BQUFnRSxHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBdUQsNkJBQTZCQSxDQUFBRSxLQUFBLEVBQXlEO1FBQUEsSUFBdkRuSCxLQUFLLEdBQUFtSCxLQUFBLENBQUxuSCxLQUFLO1VBQUVrRSxvQkFBb0IsR0FBQWlELEtBQUEsQ0FBcEJqRCxvQkFBb0I7VUFBRUMsdUJBQXVCLEdBQUFnRCxLQUFBLENBQXZCaEQsdUJBQXVCO1FBQ2pGLElBQU9qRSxNQUFNLEdBQUlGLEtBQUssQ0FBZkUsTUFBTTtRQUNiLElBQUFrSCxpQkFBQSxHQUVJbEgsTUFBTSxDQURSc0YsU0FBUztVQUFHNkIsUUFBUSxHQUFBRCxpQkFBQSxDQUFSQyxRQUFRO1VBQUVDLFdBQVcsR0FBQUYsaUJBQUEsQ0FBWEUsV0FBVztRQUVuQyxJQUFNQyxzQkFBc0IsR0FBRyw4QkFBOEI7UUFDN0QsSUFBTUMsa0JBQWtCLEdBQUcsMEJBQTBCO1FBRXJELG9CQUNFN00sTUFBQSxZQUFBb0osYUFBQSxDQUFDbkUsNkJBQTZCLHFCQUU1QmpGLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFLGFBQWM7VUFBQ0MsV0FBVztRQUFBLGdCQUNqRDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDQztRQUFNLEdBQ2hDVCx1QkFBdUIsQ0FDNUIsQ0FBQyxlQUNGeEosTUFBQSxZQUFBb0osYUFBQSxDQUFDcEIsaUJBQWlCLE1BQUEwQixTQUFBLGlCQUFLRix1QkFBdUI7VUFBRU8sT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDQztRQUFNLEVBQUUsQ0FBQyxlQUN2RmpLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3RCLHVCQUF1QixFQUFLeUIsb0JBQXVCLENBQUMsZUFFckR2SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLFFBQzNCOUUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNtQyxnQkFBZ0IsQ0FBQ0MsU0FBUyxDQUFDMUcsS0FBSyxDQUFDRSxNQUFNLENBQUMsZ0JBQy9EdkYsTUFBQSxZQUFBb0osYUFBQSxDQUFDNEMsdUJBQXVCLE1BQUF0QyxTQUFBLGlCQUNsQnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDbUMsZ0JBQWdCLEVBQ3hDdEMsdUJBQXVCO1VBQzNCc0QsV0FBVyxFQUFFRCxrQkFBbUI7VUFDaEM5QyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNDO1FBQU0sRUFDckMsQ0FBQyxHQUNBLElBQUksRUFDUDVFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDb0QsVUFBVSxJQUNuQzFILEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDb0QsVUFBVSxDQUFDaEIsU0FBUyxDQUFDMUcsS0FBSyxDQUFDRSxNQUFNLENBQUMsZ0JBQ3hEdkYsTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDb0QsVUFBVSxFQUNsQ3hELG9CQUFvQixDQUN6QixDQUFDLEdBQ0EsSUFBSSxlQUNSdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDUyxPQUFPLEVBQU1iLG9CQUFvQixDQUFHLENBQ3BELENBQ2YsQ0FBQyxlQUduQnZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFLGNBQWU7VUFBQ0MsV0FBVztRQUFBLGdCQUNsRDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3FELGFBQWEsRUFBTXpELG9CQUFvQixDQUFHLENBQUMsZUFDeEZ2SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3NELFFBQVEsRUFBTTFELG9CQUFvQixDQUFHLENBQ3JELENBQ2YsQ0FBQyxFQUdsQmxFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDK0MsUUFBUSxnQkFDL0IxTSxNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQytDLFFBQVEsRUFDaENuRCxvQkFBb0I7VUFDeEJPLFdBQVc7UUFBQSxpQkFFWDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3VELGNBQWMsRUFDdEMzRCxvQkFBb0I7VUFDeEJNLEtBQUssRUFBRTtRQUFtQyxFQUMzQyxDQUFDLGVBQ0Y3SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQSxpQkFDakJGLHVCQUF1QjtVQUMzQk8sT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0IsSUFBSztVQUNuQzBCLFdBQVcsRUFBRUYsc0JBQXVCO1VBQ3BDN0IsUUFBUSxFQUFFLENBQUMyQjtRQUFTLEVBQ3JCLENBQUMsRUFDRHJILEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDd0QsZUFBZSxDQUFDcEIsU0FBUyxDQUFDMUcsS0FBSyxDQUFDRSxNQUFNLENBQUMsZ0JBQzlEdkYsTUFBQSxZQUFBb0osYUFBQSxDQUFDNEMsdUJBQXVCLE1BQUF0QyxTQUFBLGlCQUNsQnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDd0QsZUFBZSxFQUN2QzNELHVCQUF1QjtVQUMzQk8sT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0I7UUFBSyxFQUNwQyxDQUFDLEdBQ0EsSUFBSSxlQUNScEwsTUFBQSxZQUFBb0osYUFBQSxDQUFDcEIsaUJBQWlCLE1BQUEwQixTQUFBLGlCQUNaRix1QkFBdUI7VUFDM0JPLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ29CLElBQUs7VUFDbkN2QixLQUFLLEVBQUU7UUFBZSxFQUN2QixDQUFDLGVBQ0Y3SixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUN5RCxTQUFTLEVBQ2pDN0Qsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUUsNkJBQThCO1VBQ3JDa0IsUUFBUSxFQUFFNEI7UUFBWSxFQUN2QixDQUFDLGVBQ0YzTSxNQUFBLFlBQUFvSixhQUFBLENBQUN4QixlQUFlLE1BQUE4QixTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNnRCxXQUFXLEVBQ25DcEQsb0JBQW9CLENBQ3pCLENBQUMsRUFDRGxFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDMEQsbUJBQW1CLENBQUN0QixTQUFTLENBQUMxRyxLQUFLLENBQUNFLE1BQU0sQ0FBQyxnQkFDbEV2RixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUMwRCxtQkFBbUIsRUFDM0M5RCxvQkFBb0IsQ0FDekIsQ0FBQyxHQUNBLElBQ3lCLENBQ2YsQ0FBQyxHQUNqQixJQUN5QixDQUFDO01BRXBDOztNQUVBO0lBQUE7TUFBQVosR0FBQTtNQUFBSSxLQUFBLEVBQ0EsU0FBQXVFLDJCQUEyQkEsQ0FBQUMsS0FBQSxFQUt4QjtRQUFBLElBSkRsSSxLQUFLLEdBQUFrSSxLQUFBLENBQUxsSSxLQUFLO1VBQ0xrRSxvQkFBb0IsR0FBQWdFLEtBQUEsQ0FBcEJoRSxvQkFBb0I7VUFDcEJFLHNCQUFzQixHQUFBOEQsS0FBQSxDQUF0QjlELHNCQUFzQjtVQUN0QkQsdUJBQXVCLEdBQUErRCxLQUFBLENBQXZCL0QsdUJBQXVCO1FBRXZCLG9CQUNFeEosTUFBQSxZQUFBb0osYUFBQSxDQUFDbkUsNkJBQTZCLHFCQUU1QmpGLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQixNQUFBa0MsU0FBQSxpQkFDWHJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDQyxNQUFNLEVBQzlCTCxvQkFBb0I7VUFDeEJNLEtBQUssRUFBRSxpQkFBa0I7VUFDekJDLFdBQVc7UUFBQSxpQkFFWDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDQztRQUFNLEdBQ2hDVCx1QkFBdUIsQ0FDNUIsQ0FBQyxFQUNEbkUsS0FBSyxDQUFDRSxNQUFNLENBQUMyRSxVQUFVLGdCQUN0QmxLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3RCLHVCQUF1QixFQUFLeUIsb0JBQXVCLENBQUMsZ0JBRXJEdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDdkIsa0JBQWtCLEVBQUs0QixzQkFBeUIsQ0FDbEQsZUFDRHpKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDUyxPQUFPLEVBQy9CYixvQkFBb0I7VUFDeEJ3QixRQUFRLEVBQUUsQ0FBQzFGLEtBQUssQ0FBQ0UsTUFBTSxDQUFDc0YsU0FBUyxDQUFDakI7UUFBTyxFQUMxQyxDQUM0QixDQUNmLENBQUMsZUFHbkI1SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ2EsT0FBTyxFQUMvQmpCLG9CQUFvQjtVQUN4Qk8sV0FBVztRQUFBLGlCQUVYOUosTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNTO1FBQVksR0FDdENqQix1QkFBdUIsQ0FDNUIsQ0FBQyxFQUNEbkUsS0FBSyxDQUFDRSxNQUFNLENBQUNtRixnQkFBZ0IsZ0JBQzVCMUssTUFBQSxZQUFBb0osYUFBQSxDQUFDdEIsdUJBQXVCLE1BQUE0QixTQUFBLGlCQUFLSCxvQkFBb0I7VUFBRW9CLFFBQVEsRUFBQztRQUFrQixFQUFFLENBQUMsZ0JBRWpGM0ssTUFBQSxZQUFBb0osYUFBQSxDQUFDdkIsa0JBQWtCLE1BQUE2QixTQUFBLGlCQUNiSCxvQkFBb0I7VUFDeEJxQixhQUFhLEVBQUV2RixLQUFLLENBQUNFLE1BQU0sQ0FBQ3NGLFNBQVMsQ0FBQ0osV0FBWTtVQUNsREUsUUFBUSxFQUFDO1FBQWEsRUFDdkIsQ0FDRixlQUNEM0ssTUFBQSxZQUFBb0osYUFBQSxDQUFDeEksaUJBQUEsQ0FBQXVKLDZCQUE2QixxQkFDNUJuSyxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUM2RCxhQUFhLEVBQ3JDakUsb0JBQW9CO1VBQ3hCd0IsUUFBUSxFQUFFLENBQUMxRixLQUFLLENBQUNFLE1BQU0sQ0FBQ3NGLFNBQVMsQ0FBQ0w7UUFBUSxFQUMzQyxDQUFDLGVBQ0Z4SyxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNtQixTQUFTLEVBQ2pDdkIsb0JBQW9CO1VBQ3hCd0IsUUFBUSxFQUFFLENBQUMxRixLQUFLLENBQUNFLE1BQU0sQ0FBQ3NGLFNBQVMsQ0FBQ0w7UUFBUSxFQUMzQyxDQUM0QixDQUNmLENBQUMsZUFHbkJ4SyxNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxnQkFBaUI7VUFBQ0MsV0FBVztRQUFBLEdBQ25ELENBQUN6RSxLQUFLLENBQUNFLE1BQU0sQ0FBQ2tJLGFBQWEsZ0JBQzFCek4sTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDc0QsUUFBUSxFQUNoQzFELG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUFDLGdCQUVGN0osTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDK0QsYUFBYSxFQUNyQ25FLG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUNGLGVBQ0Q3SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDaUQ7UUFBUyxHQUNuQ3pELHVCQUF1QixDQUM1QixDQUM0QixDQUNmLENBQUMsZUFHbkJ4SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQytDLFFBQVEsRUFDaENuRCxvQkFBb0I7VUFDeEJPLFdBQVc7UUFBQSxpQkFFWDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0I7UUFBSyxHQUMvQjVCLHVCQUF1QixDQUM1QixDQUFDLGVBQ0Z4SixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUN1RCxjQUFjLEVBQ3RDM0Qsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUU7UUFBbUMsRUFDM0MsQ0FBQyxlQUNGN0osTUFBQSxZQUFBb0osYUFBQSxDQUFDeEksaUJBQUEsQ0FBQXVKLDZCQUE2QixxQkFDNUJuSyxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUN5RCxTQUFTLEVBQ2pDN0Qsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUM7UUFBNkIsRUFDcEMsQ0FBQyxlQUNGN0osTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDZ0QsV0FBVyxFQUFNcEQsb0JBQW9CLENBQUcsQ0FDeEQsQ0FDZixDQUFDLGVBR25CdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDN0IsY0FBYztVQUNiK0QsRUFBRSxFQUFFakcsS0FBSyxDQUFDaUcsRUFBRztVQUNiN0YsTUFBTSxFQUFFOEQsb0JBQW9CLENBQUM5RCxNQUFPO1VBQ3BDOEYsb0JBQW9CLEVBQUUsSUFBSSxDQUFDNUcsS0FBSyxDQUFDNEcsb0JBQXFCO1VBQ3REQyxTQUFTLEVBQUVuRyxLQUFLLENBQUNFLE1BQU0sQ0FBQ2lHO1FBQVUsQ0FDbkMsQ0FDNEIsQ0FBQztNQUVwQztJQUFDO01BQUE3QyxHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBNEUscUJBQXFCQSxDQUFDcEYsSUFBSSxFQUFFO1FBQzFCLE9BQU8sSUFBSSxDQUFDcUYsc0JBQXNCLENBQUNyRixJQUFJLENBQUM7TUFDMUM7SUFBQztNQUFBSSxHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBNkUsc0JBQXNCQSxDQUFBQyxLQUFBLEVBS25CO1FBQUEsSUFKRHhJLEtBQUssR0FBQXdJLEtBQUEsQ0FBTHhJLEtBQUs7VUFDTGtFLG9CQUFvQixHQUFBc0UsS0FBQSxDQUFwQnRFLG9CQUFvQjtVQUNwQkUsc0JBQXNCLEdBQUFvRSxLQUFBLENBQXRCcEUsc0JBQXNCO1VBQ3RCRCx1QkFBdUIsR0FBQXFFLEtBQUEsQ0FBdkJyRSx1QkFBdUI7UUFFdkIsb0JBQ0V4SixNQUFBLFlBQUFvSixhQUFBLENBQUNuRSw2QkFBNkIscUJBRTVCakYsTUFBQSxZQUFBb0osYUFBQSxDQUFDNUIsZ0JBQWdCO1VBQUNxQyxLQUFLLEVBQUUsYUFBYztVQUFDQyxXQUFXO1FBQUEsZ0JBQ2pEOUosTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUM4RDtRQUFZLEdBQ3RDdEUsdUJBQXVCLENBQzVCLENBQUMsRUFDRG5FLEtBQUssQ0FBQ0UsTUFBTSxDQUFDMkUsVUFBVSxnQkFDdEJsSyxNQUFBLFlBQUFvSixhQUFBLENBQUN0Qix1QkFBdUIsRUFBS3lCLG9CQUF1QixDQUFDLGdCQUVyRHZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3JCLHFCQUFxQjtVQUNwQjFDLEtBQUssRUFBRUEsS0FBTTtVQUNiVSxVQUFVLEVBQUUwRCxzQkFBc0IsQ0FBQzFELFVBQVc7VUFDOUNnSSxjQUFjLEVBQUV0RSxzQkFBc0IsQ0FBQzVELFFBQVM7VUFDaERtSSxpQkFBaUIsRUFBRXpFLG9CQUFvQixDQUFDMUQ7UUFBUyxDQUNsRCxDQUNGLGVBQ0Q3RixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ1MsT0FBTyxFQUFNYixvQkFBb0IsQ0FBRyxDQUNwRCxDQUNmLENBQUMsZUFHbkJ2SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxjQUFlO1VBQUNDLFdBQVc7UUFBQSxHQUNqRHpFLEtBQUssQ0FBQ0UsTUFBTSxDQUFDeUYsU0FBUyxnQkFDckJoTCxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUN5RCxTQUFTLEVBQ2pDN0Qsb0JBQW9CO1VBQ3hCd0IsUUFBUSxFQUFFLENBQUMxRixLQUFLLENBQUNFLE1BQU0sQ0FBQ3lGLFNBQVU7VUFDbENuQixLQUFLLEVBQUU7UUFBTSxFQUNkLENBQUMsZ0JBRUY3SixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNtQixTQUFTLEVBQ2pDdkIsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUU7UUFBTSxFQUNkLENBQ0YsZUFDRDdKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNvQjtRQUFLLEdBQy9CNUIsdUJBQXVCLENBQzVCLENBQzRCLENBQ2YsQ0FBQyxFQUdsQm5FLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDdUQsY0FBYyxnQkFDckNsTixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBQyxnQ0FBZ0M7VUFBQ0MsV0FBVztRQUFBLGdCQUNsRTlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3VELGNBQWMsRUFDdEMzRCxvQkFBb0IsQ0FDekIsQ0FDZSxDQUFDLEdBQ2pCLElBQ3lCLENBQUM7TUFFcEM7SUFBQztNQUFBWixHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBa0Ysc0JBQXNCQSxDQUFBQyxLQUFBLEVBS25CO1FBQUEsSUFKRDdJLEtBQUssR0FBQTZJLEtBQUEsQ0FBTDdJLEtBQUs7VUFDTGtFLG9CQUFvQixHQUFBMkUsS0FBQSxDQUFwQjNFLG9CQUFvQjtVQUNwQkUsc0JBQXNCLEdBQUF5RSxLQUFBLENBQXRCekUsc0JBQXNCO1VBQ3RCRCx1QkFBdUIsR0FBQTBFLEtBQUEsQ0FBdkIxRSx1QkFBdUI7UUFFdkIsSUFBQTJFLHFCQUFBLEdBRUk5SSxLQUFLLENBRFArSSxJQUFJLENBQUdDLFlBQVk7VUFBWkEsWUFBWSxHQUFBRixxQkFBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxxQkFBQTtRQUcxQixvQkFDRW5PLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ25FLDZCQUE2QixxQkFFNUJqRixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxhQUFjO1VBQUNDLFdBQVc7UUFBQSxnQkFDakQ5SixNQUFBLFlBQUFvSixhQUFBLENBQUMzQixzQkFBc0IsTUFBQWlDLFNBQUE7VUFDckJLLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ0M7UUFBTSxHQUNoQ1QsdUJBQXVCLENBQzVCLENBQUMsRUFDRG5FLEtBQUssQ0FBQ0UsTUFBTSxDQUFDMkUsVUFBVSxnQkFDdEJsSyxNQUFBLFlBQUFvSixhQUFBLENBQUN0Qix1QkFBdUIsRUFBS3lCLG9CQUF1QixDQUFDLGdCQUVyRHZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3ZCLGtCQUFrQixFQUFLNEIsc0JBQXlCLENBQ2xELGVBQ0R6SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ1MsT0FBTyxFQUFNYixvQkFBb0IsQ0FBRyxDQUNwRCxDQUNmLENBQUMsZUFHbkJ2SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQUtILG9CQUFvQjtVQUFFTSxLQUFLLEVBQUMsbUJBQW1CO1VBQUNDLFdBQVc7UUFBQSxJQUM5RXpFLEtBQUssQ0FBQ0UsTUFBTSxDQUFDeUYsU0FBUyxnQkFDckJoTCxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUN5RCxTQUFTLEVBQ2pDN0Qsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUU7UUFBTSxFQUNkLENBQUMsZ0JBRUY3SixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNtQixTQUFTLEVBQ2pDdkIsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUU7UUFBTSxFQUNkLENBQ0YsZUFFRDdKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDMEIsU0FBUyxFQUFNOUIsb0JBQW9CLENBQUcsQ0FBQyxlQUNwRnZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0I7UUFBSyxHQUMvQjVCLHVCQUF1QixDQUM1QixDQUM0QixDQUNmLENBQUMsZUFHbkJ4SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hILG9CQUFvQixFQUNuQjhFLFlBQVksQ0FBQ0MsT0FBTyxHQUFHakosS0FBSyxDQUFDc0UsaUJBQWlCLENBQUM0RSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1VBQ2hFMUUsS0FBSyxFQUFDLG1CQUFtQjtVQUN6QmlELFdBQVcsRUFBQyw4QkFBOEI7VUFDMUNoRCxXQUFXO1FBQUEsaUJBRVg5SixNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUM2RSxXQUFXLEVBQ25DakYsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUU7UUFBTSxFQUNkLENBQUMsZUFDRjdKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDeEIsZUFBZSxNQUFBOEIsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDOEUsU0FBUyxFQUFNbEYsb0JBQW9CLENBQUcsQ0FDdEQsQ0FDZixDQUNXLENBQUM7TUFFcEM7SUFBQztNQUFBWixHQUFBO01BQUFJLEtBQUEsRUFFRCxTQUFBMkYseUJBQXlCQSxDQUFBQyxLQUFBLEVBS3RCO1FBQUEsSUFKRHRKLEtBQUssR0FBQXNKLEtBQUEsQ0FBTHRKLEtBQUs7VUFDTGtFLG9CQUFvQixHQUFBb0YsS0FBQSxDQUFwQnBGLG9CQUFvQjtVQUNwQkUsc0JBQXNCLEdBQUFrRixLQUFBLENBQXRCbEYsc0JBQXNCO1VBQ3RCRCx1QkFBdUIsR0FBQW1GLEtBQUEsQ0FBdkJuRix1QkFBdUI7UUFFdkIsSUFBQW9GLHNCQUFBLEdBR0l2SixLQUFLLENBRlArSSxJQUFJLENBQUdDLFlBQVk7VUFBWkEsWUFBWSxHQUFBTyxzQkFBQSxjQUFHLENBQUMsQ0FBQyxHQUFBQSxzQkFBQTtVQUNmL0QsU0FBUyxHQUNoQnhGLEtBQUssQ0FEUEUsTUFBTSxDQUFHc0YsU0FBUztRQUdwQixvQkFDRTdLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ25FLDZCQUE2QixRQUUzQm9KLFlBQVksQ0FBQ0MsT0FBTyxJQUFJRCxZQUFZLENBQUM5RCxLQUFLLGdCQUN6Q3ZLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQixNQUFBa0MsU0FBQSxpQkFDWHJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDQyxNQUFNLEVBQzlCTCxvQkFBb0I7VUFDeEJNLEtBQUssRUFBQyxpQkFBaUI7VUFDdkJDLFdBQVc7UUFBQSxpQkFFWDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDQztRQUFNLEdBQ2hDVCx1QkFBdUIsQ0FDNUIsQ0FBQyxFQUNEbkUsS0FBSyxDQUFDRSxNQUFNLENBQUMyRSxVQUFVLGdCQUN0QmxLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3RCLHVCQUF1QixFQUFLeUIsb0JBQXVCLENBQUMsZ0JBRXJEdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDdkIsa0JBQWtCLEVBQUs0QixzQkFBeUIsQ0FDbEQsZUFDRHpKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFBS3JFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDUyxPQUFPLEVBQU1iLG9CQUFvQixDQUFHLENBQ3BELENBQ2YsQ0FBQyxHQUNqQixJQUFJLGVBR1J2SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQzRFLE9BQU8sRUFDL0JoRixvQkFBb0I7VUFDeEJNLEtBQUssRUFBQyxtQkFBbUI7VUFDekJDLFdBQVc7UUFBQSxpQkFFWDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDUztRQUFZLEdBQ3RDakIsdUJBQXVCLENBQzVCLENBQUMsRUFDRG5FLEtBQUssQ0FBQ0UsTUFBTSxDQUFDbUYsZ0JBQWdCLGdCQUM1QjFLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3RCLHVCQUF1QixNQUFBNEIsU0FBQSxpQkFBS0gsb0JBQW9CO1VBQUVvQixRQUFRLEVBQUM7UUFBa0IsRUFBRSxDQUFDLGdCQUVqRjNLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3ZCLGtCQUFrQixNQUFBNkIsU0FBQSxpQkFDYkgsb0JBQW9CO1VBQ3hCcUIsYUFBYSxFQUFFdkYsS0FBSyxDQUFDRSxNQUFNLENBQUNzRixTQUFTLENBQUNKLFdBQVk7VUFDbERFLFFBQVEsRUFBQztRQUFhLEVBQ3ZCLENBQ0YsZUFDRDNLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDNkQsYUFBYSxFQUNyQ2pFLG9CQUFvQixDQUN6QixDQUM0QixDQUNmLENBQUMsZUFHbkJ2SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hILG9CQUFvQixFQUNuQjhFLFlBQVksQ0FBQ0MsT0FBTyxHQUFHakosS0FBSyxDQUFDc0UsaUJBQWlCLENBQUM0RSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1VBQ2hFMUUsS0FBSyxFQUFDLG1CQUFtQjtVQUN6QkMsV0FBVztRQUFBLElBRVZ6RSxLQUFLLENBQUNFLE1BQU0sQ0FBQ3lGLFNBQVMsZ0JBQ3JCaEwsTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDeUQsU0FBUyxFQUNqQzdELG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUFDLGdCQUVGN0osTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDbUIsU0FBUyxFQUNqQ3ZCLG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUNGLGVBQ0Q3SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0I7UUFBSyxHQUMvQjVCLHVCQUF1QixDQUM1QixDQUM0QixDQUNmLENBQUMsRUFHbEI2RSxZQUFZLENBQUNDLE9BQU8sZ0JBQ25CdE8sTUFBQSxZQUFBb0osYUFBQSxDQUFDNUIsZ0JBQWdCLE1BQUFrQyxTQUFBLGlCQUNYSCxvQkFBb0IsRUFDcEJsRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQytDLFFBQVE7VUFDcEMzQixRQUFRLEVBQUUsQ0FBQ0YsU0FBUyxDQUFDakIsTUFBTztVQUM1QkUsV0FBVztRQUFBLGlCQUVYOUosTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDdUQsY0FBYyxFQUN0QzNELG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUFDLGVBQ0Y3SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDNkU7UUFBTyxHQUNqQ3JGLHVCQUF1QixDQUM1QixDQUFDLGVBQ0Z4SixNQUFBLFlBQUFvSixhQUFBLENBQUN4QixlQUFlLE1BQUE4QixTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNnRCxXQUFXLEVBQ25DcEQsb0JBQW9CLENBQ3pCLENBQUMsZUFDRnZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hCLGVBQWUsTUFBQThCLFNBQUEsaUJBQUtILG9CQUFvQixFQUFNbEUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNtRixTQUFTLENBQUcsQ0FDdEQsQ0FDZixDQUFDLEdBQ2pCLElBQUksRUFHUFQsWUFBWSxDQUFDOUQsS0FBSyxnQkFDakJ2SyxNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxjQUFlO1VBQUNDLFdBQVc7UUFBQSxHQUNqRCxDQUFDekUsS0FBSyxDQUFDRSxNQUFNLENBQUN3SixXQUFXLGdCQUN4Qi9PLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ3NCLE1BQU0sRUFDOUIxQixvQkFBb0I7VUFDeEJNLEtBQUssRUFBRSxLQUFNO1VBQ2JrQixRQUFRLEVBQUU3RyxPQUFPLENBQUNtQixLQUFLLENBQUNFLE1BQU0sQ0FBQ3dKLFdBQVc7UUFBRSxFQUM3QyxDQUFDLGdCQUVGL08sTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDdUIsV0FBVyxFQUNuQzNCLG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFLEtBQU07VUFDYmtCLFFBQVEsRUFBRSxDQUFDMUYsS0FBSyxDQUFDRSxNQUFNLENBQUN3SjtRQUFZLEVBQ3JDLENBQ0YsZUFDRC9PLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNpQjtRQUFPLEdBQ2pDekIsdUJBQXVCLENBQzVCLENBQzRCLENBQ2YsQ0FBQyxHQUNqQixJQUN5QixDQUFDO01BRXBDO0lBQUM7TUFBQWIsR0FBQTtNQUFBSSxLQUFBLEVBRUQsU0FBQWlHLG9CQUFvQkEsQ0FBQUMsS0FBQSxFQUFnQztRQUFBLElBQTlCNUosS0FBSyxHQUFBNEosS0FBQSxDQUFMNUosS0FBSztVQUFFa0Usb0JBQW9CLEdBQUEwRixLQUFBLENBQXBCMUYsb0JBQW9CO1FBQy9DLG9CQUNFdkosTUFBQSxZQUFBb0osYUFBQSxDQUFDcEosTUFBQSxDQUFBa1AsUUFBUSxxQkFDUGxQLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFLGVBQWdCO1VBQUNDLFdBQVc7UUFBQSxnQkFDbkQ5SixNQUFBLFlBQUFvSixhQUFBLENBQUMvSSxrQkFBQSxDQUFBOE8sS0FBSztVQUNKOUUsSUFBSSxFQUFDLE1BQU07VUFDWCtFLE1BQU0sRUFBQyxZQUFZO1VBQ25CdkosUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUVwRSxDQUFDLEVBQUk7WUFDYixJQUFJQSxDQUFDLENBQUM0TixNQUFNLENBQUNDLEtBQUssSUFBSTdOLENBQUMsQ0FBQzROLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO2NBQ3ZDLElBQU1DLEdBQUcsR0FBR0MsR0FBRyxDQUFDQyxlQUFlLENBQUNoTyxDQUFDLENBQUM0TixNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztjQUNsRC9GLG9CQUFvQixDQUFDMUQsUUFBUSxDQUFDO2dCQUFDNkosVUFBVSxFQUFFSDtjQUFHLENBQUMsQ0FBQztZQUNsRDtVQUNGO1FBQUUsQ0FDSCxDQUNlLENBQUMsZUFDbkJ2UCxNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0I7VUFBQ3FDLEtBQUssRUFBRSxzQkFBdUI7VUFBQ0MsV0FBVztRQUFBLGdCQUMxRDlKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ2dHLFNBQVMsRUFDakNwRyxvQkFBb0I7VUFDeEJ3QixRQUFRLEVBQUU7UUFBTSxFQUNqQixDQUFDLGVBQ0YvSyxNQUFBLFlBQUFvSixhQUFBLENBQUM5QixlQUFlLE1BQUFvQyxTQUFBLGlCQUNWckUsS0FBSyxDQUFDc0UsaUJBQWlCLENBQUNpRyxNQUFNLEVBQzlCckcsb0JBQW9CO1VBQ3hCd0IsUUFBUSxFQUFFO1FBQU0sRUFDakIsQ0FBQyxlQUNGL0ssTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDa0csTUFBTSxFQUM5QnRHLG9CQUFvQjtVQUN4QndCLFFBQVEsRUFBRTtRQUFNLEVBQ2pCLENBQUMsZUFDRi9LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQ1ZyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ21HLE1BQU0sRUFDOUJ2RyxvQkFBb0I7VUFDeEJ3QixRQUFRLEVBQUU7UUFBTSxFQUNqQixDQUNlLENBQ1YsQ0FBQztNQUVmO0lBQUM7TUFBQXBDLEdBQUE7TUFBQUksS0FBQSxFQUVELFNBQUFnSCxvQkFBb0JBLENBQUFDLE1BQUEsRUFLakI7UUFBQSxJQUpEM0ssS0FBSyxHQUFBMkssTUFBQSxDQUFMM0ssS0FBSztVQUNMa0Usb0JBQW9CLEdBQUF5RyxNQUFBLENBQXBCekcsb0JBQW9CO1VBQ3BCRSxzQkFBc0IsR0FBQXVHLE1BQUEsQ0FBdEJ2RyxzQkFBc0I7VUFDdEJELHVCQUF1QixHQUFBd0csTUFBQSxDQUF2QnhHLHVCQUF1QjtRQUV2QixJQUNXcUIsU0FBUyxHQUNoQnhGLEtBQUssQ0FEUEUsTUFBTSxDQUFHc0YsU0FBUztRQUdwQixvQkFDRTdLLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ25FLDZCQUE2QixxQkFFNUJqRixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ0MsTUFBTSxFQUM5Qkwsb0JBQW9CO1VBQ3hCTSxLQUFLLEVBQUMsaUJBQWlCO1VBQ3ZCQyxXQUFXO1FBQUEsaUJBRVg5SixNQUFBLFlBQUFvSixhQUFBLENBQUMzQixzQkFBc0IsTUFBQWlDLFNBQUE7VUFDckJLLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQ0M7UUFBTSxHQUNoQ1QsdUJBQXVCLENBQzVCLENBQUMsRUFDRG5FLEtBQUssQ0FBQ0UsTUFBTSxDQUFDMkUsVUFBVSxnQkFDdEJsSyxNQUFBLFlBQUFvSixhQUFBLENBQUN0Qix1QkFBdUIsRUFBS3lCLG9CQUF1QixDQUFDLGdCQUVyRHZKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3ZCLGtCQUFrQixFQUFLNEIsc0JBQXlCLENBQ2xELGVBQ0R6SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzlCLGVBQWUsTUFBQW9DLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ1MsT0FBTyxFQUFNYixvQkFBb0IsQ0FBRyxDQUNwRCxDQUNmLENBQUMsZUFHbkJ2SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQzRFLE9BQU8sRUFDL0JoRixvQkFBb0I7VUFDeEJNLEtBQUssRUFBQyxtQkFBbUI7VUFDekJDLFdBQVc7UUFBQSxJQUVWekUsS0FBSyxDQUFDRSxNQUFNLENBQUNtRixnQkFBZ0IsZ0JBQzVCMUssTUFBQSxZQUFBb0osYUFBQSxDQUFDdEIsdUJBQXVCLE1BQUE0QixTQUFBLGlCQUFLSCxvQkFBb0I7VUFBRW9CLFFBQVEsRUFBQztRQUFrQixFQUFFLENBQUMsZ0JBRWpGM0ssTUFBQSxZQUFBb0osYUFBQSxDQUFDdkIsa0JBQWtCLE1BQUE2QixTQUFBLGlCQUNiSCxvQkFBb0I7VUFDeEJxQixhQUFhLEVBQUV2RixLQUFLLENBQUNFLE1BQU0sQ0FBQ3NGLFNBQVMsQ0FBQ0osV0FBWTtVQUNsREUsUUFBUSxFQUFDO1FBQWEsRUFDdkIsQ0FDRixlQUNEM0ssTUFBQSxZQUFBb0osYUFBQSxDQUFDM0Isc0JBQXNCLE1BQUFpQyxTQUFBO1VBQ3JCSyxPQUFPLEVBQUUxRSxLQUFLLENBQUMyRSxjQUFjLENBQUNTO1FBQVksR0FDdENqQix1QkFBdUIsQ0FDNUIsQ0FDZSxDQUFDLGVBR25CeEosTUFBQSxZQUFBb0osYUFBQSxDQUFDNUIsZ0JBQWdCLE1BQUFrQyxTQUFBLGlCQUFLSCxvQkFBb0I7VUFBRU0sS0FBSyxFQUFDLG1CQUFtQjtVQUFDQyxXQUFXO1FBQUEsSUFDOUV6RSxLQUFLLENBQUNFLE1BQU0sQ0FBQ3lGLFNBQVMsZ0JBQ3JCaEwsTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDeUQsU0FBUyxFQUNqQzdELG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUFDLGdCQUVGN0osTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDbUIsU0FBUyxFQUNqQ3ZCLG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQU0sRUFDZCxDQUNGLGVBQ0Q3SixNQUFBLFlBQUFvSixhQUFBLENBQUN4SSxpQkFBQSxDQUFBdUosNkJBQTZCLHFCQUM1Qm5LLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNCLHNCQUFzQixNQUFBaUMsU0FBQTtVQUNyQkssT0FBTyxFQUFFMUUsS0FBSyxDQUFDMkUsY0FBYyxDQUFDb0I7UUFBSyxHQUMvQjVCLHVCQUF1QixDQUM1QixDQUM0QixDQUNmLENBQUMsZUFHbkJ4SixNQUFBLFlBQUFvSixhQUFBLENBQUM1QixnQkFBZ0IsTUFBQWtDLFNBQUEsaUJBQ1hILG9CQUFvQixFQUNwQmxFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDK0MsUUFBUTtVQUNwQzNCLFFBQVEsRUFBRSxDQUFDRixTQUFTLENBQUNqQixNQUFPO1VBQzVCRSxXQUFXO1FBQUEsaUJBRVg5SixNQUFBLFlBQUFvSixhQUFBLENBQUMzQixzQkFBc0IsTUFBQWlDLFNBQUE7VUFDckJLLE9BQU8sRUFBRTFFLEtBQUssQ0FBQzJFLGNBQWMsQ0FBQzZFO1FBQU8sR0FDakNyRix1QkFBdUIsQ0FDNUIsQ0FBQyxlQUNGeEosTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDdUQsY0FBYyxFQUN0QzNELG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFFO1FBQW1DLEVBQzNDLENBQUMsZUFDRjdKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDOUIsZUFBZSxNQUFBb0MsU0FBQSxpQkFDVnJFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDc0csV0FBVyxFQUNuQzFHLG9CQUFvQjtVQUN4Qk0sS0FBSyxFQUFDO1FBQTZCLEVBQ3BDLENBQUMsZUFDRjdKLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hCLGVBQWUsTUFBQThCLFNBQUEsaUJBQUtyRSxLQUFLLENBQUNzRSxpQkFBaUIsQ0FBQ2dELFdBQVcsRUFBTXBELG9CQUFvQixDQUFHLENBQUMsZUFDdEZ2SixNQUFBLFlBQUFvSixhQUFBLENBQUN4QixlQUFlLE1BQUE4QixTQUFBLGlCQUFLSCxvQkFBb0IsRUFBTWxFLEtBQUssQ0FBQ3NFLGlCQUFpQixDQUFDbUYsU0FBUyxDQUFHLENBQ3RELENBQ2YsQ0FDVyxDQUFDO01BRXBDO0lBQUM7TUFBQW5HLEdBQUE7TUFBQUksS0FBQSxFQU9ELFNBQUFtSCxNQUFNQSxDQUFBLEVBQUc7UUFDUCxJQUFBQyxXQUFBLEdBUUksSUFBSSxDQUFDeEwsS0FBSztVQVBaVSxLQUFLLEdBQUE4SyxXQUFBLENBQUw5SyxLQUFLO1VBQ0xELFFBQVEsR0FBQStLLFdBQUEsQ0FBUi9LLFFBQVE7VUFDUmdMLFNBQVMsR0FBQUQsV0FBQSxDQUFUQyxTQUFTO1VBQ1R0SyxpQkFBaUIsR0FBQXFLLFdBQUEsQ0FBakJySyxpQkFBaUI7VUFDakJ1SyxnQkFBZ0IsR0FBQUYsV0FBQSxDQUFoQkUsZ0JBQWdCO1VBQ2hCQyxlQUFlLEdBQUFILFdBQUEsQ0FBZkcsZUFBZTtVQUFBQyxxQkFBQSxHQUFBSixXQUFBLENBQ2ZLLGlCQUFpQjtVQUFqQkEsaUJBQWlCLEdBQUFELHFCQUFBLGNBQUcsS0FBSyxHQUFBQSxxQkFBQTtRQUUzQixJQUFBRSxNQUFBLEdBQThDcEwsS0FBSyxDQUFDRSxNQUFNLENBQUNDLE1BQU0sR0FDN0RKLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDRSxNQUFNLENBQUNDLE1BQU0sQ0FBQyxHQUM3QixDQUFDLENBQUM7VUFBQWtMLGFBQUEsR0FBQUQsTUFBQSxDQUZDaEwsTUFBTTtVQUFOQSxNQUFNLEdBQUFpTCxhQUFBLGNBQUcsRUFBRSxHQUFBQSxhQUFBO1VBQUFDLGlCQUFBLEdBQUFGLE1BQUEsQ0FBRUcsVUFBVTtVQUFWQSxVQUFVLEdBQUFELGlCQUFBLGNBQUdFLFNBQVMsR0FBQUYsaUJBQUE7UUFHMUMsSUFBT3BMLE1BQU0sR0FBSUYsS0FBSyxDQUFmRSxNQUFNO1FBRWIsSUFBTWdFLG9CQUFvQixHQUFHdEQsdUJBQXVCLENBQUMsSUFBSSxDQUFDdEIsS0FBSyxDQUFDO1FBQ2hFLElBQU04RSxzQkFBc0IsR0FBRzdELHlCQUF5QixDQUFDLElBQUksQ0FBQ2pCLEtBQUssQ0FBQztRQUNwRSxJQUFNNkUsdUJBQXVCLEdBQUdyRCwwQkFBMEIsQ0FBQyxJQUFJLENBQUN4QixLQUFLLENBQUM7UUFDdEUsSUFBTXlCLE9BQU8sR0FBR1YsZUFBZSxDQUFDTixRQUFRLEVBQUVDLEtBQUssQ0FBQztRQUNoRCxJQUFNeUwsY0FBYyxHQUFHekwsS0FBSyxDQUFDZ0YsSUFBSSxjQUFBM0IsTUFBQSxDQUFjLElBQUFxSSw0QkFBcUIsRUFBQzFMLEtBQUssQ0FBQ2dGLElBQUksQ0FBQyxnQkFBYTs7UUFFN0Y7UUFDQSxJQUFNMkcseUJBQXlCLEdBQUc1TyxNQUFNLENBQUNTLElBQUksQ0FBQ3VDLFFBQVEsQ0FBQyxDQUFDNkwsTUFBTSxDQUM1RCxVQUFDQyxHQUFHLEVBQUU1RixFQUFFO1VBQUEsT0FBTSxJQUFBNkYsdUJBQWdCLEVBQUMvTCxRQUFRLENBQUNrRyxFQUFFLENBQUMsRUFBRWpHLEtBQUssQ0FBQyxHQUFBakMsYUFBQSxDQUFBQSxhQUFBLEtBQU84TixHQUFHLFdBQUExTixnQkFBQSxpQkFBRzhILEVBQUUsRUFBR2xHLFFBQVEsQ0FBQ2tHLEVBQUUsQ0FBQyxLQUFJNEYsR0FBRztRQUFBLENBQUMsRUFDekYsQ0FBQyxDQUNILENBQUM7UUFFRCxvQkFDRWxSLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQy9FLHVCQUF1QixRQUNyQmdCLEtBQUssQ0FBQytMLGNBQWMsSUFBSSxDQUFDL0wsS0FBSyxDQUFDZ00sb0JBQW9CO1FBQUE7UUFDbEQ7UUFDQXJSLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzNJLFlBQUEsV0FBVztVQUFDNlEsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUE7WUFBQSxPQUFRbEIsU0FBUyxDQUFDL0ssS0FBSyxDQUFDK0wsY0FBcUIsQ0FBQztVQUFBO1FBQUMsQ0FBRSxDQUFDLEdBQ3BFLElBQUksZUFDUnBSLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQzVCLGdCQUFnQjtVQUFDcUMsS0FBSyxFQUFFLGFBQWM7VUFBQ0MsV0FBVztVQUFDeUgsUUFBUSxFQUFFLENBQUNsTSxLQUFLLENBQUNtTSxhQUFhLENBQUM7UUFBRSxnQkFDbkZ4UixNQUFBLFlBQUFvSixhQUFBLENBQUN6QixpQkFBaUI7VUFDaEI4SixRQUFRLEVBQUVwTSxLQUFLLENBQUNnRixJQUFLO1VBQ3JCVSxRQUFRLEVBQUV5RixpQkFBa0I7VUFDNUJrQixPQUFPLEVBQUVyQjtVQUNUO1VBQUE7VUFDQXNCLFFBQVEsRUFBRXJCO1FBQWdCLENBQzNCLENBQUMsZUFDRnRRLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3hJLGlCQUFBLENBQUF1Siw2QkFBNkIscUJBQzVCbkssTUFBQSxZQUFBb0osYUFBQSxDQUFDL0Isa0JBQWtCO1VBQ2pCakMsUUFBUSxFQUFFNEwseUJBQTBCO1VBQ3BDMUYsRUFBRSxFQUFFakcsS0FBSyxDQUFDaUcsRUFBRztVQUNiOUYsTUFBTSxFQUFFRCxNQUFNLENBQUNDO1VBQ2Y7VUFBQTtVQUNBbU0sUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUc1SSxLQUFhO1lBQUEsT0FBS2pELGlCQUFpQixDQUFDO2NBQUNOLE1BQU0sRUFBRXVEO1lBQUssQ0FBQyxDQUFDO1VBQUE7UUFBQyxDQUNqRSxDQUFDLGVBQ0YvSSxNQUFBLFlBQUFvSixhQUFBLENBQUMxQixxQkFBcUI7VUFDcEJyQyxLQUFLLEVBQUVBLEtBQU07VUFDYmdNLG9CQUFvQixFQUFFaE0sS0FBSyxDQUFDZ00sb0JBQXFCO1VBQ2pEL0YsRUFBRSxFQUFFakcsS0FBSyxDQUFDaUcsRUFBRztVQUNic0csV0FBVyxFQUFFdk0sS0FBSyxDQUFDRTtVQUNuQjtVQUFBO1VBQ0E2SyxTQUFTLEVBQUVBLFNBQWlCO1VBQzVCdEssaUJBQWlCLEVBQUVBLGlCQUFrQjtVQUNyQ3dLLGVBQWUsRUFBRUEsZUFBZ0I7VUFDakM3SyxNQUFNLEVBQUVBLE1BQU87VUFDZm1MLFVBQVUsRUFBRUE7UUFBVyxDQUN4QixDQUM0QixDQUFDLEVBQy9CdkwsS0FBSyxDQUFDd00sWUFBWSxnQkFBRzdSLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3ZJLGtCQUFBLFdBQWlCO1VBQUNnUixZQUFZLEVBQUV4TSxLQUFLLENBQUN3TTtRQUFhLENBQUUsQ0FBQyxHQUFHLElBQ2hFLENBQUMsRUFDbEJmLGNBQWMsSUFDYixJQUFJLENBQUNBLGNBQWMsQ0FBQyxJQUNwQixJQUFJLENBQUNBLGNBQWMsQ0FBQyxDQUFDO1VBQ25CekwsS0FBSyxFQUFMQSxLQUFLO1VBQ0xlLE9BQU8sRUFBUEEsT0FBTztVQUNQbUQsb0JBQW9CLEVBQXBCQSxvQkFBb0I7VUFDcEJDLHVCQUF1QixFQUF2QkEsdUJBQXVCO1VBQ3ZCQyxzQkFBc0IsRUFBdEJBO1FBQ0YsQ0FBQyxDQUNvQixDQUFDO01BRTlCO0lBQUM7RUFBQSxFQXQ3QjZCcUksZ0JBQVM7RUF5N0J6QyxPQUFPNUosaUJBQWlCO0FBQzFCO0FBRU8sSUFBTThELHVCQUF1QixHQUFBN0csT0FBQSxDQUFBNkcsdUJBQUEsR0FBRyxTQUExQkEsdUJBQXVCQSxDQUFBK0YsTUFBQSxFQUE2RDtFQUFBLElBQXhEaEksT0FBTyxHQUFBZ0ksTUFBQSxDQUFQaEksT0FBTztJQUFFMUUsS0FBSyxHQUFBME0sTUFBQSxDQUFMMU0sS0FBSztJQUFFUSxTQUFRLEdBQUFrTSxNQUFBLENBQVJsTSxRQUFRO0VBQy9ELElBQU9tTSxLQUFLLEdBQXNCakksT0FBTyxDQUFsQ2lJLEtBQUs7SUFBRUMsV0FBVyxHQUFTbEksT0FBTyxDQUEzQmtJLFdBQVc7SUFBRXRKLEdBQUcsR0FBSW9CLE9BQU8sQ0FBZHBCLEdBQUc7RUFDOUIsSUFBTXVKLGFBQWEsR0FBRzdNLEtBQUssQ0FBQ0UsTUFBTSxDQUFDeU0sS0FBSyxDQUFDO0VBQ3pDLElBQU9uSCxTQUFTLEdBQUl4RixLQUFLLENBQUNFLE1BQU0sQ0FBekJzRixTQUFTOztFQUVoQjtFQUNBLElBQU1zSCxxQkFBcUIsR0FBRzlNLEtBQUssQ0FBQytNLHFCQUFxQixDQUFDekosR0FBRyxDQUFDO0VBRTlELElBQU0wSixrQkFBa0IsR0FBR0MsbUNBQXdCLENBQUN0UCxNQUFNLENBQUMsVUFBQXVQLE1BQUE7SUFBQSxJQUFFakgsRUFBRSxHQUFBaUgsTUFBQSxDQUFGakgsRUFBRTtJQUFBLE9BQzdENkcscUJBQXFCLENBQUNLLFFBQVEsQ0FBQ2xILEVBQUUsQ0FBQztFQUFBLENBQ3BDLENBQUM7RUFFRCxJQUFNbUgsbUJBQW1CLEdBQUdSLFdBQVcsR0FDbkNJLGtCQUFrQixDQUFDSyxJQUFJLENBQUMsVUFBQUMsTUFBQTtJQUFBLElBQUVySCxFQUFFLEdBQUFxSCxNQUFBLENBQUZySCxFQUFFO0lBQUEsT0FBTUEsRUFBRSxLQUFLVCxTQUFTLENBQUNvSCxXQUFXLENBQUM7RUFBQSxFQUFDLEdBQ2hFLEVBQUU7RUFFTixvQkFDRWpTLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQy9JLGtCQUFBLENBQUF1UyxnQkFBZ0IscUJBQ2Y1UyxNQUFBLFlBQUFvSixhQUFBLENBQUMvSSxrQkFBQSxDQUFBd1MsVUFBVSxxQkFDVDdTLE1BQUEsWUFBQW9KLGFBQUEsQ0FBQ3RKLGFBQUEsQ0FBQWdULGdCQUFnQjtJQUNmeEgsRUFBRSxFQUFFLG1CQUFvQjtJQUN4QnlILE1BQU0sRUFBRTtNQUNOZixLQUFLLEVBQUVFLGFBQWEsQ0FBQ2M7SUFDdkI7RUFBRSxDQUNILENBQ1MsQ0FBQyxlQUNiaFQsTUFBQSxZQUFBb0osYUFBQSxDQUFDaEosYUFBQSxXQUFZO0lBQ1g2UyxhQUFhLEVBQUVSLG1CQUFvQjtJQUNuQ2YsT0FBTyxFQUFFVyxrQkFBbUI7SUFDNUJhLGFBQWEsRUFBQyxPQUFPO0lBQ3JCQyxjQUFjLEVBQUMsSUFBSTtJQUNuQkMsV0FBVyxFQUFFLEtBQU07SUFDbkJDLFVBQVUsRUFBRSxLQUFNO0lBQ2xCeE4sUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUVrRCxLQUFLO01BQUEsT0FDYmxELFNBQVEsQ0FDTjtRQUNFZ0YsU0FBUyxFQUFBekgsYUFBQSxDQUFBQSxhQUFBLEtBQ0ppQyxLQUFLLENBQUNFLE1BQU0sQ0FBQ3NGLFNBQVMsV0FBQXJILGdCQUFBLGlCQUN4QnlPLFdBQVcsRUFBYWxKLEtBQUs7TUFFbEMsQ0FBQyxFQUNEZ0IsT0FBTyxDQUFDcEIsR0FDVixDQUFDO0lBQUE7RUFDRixDQUNGLENBQ2UsQ0FBQztBQUV2QixDQUFDO0FBQ0QiLCJpZ25vcmVMaXN0IjpbXX0=