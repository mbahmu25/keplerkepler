"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("@kepler.gl/utils");
var _localization = require("@kepler.gl/localization");
var _constants = require("@kepler.gl/constants");
var _customPicker = _interopRequireDefault(require("./custom-picker"));
var _colorPalettePreset = _interopRequireDefault(require("./color-palette-preset"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var MODE = {
  preset: 'preset',
  picker: 'picker'
};
var StyledColorPickerTop = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border-bottom: 1px solid ", ";\n  display: flex;\n  padding-top: 2px 4px 0 4px;\n  .color-palette-tab {\n    padding: 8px 0;\n    margin: 0 8px;\n    color: ", ";\n    border-bottom: 2px;\n    border-bottom-style: solid;\n    border-bottom-color: transparent;\n    &.active {\n      color: ", ";\n      border-bottom-color: ", ";\n    }\n    &:hover {\n      cursor: pointer;\n      color: ", ";\n    }\n  }\n"])), function (_ref) {
  var theme = _ref.theme;
  return theme.dropdownListBorderTop;
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.subtextColor;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.textColorHl;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.panelToggleBorderColor;
}, function (props) {
  return props.theme.textColorHl;
});
var ColorPickerTop = function ColorPickerTop(_ref5) {
  var setMode = _ref5.setMode,
    mode = _ref5.mode;
  return /*#__PURE__*/_react["default"].createElement(StyledColorPickerTop, null, Object.keys(MODE).map(function (modeId) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      onClick: function onClick() {
        return setMode(modeId);
      },
      key: modeId,
      className: (0, _classnames["default"])('color-palette-tab', {
        active: mode === modeId
      })
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "color.".concat(modeId)
    }));
  }));
};
var SingleColorPalette = function SingleColorPalette(_ref6) {
  var selectedColor = _ref6.selectedColor,
    onSelectColor = _ref6.onSelectColor;
  var _useState = (0, _react.useState)(MODE.preset),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    mode = _useState2[0],
    setMode = _useState2[1];
  var onSetColor = (0, _react.useCallback)(function (color, e) {
    // color picker return an object, with color.hex
    var hex = color.hex || color;
    onSelectColor((0, _utils.hexToRgb)(hex), e);
  }, [onSelectColor]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "single-color-palette"
  }, /*#__PURE__*/_react["default"].createElement(ColorPickerTop, {
    mode: mode,
    setMode: setMode
  }), mode === MODE.preset ? /*#__PURE__*/_react["default"].createElement(_colorPalettePreset["default"], {
    themes: _constants.Themes,
    onSelectColor: onSetColor,
    selectedColor: selectedColor
  }) : null, mode === MODE.picker ? /*#__PURE__*/_react["default"].createElement(_customPicker["default"], {
    color: selectedColor,
    onChange: onSetColor
  }) : null);
};
var _default = exports["default"] = SingleColorPalette;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,