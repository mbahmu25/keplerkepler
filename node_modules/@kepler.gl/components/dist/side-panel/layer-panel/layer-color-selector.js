"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArcLayerColorSelectorFactory = ArcLayerColorSelectorFactory;
exports.LayerColorRangeSelectorFactory = LayerColorRangeSelectorFactory;
exports.LayerColorSelectorFactory = LayerColorSelectorFactory;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _colorSelector = _interopRequireDefault(require("./color-selector"));
var _styledComponents = require("../../common/styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

LayerColorSelectorFactory.deps = [_colorSelector["default"]];
function LayerColorSelectorFactory(ColorSelector) {
  var LayerColorSelector = function LayerColorSelector(_ref) {
    var layer = _ref.layer,
      onChange = _ref.onChange,
      selectedColor = _ref.selectedColor,
      _ref$property = _ref.property,
      property = _ref$property === void 0 ? 'color' : _ref$property,
      setColorUI = _ref.setColorUI;
    var onSetColorUI = (0, _react.useCallback)(function (newConfig) {
      return setColorUI(property, newConfig);
    }, [setColorUI, property]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(ColorSelector, {
      colorSets: [{
        selectedColor: selectedColor || layer.config.color,
        setColor: function setColor(rgbValue) {
          return onChange((0, _defineProperty2["default"])({}, property, rgbValue));
        }
      }],
      colorUI: layer.config.colorUI[property],
      setColorUI: onSetColorUI
    }));
  };
  return LayerColorSelector;
}
LayerColorRangeSelectorFactory.deps = [_colorSelector["default"]];
function LayerColorRangeSelectorFactory(ColorSelector) {
  var LayerColorRangeSelector = function LayerColorRangeSelector(_ref2) {
    var layer = _ref2.layer,
      onChange = _ref2.onChange,
      _ref2$property = _ref2.property,
      property = _ref2$property === void 0 ? 'colorRange' : _ref2$property,
      setColorUI = _ref2.setColorUI;
    var onSetColorUI = (0, _react.useCallback)(function (newConfig) {
      return setColorUI(property, newConfig);
    }, [setColorUI, property]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(ColorSelector, {
      colorSets: [{
        selectedColor: layer.config.visConfig[property],
        isRange: true,
        setColor: function setColor(colorRange) {
          return onChange((0, _defineProperty2["default"])({}, property, colorRange));
        }
      }],
      colorUI: layer.config.colorUI[property],
      setColorUI: onSetColorUI
    }));
  };
  return LayerColorRangeSelector;
}
ArcLayerColorSelectorFactory.deps = [_colorSelector["default"]];
function ArcLayerColorSelectorFactory(ColorSelector) {
  var ArcLayerColorSelector = function ArcLayerColorSelector(_ref3) {
    var layer = _ref3.layer,
      onChangeConfig = _ref3.onChangeConfig,
      onChangeVisConfig = _ref3.onChangeVisConfig,
      _ref3$property = _ref3.property,
      property = _ref3$property === void 0 ? 'color' : _ref3$property,
      setColorUI = _ref3.setColorUI;
    var onSetColorUI = (0, _react.useCallback)(function (newConfig) {
      return setColorUI(property, newConfig);
    }, [setColorUI, property]);
    return /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement(ColorSelector, {
      colorSets: [{
        selectedColor: layer.config.color,
        setColor: function setColor(rgbValue) {
          return onChangeConfig({
            color: rgbValue
          });
        },
        label: 'Source'
      }, {
        selectedColor: layer.config.visConfig.targetColor || layer.config.color,
        setColor: function setColor(rgbValue) {
          return onChangeVisConfig({
            targetColor: rgbValue
          });
        },
        label: 'Target'
      }],
      colorUI: layer.config.colorUI[property],
      setColorUI: onSetColorUI
    }));
  };
  return ArcLayerColorSelector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,