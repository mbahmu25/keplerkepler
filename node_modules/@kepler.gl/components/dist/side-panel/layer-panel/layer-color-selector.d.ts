import React from 'react';
import { ColorRange } from '@kepler.gl/types';
import { Layer } from '@kepler.gl/layers';
import { NestedPartial, RGBColor, ColorUI } from '@kepler.gl/types';
import ColorSelectorFactory from './color-selector';
declare type LayerColorSelectorProps = {
    layer: Layer;
    onChange: (v: Record<string, RGBColor>) => void;
    selectedColor?: RGBColor;
    property?: string;
    setColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;
};
declare type ArcLayerColorSelectorProps = {
    layer: Layer;
    onChangeConfig: (v: {
        color: RGBColor;
    }) => void;
    onChangeVisConfig: (v: {
        targetColor: RGBColor;
    }) => void;
    property?: string;
    setColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;
};
declare type LayerColorRangeSelectorProps = {
    layer: Layer;
    onChange: (v: Record<string, ColorRange>) => void;
    property?: string;
    setColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;
};
export declare function LayerColorSelectorFactory(ColorSelector: any): ({ layer, onChange, selectedColor, property, setColorUI }: LayerColorSelectorProps) => React.JSX.Element;
export declare namespace LayerColorSelectorFactory {
    var deps: (typeof ColorSelectorFactory)[];
}
export declare function LayerColorRangeSelectorFactory(ColorSelector: any): ({ layer, onChange, property, setColorUI }: LayerColorRangeSelectorProps) => React.JSX.Element;
export declare namespace LayerColorRangeSelectorFactory {
    var deps: (typeof ColorSelectorFactory)[];
}
export declare function ArcLayerColorSelectorFactory(ColorSelector: any): ({ layer, onChangeConfig, onChangeVisConfig, property, setColorUI }: ArcLayerColorSelectorProps) => React.JSX.Element;
export declare namespace ArcLayerColorSelectorFactory {
    var deps: (typeof ColorSelectorFactory)[];
}
export {};
