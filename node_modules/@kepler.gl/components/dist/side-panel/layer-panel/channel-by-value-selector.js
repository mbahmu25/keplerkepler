"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChannelByValueSelectorFactory = ChannelByValueSelectorFactory;
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _constants = require("@kepler.gl/constants");
var _dimensionScaleSelector = _interopRequireDefault(require("./dimension-scale-selector"));
var _visConfigByFieldSelector = _interopRequireDefault(require("./vis-config-by-field-selector"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

ChannelByValueSelectorFactory.deps = [_visConfigByFieldSelector["default"], _dimensionScaleSelector["default"]];
function ChannelByValueSelectorFactory(VisConfigByFieldSelector, DimensionScaleSelector) {
  var ChannelByValueSelector = function ChannelByValueSelector(_ref) {
    var layer = _ref.layer,
      channel = _ref.channel,
      onChange = _ref.onChange,
      fields = _ref.fields,
      dataset = _ref.dataset,
      description = _ref.description,
      setColorUI = _ref.setColorUI,
      disabled = _ref.disabled;
    var channelScaleType = channel.channelScaleType,
      field = channel.field,
      key = channel.key,
      property = channel.property,
      scale = channel.scale,
      defaultMeasure = channel.defaultMeasure,
      supportedFieldTypes = channel.supportedFieldTypes;
    var channelSupportedFieldTypes = supportedFieldTypes || _constants.CHANNEL_SCALE_SUPPORTED_FIELDS[channelScaleType];
    var supportedFields = fields.filter(function (_ref2) {
      var type = _ref2.type;
      return channelSupportedFieldTypes.includes(type);
    });
    var showScale = !layer.isAggregated && layer.config[scale] && layer.config[field];
    var defaultDescription = 'layerConfiguration.defaultDescription';
    var updateField = (0, _react.useCallback)(function (val) {
      onChange((0, _defineProperty2["default"])({}, field, val), key);
    }, [onChange, field, key]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "channel-by-value-selector"
    }, /*#__PURE__*/_react["default"].createElement(VisConfigByFieldSelector, {
      description: description || defaultDescription,
      fields: supportedFields,
      id: layer.id,
      key: "".concat(key, "-channel-selector"),
      property: property,
      disabled: disabled,
      placeholder: defaultMeasure || 'placeholder.selectField',
      selectedField: layer.config[field],
      updateField: updateField
    }), showScale && !disabled ? /*#__PURE__*/_react["default"].createElement(DimensionScaleSelector, {
      layer: layer,
      channel: channel,
      dataset: dataset,
      label: "".concat(property, " scale"),
      setColorUI: setColorUI,
      onChange: onChange
    }) : null);
  };
  return ChannelByValueSelector;
}
var _default = exports["default"] = ChannelByValueSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,