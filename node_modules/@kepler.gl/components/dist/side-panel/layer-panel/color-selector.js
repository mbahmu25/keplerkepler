"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.InputBoxContainer = exports.ColorSelectorInput = exports.ColorBlock = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _reactIntl = require("react-intl");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _react2 = require("@floating-ui/react");
var _utils = require("@kepler.gl/utils");
var _rangeSlider = _interopRequireDefault(require("../../common/range-slider"));
var _styledComponents2 = require("../../common/styled-components");
var _colorPalette = _interopRequireDefault(require("./color-palette"));
var _colorRangeSelector = _interopRequireDefault(require("./color-range-selector"));
var _singleColorPalette = _interopRequireDefault(require("./single-color-palette"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var OpacitySliderWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 0px 12px 12px 12px;\n"])));
var OPACITY_SLIDER_PROPS = {
  type: 'number',
  range: [0, 1],
  value0: 0,
  step: 0.01,
  isRanged: false,
  label: 'Opacity',
  showInput: true
};
var ColorBlock = exports.ColorBlock = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 32px;\n  height: 18px;\n  border-radius: 1px;\n  background-color: ", ";\n"])), function (props) {
  return Array.isArray(props.backgroundcolor) ? "rgb(".concat(props.backgroundcolor.slice(0, 3).join(','), ")") : 'transparent';
});
var StyledColorSelectorWrapper = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  .selector__dropdown {\n    max-height: 600px; /* increase from the default 500px defined by StyledPanelDropdown */\n  }\n"])));
var ColorSelectorInput = exports.ColorSelectorInput = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  height: ", ";\n\n  .color-selector__selector__label {\n    text-transform: capitalize;\n    font-size: 12px;\n    text-align: center;\n    color: ", ";\n  }\n"])), function (props) {
  return props.inputTheme === 'secondary' ? props.theme.secondaryInput : props.theme.input;
}, function (props) {
  return props.theme.inputBoxHeight;
}, function (props) {
  return props.theme.inputPlaceholderColor;
});
var InputBoxContainer = exports.InputBoxContainer = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n\n  .color-select__input-group {\n    flex-grow: 1;\n  }\n  .color-select__input-group:nth-child(2) {\n    margin-left: 12px;\n  }\n"])));
ColorSelectorFactory.deps = [_colorRangeSelector["default"], _rangeSlider["default"]];
function ColorSelectorFactory(ColorRangeSelector, RangeSlider) {
  var ColorSelector = function ColorSelector(_ref) {
    var _ref$colorSets = _ref.colorSets,
      colorSets = _ref$colorSets === void 0 ? [] : _ref$colorSets,
      colorUI = _ref.colorUI,
      inputTheme = _ref.inputTheme,
      disabled = _ref.disabled,
      useOpacity = _ref.useOpacity,
      setColorUI = _ref.setColorUI;
    var _useState = (0, _react.useState)(colorUI ? colorUI.showDropdown : false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      showDropdown = _useState2[0],
      setShowDropdown = _useState2[1];
    var showSketcher = colorUI ? colorUI.showSketcher : false;
    var editingLookup = colorUI ? colorUI.showDropdown : showDropdown;
    var editingColorSet = typeof editingLookup === 'number' && colorSets[editingLookup] ? colorSets[editingLookup] : false;
    var closePanelDropdown = (0, _react.useCallback)(function () {
      if (editingLookup === false) {
        return;
      }
      if (setColorUI) {
        setColorUI({
          showDropdown: false,
          showSketcher: false
        });
      } else {
        setShowDropdown(false);
      }
    }, [editingLookup, setColorUI, setShowDropdown]);
    var handleClickOutside = (0, _react.useCallback)(function () {
      if (Number.isInteger(showSketcher)) {
        // if sketcher is open, let sketch to close itself first
        return;
      }
      closePanelDropdown();
    }, [showSketcher, closePanelDropdown]);

    // floating-ui boilerplate to establish close on outside click
    var _useFloating = (0, _react2.useFloating)({
        open: true,
        onOpenChange: function onOpenChange(v) {
          if (!v) {
            handleClickOutside();
          }
        }
      }),
      refs = _useFloating.refs,
      context = _useFloating.context;
    var dismiss = (0, _react2.useDismiss)(context);
    var _useInteractions = (0, _react2.useInteractions)([dismiss]),
      getFloatingProps = _useInteractions.getFloatingProps;
    var setColor = (0, _react.useCallback)(function (colorSet, color, opacity) {
      var _ref2 = colorSet || {},
        setColor = _ref2.setColor;
      if (!setColor) {
        return;
      }
      if (useOpacity && Array.isArray(color)) {
        setColor([].concat((0, _toConsumableArray2["default"])(color.slice(0, 3)), [opacity]));
      } else {
        setColor(color);
      }
    }, [useOpacity]);
    var onSelectColor = (0, _react.useCallback)(function (color, e) {
      if (e) e.stopPropagation();
      var colorSet = editingColorSet;
      if (colorSet) {
        setColor(colorSet, color, colorSet.selectedColor[3]);
      }
    }, [editingColorSet, setColor]);
    var onSelectOpacity = (0, _react.useCallback)(function (opacity, e) {
      if (e) e.stopPropagation();
      var colorSet = editingColorSet;
      if (colorSet) {
        setColor(colorSet, colorSet.selectedColor, Math.round(opacity[1] * 255));
      }
    }, [editingColorSet, setColor]);
    var onToggleDropdown = (0, _react.useCallback)(function (e, i) {
      e.stopPropagation();
      e.preventDefault();
      var showDropdownValue = editingLookup === false ? i // open it for the specific color set index
      : false; // close it
      if (setColorUI) {
        setColorUI({
          showDropdown: showDropdownValue
        });
      } else {
        setShowDropdown(showDropdownValue);
      }
    }, [editingLookup, setColorUI, setShowDropdown]);
    return /*#__PURE__*/_react["default"].createElement(StyledColorSelectorWrapper, (0, _extends2["default"])({
      className: "color-selector",
      ref: refs.setFloating
    }, getFloatingProps()), /*#__PURE__*/_react["default"].createElement(InputBoxContainer, null, colorSets.map(function (cSet, i) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "color-select__input-group",
        key: i
      }, /*#__PURE__*/_react["default"].createElement(ColorSelectorInput, {
        className: "color-selector__selector",
        active: editingLookup === i,
        disabled: disabled,
        inputTheme: inputTheme,
        onClick: function onClick(e) {
          return onToggleDropdown(e, i);
        }
      }, cSet.isRange ? /*#__PURE__*/_react["default"].createElement(_colorPalette["default"], {
        colors: cSet.selectedColor.colors
      }) : /*#__PURE__*/_react["default"].createElement(ColorBlock, {
        className: "color-selector__selector__block",
        backgroundcolor: cSet.selectedColor
      }), cSet.label ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "color-selector__selector__label"
      }, cSet.label) : null));
    })), editingColorSet ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledPanelDropdown, {
      className: "color-selector__dropdown"
    }, editingColorSet.isRange && colorUI && setColorUI ? /*#__PURE__*/_react["default"].createElement(ColorRangeSelector, {
      selectedColorRange: editingColorSet.selectedColor,
      onSelectColorRange: onSelectColor,
      setColorPaletteUI: setColorUI,
      colorPaletteUI: colorUI
    }) : /*#__PURE__*/_react["default"].createElement(_singleColorPalette["default"], {
      selectedColor: (0, _utils.rgbToHex)(editingColorSet.selectedColor),
      onSelectColor: onSelectColor
    }), useOpacity ? /*#__PURE__*/_react["default"].createElement(OpacitySliderWrapper, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_reactIntl.FormattedMessage, {
      id: "color.opacity"
    })), /*#__PURE__*/_react["default"].createElement(RangeSlider, (0, _extends2["default"])({}, OPACITY_SLIDER_PROPS, {
      value1: editingColorSet.selectedColor[3] / 255,
      onChange: onSelectOpacity
    }))) : null) : null);
  };
  return ColorSelector;
}
var _default = exports["default"] = ColorSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,