"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _commonUtils = require("@kepler.gl/common-utils");
var _columnSelector = _interopRequireDefault(require("./column-selector"));
var _styledComponents = require("../../common/styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * only provide suggested field pairs if there is a match,
 * otherwise the user can select a suggested field pair that will create invalid columns and a hard crash
 */
function getValidFieldPairsSuggestionsForColumn(enhancedFieldPairs, columnPairs, columnKey) {
  if (enhancedFieldPairs && columnPairs !== null && columnPairs !== void 0 && columnPairs[columnKey]) {
    var columnPair = columnPairs[columnKey];
    var matchingFieldPairs = enhancedFieldPairs.filter(function (_ref) {
      var pair = _ref.pair;
      return (0, _commonUtils.toArray)(columnPair.fieldPairKey).some(function (fieldPairKey) {
        return Object.prototype.hasOwnProperty.call(pair, fieldPairKey);
      });
    });
    return matchingFieldPairs.length > 0 ? matchingFieldPairs : null;
  }
  return null;
}
LayerColumnConfigFactory.deps = [_columnSelector["default"]];
function LayerColumnConfigFactory(ColumnSelector) {
  var LayerColumnConfig = function LayerColumnConfig(_ref2) {
    var columnPairs = _ref2.columnPairs,
      fieldPairs = _ref2.fieldPairs,
      columns = _ref2.columns,
      columnLabels = _ref2.columnLabels,
      fields = _ref2.fields,
      updateLayerConfig = _ref2.updateLayerConfig,
      assignColumn = _ref2.assignColumn,
      assignColumnPairs = _ref2.assignColumnPairs,
      isActive = _ref2.isActive;
    var enhancedFieldPairs = (0, _react.useMemo)(function () {
      return columnPairs && fieldPairs ? fieldPairs.map(function (fp) {
        return {
          name: fp.defaultName,
          type: 'point',
          pair: fp.pair
        };
      }) : null;
    }, [columnPairs, fieldPairs]);
    var onUpdateColumn = (0, _react.useCallback)(function (key, value) {
      var assignedColumns = value && value.pair && columnPairs ? assignColumnPairs(key, value.pair) : assignColumn(key, value);
      updateLayerConfig({
        columns: assignedColumns
      });
    }, [updateLayerConfig, columnPairs, assignColumnPairs, assignColumn]);
    if (!Object.keys(columns).length) {
      // don't render if columns is empty
      return /*#__PURE__*/_react["default"].createElement("div", null);
    }
    return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents.SidePanelSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-config__column"
    }, Object.keys(columns).map(function (key) {
      return /*#__PURE__*/_react["default"].createElement(ColumnSelector, {
        column: columns[key],
        columns: columns,
        label: columnLabels && columnLabels[key] || key,
        key: key,
        allFields: fields,
        fieldPairs: getValidFieldPairsSuggestionsForColumn(enhancedFieldPairs, columnPairs, key),
        onSelect: function onSelect(val) {
          return onUpdateColumn(key, val);
        },
        isActive: isActive
      });
    }))));
  };
  return LayerColumnConfig;
}
var _default = exports["default"] = LayerColumnConfigFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,