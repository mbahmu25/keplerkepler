"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _utils = require("@kepler.gl/utils");
var _mapLayerGroupColorPicker = _interopRequireDefault(require("./map-layer-group-color-picker"));
var _styledComponents2 = require("../../common/styled-components");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledLayerGroupItem = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-between;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  .layer-group__visibility-toggle {\n    margin-right: 12px;\n  }\n"])));
var LayerLabel = (0, _styledComponents["default"])(_styledComponents2.PanelLabelBold)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n"])), function (props) {
  return props.active ? props.theme.textColor : props.theme.labelColor;
});
LayerGroupItemFactory.deps = [_mapLayerGroupColorPicker["default"]];
function LayerGroupItemFactory(LayerGroupColorPicker) {
  var LayerGroupItem = function LayerGroupItem(_ref) {
    var PanelHeaderAction = _ref.PanelHeaderAction,
      onChange = _ref.onChange,
      slug = _ref.slug,
      layers = _ref.layers,
      topLayers = _ref.topLayers,
      actionIcons = _ref.actionIcons,
      color = _ref.color,
      onColorChange = _ref.onColorChange,
      _ref$isVisibilityTogg = _ref.isVisibilityToggleAvailable,
      isVisibilityToggleAvailable = _ref$isVisibilityTogg === void 0 ? true : _ref$isVisibilityTogg,
      _ref$isMoveToTopAvail = _ref.isMoveToTopAvailable,
      isMoveToTopAvailable = _ref$isMoveToTopAvail === void 0 ? true : _ref$isMoveToTopAvail,
      _ref$isColorPickerAva = _ref.isColorPickerAvailable,
      isColorPickerAvailable = _ref$isColorPickerAva === void 0 ? false : _ref$isColorPickerAva;
    var onVisibilityToggle = (0, _react.useCallback)(function () {
      onChange({
        visibleLayerGroups: _objectSpread(_objectSpread({}, layers), {}, (0, _defineProperty2["default"])({}, slug, !layers[slug]))
      });
    }, [onChange, layers, slug]);
    var onMoveToTopToggle = (0, _react.useCallback)(function () {
      onChange({
        topLayerGroups: _objectSpread(_objectSpread({}, topLayers), {}, (0, _defineProperty2["default"])({}, slug, !topLayers[slug]))
      });
    }, [onChange, topLayers, slug]);
    return /*#__PURE__*/_react["default"].createElement(StyledLayerGroupItem, {
      className: "layer-group__select"
    }, isVisibilityToggleAvailable ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabelWrapper, null, /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      className: "layer-group__visibility-toggle",
      id: "".concat(slug, "-toggle"),
      tooltip: layers[slug] ? 'tooltip.hide' : 'tooltip.show',
      onClick: onVisibilityToggle,
      IconComponent: layers[slug] ? actionIcons.visible : actionIcons.hidden,
      active: layers[slug],
      flush: true
    }), /*#__PURE__*/_react["default"].createElement(LayerLabel, {
      active: layers[slug]
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "mapLayers.".concat((0, _utils.camelize)(slug))
    }))) : /*#__PURE__*/_react["default"].createElement(_styledComponents2.CenterFlexbox, null, /*#__PURE__*/_react["default"].createElement(LayerLabel, {
      style: {
        marginLeft: '28px'
      },
      active: true
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "mapLayers.".concat((0, _utils.camelize)(slug))
    }))), /*#__PURE__*/_react["default"].createElement(_styledComponents2.CenterFlexbox, {
      className: "layer-group__trailing-actions"
    }, isColorPickerAvailable && color ? /*#__PURE__*/_react["default"].createElement(LayerGroupColorPicker, {
      slug: slug,
      color: color,
      onColorChange: onColorChange,
      extraMarginRight: isMoveToTopAvailable,
      disabled: isVisibilityToggleAvailable && !layers[slug]
    }) : null, isMoveToTopAvailable ? /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      id: "".concat(slug, "-top"),
      tooltip: "tooltip.moveToTop",
      disabled: !layers[slug],
      IconComponent: actionIcons.top,
      active: topLayers[slug],
      onClick: onMoveToTopToggle
    }) : null));
  };
  return LayerGroupItem;
}
var _default = exports["default"] = LayerGroupItemFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,