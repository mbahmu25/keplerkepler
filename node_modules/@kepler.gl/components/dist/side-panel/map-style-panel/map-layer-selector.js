"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _panelHeaderAction = _interopRequireDefault(require("../panel-header-action"));
var _mapLayerGroupItem = _interopRequireDefault(require("./map-layer-group-item"));
var _icons = require("../../common/icons");
var _styledComponents2 = require("../../common/styled-components");
var _localization = require("@kepler.gl/localization");
var _cloudProviders = require("@kepler.gl/cloud-providers");
var _constants = require("@kepler.gl/constants");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function noop() {
  return;
}
var StyledInteractionPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding-bottom: 12px;\n"])));
LayerGroupSelectorFactory.deps = [_panelHeaderAction["default"], _mapLayerGroupItem["default"]];
function LayerGroupSelectorFactory(PanelHeaderAction, LayerGroupItem) {
  var defaultActionIcons = {
    visible: _icons.EyeSeen,
    hidden: _icons.EyeUnseen,
    top: _cloudProviders.Upload
  };
  var LayerGroupSelector = function LayerGroupSelector(_ref) {
    var layers = _ref.layers,
      editableLayers = _ref.editableLayers,
      onChange = _ref.onChange,
      topLayers = _ref.topLayers,
      threeDBuildingColor = _ref.threeDBuildingColor,
      on3dBuildingColorChange = _ref.on3dBuildingColorChange,
      backgroundColor = _ref.backgroundColor,
      onBackgroundColorChange = _ref.onBackgroundColorChange,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    return /*#__PURE__*/_react["default"].createElement(StyledInteractionPanel, {
      className: "map-style__layer-group__selector"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "layer-group__header"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'mapLayers.title'
    }))), /*#__PURE__*/_react["default"].createElement(_styledComponents2.PanelContent, {
      className: "map-style__layer-group"
    }, editableLayers.map(function (_ref2) {
      var slug = _ref2.slug,
        isVisibilityToggleAvailable = _ref2.isVisibilityToggleAvailable,
        isMoveToTopAvailable = _ref2.isMoveToTopAvailable,
        isColorPickerAvailable = _ref2.isColorPickerAvailable;
      return /*#__PURE__*/_react["default"].createElement(LayerGroupItem, {
        key: slug,
        PanelHeaderAction: PanelHeaderAction,
        onChange: onChange,
        slug: slug,
        layers: layers,
        topLayers: topLayers,
        actionIcons: actionIcons,
        isVisibilityToggleAvailable: isVisibilityToggleAvailable,
        isMoveToTopAvailable: isMoveToTopAvailable,
        isColorPickerAvailable: isColorPickerAvailable,
        color: isColorPickerAvailable && slug === _constants.THREE_D_BUILDING_LAYER_GROUP_SLUG ? threeDBuildingColor : slug === _constants.BACKGROUND_LAYER_GROUP_SLUG ? backgroundColor : null,
        onColorChange: isColorPickerAvailable && slug === _constants.THREE_D_BUILDING_LAYER_GROUP_SLUG ? on3dBuildingColorChange : slug === _constants.BACKGROUND_LAYER_GROUP_SLUG ? onBackgroundColorChange : noop
      });
    })));
  };
  return LayerGroupSelector;
}
var _default = exports["default"] = LayerGroupSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,