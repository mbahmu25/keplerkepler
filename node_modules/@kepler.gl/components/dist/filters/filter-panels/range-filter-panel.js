"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _rangeFilter = _interopRequireDefault(require("../range-filter"));
var _filterPanelWithFieldSelect = _interopRequireDefault(require("./filter-panel-with-field-select"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

RangeFilterPanelFactory.deps = [_filterPanelWithFieldSelect["default"], _rangeFilter["default"]];
function RangeFilterPanelFactory(FieldPanelWithFieldSelect, RangeFilterComponent) {
  var RangeFilterPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var idx = _ref.idx,
      datasets = _ref.datasets,
      allAvailableFields = _ref.allAvailableFields,
      filter = _ref.filter,
      removeFilter = _ref.removeFilter,
      setFilter = _ref.setFilter,
      setFilterPlot = _ref.setFilterPlot;
    var onSetFilter = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'value', value);
    }, [idx, setFilter]);
    var onSetFilterPlot = (0, _react.useCallback)(function (newProp, valueIndex) {
      return setFilterPlot(idx, newProp, valueIndex);
    }, [idx, setFilterPlot]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "range-filter-panel"
    }, /*#__PURE__*/_react["default"].createElement(FieldPanelWithFieldSelect, {
      allAvailableFields: allAvailableFields,
      datasets: datasets,
      filter: filter,
      idx: idx,
      removeFilter: removeFilter,
      setFilter: setFilter
    }, filter.type && /*#__PURE__*/_react["default"].createElement("div", {
      className: "filter-panel__filter"
    }, /*#__PURE__*/_react["default"].createElement(RangeFilterComponent, {
      filter: filter,
      setFilter: onSetFilter,
      setFilterPlot: onSetFilterPlot
    }))));
  });
  RangeFilterPanel.displayName = 'RangeFilterPanel';
  return RangeFilterPanel;
}
var _default = exports["default"] = RangeFilterPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmFuZ2VGaWx0ZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ZpbHRlclBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiUmFuZ2VGaWx0ZXJQYW5lbEZhY3RvcnkiLCJkZXBzIiwiRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnkiLCJSYW5nZUZpbHRlckZhY3RvcnkiLCJGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0IiwiUmFuZ2VGaWx0ZXJDb21wb25lbnQiLCJSYW5nZUZpbHRlclBhbmVsIiwiUmVhY3QiLCJtZW1vIiwiX3JlZiIsImlkeCIsImRhdGFzZXRzIiwiYWxsQXZhaWxhYmxlRmllbGRzIiwiZmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwic2V0RmlsdGVyIiwic2V0RmlsdGVyUGxvdCIsIm9uU2V0RmlsdGVyIiwidXNlQ2FsbGJhY2siLCJ2YWx1ZSIsIm9uU2V0RmlsdGVyUGxvdCIsIm5ld1Byb3AiLCJ2YWx1ZUluZGV4IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInR5cGUiLCJkaXNwbGF5TmFtZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9maWx0ZXJzL2ZpbHRlci1wYW5lbHMvcmFuZ2UtZmlsdGVyLXBhbmVsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJhbmdlRmlsdGVyRmFjdG9yeSBmcm9tICcuLi9yYW5nZS1maWx0ZXInO1xuaW1wb3J0IHtSYW5nZUZpbHRlcn0gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQgRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnkgZnJvbSAnLi9maWx0ZXItcGFuZWwtd2l0aC1maWVsZC1zZWxlY3QnO1xuaW1wb3J0IHtGaWx0ZXJQYW5lbENvbXBvbmVudH0gZnJvbSAnLi90eXBlcyc7XG5cblJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5LmRlcHMgPSBbRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdEZhY3RvcnksIFJhbmdlRmlsdGVyRmFjdG9yeV07XG5cbmZ1bmN0aW9uIFJhbmdlRmlsdGVyUGFuZWxGYWN0b3J5KFxuICBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0OiBSZXR1cm5UeXBlPHR5cGVvZiBGaWVsZFBhbmVsV2l0aEZpZWxkU2VsZWN0RmFjdG9yeT4sXG4gIFJhbmdlRmlsdGVyQ29tcG9uZW50OiBSZXR1cm5UeXBlPHR5cGVvZiBSYW5nZUZpbHRlckZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgUmFuZ2VGaWx0ZXJQYW5lbDogRmlsdGVyUGFuZWxDb21wb25lbnQ8UmFuZ2VGaWx0ZXI+ID0gUmVhY3QubWVtbyhcbiAgICAoe2lkeCwgZGF0YXNldHMsIGFsbEF2YWlsYWJsZUZpZWxkcywgZmlsdGVyLCByZW1vdmVGaWx0ZXIsIHNldEZpbHRlciwgc2V0RmlsdGVyUGxvdH0pID0+IHtcbiAgICAgIGNvbnN0IG9uU2V0RmlsdGVyID0gdXNlQ2FsbGJhY2sodmFsdWUgPT4gc2V0RmlsdGVyKGlkeCwgJ3ZhbHVlJywgdmFsdWUpLCBbaWR4LCBzZXRGaWx0ZXJdKTtcbiAgICAgIGNvbnN0IG9uU2V0RmlsdGVyUGxvdCA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAobmV3UHJvcCwgdmFsdWVJbmRleCkgPT4gc2V0RmlsdGVyUGxvdChpZHgsIG5ld1Byb3AsIHZhbHVlSW5kZXgpLFxuICAgICAgICBbaWR4LCBzZXRGaWx0ZXJQbG90XVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyYW5nZS1maWx0ZXItcGFuZWxcIj5cbiAgICAgICAgICA8RmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdFxuICAgICAgICAgICAgYWxsQXZhaWxhYmxlRmllbGRzPXthbGxBdmFpbGFibGVGaWVsZHN9XG4gICAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIGlkeD17aWR4fVxuICAgICAgICAgICAgcmVtb3ZlRmlsdGVyPXtyZW1vdmVGaWx0ZXJ9XG4gICAgICAgICAgICBzZXRGaWx0ZXI9e3NldEZpbHRlcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7ZmlsdGVyLnR5cGUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbHRlci1wYW5lbF9fZmlsdGVyXCI+XG4gICAgICAgICAgICAgICAgPFJhbmdlRmlsdGVyQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlcj17b25TZXRGaWx0ZXJ9XG4gICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJQbG90PXtvblNldEZpbHRlclBsb3R9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvRmllbGRQYW5lbFdpdGhGaWVsZFNlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgKTtcblxuICBSYW5nZUZpbHRlclBhbmVsLmRpc3BsYXlOYW1lID0gJ1JhbmdlRmlsdGVyUGFuZWwnO1xuXG4gIHJldHVybiBSYW5n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