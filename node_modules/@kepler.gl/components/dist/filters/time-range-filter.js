"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.timeRangeSliderFieldsSelector = timeRangeSliderFieldsSelector;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _timeRangeSlider = _interopRequireDefault(require("../common/time-range-slider"));
var _constants = require("@kepler.gl/constants");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/*
 * TimeRangeFilter -> TimeRangeSlider -> RangeSlider
 */
function timeRangeSliderFieldsSelector(filter, datasets, layers) {
  var hasUserFormat = typeof filter.timeFormat === 'string';
  var timeFormat = (hasUserFormat ? filter.timeFormat : filter.defaultTimeFormat) || _constants.DEFAULT_TIME_FORMAT;
  return {
    id: filter.id,
    domain: filter.domain,
    timeBins: filter.timeBins,
    value: filter.value,
    plotType: filter.plotType,
    lineChart: filter.lineChart,
    yAxis: filter.yAxis,
    step: filter.step,
    speed: filter.speed,
    animationWindow: filter.animationWindow,
    isAnimating: filter.isAnimating,
    timezone: filter.timezone,
    timeFormat: timeFormat,
    filter: filter,
    datasets: datasets,
    layers: layers,
    isMinified: filter.view === _constants.FILTER_VIEW_TYPES.minified,
    isEnlarged: filter.view === _constants.FILTER_VIEW_TYPES.enlarged
  };
}
TimeRangeFilterFactory.deps = [_timeRangeSlider["default"]];
function TimeRangeFilterFactory(TimeRangeSlider) {
  var TimeRangeFilterComponent = function TimeRangeFilterComponent(_ref) {
    var filter = _ref.filter,
      datasets = _ref.datasets,
      layers = _ref.layers,
      setFilter = _ref.setFilter,
      setFilterPlot = _ref.setFilterPlot,
      isAnimatable = _ref.isAnimatable,
      toggleAnimation = _ref.toggleAnimation,
      hideTimeTitle = _ref.hideTimeTitle,
      timeline = _ref.timeline;
    return /*#__PURE__*/_react["default"].createElement(TimeRangeSlider, (0, _extends2["default"])({}, timeRangeSliderFieldsSelector(filter, datasets, layers), {
      onChange: setFilter,
      setFilterPlot: setFilterPlot,
      toggleAnimation: toggleAnimation,
      isAnimatable: isAnimatable,
      hideTimeTitle: hideTimeTitle,
      timeline: timeline
    }));
  };
  return TimeRangeFilterComponent;
}
var _default = exports["default"] = TimeRangeFilterFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90aW1lUmFuZ2VTbGlkZXIiLCJfY29uc3RhbnRzIiwidGltZVJhbmdlU2xpZGVyRmllbGRzU2VsZWN0b3IiLCJmaWx0ZXIiLCJkYXRhc2V0cyIsImxheWVycyIsImhhc1VzZXJGb3JtYXQiLCJ0aW1lRm9ybWF0IiwiZGVmYXVsdFRpbWVGb3JtYXQiLCJERUZBVUxUX1RJTUVfRk9STUFUIiwiaWQiLCJkb21haW4iLCJ0aW1lQmlucyIsInZhbHVlIiwicGxvdFR5cGUiLCJsaW5lQ2hhcnQiLCJ5QXhpcyIsInN0ZXAiLCJzcGVlZCIsImFuaW1hdGlvbldpbmRvdyIsImlzQW5pbWF0aW5nIiwidGltZXpvbmUiLCJpc01pbmlmaWVkIiwidmlldyIsIkZJTFRFUl9WSUVXX1RZUEVTIiwibWluaWZpZWQiLCJpc0VubGFyZ2VkIiwiZW5sYXJnZWQiLCJUaW1lUmFuZ2VGaWx0ZXJGYWN0b3J5IiwiZGVwcyIsIlRpbWVSYW5nZVNsaWRlckZhY3RvcnkiLCJUaW1lUmFuZ2VTbGlkZXIiLCJUaW1lUmFuZ2VGaWx0ZXJDb21wb25lbnQiLCJfcmVmIiwic2V0RmlsdGVyIiwic2V0RmlsdGVyUGxvdCIsImlzQW5pbWF0YWJsZSIsInRvZ2dsZUFuaW1hdGlvbiIsImhpZGVUaW1lVGl0bGUiLCJ0aW1lbGluZSIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kczIiLCJvbkNoYW5nZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9maWx0ZXJzL3RpbWUtcmFuZ2UtZmlsdGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRpbWVSYW5nZVNsaWRlckZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3RpbWUtcmFuZ2Utc2xpZGVyJztcbmltcG9ydCB7REVGQVVMVF9USU1FX0ZPUk1BVCwgRklMVEVSX1ZJRVdfVFlQRVN9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcbmltcG9ydCB7VGltZVJhbmdlRmlsdGVyfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcbmltcG9ydCB7RGF0YXNldHN9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuaW1wb3J0IHtMYXllcn0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuaW1wb3J0IHtUaW1lUmFuZ2VGaWx0ZXJQcm9wc30gZnJvbSAnLi90eXBlcyc7XG4vKlxuICogVGltZVJhbmdlRmlsdGVyIC0+IFRpbWVSYW5nZVNsaWRlciAtPiBSYW5nZVNsaWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gdGltZVJhbmdlU2xpZGVyRmllbGRzU2VsZWN0b3IoXG4gIGZpbHRlcjogVGltZVJhbmdlRmlsdGVyLFxuICBkYXRhc2V0czogRGF0YXNldHMsXG4gIGxheWVyczogcmVhZG9ubHkgTGF5ZXJbXVxuKSB7XG4gIGNvbnN0IGhhc1VzZXJGb3JtYXQgPSB0eXBlb2YgZmlsdGVyLnRpbWVGb3JtYXQgPT09ICdzdHJpbmcnO1xuICBjb25zdCB0aW1lRm9ybWF0ID1cbiAgICAoaGFzVXNlckZvcm1hdCA/IGZpbHRlci50aW1lRm9ybWF0IDogZmlsdGVyLmRlZmF1bHRUaW1lRm9ybWF0KSB8fCBERUZBVUxUX1RJTUVfRk9STUFUO1xuXG4gIHJldHVybiB7XG4gICAgaWQ6IGZpbHRlci5pZCxcbiAgICBkb21haW46IGZpbHRlci5kb21haW4sXG4gICAgdGltZUJpbnM6IGZpbHRlci50aW1lQmlucyxcbiAgICB2YWx1ZTogZmlsdGVyLnZhbHVlLFxuICAgIHBsb3RUeXBlOiBmaWx0ZXIucGxvdFR5cGUsXG4gICAgbGluZUNoYXJ0OiBmaWx0ZXIubGluZUNoYXJ0LFxuICAgIHlBeGlzOiBmaWx0ZXIueUF4aXMsXG4gICAgc3RlcDogZmlsdGVyLnN0ZXAsXG4gICAgc3BlZWQ6IGZpbHRlci5zcGVlZCxcbiAgICBhbmltYXRpb25XaW5kb3c6IGZpbHRlci5hbmltYXRpb25XaW5kb3csXG4gICAgaXNBbmltYXRpbmc6IGZpbHRlci5pc0FuaW1hdGluZyxcbiAgICB0aW1lem9uZTogZmlsdGVyLnRpbWV6b25lLFxuICAgIHRpbWVGb3JtYXQsXG4gICAgZmlsdGVyLFxuICAgIGRhdGFzZXRzLFxuICAgIGxheWVycyxcbiAgICBpc01pbmlmaWVkOiBmaWx0ZXIudmlldyA9PT0gRklMVEVSX1ZJRVdfVFlQRVMubWluaWZpZWQsXG4gICAgaXNFbmxhcmdlZDogZmlsdGVyLnZpZXcgPT09IEZJTFRFUl9WSUVXX1RZUEVTLmVubGFyZ2VkXG4gIH07XG59XG5cblRpbWVSYW5nZUZpbHRlckZhY3RvcnkuZGVwcyA9IFtUaW1lUmFuZ2VTbGlkZXJGYWN0b3J5XTtcblxuZnVuY3Rpb24gVGltZVJhbmdlRmlsdGVyRmFjdG9yeShUaW1lUmFuZ2VTbGlkZXI6IFJldHVyblR5cGU8dHlwZW9mIFRpbWVSYW5nZVNsaWRlckZhY3Rvcnk+KSB7XG4gIGNvbnN0IFRpbWVSYW5nZUZpbHRlckNvbXBvbmVudDogUmVhY3QuRkM8VGltZVJhbmdlRmlsdGVyUHJvcHM+ID0gKHtcbiAgICBmaWx0ZXIsXG4gICAgZGF0YXNldHMsXG4gICAgbGF5ZXJzLFxuICAgIHNldEZpbHRlcixcbiAgICBzZXRGaWx0ZXJQbG90LFxuICAgIGlzQW5pbWF0YWJsZSxcbiAgICB0b2dnbGVBbmltYXRpb24sXG4gICAgaGlkZVRpbWVUaXRsZSxcbiAgICB0aW1lbGluZVxuICB9KSA9PiAoXG4gICAgPFRpbWVSYW5nZVNsaWRlclxuICAgICAgey4uLnRpbWVSYW5nZVNsaWRlckZpZWxkc1NlbGVjdG9yKGZpbHRlciwgZGF0YXNldHMsIGxheWVycyl9XG4gICAgICBvbkNoYW5nZT17c2V0RmlsdGVyfVxuICAgICAgc2V0RmlsdGVyUGxvdD17c2V0RmlsdGVyUGxvdH1cbiAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dG9nZ2xlQW5pbWF0aW9ufVxuICAgICAgaXNBbmltYXRhYmxlPXtpc0FuaW1hdGFibGV9XG4gICAgICBoaWRlVGltZVRpdGxlPXtoaWRlVGltZVRpdGxlfVxuICAgICAgdGltZWxpbmU9e3RpbWVsaW5lfVxuICAgIC8+XG4gICk7XG5cbiAgcmV0dXJuIFRpbWVSYW5nZUZpbHRlckNvbXBvbmVudDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZVJhbmdlRmlsdGVyRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTtBQUxBO0FBQ0E7O0FBU0E7QUFDQTtBQUNBO0FBQ08sU0FBU0csNkJBQTZCQSxDQUMzQ0MsTUFBdUIsRUFDdkJDLFFBQWtCLEVBQ2xCQyxNQUF3QixFQUN4QjtFQUNBLElBQU1DLGFBQWEsR0FBRyxPQUFPSCxNQUFNLENBQUNJLFVBQVUsS0FBSyxRQUFRO0VBQzNELElBQU1BLFVBQVUsR0FDZCxDQUFDRCxhQUFhLEdBQUdILE1BQU0sQ0FBQ0ksVUFBVSxHQUFHSixNQUFNLENBQUNLLGlCQUFpQixLQUFLQyw4QkFBbUI7RUFFdkYsT0FBTztJQUNMQyxFQUFFLEVBQUVQLE1BQU0sQ0FBQ08sRUFBRTtJQUNiQyxNQUFNLEVBQUVSLE1BQU0sQ0FBQ1EsTUFBTTtJQUNyQkMsUUFBUSxFQUFFVCxNQUFNLENBQUNTLFFBQVE7SUFDekJDLEtBQUssRUFBRVYsTUFBTSxDQUFDVSxLQUFLO0lBQ25CQyxRQUFRLEVBQUVYLE1BQU0sQ0FBQ1csUUFBUTtJQUN6QkMsU0FBUyxFQUFFWixNQUFNLENBQUNZLFNBQVM7SUFDM0JDLEtBQUssRUFBRWIsTUFBTSxDQUFDYSxLQUFLO0lBQ25CQyxJQUFJLEVBQUVkLE1BQU0sQ0FBQ2MsSUFBSTtJQUNqQkMsS0FBSyxFQUFFZixNQUFNLENBQUNlLEtBQUs7SUFDbkJDLGVBQWUsRUFBRWhCLE1BQU0sQ0FBQ2dCLGVBQWU7SUFDdkNDLFdBQVcsRUFBRWpCLE1BQU0sQ0FBQ2lCLFdBQVc7SUFDL0JDLFFBQVEsRUFBRWxCLE1BQU0sQ0FBQ2tCLFFBQVE7SUFDekJkLFVBQVUsRUFBVkEsVUFBVTtJQUNWSixNQUFNLEVBQU5BLE1BQU07SUFDTkMsUUFBUSxFQUFSQSxRQUFRO0lBQ1JDLE1BQU0sRUFBTkEsTUFBTTtJQUNOaUIsVUFBVSxFQUFFbkIsTUFBTSxDQUFDb0IsSUFBSSxLQUFLQyw0QkFBaUIsQ0FBQ0MsUUFBUTtJQUN0REMsVUFBVSxFQUFFdkIsTUFBTSxDQUFDb0IsSUFBSSxLQUFLQyw0QkFBaUIsQ0FBQ0c7RUFDaEQsQ0FBQztBQUNIO0FBRUFDLHNCQUFzQixDQUFDQyxJQUFJLEdBQUcsQ0FBQ0MsMkJBQXNCLENBQUM7QUFFdEQsU0FBU0Ysc0JBQXNCQSxDQUFDRyxlQUEwRCxFQUFFO0VBQzFGLElBQU1DLHdCQUF3RCxHQUFHLFNBQTNEQSx3QkFBd0RBLENBQUFDLElBQUE7SUFBQSxJQUM1RDlCLE1BQU0sR0FBQThCLElBQUEsQ0FBTjlCLE1BQU07TUFDTkMsUUFBUSxHQUFBNkIsSUFBQSxDQUFSN0IsUUFBUTtNQUNSQyxNQUFNLEdBQUE0QixJQUFBLENBQU41QixNQUFNO01BQ042QixTQUFTLEdBQUFELElBQUEsQ0FBVEMsU0FBUztNQUNUQyxhQUFhLEdBQUFGLElBQUEsQ0FBYkUsYUFBYTtNQUNiQyxZQUFZLEdBQUFILElBQUEsQ0FBWkcsWUFBWTtNQUNaQyxlQUFlLEdBQUFKLElBQUEsQ0FBZkksZUFBZTtNQUNmQyxhQUFhLEdBQUFMLElBQUEsQ0FBYkssYUFBYTtNQUNiQyxRQUFRLEdBQUFOLElBQUEsQ0FBUk0sUUFBUTtJQUFBLG9CQUVSMUMsTUFBQSxZQUFBMkMsYUFBQSxDQUFDVCxlQUFlLE1BQUFVLFNBQUEsaUJBQ1Z2Qyw2QkFBNkIsQ0FBQ0MsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sQ0FBQztNQUMzRHFDLFFBQVEsRUFBRVIsU0FBVTtNQUNwQkMsYUFBYSxFQUFFQSxhQUFjO01BQzdCRSxlQUFlLEVBQUVBLGVBQWdCO01BQ2pDRCxZQUFZLEVBQUVBLFlBQWE7TUFDM0JFLGFBQWEsRUFBRUEsYUFBYztNQUM3QkMsUUFBUSxFQUFFQTtJQUFTLEVBQ3BCLENBQUM7RUFBQSxDQUNIO0VBRUQsT0FBT1Asd0JBQXdCO0FBQ2pDO0FBQUMsSUFBQVcsUUFBQSxHQUFBQyxPQUFBLGNBRWNoQixzQkFBc0IiLCJpZ25vcmVMaXN0IjpbXX0=