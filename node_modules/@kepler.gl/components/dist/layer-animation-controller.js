"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

LayerAnimationControllerFactory.deps = [_animationController["default"]];
function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref) {
    var animationConfig = _ref.animationConfig,
      setLayerAnimationTime = _ref.setLayerAnimationTime,
      children = _ref.children;
    var timeSteps = animationConfig.timeSteps,
      domain = animationConfig.domain;
    var setTimelineValue = (0, _react.useCallback)(function (value) {
      var timelineValue = (0, _commonUtils.toArray)(value)[0];
      if (Array.isArray(timeSteps)) {
        setLayerAnimationTime((0, _utils.snapToMarks)(timelineValue, timeSteps));

        // TODO: merge slider in to avoid this step
      } else if (domain && timelineValue >= domain[0] && timelineValue <= domain[1]) {
        setLayerAnimationTime(timelineValue);
      }
    }, [domain, setLayerAnimationTime, timeSteps]);
    var timeline = (0, _utils.getTimelineFromAnimationConfig)(animationConfig);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: Number(animationConfig.currentTime),
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _constants.ANIMATION_WINDOW.interval : _constants.ANIMATION_WINDOW.point,
      setTimelineValue: setTimelineValue,
      timeline: timeline,
      children: children
    });
  };
  return LayerAnimationController;
}
var _default = exports["default"] = LayerAnimationControllerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY29uc3RhbnRzIiwiX3V0aWxzIiwiX2NvbW1vblV0aWxzIiwiX2FuaW1hdGlvbkNvbnRyb2xsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsImRlcHMiLCJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsIkFuaW1hdGlvbkNvbnRyb2xsZXIiLCJMYXllckFuaW1hdGlvbkNvbnRyb2xsZXIiLCJfcmVmIiwiYW5pbWF0aW9uQ29uZmlnIiwic2V0TGF5ZXJBbmltYXRpb25UaW1lIiwiY2hpbGRyZW4iLCJ0aW1lU3RlcHMiLCJkb21haW4iLCJzZXRUaW1lbGluZVZhbHVlIiwidXNlQ2FsbGJhY2siLCJ2YWx1ZSIsInRpbWVsaW5lVmFsdWUiLCJ0b0FycmF5IiwiQXJyYXkiLCJpc0FycmF5Iiwic25hcFRvTWFya3MiLCJ0aW1lbGluZSIsImdldFRpbWVsaW5lRnJvbUFuaW1hdGlvbkNvbmZpZyIsImNyZWF0ZUVsZW1lbnQiLCJrZXkiLCJOdW1iZXIiLCJjdXJyZW50VGltZSIsInNwZWVkIiwiaXNBbmltYXRpbmciLCJzdGVwcyIsImFuaW1hdGlvbldpbmRvdyIsIkFOSU1BVElPTl9XSU5ET1ciLCJpbnRlcnZhbCIsInBvaW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL2xheWVyLWFuaW1hdGlvbi1jb250cm9sbGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtBTklNQVRJT05fV0lORE9XfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge0FuaW1hdGlvbkNvbmZpZywgVGltZWxpbmV9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtzbmFwVG9NYXJrcywgZ2V0VGltZWxpbmVGcm9tQW5pbWF0aW9uQ29uZmlnfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcbmltcG9ydCB7dG9BcnJheX0gZnJvbSAnQGtlcGxlci5nbC9jb21tb24tdXRpbHMnO1xuaW1wb3J0IEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4vY29tbW9uL2FuaW1hdGlvbi1jb250cm9sL2FuaW1hdGlvbi1jb250cm9sbGVyJztcblxuaW50ZXJmYWNlIExheWVyQW5pbWF0aW9uQ29udHJvbGxlclByb3BzIHtcbiAgYW5pbWF0aW9uQ29uZmlnOiBBbmltYXRpb25Db25maWc7XG4gIHNldExheWVyQW5pbWF0aW9uVGltZTogKHg6IG51bWJlcikgPT4gdm9pZDtcbiAgY2hpbGRyZW4/OiAoXG4gICAgaXNBbmltYXRpbmc6IGJvb2xlYW4gfCB1bmRlZmluZWQsXG4gICAgc3RhcnRBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgcGF1c2VBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgcmVzZXRBbmltYXRpb246ICgpID0+IHZvaWQsXG4gICAgdGltZWxpbmU6IFRpbWVsaW5lIHwgdW5kZWZpbmVkLFxuICAgIHNldFRpbWVsaW5lVmFsdWU6ICh4OiBudW1iZXIgfCBudW1iZXJbXSkgPT4gdm9pZFxuICApID0+IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG59XG5cbkxheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkuZGVwcyA9IFtBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeV07XG5cbmZ1bmN0aW9uIExheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkoXG4gIEFuaW1hdGlvbkNvbnRyb2xsZXI6IFJldHVyblR5cGU8dHlwZW9mIEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5PlxuKSB7XG4gIGNvbnN0IExheWVyQW5pbWF0aW9uQ29udHJvbGxlcjogUmVhY3QuRkM8TGF5ZXJBbmltYXRpb25Db250cm9sbGVyUHJvcHM+ID0gKHtcbiAgICBhbmltYXRpb25Db25maWcsXG4gICAgc2V0TGF5ZXJBbmltYXRpb25UaW1lLFxuICAgIGNoaWxkcmVuXG4gIH0pID0+IHtcbiAgICBjb25zdCB7dGltZVN0ZXBzLCBkb21haW59ID0gYW5pbWF0aW9uQ29uZmlnO1xuXG4gICAgY29uc3Qgc2V0VGltZWxpbmVWYWx1ZSA9IHVzZUNhbGxiYWNrKFxuICAgICAgKHZhbHVlOiBudW1iZXIgfCBudW1iZXJbXSkgPT4ge1xuICAgICAgICBjb25zdCB0aW1lbGluZVZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRpbWVTdGVwcykpIHtcbiAgICAgICAgICBzZXRMYXllckFuaW1hdGlvblRpbWUoc25hcFRvTWFya3ModGltZWxpbmVWYWx1ZSwgdGltZVN0ZXBzKSk7XG5cbiAgICAgICAgICAvLyBUT0RPOiBtZXJnZSBzbGlkZXIgaW4gdG8gYXZvaWQgdGhpcyBzdGVwXG4gICAgICAgIH0gZWxzZSBpZiAoZG9tYWluICYmIHRpbWVsaW5lVmFsdWUgPj0gZG9tYWluWzBdICYmIHRpbWVsaW5lVmFsdWUgPD0gZG9tYWluWzFdKSB7XG4gICAgICAgICAgc2V0TGF5ZXJBbmltYXRpb25UaW1lKHRpbWVsaW5lVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2RvbWFpbiwgc2V0TGF5ZXJBbmltYXRpb25UaW1lLCB0aW1lU3RlcHNdXG4gICAgKTtcblxuICAgIGNvbnN0IHRpbWVsaW5lID0gZ2V0VGltZWxpbmVGcm9tQW5pbWF0aW9uQ29uZmlnKGFuaW1hdGlvbkNvbmZpZyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGlvbkNvbnRyb2xsZXJcbiAgICAgICAga2V5PVwibGF5ZXItY29udHJvbFwiXG4gICAgICAgIHZhbHVlPXtOdW1iZXIoYW5pbWF0aW9uQ29uZmlnLmN1cnJlbnRUaW1lKX1cbiAgICAgICAgZG9tYWluPXthbmltYXRpb25Db25maWcuZG9tYWlufVxuICAgICAgICBzcGVlZD17YW5pbWF0aW9uQ29uZmlnLnNwZWVkfVxuICAgICAgICBpc0FuaW1hdGluZz17YW5pbWF0aW9uQ29uZmlnLmlzQW5pbWF0aW5nfVxuICAgICAgICBzdGVwcz17YW5pbWF0aW9uQ29uZmlnLnRpbWVTdGVwc31cbiAgICAgICAgYW5pbWF0aW9uV2luZG93PXtcbiAgICAgICAgICBhbmltYXRpb25Db25maWcudGltZVN0ZXBzID8gQU5JTUFUSU9OX1dJTkRPVy5pbnRlcnZhbCA6IEFOSU1BVElPTl9XSU5ET1cucG9pbnRcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lbGluZVZhbHVlPXtzZXRUaW1lbGluZVZhbHVlfVxuICAgICAgICB0aW1lbGluZT17dGltZWxpbmV9XG4gICAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIExheWVyQW5pbWF0aW9uQ29udHJvbGxlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxvQkFBQSxHQUFBQyxz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