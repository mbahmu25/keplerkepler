"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adjustCellsToContainer = adjustCellsToContainer;
exports.renderedSize = renderedSize;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _document = _interopRequireDefault(require("global/document"));
var _utils = require("@kepler.gl/utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var MIN_GHOST_CELL_SIZE = 200;
var MIN_CELL_SIZE = 45;
// first column have padding on the left
var EDGE_COLUMN_PADDING = 10;

// in case cell content is small, column name is big, we allow max empty space to
// be added to min cell width in order to show column name
var MAX_EMPTY_COLUMN_SPACE = 60;
/**
 * Measure rows and column content to determine min width for each column
 * @param {RenderSizeParam} param0
 */
function renderedSize(_ref) {
  var _ref$text = _ref.text,
    dataContainer = _ref$text.dataContainer,
    column = _ref$text.column,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'string' : _ref$type,
    colIdx = _ref.colIdx,
    _ref$numRowsToCalcula = _ref.numRowsToCalculate,
    numRowsToCalculate = _ref$numRowsToCalcula === void 0 ? 10 : _ref$numRowsToCalcula,
    _ref$fontSize = _ref.fontSize,
    fontSize = _ref$fontSize === void 0 ? 12 : _ref$fontSize,
    _ref$font = _ref.font,
    font = _ref$font === void 0 ? 'Lato' : _ref$font,
    _ref$cellPadding = _ref.cellPadding,
    cellPadding = _ref$cellPadding === void 0 ? 40 : _ref$cellPadding,
    _ref$maxCellSize = _ref.maxCellSize,
    maxCellSize = _ref$maxCellSize === void 0 ? 500 : _ref$maxCellSize,
    _ref$maxHeaderSize = _ref.maxHeaderSize,
    maxHeaderSize = _ref$maxHeaderSize === void 0 ? 500 : _ref$maxHeaderSize,
    _ref$minCellSize = _ref.minCellSize,
    minCellSize = _ref$minCellSize === void 0 ? MIN_CELL_SIZE : _ref$minCellSize,
    _ref$optionsButton = _ref.optionsButton,
    optionsButton = _ref$optionsButton === void 0 ? 44 : _ref$optionsButton;
  if (!_document["default"]) {
    return {
      row: 0,
      header: 0
    };
  }
  var textCanvas = _document["default"].createElement('canvas');
  _document["default"].body.appendChild(textCanvas);
  var context = textCanvas.getContext('2d');
  context.font = [fontSize, font].join('px ');
  var rowsToSample = (0, _toConsumableArray2["default"])(Array(numRowsToCalculate)).map(function () {
    return Math.floor(Math.random() * (dataContainer.numRows() - 1));
  });

  // If we have less than 10 rows, lets measure all of them
  if (dataContainer.numRows() <= numRowsToCalculate) {
    rowsToSample = Array.from(Array(dataContainer.numRows()).keys());
  }
  var rowWidth = Math.max.apply(Math, (0, _toConsumableArray2["default"])(rowsToSample.map(function (rowIdx) {
    var value = (0, _utils.parseFieldValue)(dataContainer.valueAt(rowIdx, colIdx), type);
    // measuring large text cause slow performance
    if (value.length > maxCellSize) {
      return maxCellSize;
    }
    var textWidth = context.measureText(value).width;
    return Math.ceil(textWidth) + cellPadding;
  })));
  // header cell only has left padding
  var headerWidth = Math.ceil(context.measureText(column).width) + cellPadding / 2 + optionsButton;

  // min row width is measured by cell content
  var minRowWidth = minCellSize + cellPadding;
  // min header width is measured by cell
  var minHeaderWidth = minCellSize + cellPadding / 2 + optionsButton;
  var clampedRowWidth = clamp(minRowWidth, maxCellSize, rowWidth);
  var clampedHeaderWidth = clamp(minHeaderWidth, maxHeaderSize, headerWidth);

  // cleanup
  textCanvas.parentElement.removeChild(textCanvas);
  return {
    row: clampedRowWidth,
    header: clampedHeaderWidth
  };
}
function clamp(min, max, value) {
  return Math.max(Math.min(max, value), min);
}
function getColumnOrder() {
  var pinnedColumns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var unpinnedColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return [].concat((0, _toConsumableArray2["default"])(pinnedColumns), (0, _toConsumableArray2["default"])(unpinnedColumns));
}

// If total min cell size is bigger than containerWidth adjust column
function getMinCellSize(cellSizeCache) {
  return Object.keys(cellSizeCache).reduce(function (accu, col) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, col, cellSizeCache[col].row > cellSizeCache[col].header ? cellSizeCache[col].row :
    // if row is smaller than header, use the smaller of MAX_EMPTY_COLUMN_SPACE + row width and header
    Math.min(cellSizeCache[col].header, cellSizeCache[col].row + MAX_EMPTY_COLUMN_SPACE)));
  }, {});
}
function getSizeSum(sizeCache, key) {
  return Object.keys(sizeCache).reduce(function (acc, val) {
    return acc + (key ? sizeCache[val][key] : sizeCache[val]);
  }, 0);
}

/**
 * Expand cell to fit both row and header, if there is still room left,
 * expand last cell to fit the entire width of the container
 * @param {CellSizeCache} cellSizeCache
 * @param {string[]} columnOrder
 * @param {number} containerWidth
 * @param {number} roomToFill
 */
function expandCellSize(cellSizeCache, columnOrder, containerWidth, roomToFill) {
  var remaining = roomToFill;
  var expandedCellSize = columnOrder.reduce(function (accu, col) {
    var size = cellSizeCache[col].row;
    if (cellSizeCache[col].row < cellSizeCache[col].header && remaining > 0) {
      // if we are cutting off the header, expand to fit it
      size = cellSizeCache[col].header - cellSizeCache[col].row < remaining ? cellSizeCache[col].header : cellSizeCache[col].row + remaining;
      remaining -= size - cellSizeCache[col].row;
    }
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, col, size));
  }, {});
  var ghost = null;
  if (remaining > 0 && remaining < MIN_GHOST_CELL_SIZE) {
    // expand last cell
    var lastCell = columnOrder[columnOrder.length - 1];
    expandedCellSize[lastCell] += remaining;
  } else if (remaining >= MIN_GHOST_CELL_SIZE) {
    // if too much left add a ghost cell
    ghost = remaining;
  }
  return {
    cellSizeCache: expandedCellSize,
    ghost: ghost
  };
}
function addPaddingToFirstColumn(cellSizeCache) {
  var columnOrder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var firstCol = columnOrder[0];
  if (firstCol && cellSizeCache[firstCol]) {
    return _objectSpread(_objectSpread({}, cellSizeCache), {}, (0, _defineProperty2["default"])({}, firstCol, {
      header: cellSizeCache[firstCol].header + EDGE_COLUMN_PADDING,
      row: cellSizeCache[firstCol].row + EDGE_COLUMN_PADDING
    }));
  }
  return cellSizeCache;
}

/**
 * Adjust cell size based on container width
 * @param {number} containerWidth
 * @param {CellSizeCache} cellSizeCache
 * @param {string[]} pinnedColumns
 * @param {string[]} unpinnedColumns
 */
function adjustCellsToContainer(containerWidth, cellSizeCache, pinnedColumns, unpinnedColumns) {
  var columnOrder = getColumnOrder(pinnedColumns, unpinnedColumns);
  var paddedCellSize = addPaddingToFirstColumn(cellSizeCache, columnOrder);
  var minRowSum = getSizeSum(paddedCellSize, 'row');
  if (minRowSum >= containerWidth) {
    // we apply the min Width to all cells
    return {
      cellSizeCache: getMinCellSize(paddedCellSize)
    };
  }
  // if we have some room to expand
  return expandCellSize(paddedCellSize, columnOrder, containerWidth, containerWidth - minRowSum);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,