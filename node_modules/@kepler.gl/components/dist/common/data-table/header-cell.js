"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _classnames2 = _interopRequireDefault(require("classnames"));
var _button = _interopRequireDefault(require("./button"));
var _icons = require("../../common/icons");
var _constants = require("@kepler.gl/constants");
var _optionDropdown = _interopRequireWildcard(require("./option-dropdown"));
var _utils = require("@kepler.gl/utils");
var _fieldToken = _interopRequireDefault(require("../../common/field-token"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledHeaderCell = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border-bottom: 1px solid ", ";\n  border-top: 1px solid ", ";\n  padding-top: ", "px;\n  padding-right: 0;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  align-items: center;\n  justify-content: space-between;\n  display: flex;\n  flex-direction: row;\n  background-color: ", ";\n\n  .n-sort-idx {\n    font-size: 9px;\n  }\n  .details {\n    font-weight: 500;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    height: 100%;\n    overflow: hidden;\n    flex-grow: 1;\n\n    .col-name {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n\n      .col-name__left {\n        display: flex;\n        align-items: center;\n        overflow: hidden;\n\n        svg {\n          margin-left: 6px;\n        }\n      }\n      .col-name__name {\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n      }\n    }\n  }\n\n  .more {\n    margin-left: 5px;\n  }\n\n  .col-name__format svg {\n    width: 10px;\n    height: 10px;\n    stroke-width: 1;\n  }\n"])), function (props) {
  return props.theme.headerCellBorderColor;
}, function (props) {
  return props.theme.headerCellBorderColor;
}, function (props) {
  return props.theme.headerPaddingTop;
}, function (props) {
  return props.theme.headerPaddingBottom;
}, function (props) {
  return props.theme.cellPaddingSide;
}, function (props) {
  return props.theme.headerCellBackground;
});
var HeaderCellFactory = function HeaderCellFactory(FieldToken) {
  var HeaderCell = function HeaderCell(_ref) {
    var _colMeta$column;
    var cellInfo = _ref.cellInfo,
      columns = _ref.columns,
      isPinned = _ref.isPinned,
      props = _ref.props,
      toggleMoreOptions = _ref.toggleMoreOptions,
      moreOptionsColumn = _ref.moreOptionsColumn;
    var columnIndex = cellInfo.columnIndex,
      key = cellInfo.key,
      style = cellInfo.style;
    var colMeta = props.colMeta,
      sortColumn = props.sortColumn,
      sortTableColumn = props.sortTableColumn,
      pinTableColumn = props.pinTableColumn,
      copyTableColumn = props.copyTableColumn,
      setColumnDisplayFormat = props.setColumnDisplayFormat;
    var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      showFormatter = _useState2[0],
      setShowFormatter = _useState2[1];
    var column = columns[columnIndex];
    var isGhost = column.ghost;
    var isSorted = sortColumn[column];
    var firstCell = columnIndex === 0;
    var isFormatted = Boolean((_colMeta$column = colMeta[column]) === null || _colMeta$column === void 0 ? void 0 : _colMeta$column.displayFormat);
    var formatLabels = isFormatted ? (0, _utils.getFieldFormatLabels)(colMeta[column].type) : [];
    var onSortTable = (0, _react.useCallback)(function () {
      return sortTableColumn === null || sortTableColumn === void 0 ? void 0 : sortTableColumn(column);
    }, [sortTableColumn, column]);
    var onToggleOptionMenu = (0, _react.useCallback)(function () {
      return toggleMoreOptions(column);
    }, [toggleMoreOptions, column]);
    var onPin = (0, _react.useCallback)(function () {
      return pinTableColumn(column);
    }, [pinTableColumn, column]);
    var onCopy = (0, _react.useCallback)(function () {
      return copyTableColumn(column);
    }, [copyTableColumn, column]);
    var onSetDisplayFormat = (0, _react.useCallback)(function (displayFormat) {
      setColumnDisplayFormat === null || setColumnDisplayFormat === void 0 || setColumnDisplayFormat((0, _defineProperty2["default"])({}, column, displayFormat.format));
    }, [column, setColumnDisplayFormat]);
    var onToggleDisplayFormat = (0, _react.useCallback)(function () {
      setShowFormatter(!showFormatter);
    }, [showFormatter]);
    return /*#__PURE__*/_react["default"].createElement(StyledHeaderCell, {
      className: (0, _classnames2["default"])('header-cell', (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, "column-".concat(columnIndex), true), 'pinned-header-cell', isPinned), 'first-cell', firstCell)),
      key: key,
      style: style,
      onClick: function onClick(e) {
        e.shiftKey ? sortTableColumn(column) : null;
      },
      onDoubleClick: onSortTable,
      title: column
    }, isGhost ? /*#__PURE__*/_react["default"].createElement("div", null) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("section", {
      className: "details"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "col-name"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "col-name__left"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "col-name__name"
    }, colMeta[column].name), /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: "col-name__sort",
      onClick: onSortTable
    }, isSorted ? isSorted === _constants.SORT_ORDER.ASCENDING ? /*#__PURE__*/_react["default"].createElement(_icons.ArrowUp, {
      height: "14px"
    }) : /*#__PURE__*/_react["default"].createElement(_icons.ArrowDown, {
      height: "14px"
    }) : null), /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: "col-name__format",
      onClick: onToggleDisplayFormat
    }, isFormatted ? /*#__PURE__*/_react["default"].createElement(_icons.Hash, {
      height: "14px"
    }) : null, /*#__PURE__*/_react["default"].createElement(_optionDropdown.FormatterDropdown, {
      left: 0,
      top: 0,
      isOpened: isFormatted && showFormatter,
      displayFormat: colMeta[column].displayFormat,
      setDisplayFormat: onSetDisplayFormat,
      onClose: function onClose() {
        return setShowFormatter(false);
      },
      formatLabels: formatLabels
    }))), /*#__PURE__*/_react["default"].createElement(_button["default"], {
      className: "more",
      onClick: onToggleOptionMenu
    }, /*#__PURE__*/_react["default"].createElement(_icons.VertThreeDots, {
      height: "14px"
    }))), /*#__PURE__*/_react["default"].createElement(FieldToken, {
      type: colMeta[column].type
    })), /*#__PURE__*/_react["default"].createElement("section", {
      className: "options"
    }, /*#__PURE__*/_react["default"].createElement(_optionDropdown["default"], {
      isOpened: moreOptionsColumn === column,
      column: column,
      colMeta: colMeta,
      toggleMoreOptions: toggleMoreOptions,
      sortTableColumn: sortTableColumn ? function (mode) {
        return sortTableColumn(column, mode);
      } : undefined,
      pinTableColumn: onPin,
      copyTableColumn: onCopy,
      setDisplayFormat: setColumnDisplayFormat ? onSetDisplayFormat : undefined
    }))));
  };
  return HeaderCell;
};
HeaderCellFactory.deps = [_fieldToken["default"]];
var _default = exports["default"] = HeaderCellFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,