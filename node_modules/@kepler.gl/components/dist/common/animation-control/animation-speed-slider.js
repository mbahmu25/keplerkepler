"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AnimationSpeedSliderFactory;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _react2 = require("@floating-ui/react");
var _constants = require("@kepler.gl/constants");
var _rangeSlider = _interopRequireDefault(require("../range-slider"));
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var SliderWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n"])));
var SpeedSliderContainer = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  bottom: 50px;\n  right: calc(0% - 32px);\n  width: 180px;\n  padding: 2px 8px 2px 12px;\n  background-color: ", ";\n  box-shadow: -2px -2px 0 0 rgba(0, 0, 0, 0.1);\n\n  .kg-range-slider__input {\n    width: 48px;\n    padding: 6px;\n  }\n"])), function (props) {
  return props.theme.bottomWidgetBgd;
});
AnimationSpeedSliderFactory.deps = [_rangeSlider["default"]];
function AnimationSpeedSliderFactory(RangeSlider) {
  var AnimationSpeedSlider = function AnimationSpeedSlider(_ref) {
    var onHide = _ref.onHide,
      speed = _ref.speed,
      updateAnimationSpeed = _ref.updateAnimationSpeed;
    // floating-ui boilerplate to establish close on outside click
    var _useFloating = (0, _react2.useFloating)({
        open: true,
        onOpenChange: function onOpenChange(v) {
          if (!v) {
            onHide();
          }
        }
      }),
      refs = _useFloating.refs,
      context = _useFloating.context;
    var dismiss = (0, _react2.useDismiss)(context);
    var _useInteractions = (0, _react2.useInteractions)([dismiss]),
      getFloatingProps = _useInteractions.getFloatingProps;
    var onChange = (0, _react.useCallback)(function (v) {
      return updateAnimationSpeed(v[1]);
    }, [updateAnimationSpeed]);
    return /*#__PURE__*/_react["default"].createElement(SpeedSliderContainer, (0, _extends2["default"])({
      className: "animation-control__speed-slider",
      ref: refs.setFloating
    }, getFloatingProps()), /*#__PURE__*/_react["default"].createElement(SliderWrapper, null, /*#__PURE__*/_react["default"].createElement(RangeSlider, {
      range: _constants.SPEED_CONTROL_RANGE,
      step: _constants.SPEED_CONTROL_STEP,
      value0: 0,
      value1: speed,
      onChange: onChange,
      isRanged: false,
      showInput: true,
      inputTheme: "secondary",
      inputSize: "tiny"
    })));
  };
  return AnimationSpeedSlider;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,