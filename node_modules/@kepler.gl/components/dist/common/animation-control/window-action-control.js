"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _localization = require("@kepler.gl/localization");
var _styledComponents = require("../styled-components");
var _iconButton = _interopRequireDefault(require("../icon-button"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var DELAY_SHOW = 500;
function WindowActionControlFactory() {
  var WindowActionComponent = function WindowActionComponent(_ref) {
    var toggleAnimationWindowControl = _ref.toggleAnimationWindowControl,
      showAnimationWindowControl = _ref.showAnimationWindowControl,
      btnStyle = _ref.btnStyle,
      animationItems = _ref.animationItems,
      animationWindow = _ref.animationWindow,
      buttonHeight = _ref.buttonHeight,
      setFilterAnimationWindow = _ref.setFilterAnimationWindow;
    var icon = (0, _react.useMemo)(function () {
      if (animationItems[animationWindow]) {
        var WindowIcon = animationItems[animationWindow].icon;
        return /*#__PURE__*/_react["default"].createElement(WindowIcon, {
          height: buttonHeight
        });
      }
      return null;
    }, [animationItems, animationWindow, buttonHeight]);
    return setFilterAnimationWindow ? /*#__PURE__*/_react["default"].createElement(_iconButton["default"], (0, _extends2["default"])({
      "data-tip": true,
      "data-for": "animate-window",
      className: (0, _classnames["default"])('playback-control-button', {
        active: showAnimationWindowControl
      }),
      onClick: toggleAnimationWindowControl
    }, btnStyle), icon, animationItems[animationWindow] && animationItems[animationWindow].tooltip ? /*#__PURE__*/_react["default"].createElement(_styledComponents.Tooltip, {
      id: "animate-window",
      place: "top",
      delayShow: DELAY_SHOW,
      effect: "solid"
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: animationItems[animationWindow].tooltip
    })) : null) : null;
  };
  return WindowActionComponent;
}
var _default = exports["default"] = WindowActionControlFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY2xhc3NuYW1lcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9jYWxpemF0aW9uIiwiX3N0eWxlZENvbXBvbmVudHMiLCJfaWNvbkJ1dHRvbiIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkRFTEFZX1NIT1ciLCJXaW5kb3dBY3Rpb25Db250cm9sRmFjdG9yeSIsIldpbmRvd0FjdGlvbkNvbXBvbmVudCIsIl9yZWYiLCJ0b2dnbGVBbmltYXRpb25XaW5kb3dDb250cm9sIiwic2hvd0FuaW1hdGlvbldpbmRvd0NvbnRyb2wiLCJidG5TdHlsZSIsImFuaW1hdGlvbkl0ZW1zIiwiYW5pbWF0aW9uV2luZG93IiwiYnV0dG9uSGVpZ2h0Iiwic2V0RmlsdGVyQW5pbWF0aW9uV2luZG93IiwiaWNvbiIsInVzZU1lbW8iLCJXaW5kb3dJY29uIiwiY3JlYXRlRWxlbWVudCIsImhlaWdodCIsIl9leHRlbmRzMiIsImNsYXNzTmFtZSIsImNsYXNzbmFtZXMiLCJhY3RpdmUiLCJvbkNsaWNrIiwidG9vbHRpcCIsIlRvb2x0aXAiLCJpZCIsInBsYWNlIiwiZGVsYXlTaG93IiwiZWZmZWN0IiwiRm9ybWF0dGVkTWVzc2FnZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vYW5pbWF0aW9uLWNvbnRyb2wvd2luZG93LWFjdGlvbi1jb250cm9sLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtUb29sdGlwfSBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuLi9pY29uLWJ1dHRvbic7XG5cbmNvbnN0IERFTEFZX1NIT1cgPSA1MDA7XG5mdW5jdGlvbiBXaW5kb3dBY3Rpb25Db250cm9sRmFjdG9yeSgpIHtcbiAgY29uc3QgV2luZG93QWN0aW9uQ29tcG9uZW50ID0gKHtcbiAgICB0b2dnbGVBbmltYXRpb25XaW5kb3dDb250cm9sLFxuICAgIHNob3dBbmltYXRpb25XaW5kb3dDb250cm9sLFxuICAgIGJ0blN0eWxlLFxuICAgIGFuaW1hdGlvbkl0ZW1zLFxuICAgIGFuaW1hdGlvbldpbmRvdyxcbiAgICBidXR0b25IZWlnaHQsXG4gICAgc2V0RmlsdGVyQW5pbWF0aW9uV2luZG93XG4gIH0pID0+IHtcbiAgICBjb25zdCBpY29uID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICBpZiAoYW5pbWF0aW9uSXRlbXNbYW5pbWF0aW9uV2luZG93XSkge1xuICAgICAgICBjb25zdCBXaW5kb3dJY29uID0gYW5pbWF0aW9uSXRlbXNbYW5pbWF0aW9uV2luZG93XS5pY29uO1xuICAgICAgICByZXR1cm4gPFdpbmRvd0ljb24gaGVpZ2h0PXtidXR0b25IZWlnaHR9IC8+O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSwgW2FuaW1hdGlvbkl0ZW1zLCBhbmltYXRpb25XaW5kb3csIGJ1dHRvbkhlaWdodF0pO1xuXG4gICAgcmV0dXJuIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdyA/IChcbiAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgIGRhdGEtdGlwXG4gICAgICAgIGRhdGEtZm9yPVwiYW5pbWF0ZS13aW5kb3dcIlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3BsYXliYWNrLWNvbnRyb2wtYnV0dG9uJywge2FjdGl2ZTogc2hvd0FuaW1hdGlvbldpbmRvd0NvbnRyb2x9KX1cbiAgICAgICAgb25DbGljaz17dG9nZ2xlQW5pbWF0aW9uV2luZG93Q29udHJvbH1cbiAgICAgICAgey4uLmJ0blN0eWxlfVxuICAgICAgPlxuICAgICAgICB7aWNvbn1cbiAgICAgICAge2FuaW1hdGlvbkl0ZW1zW2FuaW1hdGlvbldpbmRvd10gJiYgYW5pbWF0aW9uSXRlbXNbYW5pbWF0aW9uV2luZG93XS50b29sdGlwID8gKFxuICAgICAgICAgIDxUb29sdGlwIGlkPVwiYW5pbWF0ZS13aW5kb3dcIiBwbGFjZT1cInRvcFwiIGRlbGF5U2hvdz17REVMQVlfU0hPV30gZWZmZWN0PVwic29saWRcIj5cbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPXthbmltYXRpb25JdGVtc1thbmltYXRpb25XaW5kb3ddLnRvb2x0aXB9IC8+XG4gICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICApIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gV2luZG93QWN0aW9uQ29tcG9uZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBXaW5kb3dBY3Rpb25Db250cm9sRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksaUJBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUYsT0FB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