"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _localization = require("@kepler.gl/localization");
var _iconButton = _interopRequireDefault(require("../icon-button"));
var _styledComponents = require("../styled-components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

function AnimationWindowControlFactory() {
  var AnimationWindowControl = function AnimationWindowControl(_ref) {
    var animationWindow = _ref.animationWindow,
      setFilterAnimationWindow = _ref.setFilterAnimationWindow,
      toggleAnimationWindowControl = _ref.toggleAnimationWindowControl,
      height = _ref.height,
      animationItems = _ref.animationItems,
      _ref$btnStyle = _ref.btnStyle,
      btnStyle = _ref$btnStyle === void 0 ? {} : _ref$btnStyle,
      showAnimationWindowControl = _ref.showAnimationWindowControl;
    var onSelectAnimationControl = (0, _react.useCallback)(function (item) {
      setFilterAnimationWindow(item.id);
      toggleAnimationWindowControl();
    }, [setFilterAnimationWindow, toggleAnimationWindowControl]);
    return showAnimationWindowControl ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "animation-window-control"
    }, Object.values(animationItems).filter(function (item) {
      return item.id !== animationWindow;
    }).map(function (item) {
      return /*#__PURE__*/_react["default"].createElement(_iconButton["default"], (0, _extends2["default"])({
        key: item.id,
        "data-tip": true,
        "data-for": "".concat(item.id, "-tooltip"),
        className: "playback-control-button",
        onClick: function onClick() {
          return onSelectAnimationControl(item);
        }
      }, btnStyle), /*#__PURE__*/_react["default"].createElement(item.icon, {
        height: height
      }), item.tooltip ? /*#__PURE__*/_react["default"].createElement(_styledComponents.Tooltip, {
        id: "".concat(item.id, "-tooltip"),
        effect: "solid",
        place: "top"
      }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
        id: item.tooltip
      })) : null);
    })) : null;
  };
  return AnimationWindowControl;
}
var _default = exports["default"] = AnimationWindowControlFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfbG9jYWxpemF0aW9uIiwiX2ljb25CdXR0b24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlZENvbXBvbmVudHMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJBbmltYXRpb25XaW5kb3dDb250cm9sRmFjdG9yeSIsIkFuaW1hdGlvbldpbmRvd0NvbnRyb2wiLCJfcmVmIiwiYW5pbWF0aW9uV2luZG93Iiwic2V0RmlsdGVyQW5pbWF0aW9uV2luZG93IiwidG9nZ2xlQW5pbWF0aW9uV2luZG93Q29udHJvbCIsImhlaWdodCIsImFuaW1hdGlvbkl0ZW1zIiwiX3JlZiRidG5TdHlsZSIsImJ0blN0eWxlIiwic2hvd0FuaW1hdGlvbldpbmRvd0NvbnRyb2wiLCJvblNlbGVjdEFuaW1hdGlvbkNvbnRyb2wiLCJ1c2VDYWxsYmFjayIsIml0ZW0iLCJpZCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJtYXAiLCJfZXh0ZW5kczIiLCJrZXkiLCJjb25jYXQiLCJvbkNsaWNrIiwiaWNvbiIsInRvb2x0aXAiLCJUb29sdGlwIiwiZWZmZWN0IiwicGxhY2UiLCJGb3JtYXR0ZWRNZXNzYWdlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24td2luZG93LWNvbnRyb2wudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ0BrZXBsZXIuZ2wvbG9jYWxpemF0aW9uJztcbmltcG9ydCB7UmVhY3RDb21wb25lbnRMaWtlfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4uL2ljb24tYnV0dG9uJztcbmltcG9ydCB7VG9vbHRpcH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvbkl0ZW0ge1xuICBpZDogc3RyaW5nO1xuICBpY29uOiBSZWFjdENvbXBvbmVudExpa2U7XG4gIHRvb2x0aXA6IHN0cmluZztcbn1cbmludGVyZmFjZSBBbmltYXRpb25XaW5kb3dDb250cm9sUHJvcHMge1xuICBhbmltYXRpb25XaW5kb3c/OiBzdHJpbmc7XG4gIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdzogKGlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHRvZ2dsZUFuaW1hdGlvbldpbmRvd0NvbnRyb2w6ICgpID0+IHZvaWQ7XG4gIGhlaWdodD86IHN0cmluZztcbiAgYW5pbWF0aW9uSXRlbXM6IHtba2V5OiBzdHJpbmddOiBBbmltYXRpb25JdGVtfTtcbiAgYnRuU3R5bGU7XG4gIHNob3dBbmltYXRpb25XaW5kb3dDb250cm9sOiBib29sZWFuO1xufVxuXG5mdW5jdGlvbiBBbmltYXRpb25XaW5kb3dDb250cm9sRmFjdG9yeSgpOiBSZWFjdC5GQzxBbmltYXRpb25XaW5kb3dDb250cm9sUHJvcHM+IHtcbiAgY29uc3QgQW5pbWF0aW9uV2luZG93Q29udHJvbCA9ICh7XG4gICAgYW5pbWF0aW9uV2luZG93LFxuICAgIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdyxcbiAgICB0b2dnbGVBbmltYXRpb25XaW5kb3dDb250cm9sLFxuICAgIGhlaWdodCxcbiAgICBhbmltYXRpb25JdGVtcyxcbiAgICBidG5TdHlsZSA9IHt9LFxuICAgIHNob3dBbmltYXRpb25XaW5kb3dDb250cm9sXG4gIH06IEFuaW1hdGlvbldpbmRvd0NvbnRyb2xQcm9wcykgPT4ge1xuICAgIGNvbnN0IG9uU2VsZWN0QW5pbWF0aW9uQ29udHJvbCA9IHVzZUNhbGxiYWNrKFxuICAgICAgaXRlbSA9PiB7XG4gICAgICAgIHNldEZpbHRlckFuaW1hdGlvbldpbmRvdyhpdGVtLmlkKTtcbiAgICAgICAgdG9nZ2xlQW5pbWF0aW9uV2luZG93Q29udHJvbCgpO1xuICAgICAgfSxcbiAgICAgIFtzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3csIHRvZ2dsZUFuaW1hdGlvbldpbmRvd0NvbnRyb2xdXG4gICAgKTtcblxuICAgIHJldHVybiBzaG93QW5pbWF0aW9uV2luZG93Q29udHJvbCA/IChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0aW9uLXdpbmRvdy1jb250cm9sXCI+XG4gICAgICAgIHtPYmplY3QudmFsdWVzKGFuaW1hdGlvbkl0ZW1zKVxuICAgICAgICAgIC5maWx0ZXIoaXRlbSA9PiBpdGVtLmlkICE9PSBhbmltYXRpb25XaW5kb3cpXG4gICAgICAgICAgLm1hcChpdGVtID0+IChcbiAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgICAgICAgICAgZGF0YS10aXBcbiAgICAgICAgICAgICAgZGF0YS1mb3I9e2Ake2l0ZW0uaWR9LXRvb2x0aXBgfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwbGF5YmFjay1jb250cm9sLWJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2VsZWN0QW5pbWF0aW9uQ29udHJvbChpdGVtKX1cbiAgICAgICAgICAgICAgey4uLmJ0blN0eWxlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aXRlbS5pY29uIGhlaWdodD17aGVpZ2h0fSAvPlxuICAgICAgICAgICAgICB7aXRlbS50b29sdGlwID8gKFxuICAgICAgICAgICAgICAgIDxUb29sdGlwIGlkPXtgJHtpdGVtLmlkfS10b29sdGlwYH0gZWZmZWN0PVwic29saWRcIiBwbGFjZT1cInRvcFwiPlxuICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9e2l0ZW0udG9vbHRpcH0gLz5cbiAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICkpfVxuICAgICAgPC9kaXY+XG4gICAgKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIEFuaW1hdGlvbldpbmRvd0NvbnRyb2w7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbldpbmRvd0NvbnRyb2xGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxXQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxpQkFBQSxHQUFBSixPQUFBO0FBQTZDLFNBQUFLLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBUCx3QkFBQU8sQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUEsc0JBQUFBLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFB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