import React from 'react';
import { KeplerTable } from '@kepler.gl/table';
import { Bin, Field } from '@kepler.gl/types';
import { ColorBreak, ColorBreakOrdinal } from '@kepler.gl/utils';
import HistogramPlotFactory from './histogram-plot';
export declare const HISTOGRAM_WIDTH = 210;
export declare const HISTOGRAM_HEIGHT = 80;
export declare const ColorChartHeader: ({ minVal, meanVal, maxVal }: {
    minVal: any;
    meanVal: any;
    maxVal: any;
}) => React.JSX.Element;
export declare type ColorChartTickProps = {
    colors: string[];
    positions: number[];
    onTickMoving: (positions: number[], dragTick: number) => void;
    onTickChanged: () => void;
    histogramWidth: number;
};
export declare const ColorChartTick: React.FC<ColorChartTickProps>;
export declare type ColumnStatsChartWLoadingProps = {
    colorField: Field;
    dataset: KeplerTable;
    colorBreaks: ColorBreak[] | ColorBreakOrdinal[] | null;
    allBins: Bin[];
    filteredBins: Bin[];
    isFiltered: boolean;
    histogramDomain: number[];
    onChangedUpdater: (ticks: ColorBreak[]) => void;
};
export declare type ColumnStatsChartProps = {
    allBins: Bin[];
    filteredBins: Bin[];
    isFiltered: boolean;
    histogramDomain: number[];
    colorBreaks: ColorBreak[];
    onChangedUpdater: (ticks: ColorBreak[]) => void;
};
declare function ColumnStatsChartFactory(HistogramPlot: ReturnType<typeof HistogramPlotFactory>): React.FC<ColumnStatsChartWLoadingProps>;
declare namespace ColumnStatsChartFactory {
    var deps: (typeof HistogramPlotFactory)[];
}
export default ColumnStatsChartFactory;
