"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _window = _interopRequireDefault(require("global/window"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * Copied from https://github.com/sarink/react-file-drop
 * For React 16.8 compatibility
 */

var isIE = function isIE() {
  return _window["default"] && _window["default"].navigator && ((_window["default"].navigator.userAgent || []).includes('MSIE') || (_window["default"].navigator.appVersion || []).includes('Trident/'));
};
var eventHasFiles = function eventHasFiles(event) {
  // In most browsers this is an array, but in IE11 it's an Object :(

  var hasFiles = false;
  if (event.dataTransfer) {
    var types = event.dataTransfer.types;
    for (var keyOrIndex in types) {
      if (types[keyOrIndex] === 'Files') {
        hasFiles = true;
        break;
      }
    }
  }
  return hasFiles;
};
var FileDrop = function FileDrop(_ref) {
  var _ref$dropEffect = _ref.dropEffect,
    dropEffect = _ref$dropEffect === void 0 ? 'copy' : _ref$dropEffect,
    _ref$frame = _ref.frame,
    frame = _ref$frame === void 0 ? _window["default"] ? _window["default"].document : undefined : _ref$frame,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? 'file-drop' : _ref$className,
    _ref$targetClassName = _ref.targetClassName,
    targetClassName = _ref$targetClassName === void 0 ? 'file-drop-target' : _ref$targetClassName,
    _ref$draggingOverFram = _ref.draggingOverFrameClassName,
    draggingOverFrameClassName = _ref$draggingOverFram === void 0 ? 'file-drop-dragging-over-frame' : _ref$draggingOverFram,
    _ref$draggingOverTarg = _ref.draggingOverTargetClassName,
    draggingOverTargetClassName = _ref$draggingOverTarg === void 0 ? 'file-drop-dragging-over-target' : _ref$draggingOverTarg,
    onDragOver = _ref.onDragOver,
    onDragLeave = _ref.onDragLeave,
    onDrop = _ref.onDrop,
    onFrameDragEnter = _ref.onFrameDragEnter,
    onFrameDragLeave = _ref.onFrameDragLeave,
    onFrameDrop = _ref.onFrameDrop,
    children = _ref.children;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    draggingOverTarget = _useState2[0],
    setDraggingOverTarget = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    draggingOverFrame = _useState4[0],
    setDraggingOverFrame = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    frameDragCounter = _useState6[0],
    setFrameDragCounter = _useState6[1];
  var prevFrame = (0, _react.useRef)(frame);
  (0, _react.useEffect)(function () {
    // componentDidMount
    startFrameListeners(frame);
    resetDragging();
    _window["default"].addEventListener('dragover', handleWindowDragOverOrDrop);
    _window["default"].addEventListener('drop', handleWindowDragOverOrDrop);
    return function () {
      // componentWillUnmount
      stopFrameListeners(frame);
      _window["default"].removeEventListener('dragover', handleWindowDragOverOrDrop);
      _window["default"].removeEventListener('drop', handleWindowDragOverOrDrop);
    };

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  var resetDragging = (0, _react.useCallback)(function () {
    setFrameDragCounter(0);
    setDraggingOverTarget(false);
    setDraggingOverFrame(false);
  }, []);
  var handleWindowDragOverOrDrop = (0, _react.useCallback)(function (event) {
    // This prevents the browser from trying to load whatever file the user dropped on the window
    event.preventDefault();
  }, []);
  var handleFrameDrag = (0, _react.useCallback)(function (event) {
    // Only allow dragging of files
    if (!eventHasFiles(event)) return;

    // We are listening for events on the 'frame', so every time the user drags over any element in the frame's tree,
    // the event bubbles up to the frame. By keeping count of how many "dragenters" we get, we can tell if they are still
    // "draggingOverFrame" (b/c you get one "dragenter" initially, and one "dragenter"/one "dragleave" for every bubble)
    // This is far better than a "dragover" handler, which would be calling `setState` continuously.
    var newDragCounterValue = frameDragCounter + (event.type === 'dragenter' ? 1 : -1);
    setFrameDragCounter(newDragCounterValue);
    if (newDragCounterValue === 1) {
      setDraggingOverFrame(true);
      if (onFrameDragEnter) onFrameDragEnter(event);
      return;
    }
    if (newDragCounterValue === 0) {
      setDraggingOverFrame(false);
      if (onFrameDragLeave) onFrameDragLeave(event);
      return;
    }
  }, [frameDragCounter, setDraggingOverFrame, onFrameDragEnter, onFrameDragLeave]);
  var handleFrameDrop = (0, _react.useCallback)(function (event) {
    event.preventDefault();
    if (!draggingOverTarget) {
      resetDragging();
      if (onFrameDrop) onFrameDrop(event);
    }
  }, [onFrameDrop, draggingOverTarget, resetDragging]);
  var handleDragOver = (0, _react.useCallback)(function (event) {
    if (eventHasFiles(event)) {
      setDraggingOverTarget(true);
      if (!isIE() && dropEffect) event.dataTransfer.dropEffect = dropEffect;
      if (onDragOver) onDragOver(event);
    }
  }, [dropEffect, onDragOver]);
  var handleDragLeave = (0, _react.useCallback)(function (event) {
    setDraggingOverTarget(false);
    if (onDragLeave) onDragLeave(event);
  }, [onDragLeave]);
  var handleDrop = (0, _react.useCallback)(function (event) {
    if (onDrop && eventHasFiles(event)) {
      var files = event.dataTransfer ? event.dataTransfer.files : null;
      onDrop(files, event);
    }
    resetDragging();
  }, [onDrop, resetDragging]);
  var stopFrameListeners = (0, _react.useCallback)(function (frame) {
    if (frame) {
      frame.removeEventListener('dragenter', handleFrameDrag);
      frame.removeEventListener('dragleave', handleFrameDrag);
      frame.removeEventListener('drop', handleFrameDrop);
    }
  }, [handleFrameDrag, handleFrameDrop]);
  var startFrameListeners = (0, _react.useCallback)(function (frame) {
    if (frame) {
      frame.addEventListener('dragenter', handleFrameDrag);
      frame.addEventListener('dragleave', handleFrameDrag);
      frame.addEventListener('drop', handleFrameDrop);
    }
  }, [handleFrameDrag, handleFrameDrop]);
  (0, _react.useEffect)(function () {
    // componentDidUpdate
    if (prevFrame.current !== frame) {
      resetDragging();
      stopFrameListeners(prevFrame.current);
      startFrameListeners(frame);
      prevFrame.current = frame;
    }
  }, [frame, resetDragging, stopFrameListeners, startFrameListeners]);

  // Render
  var fileDropTargetClassName = targetClassName;
  if (draggingOverFrame) fileDropTargetClassName += " ".concat(draggingOverFrameClassName);
  if (draggingOverTarget) fileDropTargetClassName += " ".concat(draggingOverTargetClassName);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    onDragOver: handleDragOver,
    onDragLeave: handleDragLeave,
    onDrop: handleDrop
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: fileDropTargetClassName
  }, children));
};
var _default = exports["default"] = FileDrop;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,