"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ChickletTag = exports.ChickletButton = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _core = require("@dnd-kit/core");
var _sortable = require("@dnd-kit/sortable");
var _modifiers = require("@dnd-kit/modifiers");
var _delete = _interopRequireDefault(require("../icons/delete"));
var _localization = require("@kepler.gl/localization");
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var ChickletButton = exports.ChickletButton = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  background: ", ";\n  border-radius: 1px;\n  color: ", ";\n  font-size: 11px;\n  line-height: 20px;\n  margin: 4px 10px 4px 3px;\n  padding: 2px 6px;\n  display: flex;\n  align-items: center;\n  max-width: calc(100% - 8px);\n\n  &:hover {\n    color: ", ";\n  }\n"])), function (props) {
  return props.inputTheme === 'light' ? props.theme.chickletBgdLT : props.theme.chickletBgd;
}, function (props) {
  return props.inputTheme === 'light' ? props.theme.textColorLT : props.theme.textColor;
}, function (props) {
  return props.inputTheme === 'light' ? props.theme.textColorHlLT : props.theme.textColorHl;
});
var DND_MODIFIERS = [_modifiers.restrictToParentElement];
var ChickletTag = exports.ChickletTag = _styledComponents["default"].span(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-right: 10px;\n  text-overflow: ellipsis;\n  width: 100%;\n  overflow: hidden;\n\n  &:hover {\n    overflow: visible;\n  }\n"])));
var Chicklet = function Chicklet(_ref) {
  var disabled = _ref.disabled,
    name = _ref.name,
    remove = _ref.remove,
    inputTheme = _ref.inputTheme;
  return /*#__PURE__*/_react["default"].createElement(ChickletButton, {
    inputTheme: inputTheme
  }, /*#__PURE__*/_react["default"].createElement(ChickletTag, null, name), /*#__PURE__*/_react["default"].createElement(_delete["default"], {
    onClick: disabled ? undefined : remove
  }));
};
var ChickletedInputContainer = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  ", "\n\n  color: ", ";\n  overflow: hidden;\n"])), function (props) {
  return props.inputTheme === 'secondary' ? props.theme.secondaryChickletedInput : props.inputTheme === 'light' ? props.theme.chickletedInputLT : props.theme.chickletedInput;
}, function (props) {
  return props.hasPlaceholder ? props.theme.selectColorPlaceHolder : props.theme.selectColor;
});
var ChickletedItem = function ChickletedItem(_ref2) {
  var item = _ref2.item,
    removeItem = _ref2.removeItem,
    displayOption = _ref2.displayOption,
    CustomChickletComponent = _ref2.CustomChickletComponent,
    inputTheme = _ref2.inputTheme,
    disabled = _ref2.disabled,
    itemId = _ref2.itemId;
  var _useSortable = (0, _sortable.useSortable)({
      id: itemId
    }),
    attributes = _useSortable.attributes,
    listeners = _useSortable.listeners,
    setNodeRef = _useSortable.setNodeRef,
    transform = _useSortable.transform,
    transition = _useSortable.transition,
    isDragging = _useSortable.isDragging;
  var chickletProps = (0, _react.useMemo)(function () {
    return {
      inputTheme: inputTheme,
      disabled: disabled,
      name: displayOption(item),
      displayOption: displayOption,
      item: item,
      attributes: attributes,
      listeners: listeners,
      setNodeRef: setNodeRef,
      transform: transform,
      transition: transition,
      isDragging: isDragging,
      remove: function remove(e) {
        return removeItem(item, e);
      }
    };
  }, [item, removeItem, displayOption, inputTheme, disabled, attributes, listeners, setNodeRef, transform, transition, isDragging]);
  return CustomChickletComponent ? /*#__PURE__*/_react["default"].createElement(CustomChickletComponent, chickletProps) : /*#__PURE__*/_react["default"].createElement(Chicklet, chickletProps);
};
var ChickletedInput = function ChickletedInput(_ref3) {
  var disabled = _ref3.disabled,
    onClick = _ref3.onClick,
    className = _ref3.className,
    _ref3$selectedItems = _ref3.selectedItems,
    selectedItems = _ref3$selectedItems === void 0 ? [] : _ref3$selectedItems,
    _ref3$placeholder = _ref3.placeholder,
    placeholder = _ref3$placeholder === void 0 ? '' : _ref3$placeholder,
    removeItem = _ref3.removeItem,
    _ref3$reorderItems = _ref3.reorderItems,
    reorderItems = _ref3$reorderItems === void 0 ? function (d) {
      return d;
    } : _ref3$reorderItems,
    _ref3$displayOption = _ref3.displayOption,
    displayOption = _ref3$displayOption === void 0 ? function (d) {
      return String(d);
    } : _ref3$displayOption,
    inputTheme = _ref3.inputTheme,
    CustomChickletComponent = _ref3.CustomChickletComponent;
  var selectedItemIds = (0, _react.useMemo)(function () {
    return selectedItems.map(function (item) {
      return displayOption(item);
    });
  }, [displayOption, selectedItems]);
  var handleDragEnd = (0, _react.useCallback)(function (_ref4) {
    var active = _ref4.active,
      over = _ref4.over;
    if (!over) return;
    if (active.id !== over.id) {
      var oldIndex = selectedItemIds.findIndex(function (itemId) {
        return itemId === active.id;
      });
      var newIndex = selectedItemIds.findIndex(function (itemId) {
        return itemId === over.id;
      });
      reorderItems((0, _sortable.arrayMove)(selectedItems, oldIndex, newIndex));
    }
  }, [selectedItemIds, selectedItems, reorderItems]);
  return /*#__PURE__*/_react["default"].createElement(ChickletedInputContainer, {
    className: "".concat(className, " chickleted-input"),
    onClick: onClick,
    inputTheme: inputTheme,
    hasPlaceholder: !selectedItems || !selectedItems.length
  }, /*#__PURE__*/_react["default"].createElement(_core.DndContext, {
    onDragEnd: handleDragEnd,
    modifiers: DND_MODIFIERS,
    collisionDetection: _core.pointerWithin,
    autoScroll: false
  }, /*#__PURE__*/_react["default"].createElement(_sortable.SortableContext, {
    items: selectedItemIds
  }, selectedItems.length > 0 ? selectedItems.map(function (item, index) {
    return /*#__PURE__*/_react["default"].createElement(ChickletedItem, {
      item: item,
      itemId: displayOption(item),
      removeItem: removeItem,
      displayOption: displayOption,
      CustomChickletComponent: CustomChickletComponent,
      disabled: disabled,
      inputTheme: inputTheme,
      key: "".concat(displayOption(item), "_").concat(index)
    });
  }) : /*#__PURE__*/_react["default"].createElement("span", {
    className: "".concat(className, " chickleted-input__placeholder")
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: placeholder || 'placeholder.enterValue'
  }))), /*#__PURE__*/_react["default"].createElement(_core.DragOverlay, {
    dropAnimation: null
  })));
};
var _default = exports["default"] = ChickletedInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,