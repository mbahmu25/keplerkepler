"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _base = _interopRequireDefault(require("./base"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var Calendar = exports["default"] = /*#__PURE__*/function (_Component) {
  function Calendar() {
    (0, _classCallCheck2["default"])(this, Calendar);
    return _callSuper(this, Calendar, arguments);
  }
  (0, _inherits2["default"])(Calendar, _Component);
  return (0, _createClass2["default"])(Calendar, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base["default"], this.props, /*#__PURE__*/_react["default"].createElement("svg", {
        width: "16",
        height: "16",
        viewBox: "0 0 16 16",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/_react["default"].createElement("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M11.2537 3H13.5C14.0523 3 14.5 3.44772 14.5 4V13C14.5 13.5523 14.0523 14 13.5 14H2.5C1.94772 14 1.5 13.5523 1.5 13V4C1.5 3.44772 1.94772 3 2.5 3H4.73697V2.5C4.73697 2.22386 4.96082 2 5.23697 2C5.51311 2 5.73697 2.22386 5.73697 2.5V3H10.2537V2.5C10.2537 2.22386 10.4776 2 10.7537 2C11.0299 2 11.2537 2.22386 11.2537 2.5V3ZM2.5 13H13.5V7H2.5V13ZM13.5 6H2.5V4H4.7V4.45C4.7 4.75376 4.94624 5 5.25 5C5.55376 5 5.8 4.75376 5.8 4.45V4H10.2V4.45C10.2 4.75376 10.4462 5 10.75 5C11.0538 5 11.3 4.75376 11.3 4.45V4H13.5V6Z"
      })));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(Calendar, "defaultProps", {
  height: '16px',
  viewBox: '0 0 16 16',
  predefinedClassName: 'data-ex-icons-calendar'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfYmFzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJfY2FsbFN1cGVyIiwibyIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIkNhbGVuZGFyIiwiZXhwb3J0cyIsIl9Db21wb25lbnQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiYXJndW1lbnRzIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wcyIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld0JveCIsInhtbG5zIiwiZmlsbFJ1bGUiLCJjbGlwUnVsZSIsImQiLCJDb21wb25lbnQiLCJfZGVmaW5lUHJvcGVydHkyIiwicHJlZGVmaW5lZENsYXNzTmFtZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaWNvbnMvY2FsZW5kYXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJhc2UsIHtCYXNlUHJvcHN9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbGVuZGFyIGV4dGVuZHMgQ29tcG9uZW50PFBhcnRpYWw8QmFzZVByb3BzPj4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGhlaWdodDogJzE2cHgnLFxuICAgIHZpZXdCb3g6ICcwIDAgMTYgMTYnLFxuICAgIHByZWRlZmluZWRDbGFzc05hbWU6ICdkYXRhLWV4LWljb25zLWNhbGVuZGFyJ1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2Ugey4uLnRoaXMucHJvcHN9PlxuICAgICAgICA8c3ZnIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgICAgPHBhdGhcbiAgICAgICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgZD1cIk0xMS4yNTM3IDNIMTMuNUMxNC4wNTIzIDMgMTQuNSAzLjQ0NzcyIDE0LjUgNFYxM0MxNC41IDEzLjU1MjMgMTQuMDUyMyAxNCAxMy41IDE0SDIuNUMxLjk0NzcyIDE0IDEuNSAxMy41NTIzIDEuNSAxM1Y0QzEuNSAzLjQ0NzcyIDEuOTQ3NzIgMyAyLjUgM0g0LjczNjk3VjIuNUM0LjczNjk3IDIuMjIzODYgNC45NjA4MiAyIDUuMjM2OTcgMkM1LjUxMzExIDIgNS43MzY5NyAyLjIyMzg2IDUuNzM2OTcgMi41VjNIMTAuMjUzN1YyLjVDMTAuMjUzNyAyLjIyMzg2IDEwLjQ3NzYgMiAxMC43NTM3IDJDMTEuMDI5OSAyIDExLjI1MzcgMi4yMjM4NiAxMS4yNTM3IDIuNVYzWk0yLjUgMTNIMTMuNVY3SDIuNVYxM1pNMTMuNSA2SDIuNVY0SDQuN1Y0LjQ1QzQuNyA0Ljc1Mzc2IDQuOTQ2MjQgNSA1LjI1IDVDNS41NTM3NiA1IDUuOCA0Ljc1Mzc2IDUuOCA0LjQ1VjRIMTAuMlY0LjQ1QzEwLjIgNC43NTM3NiAxMC40NDYyIDUgMTAuNzUgNUMxMS4wNTM4IDUgMTEuMyA0Ljc1Mzc2IDExLjMgNC40NVY0SDEzLjVWNlpcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgPC9CYXNlPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBdUMsU0FBQUcseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFMLHdCQUFBSyxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQSxzQkFBQUEsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLGNBQUFSLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQVcsV0FBQWhCLENBQUEsRUFBQWlCLENBQUEsRUFBQXBCLENBQUEsV0FBQW9CLENBQUEsT0FBQUMsZ0JBQUEsYUFBQUQsQ0FBQSxPQUFBRSwyQkFBQSxhQUFBbkIsQ0FBQSxFQUFBb0IseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFMLENBQUEsRUFBQXBCLENBQUEsWUFBQXFCLGdCQUFBLGFBQUFsQixDQUFBLEVBQUF1QixXQUFBLElBQUFOLENBQUEsQ0FBQU8sS0FBQSxDQUFBeEIsQ0FBQSxFQUFBSCxDQUFBO0FBQUEsU0FBQXVCLDBCQUFBLGNBQUFwQixDQUFBLElBQUF5QixPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBZCxJQUFBLENBQUFRLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBLGlDQUFBekIsQ0FBQSxhQUFBb0IseUJBQUEsWUFBQUEsMEJBQUEsYUFBQXBCLENBQUEsVUFKdkM7QUFDQTtBQUFBLElBS3FCNEIsUUFBUSxHQUFBQyxPQUFBLHFDQUFBQyxVQUFBO0VBQUEsU0FBQUYsU0FBQTtJQUFBLElBQUFHLGdCQUFBLG1CQUFBSCxRQUFBO0lBQUEsT0FBQVosVUFBQSxPQUFBWSxRQUFBLEVBQUFJLFNBQUE7RUFBQTtFQUFBLElBQUFDLFVBQUEsYUFBQUwsUUFBQSxFQUFBRSxVQUFBO0VBQUEsV0FBQUksYUFBQSxhQUFBTixRQUFBO0lBQUFPLEdBQUE7SUFBQUMsS0FBQSxFQU8zQixTQUFBQyxNQUFNQSxDQUFBLEVBQUc7TUFDUCxvQkFDRTlDLE1BQUEsWUFBQStDLGFBQUEsQ0FBQzVDLEtBQUEsV0FBSSxFQUFLLElBQUksQ0FBQzZDLEtBQUssZUFDbEJoRCxNQUFBLFlBQUErQyxhQUFBO1FBQUtFLEtBQUssRUFBQyxJQUFJO1FBQUNDLE1BQU0sRUFBQyxJQUFJO1FBQUNDLE9BQU8sRUFBQyxXQUFXO1FBQUNDLEtBQUssRUFBQztNQUE0QixnQkFDaEZwRCxNQUFBLFlBQUErQyxhQUFBO1FBQ0VNLFFBQVEsRUFBQyxTQUFTO1FBQ2xCQyxRQUFRLEVBQUMsU0FBUztRQUNsQkMsQ0FBQyxFQUFDO01BQWlnQixDQUNwZ0IsQ0FDRSxDQUNELENBQUM7SUFFWDtFQUFDO0FBQUEsRUFuQm1DQyxnQkFBUztBQUFBLElBQUFDLGdCQUFBLGFBQTFCcEIsUUFBUSxrQkFDTDtFQUNwQmEsTUFBTSxFQUFFLE1BQU07RUFDZEMsT0FBTyxFQUFFLFdBQVc7RUFDcEJPLG1CQUFtQixFQUFFO0FBQ3ZCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=