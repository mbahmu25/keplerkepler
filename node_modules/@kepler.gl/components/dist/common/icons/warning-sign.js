"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = _interopRequireDefault(require("./base"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var WarningSign = exports["default"] = /*#__PURE__*/function (_Component) {
  function WarningSign() {
    (0, _classCallCheck2["default"])(this, WarningSign);
    return _callSuper(this, WarningSign, arguments);
  }
  (0, _inherits2["default"])(WarningSign, _Component);
  return (0, _createClass2["default"])(WarningSign, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base["default"], (0, _extends2["default"])({
        viewBox: "0 0 16 16"
      }, this.props, {
        stroke: "none"
      }), /*#__PURE__*/_react["default"].createElement("path", {
        d: "M15.6753 12.0189L10.017 1.60205C9.58989 0.88311 8.83564 0.453735 7.99939 0.453735C7.16314 0.453735 6.40889 0.88311 5.98183 1.60205C5.97861 1.60755 5.97589 1.61305 5.97267 1.61855L0.33317 12.0024C-0.103049 12.7365 -0.111299 13.6181 0.310701 14.3604C0.73367 15.1032 1.49567 15.5463 2.35026 15.5463H13.6173C14.4719 15.5463 15.2652 15.1032 15.6881 14.3604C16.1101 13.6181 16.1019 12.7365 15.6753 12.0189ZM7.06095 5.22339C7.06095 4.70508 7.48111 4.28495 7.99939 4.28495C8.5177 4.28495 8.93783 4.70511 8.93783 5.22339V8.97717C8.93783 9.49542 8.51767 9.91561 7.99939 9.91561C7.48111 9.91561 7.06095 9.49539 7.06095 8.97717V5.22339ZM7.99939 13.6694C7.22317 13.6694 6.5917 13.038 6.5917 12.2617C6.5917 11.4855 7.22314 10.8541 7.99939 10.8541C8.77561 10.8541 9.40705 11.4855 9.40705 12.2617C9.40708 13.038 8.77564 13.6694 7.99939 13.6694Z",
        fill: "#F5B766"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "8",
        cy: "12.2773",
        r: "1.43359",
        fill: "#121621"
      }), /*#__PURE__*/_react["default"].createElement("path", {
        d: "M8 4.28125C8.51992 4.28125 8.94141 4.70273 8.94141 5.22266V8.97266C8.94141 9.49258 8.51992 9.91406 8 9.91406C7.48008 9.91406 7.05859 9.49258 7.05859 8.97266V5.22266C7.05859 4.70273 7.48008 4.28125 8 4.28125Z",
        fill: "#121621"
      }));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(WarningSign, "propTypes", {
  /** Set the height of the icon, ex. '16px' */
  height: _propTypes["default"].string
});
(0, _defineProperty2["default"])(WarningSign, "defaultProps", {
  height: '16px',
  predefinedClassName: 'data-ex-icons-warning-sign',
  stroke: '#FFF'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9iYXNlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX2NhbGxTdXBlciIsIm8iLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJXYXJuaW5nU2lnbiIsImV4cG9ydHMiLCJfQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrMiIsImFyZ3VtZW50cyIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiX2V4dGVuZHMyIiwidmlld0JveCIsInByb3BzIiwic3Ryb2tlIiwiZCIsImZpbGwiLCJjeCIsImN5IiwiQ29tcG9uZW50IiwiX2RlZmluZVByb3BlcnR5MiIsImhlaWdodCIsIlByb3BUeXBlcyIsInN0cmluZyIsInByZWRlZmluZWRDbGFzc05hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbW9uL2ljb25zL3dhcm5pbmctc2lnbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEJhc2UsIHtCYXNlUHJvcHN9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhcm5pbmdTaWduIGV4dGVuZHMgQ29tcG9uZW50PFBhcnRpYWw8QmFzZVByb3BzPj4ge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKiBTZXQgdGhlIGhlaWdodCBvZiB0aGUgaWNvbiwgZXguICcxNnB4JyAqL1xuICAgIGhlaWdodDogUHJvcFR5cGVzLnN0cmluZ1xuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaGVpZ2h0OiAnMTZweCcsXG4gICAgcHJlZGVmaW5lZENsYXNzTmFtZTogJ2RhdGEtZXgtaWNvbnMtd2FybmluZy1zaWduJyxcbiAgICBzdHJva2U6ICcjRkZGJ1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2Ugdmlld0JveD1cIjAgMCAxNiAxNlwiIHsuLi50aGlzLnByb3BzfSBzdHJva2U9XCJub25lXCI+XG4gICAgICAgIDxwYXRoXG4gICAgICAgICAgZD1cIk0xNS42NzUzIDEyLjAxODlMMTAuMDE3IDEuNjAyMDVDOS41ODk4OSAwLjg4MzExIDguODM1NjQgMC40NTM3MzUgNy45OTkzOSAwLjQ1MzczNUM3LjE2MzE0IDAuNDUzNzM1IDYuNDA4ODkgMC44ODMxMSA1Ljk4MTgzIDEuNjAyMDVDNS45Nzg2MSAxLjYwNzU1IDUuOTc1ODkgMS42MTMwNSA1Ljk3MjY3IDEuNjE4NTVMMC4zMzMxNyAxMi4wMDI0Qy0wLjEwMzA0OSAxMi43MzY1IC0wLjExMTI5OSAxMy42MTgxIDAuMzEwNzAxIDE0LjM2MDRDMC43MzM2NyAxNS4xMDMyIDEuNDk1NjcgMTUuNTQ2MyAyLjM1MDI2IDE1LjU0NjNIMTMuNjE3M0MxNC40NzE5IDE1LjU0NjMgMTUuMjY1MiAxNS4xMDMyIDE1LjY4ODEgMTQuMzYwNEMxNi4xMTAxIDEzLjYxODEgMTYuMTAxOSAxMi43MzY1IDE1LjY3NTMgMTIuMDE4OVpNNy4wNjA5NSA1LjIyMzM5QzcuMDYwOTUgNC43MDUwOCA3LjQ4MTExIDQuMjg0OTUgNy45OTkzOSA0LjI4NDk1QzguNTE3NyA0LjI4NDk1IDguOTM3ODMgNC43MDUxMSA4LjkzNzgzIDUuMjIzMzlWOC45NzcxN0M4LjkzNzgzIDkuNDk1NDIgOC41MTc2NyA5LjkxNTYxIDcuOTk5MzkgOS45MTU2MUM3LjQ4MTExIDkuOTE1NjEgNy4wNjA5NSA5LjQ5NTM5IDcuMDYwOTUgOC45NzcxN1Y1LjIyMzM5Wk03Ljk5OTM5IDEzLjY2OTRDNy4yMjMxNyAxMy42Njk0IDYuNTkxNyAxMy4wMzggNi41OTE3IDEyLjI2MTdDNi41OTE3IDExLjQ4NTUgNy4yMjMxNCAxMC44NTQxIDcuOTk5MzkgMTAuODU0MUM4Ljc3NTYxIDEwLjg1NDEgOS40MDcwNSAxMS40ODU1IDkuNDA3MDUgMTIuMjYxN0M5LjQwNzA4IDEzLjAzOCA4Ljc3NTY0IDEzLjY2OTQgNy45OTkzOSAxMy42Njk0WlwiXG4gICAgICAgICAgZmlsbD1cIiNGNUI3NjZcIlxuICAgICAgICAvPlxuICAgICAgICA8Y2lyY2xlIGN4PVwiOFwiIGN5PVwiMTIuMjc3M1wiIHI9XCIxLjQzMzU5XCIgZmlsbD1cIiMxMjE2MjFcIiAvPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGQ9XCJNOCA0LjI4MTI1QzguNTE5OTIgNC4yODEyNSA4Ljk0MTQxIDQuNzAyNzMgOC45NDE0MSA1LjIyMjY2VjguOTcyNjZDOC45NDE0MSA5LjQ5MjU4IDguNTE5OTIgOS45MTQwNiA4IDkuOTE0MDZDNy40ODAwOCA5LjkxNDA2IDcuMDU4NTkgOS40OTI1OCA3LjA1ODU5IDguOTcyNjZWNS4yMjI2NkM3LjA1ODU5IDQuNzAyNzMgNy40ODAwOCA0LjI4MTI1IDggNC4yODEyNVpcIlxuICAgICAgICAgIGZpbGw9XCIjMTIxNjIxXCJc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