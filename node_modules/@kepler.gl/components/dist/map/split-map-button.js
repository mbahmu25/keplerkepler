"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = require("../common/styled-components");
var _icons = require("../common/icons");
var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

SplitMapButtonFactory.deps = [_mapControlTooltip["default"]];
function SplitMapButtonFactory(MapControlTooltip) {
  var defaultActionIcons = {
    "delete": _icons.Delete,
    split: _icons.Split
  };

  /** @type {import('./split-map-button').SplitMapButtonComponent} */
  var SplitMapButton = function SplitMapButton(_ref) {
    var isSplit = _ref.isSplit,
      mapIndex = _ref.mapIndex,
      onToggleSplitMap = _ref.onToggleSplitMap,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons,
      mapControls = _ref.mapControls,
      readOnly = _ref.readOnly;
    var splitMap = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.splitMap) || {};
    var onClick = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleSplitMap(isSplit ? mapIndex : undefined);
    }, [isSplit, mapIndex, onToggleSplitMap]);
    var isVisible = (0, _react.useMemo)(function () {
      return splitMap.show && readOnly !== true;
    }, [splitMap.show, readOnly]);
    if (!splitMap.show) {
      return null;
    }
    return isVisible ? /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "action-toggle",
      message: isSplit ? 'tooltip.closePanel' : 'tooltip.switchToDualView'
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      active: isSplit,
      onClick: onClick,
      className: (0, _classnames["default"])('map-control-button', 'split-map', {
        'close-map': isSplit
      })
    }, isSplit ? /*#__PURE__*/_react["default"].createElement(actionIcons["delete"], {
      height: "18px"
    }) : /*#__PURE__*/_react["default"].createElement(actionIcons.split, {
      height: "18px"
    }))) : null;
  };
  SplitMapButton.displayName = 'SplitMapButton';
  return /*#__PURE__*/_react["default"].memo(SplitMapButton);
}
var _default = exports["default"] = SplitMapButtonFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY2xhc3NuYW1lcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pY29ucyIsIl9tYXBDb250cm9sVG9vbHRpcCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlNwbGl0TWFwQnV0dG9uRmFjdG9yeSIsImRlcHMiLCJNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkiLCJNYXBDb250cm9sVG9vbHRpcCIsImRlZmF1bHRBY3Rpb25JY29ucyIsIkRlbGV0ZSIsInNwbGl0IiwiU3BsaXQiLCJTcGxpdE1hcEJ1dHRvbiIsIl9yZWYiLCJpc1NwbGl0IiwibWFwSW5kZXgiLCJvblRvZ2dsZVNwbGl0TWFwIiwiX3JlZiRhY3Rpb25JY29ucyIsImFjdGlvbkljb25zIiwibWFwQ29udHJvbHMiLCJyZWFkT25seSIsInNwbGl0TWFwIiwib25DbGljayIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInVuZGVmaW5lZCIsImlzVmlzaWJsZSIsInVzZU1lbW8iLCJzaG93IiwiY3JlYXRlRWxlbWVudCIsImlkIiwibWVzc2FnZSIsIk1hcENvbnRyb2xCdXR0b24iLCJhY3RpdmUiLCJjbGFzc05hbWUiLCJjbGFzc25hbWVzIiwiaGVpZ2h0IiwiZGlzcGxheU5hbWUiLCJSZWFjdCIsIm1lbW8iLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwL3NwbGl0LW1hcC1idXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudFR5cGUsIHVzZUNhbGxiYWNrLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7TWFwQ29udHJvbEJ1dHRvbn0gZnJvbSAnLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7RGVsZXRlLCBTcGxpdH0gZnJvbSAnLi4vY29tbW9uL2ljb25zJztcbmltcG9ydCBNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkgZnJvbSAnLi9tYXAtY29udHJvbC10b29sdGlwJztcbmltcG9ydCB7TWFwQ29udHJvbEl0ZW0sIE1hcENvbnRyb2xzfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuU3BsaXRNYXBCdXR0b25GYWN0b3J5LmRlcHMgPSBbTWFwQ29udHJvbFRvb2x0aXBGYWN0b3J5XTtcblxuaW50ZXJmYWNlIFNwbGl0TWFwQnV0dG9uSWNvbnMge1xuICBkZWxldGU6IENvbXBvbmVudFR5cGU8YW55PjtcbiAgc3BsaXQ6IENvbXBvbmVudFR5cGU8YW55Pjtcbn1cblxuZXhwb3J0IHR5cGUgU3BsaXRNYXBCdXR0b25Qcm9wcyA9IHtcbiAgaXNTcGxpdDogYm9vbGVhbjtcbiAgbWFwSW5kZXg6IG51bWJlcjtcbiAgb25Ub2dnbGVTcGxpdE1hcDogKGluZGV4PzogbnVtYmVyKSA9PiB2b2lkO1xuICBhY3Rpb25JY29uczogU3BsaXRNYXBCdXR0b25JY29ucztcbiAgcmVhZE9ubHk6IGJvb2xlYW47XG4gIG1hcENvbnRyb2xzOiBNYXBDb250cm9scztcbn07XG5cbmZ1bmN0aW9uIFNwbGl0TWFwQnV0dG9uRmFjdG9yeShNYXBDb250cm9sVG9vbHRpcCkge1xuICBjb25zdCBkZWZhdWx0QWN0aW9uSWNvbnMgPSB7XG4gICAgZGVsZXRlOiBEZWxldGUsXG4gICAgc3BsaXQ6IFNwbGl0XG4gIH07XG5cbiAgLyoqIEB0eXBlIHtpbXBvcnQoJy4vc3BsaXQtbWFwLWJ1dHRvbicpLlNwbGl0TWFwQnV0dG9uQ29tcG9uZW50fSAqL1xuICBjb25zdCBTcGxpdE1hcEJ1dHRvbjogUmVhY3QuRkM8U3BsaXRNYXBCdXR0b25Qcm9wcz4gPSAoe1xuICAgIGlzU3BsaXQsXG4gICAgbWFwSW5kZXgsXG4gICAgb25Ub2dnbGVTcGxpdE1hcCxcbiAgICBhY3Rpb25JY29ucyA9IGRlZmF1bHRBY3Rpb25JY29ucyxcbiAgICBtYXBDb250cm9scyxcbiAgICByZWFkT25seVxuICB9KSA9PiB7XG4gICAgY29uc3Qgc3BsaXRNYXAgPSBtYXBDb250cm9scz8uc3BsaXRNYXAgfHwgKHt9IGFzIE1hcENvbnRyb2xJdGVtKTtcbiAgICBjb25zdCBvbkNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgICBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uVG9nZ2xlU3BsaXRNYXAoaXNTcGxpdCA/IG1hcEluZGV4IDogdW5kZWZpbmVkKTtcbiAgICAgIH0sXG4gICAgICBbaXNTcGxpdCwgbWFwSW5kZXgsIG9uVG9nZ2xlU3BsaXRNYXBdXG4gICAgKTtcblxuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHVzZU1lbW8oKCkgPT4gc3BsaXRNYXAuc2hvdyAmJiByZWFkT25seSAhPT0gdHJ1ZSwgW3NwbGl0TWFwLnNob3csIHJlYWRPbmx5XSk7XG5cbiAgICBpZiAoIXNwbGl0TWFwLnNob3cpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaXNWaXNpYmxlID8gKFxuICAgICAgPE1hcENvbnRyb2xUb29sdGlwXG4gICAgICAgIGlkPVwiYWN0aW9uLXRvZ2dsZVwiXG4gICAgICAgIG1lc3NhZ2U9e2lzU3BsaXQgPyAndG9vbHRpcC5jbG9zZVBhbmVsJyA6ICd0b29sdGlwLnN3aXRjaFRvRHVhbFZpZXcnfVxuICAgICAgPlxuICAgICAgICA8TWFwQ29udHJvbEJ1dHRvblxuICAgICAgICAgIGFjdGl2ZT17aXNTcGxpdH1cbiAgICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnbWFwLWNvbnRyb2wtYnV0dG9uJywgJ3NwbGl0LW1hcCcsIHsnY2xvc2UtbWFwJzogaXNTcGxpdH0pfVxuICAgICAgICA+XG4gICAgICAgICAge2lzU3BsaXQgPyA8YWN0aW9uSWNvbnMuZGVsZXRlIGhlaWdodD1cIjE4cHhcIiAvPiA6IDxhY3Rpb25JY29ucy5zcGxpdCBoZWlnaHQ9XCIxOHB4XCIgLz59XG4gICAgICAgIDwvTWFwQ29udHJvbEJ1dHRvbj5cbiAgICAgIDwvTWFwQ29udHJvbFRvb2x0aXA+XG4gICAgKSA6IG51bGw7XG4gIH07XG5cbiAgU3BsaXRNYXBCdXR0b24uZGlzcGxheU5hbWUgPSAnU3BsaXRNYXBCdXR0b24nO1xuICByZXR1cm4gUmVhY3QubWVtbyhTcGxpdE1hcEJ1dHRvbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwbGl0TWFwQnV0dG9uRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxpQkFBQSxHQUFBSCxPQUFBO0FBQ0EsSUFBQUksTUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssa0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUYsT0FBQTtBQUE2RCxTQUFBTSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQVIsd0JBQUFRLENBQUEs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