import React from 'react';
import { CompareType, Field, Merge, TooltipField } from '@kepler.gl/types';
import PropTypes from 'prop-types';
import { Layer } from '@kepler.gl/layers';
import { LayerHoverProp } from '@kepler.gl/reducers';
import { VisState } from '@kepler.gl/schemas';
export declare const StyledLayerName: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").FastOmit<Omit<import("styled-components/dist/types").FastOmit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}, never>> & Omit<import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").FastOmit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>>, keyof React.Component<any, {}, any>>;
export declare type EntryInfoProps = Merge<LayerHoverProp, {
    fieldsToShow: TooltipField[];
}>;
export declare type EntryInfoRowProps = {
    data: LayerHoverProp['data'];
    fields: Field[];
    layer: Layer;
    primaryData?: LayerHoverProp['primaryData'];
    compareType?: CompareType;
    currentTime?: VisState['animationConfig']['currentTime'];
    item: TooltipField;
};
declare const LayerHoverInfoFactory: () => {
    (props: any): React.JSX.Element | null;
    propTypes: {
        fields: PropTypes.Requireable<any[]>;
        fieldsToShow: PropTypes.Requireable<any[]>;
        layer: PropTypes.Requireable<object>;
        data: PropTypes.Requireable<object>;
    };
};
export default LayerHoverInfoFactory;
