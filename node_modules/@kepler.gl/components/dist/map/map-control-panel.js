"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _localization = require("@kepler.gl/localization");
var _styledComponents2 = require("../common/styled-components");
var _icons = require("../common/icons");
var _switch = _interopRequireDefault(require("../common/switch"));
var _classnames = _interopRequireDefault(require("classnames"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledMapControlPanel = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  flex-grow: 1;\n  z-index: 1;\n  p {\n    margin-bottom: 0;\n  }\n"])), function (props) {
  return props.theme.mapPanelBackgroundColor;
});
var StyledMapControlPanelContent = _styledComponents["default"].div.attrs({
  className: 'map-control__panel-content'
})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  ", ";\n  max-height: 500px;\n  min-height: 100px;\n  min-width: ", "px;\n  overflow: ", ";\n"])), function (props) {
  return props.theme.sidePanelScrollBar;
}, function (props) {
  return props.theme.mapControl.width;
}, function (props) {
  return props.isExport ? 'hidden' : 'overlay';
});
var StyledMapControlPanelHeader = _styledComponents["default"].div.attrs({
  className: 'map-control__panel-header'
})(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n  background-color: ", ";\n  height: 32px;\n  padding: 6px 12px;\n  font-family: ", ";\n  font-size: 11px;\n  color: ", ";\n  position: relative;\n  box-sizing: border-box;\n  align-items: center;\n\n  button {\n    width: 18px;\n    height: 18px;\n  }\n"])), function (props) {
  return props.theme.mapPanelHeaderBackgroundColor;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.titleTextColor;
});
var StyledMapControlPanelHeaderSplitViewportsTools = (0, _styledComponents["default"])(StyledMapControlPanelHeader).attrs({
  className: 'map-control__panel-split-viewport-tools'
})(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: self-start;\n  height: unset;\n"])));
var StyledSBCenterFlexbox = (0, _styledComponents["default"])(_styledComponents2.CenterFlexbox)(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  justify-content: space-between;\n  flex-direction: row;\n"])));
var StyledDisableableText = _styledComponents["default"].span(_templateObject6 || (_templateObject6 = (0, _taggedTemplateLiteral2["default"])(["\n  opacity: ", ";\n  pointer-events: ", ";\n"])), function (props) {
  return props.disabled ? 0.4 : 1;
}, function (props) {
  return props.disabled ? 'none' : 'all';
});
var StyledDisableableSwitch = (0, _styledComponents["default"])(_switch["default"])(_templateObject7 || (_templateObject7 = (0, _taggedTemplateLiteral2["default"])(["\n  opacity: ", ";\n  pointer-events: ", ";\n"])), function (props) {
  return props.disabled ? 0.4 : 1;
}, function (props) {
  return props.disabled ? 'none' : 'all';
});
var StyledIcon = (0, _styledComponents["default"])(_styledComponents2.IconRoundSmall)(_templateObject8 || (_templateObject8 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  background-color: transparent;\n\n  &:hover {\n    cursor: pointer;\n    background-color: transparent;\n    color: ", ";\n  }\n"])), function (props) {
  return props.theme.activeColor;
}, function (props) {
  return props.theme.floatingBtnActColor;
});
function MapControlPanelFactory() {
  var MapControlPanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var children = _ref.children,
      header = _ref.header,
      pinnable = _ref.pinnable,
      disableClose = _ref.disableClose,
      onPinClick = _ref.onPinClick,
      onClick = _ref.onClick,
      _ref$scale = _ref.scale,
      scale = _ref$scale === void 0 ? 1 : _ref$scale,
      isExport = _ref.isExport,
      logoComponent = _ref.logoComponent,
      mapState = _ref.mapState,
      onToggleSplitMapViewport = _ref.onToggleSplitMapViewport,
      isViewportUnsyncAllowed = _ref.isViewportUnsyncAllowed,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? 'map-control-panel' : _ref$className;
    var _ref2 = mapState || {},
      isViewportSynced = _ref2.isViewportSynced,
      isZoomLocked = _ref2.isZoomLocked;
    var onUnlockViewportChange = (0, _react.useCallback)(function () {
      onToggleSplitMapViewport === null || onToggleSplitMapViewport === void 0 || onToggleSplitMapViewport({
        isViewportSynced: !isViewportSynced
      });
    }, [isViewportSynced, onToggleSplitMapViewport]);
    var onSyncZoomChange = (0, _react.useCallback)(function () {
      onToggleSplitMapViewport === null || onToggleSplitMapViewport === void 0 || onToggleSplitMapViewport({
        isZoomLocked: !isZoomLocked
      });
    }, [isZoomLocked, onToggleSplitMapViewport]);
    return /*#__PURE__*/_react["default"].createElement(StyledMapControlPanel, {
      style: {
        transform: "scale(".concat(scale, ")"),
        marginBottom: '8px !important'
      },
      className: (0, _classnames["default"])('map-control-panel', className)
    }, mapState !== null && mapState !== void 0 && mapState.isSplit && isViewportUnsyncAllowed ? /*#__PURE__*/_react["default"].createElement(StyledMapControlPanelHeaderSplitViewportsTools, null, /*#__PURE__*/_react["default"].createElement(StyledSBCenterFlexbox, {
      style: {
        paddingBottom: '6px'
      }
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "Unlock Viewport"
    }), /*#__PURE__*/_react["default"].createElement(StyledDisableableSwitch, {
      checked: !(mapState !== null && mapState !== void 0 && mapState.isViewportSynced),
      id: "unlock-viewport-toggle",
      onChange: onUnlockViewportChange
    })), /*#__PURE__*/_react["default"].createElement(StyledSBCenterFlexbox, null, /*#__PURE__*/_react["default"].createElement(StyledDisableableText, {
      disabled: mapState === null || mapState === void 0 ? void 0 : mapState.isViewportSynced
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "Sync Zoom"
    })), /*#__PURE__*/_react["default"].createElement(StyledDisableableSwitch, {
      checked: mapState === null || mapState === void 0 ? void 0 : mapState.isZoomLocked,
      id: "sync-zoom-toggle",
      onChange: onSyncZoomChange,
      disabled: mapState === null || mapState === void 0 ? void 0 : mapState.isViewportSynced
    }))) : null, /*#__PURE__*/_react["default"].createElement(StyledMapControlPanelHeader, null, isExport && logoComponent ? logoComponent : header ? /*#__PURE__*/_react["default"].createElement("span", {
      style: {
        verticalAlign: 'middle'
      }
    }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: header
    })) : null, isExport ? null : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, pinnable && /*#__PURE__*/_react["default"].createElement(StyledIcon, {
      className: "pin-map-control-item",
      onClick: onPinClick
    }, /*#__PURE__*/_react["default"].createElement(_icons.Pin, {
      height: "16px"
    })), disableClose ? null : /*#__PURE__*/_react["default"].createElement(StyledIcon, {
      className: "close-map-control-item",
      onClick: onClick
    }, /*#__PURE__*/_react["default"].createElement(_icons.Close, {
      height: "16px"
    })))), /*#__PURE__*/_react["default"].createElement(StyledMapControlPanelContent, {
      isExport: isExport
    }, children));
  });
  MapControlPanel.displayName = 'MapControlPanel';
  return MapControlPanel;
}
var _default = exports["default"] = MapControlPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,