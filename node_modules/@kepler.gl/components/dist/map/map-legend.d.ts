import React, { FC, ComponentType } from 'react';
import ColorLegendFactory, { LegendRowFactory } from '../common/color-legend';
import { Layer, LayerBaseConfig, VisualChannel, VisualChannelDescription } from '@kepler.gl/layers';
import { LayerVisConfig, MapState, RGBColor } from '@kepler.gl/types';
import PanelHeaderActionFactory from '../side-panel/panel-header-action';
interface StyledMapControlLegendProps {
    width?: number;
    last?: boolean;
}
export declare const StyledMapControlLegend: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").Substitute<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, StyledMapControlLegendProps>>;
export declare const VisualChannelMetric: ({ name }: {
    name: any;
}) => React.JSX.Element;
export declare type LayerSizeLegendProps = {
    label: string;
    name: string | undefined;
};
export declare const LayerDefaultLegend: React.FC<LayerSizeLegendProps>;
export declare type SingleColorLegendProps = {
    color: RGBColor;
    label?: string;
};
export declare function SingleColorLegendFactory(LegendRow: ReturnType<typeof LegendRowFactory>): React.NamedExoticComponent<SingleColorLegendProps>;
export declare namespace SingleColorLegendFactory {
    var deps: (typeof LegendRowFactory)[];
}
export declare type LayerColorLegendProps = {
    description: VisualChannelDescription;
    config: LayerBaseConfig;
    colorChannel: VisualChannel;
    onLayerVisConfigChange?: (oldLayer: Layer, newVisConfig: Partial<LayerVisConfig>) => void;
    layer: Layer;
    disableEdit?: boolean;
    isExport?: boolean;
    mapState?: MapState;
    actionIcons: MapLegendIcons;
};
export declare function LayerColorLegendFactory(ColorLegend: ReturnType<typeof ColorLegendFactory>, SingleColorLegend: ReturnType<typeof SingleColorLegendFactory>, PanelHeaderAction: ReturnType<typeof PanelHeaderActionFactory>): React.NamedExoticComponent<LayerColorLegendProps>;
export declare namespace LayerColorLegendFactory {
    var deps: (typeof PanelHeaderActionFactory | typeof ColorLegendFactory | typeof SingleColorLegendFactory)[];
}
export declare type MapLegendIcons = {
    expanded: ComponentType<any>;
    collapsed: ComponentType<any>;
};
export declare type LayerRadiusLegendProps = {
    layer: Layer;
    mapState?: MapState;
    width: number;
    isExport?: boolean;
    visualChannel: VisualChannel;
};
export declare const LayerRadiusLegend: FC<LayerRadiusLegendProps>;
export declare type LayerLegendHeaderProps = {
    layer: Layer;
    options?: {
        showLayerName?: boolean;
    };
    isExport?: boolean;
};
export declare function LayerLegendHeaderFactory(): React.FC<LayerLegendHeaderProps>;
export declare type LayerLegendContentProps = {
    layer: Layer;
    containerW: number;
    mapState?: MapState;
    disableEdit?: boolean;
    isExport?: boolean;
    onLayerVisConfigChange?: (oldLayer: Layer, newVisConfig: Partial<LayerVisConfig>) => void;
    actionIcons: MapLegendIcons;
};
export declare function LayerLegendContentFactory(LayerColorLegend: ReturnType<typeof LayerColorLegendFactory>): React.FC<LayerLegendContentProps>;
export declare namespace LayerLegendContentFactory {
    var deps: (typeof LayerColorLegendFactory)[];
}
export declare type MapLegendProps = {
    layers?: ReadonlyArray<Layer>;
    width?: number;
    mapState?: MapState;
    options?: {
        showLayerName?: boolean;
    };
    disableEdit?: boolean;
    isExport?: boolean;
    onLayerVisConfigChange?: (oldLayer: Layer, newVisConfig: Partial<LayerVisConfig>) => void;
    actionIcons?: MapLegendIcons;
};
declare function MapLegendFactory(LayerLegendHeader: ReturnType<typeof LayerLegendHeaderFactory>, LayerLegendContent: ReturnType<typeof LayerLegendContentFactory>): React.FC<MapLegendProps>;
declare namespace MapLegendFactory {
    var deps: (typeof LayerLegendContentFactory | typeof LayerLegendHeaderFactory)[];
}
export default MapLegendFactory;
