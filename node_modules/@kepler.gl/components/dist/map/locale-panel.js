"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _toolbarItem = _interopRequireDefault(require("../common/toolbar-item"));
var _styledComponents = require("../common/styled-components");
var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));
var _mapControlToolbar = _interopRequireDefault(require("./map-control-toolbar"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

LocalePanelFactory.deps = [_mapControlTooltip["default"], _mapControlToolbar["default"]];
function LocalePanelFactory(MapControlTooltip, MapControlToolbar) {
  var LocalePanel = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var availableLocales = _ref.availableLocales,
      onToggleMapControl = _ref.onToggleMapControl,
      onSetLocale = _ref.onSetLocale,
      currentLocal = _ref.locale,
      mapControls = _ref.mapControls;
    var _ref2 = mapControls.mapLocale || {},
      isActive = _ref2.active,
      show = _ref2.show;
    var onClickItem = (0, _react.useCallback)(function (locale) {
      onSetLocale(locale);
    }, [onSetLocale]);
    var onClickButton = (0, _react.useCallback)(function (e) {
      e.preventDefault();
      onToggleMapControl('mapLocale');
    }, [onToggleMapControl]);
    var getLabel = (0, _react.useCallback)(function (locale) {
      return "toolbar.".concat(locale);
    }, []);
    if (!show) {
      return null;
    }
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "locale-panel-controls",
      style: {
        position: 'relative'
      }
    }, isActive ? /*#__PURE__*/_react["default"].createElement(MapControlToolbar, {
      show: isActive
    }, availableLocales.map(function (locale) {
      return /*#__PURE__*/_react["default"].createElement(_toolbarItem["default"], {
        key: locale,
        onClick: function onClick() {
          return onClickItem(locale);
        },
        label: getLabel(locale),
        active: currentLocal === locale
      });
    })) : null, /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "locale",
      message: "tooltip.selectLocale"
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      className: (0, _classnames["default"])('map-control-button', 'locale-panel', {
        isActive: isActive
      }),
      onClick: onClickButton,
      active: isActive
    }, /*#__PURE__*/_react["default"].createElement("span", {
      className: "map-control-button__locale"
    }, currentLocal.toUpperCase()))));
  });
  LocalePanel.displayName = 'LocalePanel';
  return LocalePanel;
}
var _default = exports["default"] = LocalePanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,