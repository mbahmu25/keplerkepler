"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styledComponents = require("../common/styled-components");
var _icons = require("../common/icons");
var _mapLayerSelector = _interopRequireDefault(require("../common/map-layer-selector"));
var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));
var _mapControlPanel = _interopRequireDefault(require("./map-control-panel"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

LayerSelectorPanelFactory.deps = [_mapControlTooltip["default"], _mapControlPanel["default"]];
function LayerSelectorPanelFactory(MapControlTooltip, MapControlPanel) {
  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */
  var LayerSelectorPanel = function LayerSelectorPanel(_ref) {
    var onMapToggleLayer = _ref.onMapToggleLayer,
      onToggleMapControl = _ref.onToggleMapControl,
      layers = _ref.layers,
      layersToRender = _ref.layersToRender,
      isSplit = _ref.isSplit,
      mapControls = _ref.mapControls,
      readOnly = _ref.readOnly;
    var visibleLayers = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.visibleLayers) || {};
    var _ref2 = visibleLayers || {},
      isActive = _ref2.active,
      show = _ref2.show,
      disableClose = _ref2.disableClose;
    var legendLayers = (0, _react.useMemo)(function () {
      return layers.filter(function (_ref3) {
        var config = _ref3.config;
        return config.isVisible;
      }).map(function (_ref4) {
        var id = _ref4.id,
          config = _ref4.config;
        return {
          id: id,
          name: config.label,
          // layer
          isVisible: layersToRender[id]
        };
      });
    }, [layers, layersToRender]);
    var isVisible = (0, _react.useMemo)(function () {
      return isSplit && show && readOnly !== true;
    }, [isSplit, show, readOnly]);
    var onToggleMenuPanel = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onToggleMapControl('visibleLayers');
    }, [onToggleMapControl]);
    return isVisible ? !isActive ? /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      key: 1,
      onClick: onToggleMenuPanel,
      className: (0, _classnames["default"])('map-control-button', 'toggle-layer', {
        isActive: isActive
      }),
      "data-tip": true,
      "data-for": "toggle-layer"
    }, /*#__PURE__*/_react["default"].createElement(_icons.Layers, {
      height: "22px"
    }), /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "toggle-layer",
      message: isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'
    })) : /*#__PURE__*/_react["default"].createElement(MapControlPanel, {
      header: "header.visibleLayers",
      onClick: onToggleMenuPanel,
      disableClose: disableClose
    }, /*#__PURE__*/_react["default"].createElement(_mapLayerSelector["default"], {
      layers: legendLayers,
      onMapToggleLayer: onMapToggleLayer
    })) : null;
  };
  LayerSelectorPanel.displayName = 'LayerSelectorPanel';
  return /*#__PURE__*/_react["default"].memo(LayerSelectorPanel);
}
var _default = exports["default"] = LayerSelectorPanelFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,