"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _icons = require("../common/icons");
var _styledComponents = require("../common/styled-components");
var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

Toggle3dButtonFactory.deps = [_mapControlTooltip["default"]];
function Toggle3dButtonFactory(MapControlTooltip) {
  var defaultActionIcons = {
    cube: _icons.Cube3d
  };
  /** @type {import('./toggle-3d-button').Toggle3dButtonComponent} */
  var Toggle3dButton = function Toggle3dButton(_ref) {
    var dragRotate = _ref.dragRotate,
      onTogglePerspective = _ref.onTogglePerspective,
      _ref$actionIcons = _ref.actionIcons,
      actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons,
      mapControls = _ref.mapControls;
    var onClick = (0, _react.useCallback)(function (event) {
      event.preventDefault();
      onTogglePerspective();
    }, [onTogglePerspective]);
    var isVisible = (0, _react.useMemo)(function () {
      return ((mapControls === null || mapControls === void 0 ? void 0 : mapControls.toggle3d) || {}).show;
    }, [mapControls]);
    return isVisible ? /*#__PURE__*/_react["default"].createElement(MapControlTooltip, {
      id: "action-3d",
      message: dragRotate ? 'tooltip.disable3DMap' : 'tooltip.3DMap'
    }, /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      onClick: onClick,
      active: dragRotate,
      className: (0, _classnames["default"])('map-control-button', 'toggle-3d', {
        map3d: dragRotate
      })
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.cube, {
      height: "22px"
    }))) : null;
  };
  Toggle3dButton.displayName = 'Toggle3dButton';
  return /*#__PURE__*/_react["default"].memo(Toggle3dButton);
}
var _default = exports["default"] = Toggle3dButtonFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY2xhc3NuYW1lcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaWNvbnMiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9tYXBDb250cm9sVG9vbHRpcCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlRvZ2dsZTNkQnV0dG9uRmFjdG9yeSIsImRlcHMiLCJNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkiLCJNYXBDb250cm9sVG9vbHRpcCIsImRlZmF1bHRBY3Rpb25JY29ucyIsImN1YmUiLCJDdWJlM2QiLCJUb2dnbGUzZEJ1dHRvbiIsIl9yZWYiLCJkcmFnUm90YXRlIiwib25Ub2dnbGVQZXJzcGVjdGl2ZSIsIl9yZWYkYWN0aW9uSWNvbnMiLCJhY3Rpb25JY29ucyIsIm1hcENvbnRyb2xzIiwib25DbGljayIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImlzVmlzaWJsZSIsInVzZU1lbW8iLCJ0b2dnbGUzZCIsInNob3ciLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJtZXNzYWdlIiwiTWFwQ29udHJvbEJ1dHRvbiIsImFjdGl2ZSIsImNsYXNzTmFtZSIsImNsYXNzbmFtZXMiLCJtYXAzZCIsImhlaWdodCIsImRpc3BsYXlOYW1lIiwiUmVhY3QiLCJtZW1vIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcC90b2dnbGUtM2QtYnV0dG9uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnRUeXBlLCB1c2VDYWxsYmFjaywgdXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQge0N1YmUzZH0gZnJvbSAnLi4vY29tbW9uL2ljb25zJztcbmltcG9ydCB7TWFwQ29udHJvbEJ1dHRvbn0gZnJvbSAnLi4vY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBNYXBDb250cm9sVG9vbHRpcEZhY3RvcnkgZnJvbSAnLi9tYXAtY29udHJvbC10b29sdGlwJztcbmltcG9ydCB7TWFwQ29udHJvbHN9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5Ub2dnbGUzZEJ1dHRvbkZhY3RvcnkuZGVwcyA9IFtNYXBDb250cm9sVG9vbHRpcEZhY3RvcnldO1xuXG5pbnRlcmZhY2UgVG9nZ2xlM2RCdXR0b25JY29ucyB7XG4gIGN1YmU6IENvbXBvbmVudFR5cGU8YW55Pjtcbn1cblxuZXhwb3J0IHR5cGUgVG9nZ2xlM2RCdXR0b25Qcm9wcyA9IHtcbiAgZHJhZ1JvdGF0ZTogYm9vbGVhbjtcbiAgb25Ub2dnbGVQZXJzcGVjdGl2ZTogKCkgPT4gdm9pZDtcbiAgYWN0aW9uSWNvbnM6IFRvZ2dsZTNkQnV0dG9uSWNvbnM7XG4gIG1hcENvbnRyb2xzOiBNYXBDb250cm9scztcbn07XG5cbmZ1bmN0aW9uIFRvZ2dsZTNkQnV0dG9uRmFjdG9yeShNYXBDb250cm9sVG9vbHRpcCkge1xuICBjb25zdCBkZWZhdWx0QWN0aW9uSWNvbnMgPSB7XG4gICAgY3ViZTogQ3ViZTNkXG4gIH07XG4gIC8qKiBAdHlwZSB7aW1wb3J0KCcuL3RvZ2dsZS0zZC1idXR0b24nKS5Ub2dnbGUzZEJ1dHRvbkNvbXBvbmVudH0gKi9cbiAgY29uc3QgVG9nZ2xlM2RCdXR0b246IFJlYWN0LkZDPFRvZ2dsZTNkQnV0dG9uUHJvcHM+ID0gKHtcbiAgICBkcmFnUm90YXRlLFxuICAgIG9uVG9nZ2xlUGVyc3BlY3RpdmUsXG4gICAgYWN0aW9uSWNvbnMgPSBkZWZhdWx0QWN0aW9uSWNvbnMsXG4gICAgbWFwQ29udHJvbHNcbiAgfSkgPT4ge1xuICAgIGNvbnN0IG9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub2dnbGVQZXJzcGVjdGl2ZSgpO1xuICAgICAgfSxcbiAgICAgIFtvblRvZ2dsZVBlcnNwZWN0aXZlXVxuICAgICk7XG5cbiAgICBjb25zdCBpc1Zpc2libGUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgIHJldHVybiAobWFwQ29udHJvbHM/LnRvZ2dsZTNkIHx8IHt9KS5zaG93O1xuICAgIH0sIFttYXBDb250cm9sc10pO1xuXG4gICAgcmV0dXJuIGlzVmlzaWJsZSA/IChcbiAgICAgIDxNYXBDb250cm9sVG9vbHRpcFxuICAgICAgICBpZD1cImFjdGlvbi0zZFwiXG4gICAgICAgIG1lc3NhZ2U9e2RyYWdSb3RhdGUgPyAndG9vbHRpcC5kaXNhYmxlM0RNYXAnIDogJ3Rvb2x0aXAuM0RNYXAnfVxuICAgICAgPlxuICAgICAgICA8TWFwQ29udHJvbEJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICAgICAgYWN0aXZlPXtkcmFnUm90YXRlfVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnbWFwLWNvbnRyb2wtYnV0dG9uJywgJ3RvZ2dsZS0zZCcsIHttYXAzZDogZHJhZ1JvdGF0ZX0pfVxuICAgICAgICA+XG4gICAgICAgICAgPGFjdGlvbkljb25zLmN1YmUgaGVpZ2h0PVwiMjJweFwiIC8+XG4gICAgICAgIDwvTWFwQ29udHJvbEJ1dHRvbj5cbiAgICAgIDwvTWFwQ29udHJvbFRvb2x0aXA+XG4gICAgKSA6IG51bGw7XG4gIH07XG5cbiAgVG9nZ2xlM2RCdXR0b24uZGlzcGxheU5hbWUgPSAnVG9nZ2xlM2RCdXR0b24nO1xuICByZXR1cm4gUmVhY3QubWVtbyhUb2dnbGUzZEJ1dHRvbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZTNkQnV0dG9uRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxpQkFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssa0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUYsT0FBQTtBQUE2RCxTQUFBTSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQVIsd0JBQUFRLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSxnQkFBQUssT0FBQSxDQUFBTCxDQUFBLDBCQUFBQSxDQUFBLHNCQUFBQSxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFB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