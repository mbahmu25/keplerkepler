"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = void 0;
var _reactRedux = require("react-redux");
var _withLocalSelector = _interopRequireDefault(require("./with-local-selector"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// eslint-disable-next-line @typescript-eslint/no-unused-vars
var defaultMapStateToProps = function defaultMapStateToProps(state, _, __) {
  return state;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var defaultMapDispatchToProps = function defaultMapDispatchToProps() {
  return function (dispatch, _, __) {
    return {
      dispatch: dispatch
    };
  };
};
var connect = exports.connect = function connect() {
  var mapStateToProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultMapStateToProps;
  var makeMapDispatchToProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMapDispatchToProps;
  var reduxMergeProps = arguments.length > 2 ? arguments[2] : undefined;
  var options = arguments.length > 3 ? arguments[3] : undefined;
  return function (BaseComponent) {
    var mapDispatchToProps = makeMapDispatchToProps();
    var reduxMapState = function reduxMapState(state, props) {
      return mapStateToProps(props.selector(state), props, state);
    };
    var reduxMapDispatch = function reduxMapDispatch(dispatch, props) {
      return mapDispatchToProps(props.dispatch, props, dispatch);
    };
    var ReduxComponent = (0, _reactRedux.connect)(reduxMapState, reduxMapDispatch, reduxMergeProps, options)(BaseComponent);

    // save selector to context so it can be accessed by its children
    return (0, _withLocalSelector["default"])(ReduxComponent);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3RSZWR1eCIsInJlcXVpcmUiLCJfd2l0aExvY2FsU2VsZWN0b3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsInN0YXRlIiwiXyIsIl9fIiwiZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyIsImRpc3BhdGNoIiwiY29ubmVjdCIsImV4cG9ydHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYWtlTWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXhNZXJnZVByb3BzIiwib3B0aW9ucyIsIkJhc2VDb21wb25lbnQiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJyZWR1eE1hcFN0YXRlIiwicHJvcHMiLCJzZWxlY3RvciIsInJlZHV4TWFwRGlzcGF0Y2giLCJSZWR1eENvbXBvbmVudCIsInJlZHV4Q29ubmVjdCIsIndpdGhMb2NhbFNlbGVjdG9yIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Nvbm5lY3Qva2VwbGVyZ2wtY29ubmVjdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge0pTWEVsZW1lbnRDb25zdHJ1Y3Rvcn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjb25uZWN0IGFzIHJlZHV4Q29ubmVjdCwgR2V0UHJvcHMsIE1hdGNoaW5nfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgd2l0aExvY2FsU2VsZWN0b3IgZnJvbSAnLi93aXRoLWxvY2FsLXNlbGVjdG9yJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuY29uc3QgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgXywgX18pID0+IHN0YXRlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuY29uc3QgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyA9ICgpID0+IChkaXNwYXRjaCwgXywgX18pID0+ICh7ZGlzcGF0Y2h9KTtcblxuZXhwb3J0IGNvbnN0IGNvbm5lY3QgPVxuICA8VCBleHRlbmRzIEpTWEVsZW1lbnRDb25zdHJ1Y3RvcjxNYXRjaGluZzxhbnksIEdldFByb3BzPFQ+Pj4+KFxuICAgIG1hcFN0YXRlVG9Qcm9wcyA9IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgbWFrZU1hcERpc3BhdGNoVG9Qcm9wcyA9IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgcmVkdXhNZXJnZVByb3BzPyxcbiAgICBvcHRpb25zP1xuICApID0+XG4gIChCYXNlQ29tcG9uZW50OiBUKSA9PiB7XG4gICAgY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gbWFrZU1hcERpc3BhdGNoVG9Qcm9wcygpO1xuICAgIGNvbnN0IHJlZHV4TWFwU3RhdGUgPSAoc3RhdGUsIHByb3BzKSA9PiBtYXBTdGF0ZVRvUHJvcHMocHJvcHMuc2VsZWN0b3Ioc3RhdGUpLCBwcm9wcywgc3RhdGUpO1xuXG4gICAgY29uc3QgcmVkdXhNYXBEaXNwYXRjaCA9IChkaXNwYXRjaCwgcHJvcHMpID0+XG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHMocHJvcHMuZGlzcGF0Y2gsIHByb3BzLCBkaXNwYXRjaCk7XG5cbiAgICBjb25zdCBSZWR1eENvbXBvbmVudCA9IHJlZHV4Q29ubmVjdChcbiAgICAgIHJlZHV4TWFwU3RhdGUsXG4gICAgICByZWR1eE1hcERpc3BhdGNoLFxuICAgICAgcmVkdXhNZXJnZVByb3BzLFxuICAgICAgb3B0aW9uc1xuICAgICkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICAvLyBzYXZlIHNlbGVjdG9yIHRvIGNvbnRleHQgc28gaXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IGl0cyBjaGlsZHJlblxuICAgIHJldHVybiB3aXRoTG9jYWxTZWxlY3RvcihSZWR1eENvbXBvbmVudCk7XG4gIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQSxJQUFBQSxXQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxrQkFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBTEE7QUFDQTs7QUFNQTtBQUNBLElBQU1HLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBc0JBLENBQUlDLEtBQUssRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0VBQUEsT0FBS0YsS0FBSztBQUFBO0FBQ3REO0FBQ0EsSUFBTUcseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUF5QkEsQ0FBQTtFQUFBLE9BQVMsVUFBQ0MsUUFBUSxFQUFFSCxDQUFDLEVBQUVDLEVBQUU7SUFBQSxPQUFNO01BQUNFLFFBQVEsRUFBUkE7SUFBUSxDQUFDO0VBQUEsQ0FBQztBQUFBO0FBRWxFLElBQU1DLE9BQU8sR0FBQUMsT0FBQSxDQUFBRCxPQUFBLEdBQ2xCLFNBRFdBLE9BQU9BLENBQUE7RUFBQSxJQUVoQkUsZUFBZSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR1Qsc0JBQXNCO0VBQUEsSUFDeENZLHNCQUFzQixHQUFBSCxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR0wseUJBQXlCO0VBQUEsSUFDbERTLGVBQWdCLEdBQUFKLFNBQUEsQ0FBQUMsTUFBQSxPQUFBRCxTQUFBLE1BQUFFLFNBQUE7RUFBQSxJQUNoQkcsT0FBUSxHQUFBTCxTQUFBLENBQUFDLE1BQUEsT0FBQUQsU0FBQSxNQUFBRSxTQUFBO0VBQUEsT0FFVixVQUFDSSxhQUFnQixFQUFLO0lBQ3BCLElBQU1DLGtCQUFrQixHQUFHSixzQkFBc0IsQ0FBQyxDQUFDO0lBQ25ELElBQU1LLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBSWhCLEtBQUssRUFBRWlCLEtBQUs7TUFBQSxPQUFLVixlQUFlLENBQUNVLEtBQUssQ0FBQ0MsUUFBUSxDQUFDbEIsS0FBSyxDQUFDLEVBQUVpQixLQUFLLEVBQUVqQixLQUFLLENBQUM7SUFBQTtJQUU1RixJQUFNbUIsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFnQkEsQ0FBSWYsUUFBUSxFQUFFYSxLQUFLO01BQUEsT0FDdkNGLGtCQUFrQixDQUFDRSxLQUFLLENBQUNiLFFBQVEsRUFBRWEsS0FBSyxFQUFFYixRQUFRLENBQUM7SUFBQTtJQUVyRCxJQUFNZ0IsY0FBYyxHQUFHLElBQUFDLG1CQUFZLEVBQ2pDTCxhQUFhLEVBQ2JHLGdCQUFnQixFQUNoQlAsZUFBZSxFQUNmQyxPQUNGLENBQUMsQ0FBQ0MsYUFBYSxDQUFDOztJQUVoQjtJQUNBLE9BQU8sSUFBQVEsNkJBQWlCLEVBQUNGLGNBQWMsQ0FBQztFQUMxQyxDQUFDO0FBQUEiLCJpZ25vcmVMaXN0IjpbXX0=