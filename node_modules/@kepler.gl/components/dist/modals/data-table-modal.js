"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DatasetTabs = exports.DatasetModalTab = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _datasetLabel = _interopRequireDefault(require("../common/dataset-label"));
var _dataTable = _interopRequireDefault(require("../common/data-table"));
var _reselect = require("reselect");
var _cellSize = require("../common/data-table/cell-size");
var _canvas = _interopRequireDefault(require("../common/data-table/canvas"));
var _icons = require("../common/icons");
var _portaled = _interopRequireDefault(require("../common/portaled"));
var _displayFormat = _interopRequireDefault(require("../common/data-table/display-format"));
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var MIN_STATS_CELL_SIZE = 122;
var DEFAULT_SORT_COLUMN = {};

// sidePadding changes from 38 to 68, 30px for configuration button
var dgSettings = {
  sidePadding: '68px',
  verticalPadding: '16px',
  height: '36px'
};
var StyledModal = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  min-height: 85vh;\n  overflow: hidden;\n  display: flex;\n"])));
var DatasetCatalog = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  padding: ", " ", " 0 0;\n\n  .overflow-horizontal {\n    display: flex;\n    overflow-x: auto;\n    overflow-y: hidden;\n    flex-direction: row;\n    ", "\n  }\n"])), dgSettings.verticalPadding, dgSettings.sidePadding, function (props) {
  return props.theme.modalScrollBar;
});
var DatasetModalTab = exports.DatasetModalTab = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: center;\n  border-bottom: 3px solid ", ";\n  cursor: pointer;\n  display: flex;\n  height: 35px;\n  margin: 0 3px;\n  padding: 0 5px;\n\n  &:hover {\n    border-bottom: 3px solid black;\n  }\n"])), function (props) {
  return props.active ? 'black' : 'transparent';
});
var StyledConfigureButton = _styledComponents["default"].div(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: flex-end;\n  position: absolute;\n  top: 24px;\n  right: 48px;\n  svg {\n    stroke: black;\n  }\n  cursor: pointer;\n"])));
var DatasetTabsUnmemoized = function DatasetTabsUnmemoized(_ref) {
  var activeDataset = _ref.activeDataset,
    datasets = _ref.datasets,
    showDatasetTable = _ref.showDatasetTable;
  return /*#__PURE__*/_react["default"].createElement(DatasetCatalog, {
    className: "dataset-modal-catalog"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "overflow-horizontal"
  }, Object.values(datasets).map(function (dataset) {
    return /*#__PURE__*/_react["default"].createElement(DatasetModalTab, {
      className: "dataset-modal-tab",
      active: dataset === activeDataset,
      key: dataset.id,
      onClick: function onClick() {
        return showDatasetTable(dataset.id);
      }
    }, /*#__PURE__*/_react["default"].createElement(_datasetLabel["default"], {
      dataset: dataset
    }));
  })));
};
var DatasetTabs = exports.DatasetTabs = /*#__PURE__*/_react["default"].memo(DatasetTabsUnmemoized);
DatasetTabs.displayName = 'DatasetTabs';
DataTableModalFactory.deps = [_dataTable["default"], _displayFormat["default"]];
var TableContainer = _styledComponents["default"].div(_templateObject5 || (_templateObject5 = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  min-height: 100%;\n  max-height: 100%;\n  max-width: 100%;\n"])));
function DataTableModalFactory(DataTable, DataTableConfig) {
  var DataTableModal = /*#__PURE__*/function (_React$Component) {
    function DataTableModal() {
      var _this;
      (0, _classCallCheck2["default"])(this, DataTableModal);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, DataTableModal, [].concat(args));
      (0, _defineProperty2["default"])(_this, "state", {
        showConfig: false
      });
      (0, _defineProperty2["default"])(_this, "datasetCellSizeCache", {});
      (0, _defineProperty2["default"])(_this, "dataId", function (_ref2) {
        var _ref2$dataId = _ref2.dataId,
          dataId = _ref2$dataId === void 0 ? '' : _ref2$dataId;
        return dataId;
      });
      (0, _defineProperty2["default"])(_this, "datasets", function (props) {
        return props.datasets;
      });
      (0, _defineProperty2["default"])(_this, "fields", function (_ref3) {
        var datasets = _ref3.datasets,
          _ref3$dataId = _ref3.dataId,
          dataId = _ref3$dataId === void 0 ? '' : _ref3$dataId;
        return (datasets[dataId] || {}).fields;
      });
      (0, _defineProperty2["default"])(_this, "columns", (0, _reselect.createSelector)(_this.fields, function (fields) {
        return fields.map(function (f) {
          return f.name;
        });
      }));
      (0, _defineProperty2["default"])(_this, "colMeta", (0, _reselect.createSelector)([_this.fields, _this.datasets], function (fields) {
        return fields.reduce(function (acc, _ref4) {
          var name = _ref4.name,
            displayName = _ref4.displayName,
            type = _ref4.type,
            filterProps = _ref4.filterProps,
            format = _ref4.format,
            displayFormat = _ref4.displayFormat;
          return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, name, _objectSpread(_objectSpread(_objectSpread({
            name: displayName || name,
            type: type
          }, format ? {
            format: format
          } : {}), displayFormat ? {
            displayFormat: displayFormat
          } : {}), filterProps !== null && filterProps !== void 0 && filterProps.columnStats ? {
            columnStats: filterProps.columnStats
          } : {})));
        }, {});
      }));
      (0, _defineProperty2["default"])(_this, "cellSizeCache", (0, _reselect.createSelector)(_this.dataId, _this.datasets, function (dataId, datasets) {
        if (!datasets[dataId]) {
          return {};
        }
        var _datasets$dataId = datasets[dataId],
          fields = _datasets$dataId.fields,
          dataContainer = _datasets$dataId.dataContainer;
        var showCalculate = null;
        if (!_this.datasetCellSizeCache[dataId]) {
          showCalculate = true;
        } else if (_this.datasetCellSizeCache[dataId].fields !== fields || _this.datasetCellSizeCache[dataId].dataContainer !== dataContainer) {
          showCalculate = true;
        }
        if (!showCalculate) {
          return _this.datasetCellSizeCache[dataId].cellSizeCache;
        }
        var cellSizeCache = fields.reduce(function (acc, field, colIdx) {
          return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, field.name, (0, _cellSize.renderedSize)({
            text: {
              dataContainer: dataContainer,
              column: field.displayName
            },
            colIdx: colIdx,
            type: field.type,
            fontSize: _this.props.theme.cellFontSize,
            font: _this.props.theme.fontFamily,
            minCellSize: MIN_STATS_CELL_SIZE
          })));
        }, {});
        // save it to cache
        _this.datasetCellSizeCache[dataId] = {
          cellSizeCache: cellSizeCache,
          fields: fields,
          dataContainer: dataContainer
        };
        return cellSizeCache;
      }));
      (0, _defineProperty2["default"])(_this, "copyTableColumn", function (column) {
        var _this$props = _this.props,
          _this$props$dataId = _this$props.dataId,
          dataId = _this$props$dataId === void 0 ? '' : _this$props$dataId,
          copyTableColumn = _this$props.copyTableColumn;
        copyTableColumn(dataId, column);
      });
      (0, _defineProperty2["default"])(_this, "pinTableColumn", function (column) {
        var _this$props2 = _this.props,
          _this$props2$dataId = _this$props2.dataId,
          dataId = _this$props2$dataId === void 0 ? '' : _this$props2$dataId,
          pinTableColumn = _this$props2.pinTableColumn;
        pinTableColumn(dataId, column);
      });
      (0, _defineProperty2["default"])(_this, "sortTableColumn", function (column, mode) {
        var _this$props3 = _this.props,
          _this$props3$dataId = _this$props3.dataId,
          dataId = _this$props3$dataId === void 0 ? '' : _this$props3$dataId,
          sortTableColumn = _this$props3.sortTableColumn;
        sortTableColumn(dataId, column, mode);
      });
      (0, _defineProperty2["default"])(_this, "setColumnDisplayFormat", function (formats) {
        var _this$props4 = _this.props,
          dataId = _this$props4.dataId,
          setColumnDisplayFormat = _this$props4.setColumnDisplayFormat;
        if (dataId) setColumnDisplayFormat(dataId, formats);
      });
      (0, _defineProperty2["default"])(_this, "onOpenConfig", function () {
        _this.setState({
          showConfig: true
        });
      });
      (0, _defineProperty2["default"])(_this, "onCloseConfig", function () {
        _this.setState({
          showConfig: false
        });
      });
      return _this;
    }
    (0, _inherits2["default"])(DataTableModal, _React$Component);
    return (0, _createClass2["default"])(DataTableModal, [{
      key: "render",
      value: function render() {
        var _this$props5 = this.props,
          datasets = _this$props5.datasets,
          dataId = _this$props5.dataId,
          showDatasetTable = _this$props5.showDatasetTable,
          _this$props5$showTab = _this$props5.showTab,
          showTab = _this$props5$showTab === void 0 ? true : _this$props5$showTab;
        if (!datasets || !dataId) {
          return null;
        }
        var activeDataset = datasets[dataId];
        var columns = this.columns(this.props);
        var colMeta = this.colMeta(this.props);
        var cellSizeCache = this.cellSizeCache(this.props);
        return /*#__PURE__*/_react["default"].createElement(StyledModal, {
          className: "dataset-modal",
          id: "dataset-modal"
        }, /*#__PURE__*/_react["default"].createElement(_canvas["default"], null), /*#__PURE__*/_react["default"].createElement(TableContainer, null, showTab ? /*#__PURE__*/_react["default"].createElement(DatasetTabs, {
          activeDataset: activeDataset,
          datasets: datasets,
          showDatasetTable: showDatasetTable
        }) : null, /*#__PURE__*/_react["default"].createElement(StyledConfigureButton, {
          className: "display-config-button"
        }, /*#__PURE__*/_react["default"].createElement(_icons.Gear, {
          onClick: this.onOpenConfig
        }), /*#__PURE__*/_react["default"].createElement(_portaled["default"], {
          right: 240,
          top: 20,
          isOpened: this.state.showConfig,
          onClose: this.onCloseConfig
        }, /*#__PURE__*/_react["default"].createElement(DataTableConfig, {
          columns: columns,
          colMeta: colMeta,
          setColumnDisplayFormat: this.setColumnDisplayFormat,
          onClose: this.onCloseConfig
        }))), datasets[dataId] ? /*#__PURE__*/_react["default"].createElement(DataTable, {
          key: dataId,
          dataId: dataId,
          columns: columns,
          colMeta: colMeta,
          cellSizeCache: cellSizeCache,
          dataContainer: activeDataset.dataContainer,
          pinnedColumns: activeDataset.pinnedColumns,
          sortOrder: activeDataset.sortOrder,
          sortColumn: activeDataset.sortColumn || DEFAULT_SORT_COLUMN,
          copyTableColumn: this.copyTableColumn,
          pinTableColumn: this.pinTableColumn,
          sortTableColumn: this.sortTableColumn,
          setColumnDisplayFormat: this.setColumnDisplayFormat,
          hasStats: false
        }) : null));
      }
    }]);
  }(_react["default"].Component); // @ts-expect-error figure out the proper way to type
  return (0, _styledComponents.withTheme)(DataTableModal);
}
var _default = exports["default"] = DataTableModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,