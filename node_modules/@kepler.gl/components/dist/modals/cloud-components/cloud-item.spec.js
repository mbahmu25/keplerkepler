"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _componentJestUtils = require("../../../../../test/helpers/component-jest-utils");
var _cloudItem = require("./cloud-item");
var _moment = _interopRequireDefault(require("moment"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// @ts-nocheck
var nop = function nop() {
  return;
};
describe('CloudItem', function () {
  var mockVis = {
    title: 'Test Title',
    description: 'Test Description',
    lastModification: new Date().toISOString(),
    thumbnail: 'test-thumbnail.jpg',
    privateMap: true
  };
  it('renders without crashing', function () {
    var _renderWithTheme = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: mockVis,
        onClick: nop
      })),
      getByText = _renderWithTheme.getByText;
    expect(getByText('Test Title')).toBeInTheDocument();
  });
  it('renders PrivacyBadge for private maps', function () {
    var _renderWithTheme2 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: _objectSpread(_objectSpread({}, mockVis), {}, {
          privateMap: true
        }),
        onClick: nop
      })),
      getByText = _renderWithTheme2.getByText;
    expect(getByText('Private')).toBeInTheDocument();
  });
  it('does not render PrivacyBadge for public maps', function () {
    var _renderWithTheme3 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: _objectSpread(_objectSpread({}, mockVis), {}, {
          privateMap: false
        }),
        onClick: nop
      })),
      queryByText = _renderWithTheme3.queryByText;
    expect(queryByText('Private')).toBeNull();
  });
  it('displays correct thumbnail image', function () {
    var _renderWithTheme4 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: mockVis,
        onClick: nop
      })),
      getByRole = _renderWithTheme4.getByRole;
    expect(getByRole('thumbnail-wrapper').style.backgroundImage).toContain('test-thumbnail.jpg');
  });
  it('displays MapIcon when no thumbnail is provided', function () {
    var _renderWithTheme5 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: _objectSpread(_objectSpread({}, mockVis), {}, {
          thumbnail: null
        }),
        onClick: nop
      })),
      getByRole = _renderWithTheme5.getByRole;
    expect(getByRole('map-icon')).toBeInTheDocument();
  });
  it('displays title, description, and last modification date', function () {
    var _renderWithTheme6 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: mockVis,
        onClick: nop
      })),
      getByText = _renderWithTheme6.getByText;
    expect(getByText('Test Title')).toBeInTheDocument();
    expect(getByText('Test Description')).toBeInTheDocument();
    expect(getByText("Last modified ".concat(_moment["default"].utc(mockVis.lastModification).fromNow()))).toBeInTheDocument();
  });
  it('calls onClick when component is clicked', function () {
    var onClickMock = jest.fn();
    var _renderWithTheme7 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudItem.CloudItem, {
        vis: mockVis,
        onClick: onClickMock
      })),
      getByText = _renderWithTheme7.getByText;
    _react2.fireEvent.click(getByText('Test Title'));
    expect(onClickMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,