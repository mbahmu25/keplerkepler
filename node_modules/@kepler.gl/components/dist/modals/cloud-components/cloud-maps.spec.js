"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _componentJestUtils = require("../../../../../test/helpers/component-jest-utils");
var _cloudMaps = require("./cloud-maps");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// @ts-nocheck

describe('CloudMaps Component', function () {
  it('renderWithThemes without crashing', function () {
    var _renderWithTheme = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
        isLoading: false,
        maps: [],
        error: null
      })),
      getByText = _renderWithTheme.getByText;
    expect(getByText(/noSavedMaps/i)).toBeInTheDocument();
  });
  it('displays error message when there is an error', function () {
    var errorMessage = 'Test Error';
    var _renderWithTheme2 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
        isLoading: false,
        maps: [],
        error: {
          message: errorMessage
        }
      })),
      getByText = _renderWithTheme2.getByText;
    expect(getByText("Error while fetching maps: ".concat(errorMessage))).toBeInTheDocument();
  });
  it('displays loading spinner when isLoading is true', function () {
    var _renderWithTheme3 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
        isLoading: true,
        maps: [],
        error: null
      })),
      getByText = _renderWithTheme3.getByText;
    expect(getByText('modal.loadingDialog.loading')).toBeInTheDocument(); // Ensure your spinner has 'data-testid="loading-spinner"'
  });
  it('renderWithThemes correct number of CloudItems based on maps prop', function () {
    var mockMaps = [{
      id: 1,
      title: 'map'
    }, {
      id: 2,
      title: 'map'
    }, {
      id: 3,
      title: 'map'
    }];
    var _renderWithTheme4 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
        isLoading: false,
        maps: mockMaps,
        error: null
      })),
      getAllByText = _renderWithTheme4.getAllByText;
    expect(getAllByText('map')).toHaveLength(mockMaps.length); // Ensure your CloudItem has 'data-testid="cloud-item"'
  });
  it('displays message when there are no maps', function () {
    var _renderWithTheme5 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
        isLoading: false,
        maps: [],
        error: null
      })),
      getByText = _renderWithTheme5.getByText;
    expect(getByText(/noSavedMaps/i)).toBeInTheDocument();
  });
  it('calls onSelectMap when a CloudItem is clicked', function () {
    var mockMaps = [{
      id: 1,
      title: 'map'
    }, {
      id: 2,
      title: 'map'
    }, {
      id: 3,
      title: 'map'
    }];
    var onSelectMap = jest.fn();
    var provider = 'testProvider';
    var _renderWithTheme6 = (0, _componentJestUtils.renderWithTheme)( /*#__PURE__*/_react["default"].createElement(_cloudMaps.CloudMaps, {
        provider: provider,
        onSelectMap: onSelectMap,
        isLoading: false,
        maps: mockMaps,
        error: null
      })),
      getAllByText = _renderWithTheme6.getAllByText;
    var firstItem = getAllByText('map')[0];
    _react2.fireEvent.click(firstItem);
    expect(onSelectMap).toHaveBeenCalledWith(provider, mockMaps[0]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJfY29tcG9uZW50SmVzdFV0aWxzIiwiX2Nsb3VkTWFwcyIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyV2l0aFRoZW1lIiwicmVuZGVyV2l0aFRoZW1lIiwiY3JlYXRlRWxlbWVudCIsIkNsb3VkTWFwcyIsImlzTG9hZGluZyIsIm1hcHMiLCJlcnJvciIsImdldEJ5VGV4dCIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwiZXJyb3JNZXNzYWdlIiwiX3JlbmRlcldpdGhUaGVtZTIiLCJtZXNzYWdlIiwiY29uY2F0IiwiX3JlbmRlcldpdGhUaGVtZTMiLCJtb2NrTWFwcyIsImlkIiwidGl0bGUiLCJfcmVuZGVyV2l0aFRoZW1lNCIsImdldEFsbEJ5VGV4dCIsInRvSGF2ZUxlbmd0aCIsImxlbmd0aCIsIl9yZW5kZXJXaXRoVGhlbWU1Iiwib25TZWxlY3RNYXAiLCJqZXN0IiwiZm4iLCJwcm92aWRlciIsIl9yZW5kZXJXaXRoVGhlbWU2IiwiZmlyc3RJdGVtIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RhbHMvY2xvdWQtY29tcG9uZW50cy9jbG91ZC1tYXBzLnNwZWMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbi8vIEB0cy1ub2NoZWNrXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHtyZW5kZXJXaXRoVGhlbWV9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3Rlc3QvaGVscGVycy9jb21wb25lbnQtamVzdC11dGlscyc7XG5pbXBvcnQge0Nsb3VkTWFwc30gZnJvbSAnLi9jbG91ZC1tYXBzJztcblxuZGVzY3JpYmUoJ0Nsb3VkTWFwcyBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJXaXRoVGhlbWVzIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXJXaXRoVGhlbWUoPENsb3VkTWFwcyBpc0xvYWRpbmc9e2ZhbHNlfSBtYXBzPXtbXX0gZXJyb3I9e251bGx9IC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KC9ub1NhdmVkTWFwcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIGVycm9yIG1lc3NhZ2Ugd2hlbiB0aGVyZSBpcyBhbiBlcnJvcicsICgpID0+IHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnVGVzdCBFcnJvcic7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXJXaXRoVGhlbWUoXG4gICAgICA8Q2xvdWRNYXBzIGlzTG9hZGluZz17ZmFsc2V9IG1hcHM9e1tdfSBlcnJvcj17e21lc3NhZ2U6IGVycm9yTWVzc2FnZX19IC8+XG4gICAgKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KGBFcnJvciB3aGlsZSBmZXRjaGluZyBtYXBzOiAke2Vycm9yTWVzc2FnZX1gKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIGxvYWRpbmcgc3Bpbm5lciB3aGVuIGlzTG9hZGluZyBpcyB0cnVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKDxDbG91ZE1hcHMgaXNMb2FkaW5nPXt0cnVlfSBtYXBzPXtbXX0gZXJyb3I9e251bGx9IC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdtb2RhbC5sb2FkaW5nRGlhbG9nLmxvYWRpbmcnKSkudG9CZUluVGhlRG9jdW1lbnQoKTsgLy8gRW5zdXJlIHlvdXIgc3Bpbm5lciBoYXMgJ2RhdGEtdGVzdGlkPVwibG9hZGluZy1zcGlubmVyXCInXG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJXaXRoVGhlbWVzIGNvcnJlY3QgbnVtYmVyIG9mIENsb3VkSXRlbXMgYmFzZWQgb24gbWFwcyBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tNYXBzID0gW1xuICAgICAge2lkOiAxLCB0aXRsZTogJ21hcCd9LFxuICAgICAge2lkOiAyLCB0aXRsZTogJ21hcCd9LFxuICAgICAge2lkOiAzLCB0aXRsZTogJ21hcCd9XG4gICAgXTtcbiAgICBjb25zdCB7Z2V0QWxsQnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZShcbiAgICAgIDxDbG91ZE1hcHMgaXNMb2FkaW5nPXtmYWxzZX0gbWFwcz17bW9ja01hcHN9IGVycm9yPXtudWxsfSAvPlxuICAgICk7XG4gICAgZXhwZWN0KGdldEFsbEJ5VGV4dCgnbWFwJykpLnRvSGF2ZUxlbmd0aChtb2NrTWFwcy5sZW5ndGgpOyAvLyBFbnN1cmUgeW91ciBDbG91ZEl0ZW0gaGFzICdkYXRhLXRlc3RpZD1cImNsb3VkLWl0ZW1cIidcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIG1lc3NhZ2Ugd2hlbiB0aGVyZSBhcmUgbm8gbWFwcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcldpdGhUaGVtZSg8Q2xvdWRNYXBzIGlzTG9hZGluZz17ZmFsc2V9IG1hcHM9e1tdfSBlcnJvcj17bnVsbH0gLz4pO1xuICAgIGV4cGVjdChnZXRCeVRleHQoL25vU2F2ZWRNYXBzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgb25TZWxlY3RNYXAgd2hlbiBhIENsb3VkSXRlbSBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tNYXBzID0gW1xuICAgICAge2lkOiAxLCB0aXRsZTogJ21hcCd9LFxuICAgICAge2lkOiAyLCB0aXRsZTogJ21hcCd9LFxuICAgICAge2lkOiAzLCB0aXRsZTogJ21hcCd9XG4gICAgXTtcbiAgICBjb25zdCBvblNlbGVjdE1hcCA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBwcm92aWRlciA9ICd0ZXN0UHJvdmlkZXInO1xuICAgIGNvbnN0IHtnZXRBbGxCeVRleHR9ID0gcmVuZGVyV2l0aFRoZW1lKFxuICAgICAgPENsb3VkTWFwc1xuICAgICAgICBwcm92aWRlcj17cHJvdmlkZXJ9XG4gICAgICAgIG9uU2VsZWN0TWFwPXtvblNlbGVjdE1hcH1cbiAgICAgICAgaXNMb2FkaW5nPXtmYWxzZX1cbiAgICAgICAgbWFwcz17bW9ja01hcHN9XG4gICAgICAgIGVycm9yPXtudWxsfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgY29uc3QgZmlyc3RJdGVtID0gZ2V0QWxsQnlUZXh0KCdtYXAnKVswXTtcbiAgICBmaXJlRXZlbnQuY2xpY2soZmlyc3RJdGVtKTtcbiAgICBleHBlY3Qob25TZWxlY3RNYXApLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHByb3ZpZGVyLCBtb2NrTWFwc1swXSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUlBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFILE9BQUE7QUFQQTtBQUNBOztBQUVBOztBQU1BSSxRQUFRLENBQUMscUJBQXFCLEVBQUUsWUFBTTtFQUNwQ0MsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUMsSUFBQUMsZ0JBQUEsR0FBb0IsSUFBQUMsbUNBQWUsZ0JBQUNULE1BQUEsWUFBQVUsYUFBQSxDQUFDTCxVQUFBLENBQUFNLFNBQVM7UUFBQ0MsU0FBUyxFQUFFLEtBQU07UUFBQ0MsSUFBSSxFQUFFLEVBQUc7UUFBQ0MsS0FBSyxFQUFFO01BQUssQ0FBRSxDQUFDLENBQUM7TUFBcEZDLFNBQVMsR0FBQVAsZ0JBQUEsQ0FBVE8sU0FBUztJQUNoQkMsTUFBTSxDQUFD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