"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _errorBoundary = _interopRequireDefault(require("../common/error-boundary"));
var _notificationItem = _interopRequireDefault(require("../notification-panel/notification-item"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var NotificationItem = (0, _notificationItem["default"])();
var ErrorDisplay = function ErrorDisplay(_ref) {
  var error = _ref.error;
  var notification = (0, _react.useMemo)(function () {
    return {
      type: 'error',
      message: error,
      id: 'cloud-export-error'
    };
  }, [error]);
  return /*#__PURE__*/_react["default"].createElement(_errorBoundary["default"], null, /*#__PURE__*/_react["default"].createElement(NotificationItem, {
    notification: notification,
    isExpanded: true
  }));
};
var _default = exports["default"] = ErrorDisplay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZXJyb3JCb3VuZGFyeSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbm90aWZpY2F0aW9uSXRlbSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIk5vdGlmaWNhdGlvbkl0ZW0iLCJOb3RpZmljYXRpb25JdGVtRmFjdG9yeSIsIkVycm9yRGlzcGxheSIsIl9yZWYiLCJlcnJvciIsIm5vdGlmaWNhdGlvbiIsInVzZU1lbW8iLCJ0eXBlIiwibWVzc2FnZSIsImlkIiwiY3JlYXRlRWxlbWVudCIsImlzRXhwYW5kZWQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kYWxzL2Vycm9yLWRpc3BsYXkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFcnJvckJvdW5kYXJ5IGZyb20gJy4uL2NvbW1vbi9lcnJvci1ib3VuZGFyeSc7XG5pbXBvcnQgTm90aWZpY2F0aW9uSXRlbUZhY3RvcnkgZnJvbSAnLi4vbm90aWZpY2F0aW9uLXBhbmVsL25vdGlmaWNhdGlvbi1pdGVtJztcbmNvbnN0IE5vdGlmaWNhdGlvbkl0ZW0gPSBOb3RpZmljYXRpb25JdGVtRmFjdG9yeSgpO1xuXG5pbnRlcmZhY2UgRXJyb3JEaXNwbGF5UHJvcHMge1xuICBlcnJvcjogc3RyaW5nO1xufVxuXG5jb25zdCBFcnJvckRpc3BsYXk6IFJlYWN0LkZDPEVycm9yRGlzcGxheVByb3BzPiA9ICh7ZXJyb3J9KSA9PiB7XG4gIGNvbnN0IG5vdGlmaWNhdGlvbiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICBtZXNzYWdlOiBlcnJvcixcbiAgICAgIGlkOiAnY2xvdWQtZXhwb3J0LWVycm9yJ1xuICAgIH0pLFxuICAgIFtlcnJvcl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxFcnJvckJvdW5kYXJ5PlxuICAgICAgPE5vdGlmaWNhdGlvbkl0ZW0gbm90aWZpY2F0aW9uPXtub3RpZmljYXRpb259IGlzRXhwYW5kZWQgLz5cbiAgICA8L0Vycm9yQm91bmRhcnk+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFcnJvckRpc3BsYXk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsY0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsaUJBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUE4RSxTQUFBSSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQU4sd0JBQUFNLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSxnQkFBQUssT0FBQSxDQUFBTCxDQUFBLDBCQUFBQSxDQUFBLHNCQUFBQSxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBLFlBQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFMOUU7QUFDQTs7QUFLQSxJQUFNVyxnQkFBZ0IsR0FBRyxJQUFBQyw0QkFBdUIsRUFBQyxDQUFDO0FBTWxELElBQU1DLFlBQXlDLEdBQUcsU0FBNUNBLFlBQXlDQSxDQUFBQyxJQUFBLEVBQWdCO0VBQUEsSUFBWEMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7RUFDdkQsSUFBTUMsWUFBWSxHQUFHLElBQUFDLGNBQU8sRUFDMUI7SUFBQSxPQUFPO01BQ0xDLElBQUksRUFBRSxPQUFPO01BQ2JDLE9BQU8sRUFBRUosS0FBSztNQUNkSyxFQUFFLEVBQUU7SUFDTixDQUFDO0VBQUEsQ0FBQyxFQUNGLENBQUNMLEtBQUssQ0FDUixDQUFDO0VBRUQsb0JBQ0U5QixNQUFBLFlBQUFvQyxhQUFBLENBQUNqQyxjQUFBLFdBQWEscUJBQ1pILE1BQUEsWUFBQW9DLGFBQUEsQ0FBQ1YsZ0JBQWdCO0lBQUNLLFlBQVksRUFBRUEsWUFBYTtJQUFDTSxVQUFVO0VBQUEsQ0FBRSxDQUM3QyxDQUFDO0FBRXBCLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsY0FFYVgsWUFBWSIsImlnbm9yZUxpc3QiOltdfQ==