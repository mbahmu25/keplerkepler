"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.OverwriteMapModal = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _styledComponents2 = require("../common/styled-components");
var _statusPanel = require("./status-panel");
var _localization = require("@kepler.gl/localization");
var _imageModalContainer = _interopRequireDefault(require("./image-modal-container"));
var _useCloudListProvider2 = require("../hooks/use-cloud-list-provider");
var _modal = require("../common/modal");
var _templateObject, _templateObject2, _templateObject3, _templateObject4; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledMsg = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 24px;\n  font-size: 14px;\n"])));
var StyledTitle = _styledComponents["default"].span(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  font-weight: 600;\n  color: black;\n"])));
var StyledIcon = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 24px;\n"])));
var StyledOverwriteMapModal = (0, _styledComponents["default"])(_styledComponents2.CenterVerticalFlexbox)(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 24px 12px;\n  min-height: 220px;\n"])));
var CONFIRM_BUTTON = {
  large: true,
  children: 'Yes',
  disabled: false
};
var OverwriteMapModalFactory = function OverwriteMapModalFactory() {
  /**
   * @type {React.FunctionComponent<OverwriteMapModalProps>}
   */
  var OverwriteMapModal = function OverwriteMapModal(_ref) {
    var mapSaved = _ref.mapSaved,
      title = _ref.title,
      isProviderLoading = _ref.isProviderLoading,
      onUpdateImageSetting = _ref.onUpdateImageSetting,
      cleanupExportImage = _ref.cleanupExportImage,
      onCancel = _ref.onCancel,
      onConfirm = _ref.onConfirm;
    var _useCloudListProvider = (0, _useCloudListProvider2.useCloudListProvider)(),
      provider = _useCloudListProvider.provider;
    var confirmButton = (0, _react.useMemo)(function () {
      return _objectSpread(_objectSpread({}, CONFIRM_BUTTON), {}, {
        disabled: !provider
      });
    }, [provider]);
    return /*#__PURE__*/_react["default"].createElement(_imageModalContainer["default"], {
      provider: provider,
      onUpdateImageSetting: onUpdateImageSetting,
      cleanupExportImage: cleanupExportImage
    }, /*#__PURE__*/_react["default"].createElement(StyledOverwriteMapModal, {
      className: "overwrite-map-modal"
    }, isProviderLoading ? /*#__PURE__*/_react["default"].createElement(StyledMsg, null, /*#__PURE__*/_react["default"].createElement(StyledTitle, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'modal.overwriteMap.title'
    })), /*#__PURE__*/_react["default"].createElement(_statusPanel.UploadAnimation, {
      icon: provider && provider.icon
    })) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StyledIcon, null, provider && provider.icon ? /*#__PURE__*/_react["default"].createElement(provider.icon, {
      height: "64px"
    }) : null), /*#__PURE__*/_react["default"].createElement(StyledMsg, {
      className: "overwrite-map-msg"
    }, /*#__PURE__*/_react["default"].createElement(StyledTitle, null, title, " "), /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: 'modal.overwriteMap.alreadyExists',
      values: {
        mapSaved: mapSaved
      }
    })))), /*#__PURE__*/_react["default"].createElement(_modal.ModalFooter, {
      cancel: onCancel,
      confirm: function confirm() {
        return provider && onConfirm(provider);
      },
      confirmButton: confirmButton
    }));
  };
  return OverwriteMapModal;
};
var OverwriteMapModal = exports.OverwriteMapModal = OverwriteMapModalFactory();
var _default = exports["default"] = OverwriteMapModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfc3R5bGVkQ29tcG9uZW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfc3R5bGVkQ29tcG9uZW50czIiLCJfc3RhdHVzUGFuZWwiLCJfbG9jYWxpemF0aW9uIiwiX2ltYWdlTW9kYWxDb250YWluZXIiLCJfdXNlQ2xvdWRMaXN0UHJvdmlkZXIyIiwiX21vZGFsIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RlbXBsYXRlT2JqZWN0MiIsIl90ZW1wbGF0ZU9iamVjdDMiLCJfdGVtcGxhdGVPYmplY3Q0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0Iiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiU3R5bGVkTXNnIiwic3R5bGVkIiwiZGl2IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDIiLCJTdHlsZWRUaXRsZSIsInNwYW4iLCJTdHlsZWRJY29uIiwiU3R5bGVkT3ZlcndyaXRlTWFwTW9kYWwiLCJDZW50ZXJWZXJ0aWNhbEZsZXhib3giLCJDT05GSVJNX0JVVFRPTiIsImxhcmdlIiwiY2hpbGRyZW4iLCJkaXNhYmxlZCIsIk92ZXJ3cml0ZU1hcE1vZGFsRmFjdG9yeSIsIk92ZXJ3cml0ZU1hcE1vZGFsIiwiX3JlZiIsIm1hcFNhdmVkIiwidGl0bGUiLCJpc1Byb3ZpZGVyTG9hZGluZyIsIm9uVXBkYXRlSW1hZ2VTZXR0aW5nIiwiY2xlYW51cEV4cG9ydEltYWdlIiwib25DYW5jZWwiLCJvbkNvbmZpcm0iLCJfdXNlQ2xvdWRMaXN0UHJvdmlkZXIiLCJ1c2VDbG91ZExpc3RQcm92aWRlciIsInByb3ZpZGVyIiwiY29uZmlybUJ1dHRvbiIsInVzZU1lbW8iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiRm9ybWF0dGVkTWVzc2FnZSIsImlkIiwiVXBsb2FkQW5pbWF0aW9uIiwiaWNvbiIsIkZyYWdtZW50IiwiaGVpZ2h0IiwidmFsdWVzIiwiTW9kYWxGb290ZXIiLCJjYW5jZWwiLCJjb25maXJtIiwiZXhwb3J0cyIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGFscy9vdmVyd3JpdGUtbWFwLW1vZGFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7Q2VudGVyVmVydGljYWxGbGV4Ym94fSBmcm9tICcuLi9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHtVcGxvYWRBbmltYXRpb259IGZyb20gJy4vc3RhdHVzLXBhbmVsJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IEltYWdlTW9kYWxDb250YWluZXIsIHtJbWFnZU1vZGFsQ29udGFpbmVyUHJvcHN9IGZyb20gJy4vaW1hZ2UtbW9kYWwtY29udGFpbmVyJztcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvY2xvdWQtcHJvdmlkZXJzJztcbmltcG9ydCB7Y2xlYW51cEV4cG9ydEltYWdlIGFzIGNsZWFudXBFeHBvcnRJbWFnZUFjdGlvbn0gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7dXNlQ2xvdWRMaXN0UHJvdmlkZXJ9IGZyb20gJy4uL2hvb2tzL3VzZS1jbG91ZC1saXN0LXByb3ZpZGVyJztcbmltcG9ydCB7TW9kYWxGb290ZXJ9IGZyb20gJy4uL2NvbW1vbi9tb2RhbCc7XG5cbmNvbnN0IFN0eWxlZE1zZyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDI0cHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbmA7XG5cbmNvbnN0IFN0eWxlZFRpdGxlID0gc3R5bGVkLnNwYW5gXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiBibGFjaztcbmA7XG5cbmNvbnN0IFN0eWxlZEljb24gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyNHB4O1xuYDtcblxuY29uc3QgU3R5bGVkT3ZlcndyaXRlTWFwTW9kYWwgPSBzdHlsZWQoQ2VudGVyVmVydGljYWxGbGV4Ym94KWBcbiAgcGFkZGluZzogMjRweCAxMnB4O1xuICBtaW4taGVpZ2h0OiAyMjBweDtcbmA7XG5cbnR5cGUgT3ZlcndyaXRlTWFwTW9kYWxQcm9wcyA9IHtcbiAgbWFwU2F2ZWQ6IHN0cmluZyB8IG51bGw7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGlzUHJvdmlkZXJMb2FkaW5nOiBib29sZWFuO1xuXG4gIC8vIGNhbGxiYWNrc1xuICBvblVwZGF0ZUltYWdlU2V0dGluZzogSW1hZ2VNb2RhbENvbnRhaW5lclByb3BzWydvblVwZGF0ZUltYWdlU2V0dGluZyddO1xuICBjbGVhbnVwRXhwb3J0SW1hZ2U6IHR5cGVvZiBjbGVhbnVwRXhwb3J0SW1hZ2VBY3Rpb247XG4gIG9uQ29uZmlybTogKHByb3ZpZGVyOiBQcm92aWRlcikgPT4gdm9pZDtcbiAgb25DYW5jZWw6ICgpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBDT05GSVJNX0JVVFRPTiA9IHtcbiAgbGFyZ2U6IHRydWUsXG4gIGNoaWxkcmVuOiAnWWVzJyxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG5jb25zdCBPdmVyd3JpdGVNYXBNb2RhbEZhY3RvcnkgPSAoKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7UmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8T3ZlcndyaXRlTWFwTW9kYWxQcm9wcz59XG4gICAqL1xuICBjb25zdCBPdmVyd3JpdGVNYXBNb2RhbDogUmVhY3QuRkM8T3ZlcndyaXRlTWFwTW9kYWxQcm9wcz4gPSAoe1xuICAgIG1hcFNhdmVkLFxuICAgIHRpdGxlLFxuICAgIGlzUHJvdmlkZXJMb2FkaW5nLFxuICAgIG9uVXBkYXRlSW1hZ2VTZXR0aW5nLFxuICAgIGNsZWFudXBFeHBvcnRJbWFnZSxcbiAgICBvbkNhbmNlbCxcbiAgICBvbkNvbmZpcm1cbiAgfSkgPT4ge1xuICAgIGNvbnN0IHtwcm92aWRlcn0gPSB1c2VDbG91ZExpc3RQcm92aWRlcigpO1xuXG4gICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IHVzZU1lbW8oXG4gICAgICAoKSA9PiAoe1xuICAgICAgICAuLi5DT05GSVJNX0JVVFRPTixcbiAgICAgICAgZGlzYWJsZWQ6ICFwcm92aWRlclxuICAgICAgfSksXG4gICAgICBbcHJvdmlkZXJdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8SW1hZ2VNb2RhbENvbnRhaW5lclxuICAgICAgICBwcm92aWRlcj17cHJvdmlkZXJ9XG4gICAgICAgIG9uVXBkYXRlSW1hZ2VTZXR0aW5nPXtvblVwZGF0ZUltYWdlU2V0dGluZ31cbiAgICAgICAgY2xlYW51cEV4cG9ydEltYWdlPXtjbGVhbnVwRXhwb3J0SW1hZ2V9XG4gICAgICA+XG4gICAgICAgIDxTdHlsZWRPdmVyd3JpdGVNYXBNb2RhbCBjbGFzc05hbWU9XCJvdmVyd3JpdGUtbWFwLW1vZGFsXCI+XG4gICAgICAgICAge2lzUHJvdmlkZXJMb2FkaW5nID8gKFxuICAgICAgICAgICAgPFN0eWxlZE1zZz5cbiAgICAgICAgICAgICAgPFN0eWxlZFRpdGxlPlxuICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPXsnbW9kYWwub3ZlcndyaXRlTWFwLnRpdGxlJ30gLz5cbiAgICAgICAgICAgICAgPC9TdHlsZWRUaXRsZT5cbiAgICAgICAgICAgICAgPFVwbG9hZEFuaW1hdGlvbiBpY29uPXtwcm92aWRlciAmJiBwcm92aWRlci5pY29ufSAvPlxuICAgICAgICAgICAgPC9TdHlsZWRNc2c+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxTdHlsZWRJY29uPlxuICAgICAgICAgICAgICAgIHtwcm92aWRlciAmJiBwcm92aWRlci5pY29uID8gPHByb3ZpZGVyLmljb24gaGVpZ2h0PVwiNjRweFwiIC8+IDogbnVsbH1cbiAgICAgICAgICAgICAgPC9TdHlsZWRJY29uPlxuICAgICAgICAgICAgICA8U3R5bGVkTXNnIGNsYXNzTmFtZT1cIm92ZXJ3cml0ZS1tYXAtbXNnXCI+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFRpdGxlPnt0aXRsZX0gPC9TdHlsZWRUaXRsZT5cbiAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD17J21vZGFsLm92ZXJ3cml0ZU1hcC5hbHJlYWR5RXhpc3RzJ30gdmFsdWVzPXt7bWFwU2F2ZWR9fSAvPlxuICAgICAgICAgICAgICA8L1N0eWxlZE1zZz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvU3R5bGVkT3ZlcndyaXRlTWFwTW9kYWw+XG4gICAgICAgIDxNb2RhbEZvb3RlclxuICAgICAgICAgIGNhbmNlbD17b25DYW5jZWx9XG4gICAgICAgICAgY29uZmlybT17KCkgPT4gcHJvdmlkZXIgJiYgb25Db25maXJtKHByb3ZpZGVyKX1cbiAgICAgICAgICBjb25maXJtQnV0dG9uPXtjb25maXJtQnV0dG9ufVxuICAgICAgICAvPlxuICAgICAgPC9JbWFnZU1vZGFsQ29udGFpbmVyPlxuICAgICk7XG4gIH07XG4gIHJldHVybiBPdmVyd3JpdGVNYXBNb2RhbDtcbn07XG5cbmV4cG9ydCBjb25zdCBPdmVyd3JpdGVNYXBNb2RhbCA9IE92ZXJ3cml0ZU1hcE1vZGFsRmFjdG9yeSgpO1xuZXhwb3J0IGRlZmF1bHQgT3ZlcndyaXRlTWFwTW9kYWxGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLGtCQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxZQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxhQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxvQkFBQSxHQUFBSixzQkFBQSxDQUFBRixPQUFBO0FBR0EsSUFBQU8sc0JBQUEsR0FBQVAsT0FBQTtBQUNBLElBQUFRLE1BQUEsR0FBQVIsT0FBQTtBQUE0QyxJQUFBUyxlQUFBLEVBQUFDLGdCQUFBLEVBQUFDLGdCQUFBLEVBQUFDLGdCQUFBLEVBWjVDO0FBQ0E7QUFBQSxTQUFBQyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQWYsd0JBQUFlLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSxnQkFBQUssT0FBQSxDQUFBTCxDQUFBLDBCQUFBQSxDQUFBLHNCQUFBQSxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFB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