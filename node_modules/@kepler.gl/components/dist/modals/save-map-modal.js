"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MapInfoPanel = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _imageModalContainer = _interopRequireDefault(require("./image-modal-container"));
var _flexContainer = require("../common/flex-container");
var _statusPanel = _interopRequireWildcard(require("./status-panel"));
var _providerSelect = require("./cloud-components/provider-select");
var _constants = require("@kepler.gl/constants");
var _styledComponents2 = require("../common/styled-components");
var _imagePreview = _interopRequireDefault(require("../common/image-preview"));
var _localization = require("@kepler.gl/localization");
var _modal = require("../common/modal");
var _useCloudListProvider2 = require("../hooks/use-cloud-list-provider");
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var StyledSaveMapModal = _styledComponents["default"].div.attrs({
  className: 'save-map-modal'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .save-map-modal-content {\n    min-height: 400px;\n    flex-direction: column;\n  }\n\n  .description {\n    width: 300px;\n  }\n\n  .image-preview-panel {\n    width: 300px;\n\n    .image-preview {\n      padding: 0;\n    }\n  }\n\n  .map-info-panel {\n    flex-direction: column;\n  }\n\n  .save-map-modal-description {\n    .modal-section-subtitle {\n      margin-left: 6px;\n    }\n  }\n"])));
var StyledCompactExportSection = (0, _styledComponents["default"])(_styledComponents2.StyledExportSection)(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  margin: 5px 0;\n"])));
var nop = function nop() {
  return;
};
var TEXT_AREA_LIGHT_STYLE = {
  resize: 'none'
};
var MapInfoPanel = exports.MapInfoPanel = function MapInfoPanel(_ref) {
  var mapInfo = _ref.mapInfo,
    characterLimits = _ref.characterLimits,
    onChangeInput = _ref.onChangeInput;
  var _mapInfo$description = mapInfo.description,
    description = _mapInfo$description === void 0 ? '' : _mapInfo$description,
    _mapInfo$title = mapInfo.title,
    title = _mapInfo$title === void 0 ? '' : _mapInfo$title;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "selection map-info-panel",
    "data-testid": _constants.dataTestIds.providerMapInfoPanel
  }, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledModalSection, {
    className: "save-map-modal-name"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "modal-section-title"
  }, "Name*"), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.InputLight, {
    id: "map-title",
    type: "text",
    value: title,
    onChange: function onChange(e) {
      return onChangeInput('title', e);
    },
    placeholder: "Type map title"
  }))), /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledModalSection, null, /*#__PURE__*/_react["default"].createElement(_flexContainer.FlexContainer, {
    className: "save-map-modal-description"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "modal-section-title"
  }, "Description"), /*#__PURE__*/_react["default"].createElement("div", {
    className: "modal-section-subtitle"
  }, "(optional)")), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.TextAreaLight, {
    rows: 3,
    id: "map-description",
    style: TEXT_AREA_LIGHT_STYLE,
    value: description,
    onChange: function onChange(e) {
      return onChangeInput('description', e);
    },
    placeholder: "Type map description"
  })), /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledModalInputFootnote, {
    error: Boolean(characterLimits === null || characterLimits === void 0 ? void 0 : characterLimits.description) && description.length > Number(characterLimits === null || characterLimits === void 0 ? void 0 : characterLimits.description)
  }, description.length, "/", (characterLimits === null || characterLimits === void 0 ? void 0 : characterLimits.description) || _constants.MAP_INFO_CHARACTER.description, ' ', "characters")));
};
var SaveMapHeader = function SaveMapHeader(_ref2) {
  var cloudProviders = _ref2.cloudProviders;
  return /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledExportSection, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "description"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "title"
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'modal.saveMap.title'
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "subtitle"
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'modal.saveMap.subtitle'
  }))), /*#__PURE__*/_react["default"].createElement(_providerSelect.ProviderSelect, {
    cloudProviders: cloudProviders
  }));
};
var STYLED_EXPORT_SECTION_STYLE = {
  margin: '2px 0'
};
var PROVIDER_MANAGER_URL_STYLE = {
  textDecoration: 'underline'
};
function SaveMapModalFactory() {
  var SaveMapModal = function SaveMapModal(_ref3) {
    var mapInfo = _ref3.mapInfo,
      exportImage = _ref3.exportImage,
      _ref3$characterLimits = _ref3.characterLimits,
      characterLimits = _ref3$characterLimits === void 0 ? _constants.MAP_INFO_CHARACTER : _ref3$characterLimits,
      isProviderLoading = _ref3.isProviderLoading,
      providerError = _ref3.providerError,
      _ref3$onUpdateImageSe = _ref3.onUpdateImageSetting,
      onUpdateImageSetting = _ref3$onUpdateImageSe === void 0 ? nop : _ref3$onUpdateImageSe,
      cleanupExportImage = _ref3.cleanupExportImage,
      onSetMapInfo = _ref3.onSetMapInfo,
      onCancel = _ref3.onCancel,
      onConfirm = _ref3.onConfirm;
    var _useCloudListProvider = (0, _useCloudListProvider2.useCloudListProvider)(),
      provider = _useCloudListProvider.provider,
      cloudProviders = _useCloudListProvider.cloudProviders;
    var onChangeInput = function onChangeInput(key, _ref4) {
      var value = _ref4.target.value;
      onSetMapInfo((0, _defineProperty2["default"])({}, key, value));
    };
    var confirmButton = (0, _react.useMemo)(function () {
      return {
        large: true,
        disabled: Boolean(!(provider && mapInfo.title)),
        children: 'modal.button.save'
      };
    }, [provider, mapInfo]);
    var confirm = (0, _react.useCallback)(function () {
      if (provider) {
        onConfirm(provider);
      }
    }, [onConfirm, provider]);
    return /*#__PURE__*/_react["default"].createElement(_imageModalContainer["default"], {
      provider: provider,
      onUpdateImageSetting: onUpdateImageSetting,
      cleanupExportImage: cleanupExportImage
    }, /*#__PURE__*/_react["default"].createElement(StyledSaveMapModal, null, /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledModalContent, {
      className: "save-map-modal-content"
    }, /*#__PURE__*/_react["default"].createElement(SaveMapHeader, {
      cloudProviders: cloudProviders
    }), provider && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, provider.getManagementUrl ? /*#__PURE__*/_react["default"].createElement(_styledComponents2.StyledExportSection, {
      style: STYLED_EXPORT_SECTION_STYLE
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "selection"
    }, /*#__PURE__*/_react["default"].createElement("a", {
      key: 1,
      href: provider.getManagementUrl(),
      target: "_blank",
      rel: "noopener noreferrer",
      style: PROVIDER_MANAGER_URL_STYLE
    }, "Go to your Kepler.gl ", provider.displayName, " page"))) : null, /*#__PURE__*/_react["default"].createElement(StyledCompactExportSection, null, /*#__PURE__*/_react["default"].createElement("div", {
      className: "description image-preview-panel"
    }, /*#__PURE__*/_react["default"].createElement(_imagePreview["default"], {
      exportImage: exportImage,
      width: _constants.MAP_THUMBNAIL_DIMENSION.width,
      showDimension: false
    })), isProviderLoading ? /*#__PURE__*/_react["default"].createElement("div", {
      "data-testid": _constants.dataTestIds.providerLoading,
      className: "selection map-saving-animation"
    }, /*#__PURE__*/_react["default"].createElement(_statusPanel.UploadAnimation, {
      icon: provider && provider.icon
    })) : /*#__PURE__*/_react["default"].createElement(MapInfoPanel, {
      mapInfo: mapInfo,
      characterLimits: characterLimits,
      onChangeInput: onChangeInput
    }))), providerError ? /*#__PURE__*/_react["default"].createElement(_statusPanel["default"], {
      isLoading: false,
      error: providerError.message,
      providerIcon: provider && provider.icon
    }) : null)), /*#__PURE__*/_react["default"].createElement(_modal.ModalFooter, {
      cancel: onCancel,
      confirm: confirm,
      confirmButton: confirmButton
    }));
  };
  return SaveMapModal;
}
var _default = exports["default"] = SaveMapModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,