"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadDataModalFactory = LoadDataModalFactory;
exports["default"] = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _lodash = _interopRequireDefault(require("lodash.get"));
var _reactIntl = require("react-intl");
var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));
var _loadStorageMap = _interopRequireDefault(require("./load-storage-map"));
var _loadTileset = _interopRequireDefault(require("./tilesets-modals/load-tileset"));
var _modalTabs = _interopRequireDefault(require("./modal-tabs"));
var _loadingDialog = _interopRequireDefault(require("./loading-dialog"));
var _constants = require("@kepler.gl/constants");
var _excluded = ["onFileUpload", "onTilesetAdded", "fileLoading", "loadingMethods", "isCloudMapLoading"];
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyledLoadDataModal = _styledComponents["default"].div.attrs({
  className: 'load-data-modal'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n  min-height: 440px;\n  display: flex;\n  flex-direction: column;\n"])), function (props) {
  return props.theme.modalPadding;
});
var noop = function noop() {
  return;
};
var getDefaultMethod = function getDefaultMethod() {
  var methods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return Array.isArray(methods) ? (0, _lodash["default"])(methods, [0]) : null;
};
LoadDataModalFactory.deps = [_modalTabs["default"], _fileUpload["default"], _loadStorageMap["default"], _loadTileset["default"]];
function LoadDataModalFactory(ModalTabs, FileUpload, LoadStorageMap, LoadTileset) {
  var defaultLoadingMethods = [{
    id: _constants.LOADING_METHODS.upload,
    label: 'modal.loadData.upload',
    elementType: FileUpload
  }, {
    id: _constants.LOADING_METHODS.tileset,
    label: 'modal.loadData.tileset',
    elementType: LoadTileset
  }, {
    id: _constants.LOADING_METHODS.storage,
    label: 'modal.loadData.storage',
    elementType: LoadStorageMap
  }];
  var LoadDataModal = function LoadDataModal(_ref) {
    var _ref$onFileUpload = _ref.onFileUpload,
      onFileUpload = _ref$onFileUpload === void 0 ? noop : _ref$onFileUpload,
      _ref$onTilesetAdded = _ref.onTilesetAdded,
      onTilesetAdded = _ref$onTilesetAdded === void 0 ? noop : _ref$onTilesetAdded,
      _ref$fileLoading = _ref.fileLoading,
      fileLoading = _ref$fileLoading === void 0 ? false : _ref$fileLoading,
      _ref$loadingMethods = _ref.loadingMethods,
      loadingMethods = _ref$loadingMethods === void 0 ? defaultLoadingMethods : _ref$loadingMethods,
      isCloudMapLoading = _ref.isCloudMapLoading,
      restProps = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
    var intl = (0, _reactIntl.useIntl)();
    var currentModalProps = _objectSpread(_objectSpread({}, restProps), {}, {
      onFileUpload: onFileUpload,
      onTilesetAdded: onTilesetAdded,
      fileLoading: fileLoading,
      isCloudMapLoading: isCloudMapLoading
    });
    // const {loadingMethods, isCloudMapLoading} = props;
    var _useState = (0, _react.useState)(getDefaultMethod(loadingMethods)),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      currentMethod = _useState2[0],
      toggleMethod = _useState2[1];
    var ElementType = currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.elementType;
    return /*#__PURE__*/_react["default"].createElement(StyledLoadDataModal, null, /*#__PURE__*/_react["default"].createElement(ModalTabs, {
      currentMethod: currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.id,
      loadingMethods: loadingMethods,
      toggleMethod: toggleMethod
    }), isCloudMapLoading ? /*#__PURE__*/_react["default"].createElement(_loadingDialog["default"], {
      size: 64
    }) : ElementType && /*#__PURE__*/_react["default"].createElement(ElementType, (0, _extends2["default"])({
      key: currentMethod === null || currentMethod === void 0 ? void 0 : currentMethod.id,
      intl: intl
    }, currentModalProps)));
  };
  LoadDataModal.defaultLoadingMethods = defaultLoadingMethods;
  return LoadDataModal;
}
var _default = exports["default"] = LoadDataModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,