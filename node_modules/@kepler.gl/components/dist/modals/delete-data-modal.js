"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DeleteDatasetModal = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _datasetLabel = _interopRequireDefault(require("../common/dataset-label"));
var _localization = require("@kepler.gl/localization");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var StyledMsg = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-top: 24px;\n"])));
var DeleteDatasetModal = exports.DeleteDatasetModal = function DeleteDatasetModal(_ref) {
  var dataset = _ref.dataset,
    _ref$layers = _ref.layers,
    layers = _ref$layers === void 0 ? [] : _ref$layers;
  // retrieve only layers related to the current dataset
  var currDatasetLayers = layers.filter(function (layer) {
    return layer.config.dataId === (dataset && dataset.id);
  });
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "delete-dataset-modal"
  }, /*#__PURE__*/_react["default"].createElement(_datasetLabel["default"], {
    dataset: dataset
  }), /*#__PURE__*/_react["default"].createElement(StyledMsg, {
    className: "delete-dataset-msg"
  }, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: 'modal.deleteData.warning',
    values: {
      length: currDatasetLayers.length
    }
  })));
};
var DeleteDatasetModalFactory = function DeleteDatasetModalFactory() {
  return DeleteDatasetModal;
};
var _default = exports["default"] = DeleteDatasetModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX2RhdGFzZXRMYWJlbCIsIl9sb2NhbGl6YXRpb24iLCJfdGVtcGxhdGVPYmplY3QiLCJTdHlsZWRNc2ciLCJzdHlsZWQiLCJkaXYiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsMiIsIkRlbGV0ZURhdGFzZXRNb2RhbCIsImV4cG9ydHMiLCJfcmVmIiwiZGF0YXNldCIsIl9yZWYkbGF5ZXJzIiwibGF5ZXJzIiwiY3VyckRhdGFzZXRMYXllcnMiLCJmaWx0ZXIiLCJsYXllciIsImNvbmZpZyIsImRhdGFJZCIsImlkIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJ2YWx1ZXMiLCJsZW5ndGgiLCJEZWxldGVEYXRhc2V0TW9kYWxGYWN0b3J5IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kYWxzL2RlbGV0ZS1kYXRhLW1vZGFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgRGF0YXNldExhYmVsIGZyb20gJy4uL2NvbW1vbi9kYXRhc2V0LWxhYmVsJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuaW1wb3J0IHtMYXllcn0gZnJvbSAnQGtlcGxlci5nbC9sYXllcnMnO1xuaW1wb3J0IHtLZXBsZXJUYWJsZX0gZnJvbSAnQGtlcGxlci5nbC90YWJsZSc7XG5cbmNvbnN0IFN0eWxlZE1zZyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDI0cHg7XG5gO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlbGV0ZURhdGFzZXRNb2RhbFByb3BzIHtcbiAgZGF0YXNldDogS2VwbGVyVGFibGU7XG4gIGxheWVyczogTGF5ZXJbXTtcbn1cblxuZXhwb3J0IGNvbnN0IERlbGV0ZURhdGFzZXRNb2RhbDogUmVhY3QuRkM8RGVsZXRlRGF0YXNldE1vZGFsUHJvcHM+ID0gKHtkYXRhc2V0LCBsYXllcnMgPSBbXX0pID0+IHtcbiAgLy8gcmV0cmlldmUgb25seSBsYXllcnMgcmVsYXRlZCB0byB0aGUgY3VycmVudCBkYXRhc2V0XG4gIGNvbnN0IGN1cnJEYXRhc2V0TGF5ZXJzID0gbGF5ZXJzLmZpbHRlcihsYXllciA9PiBsYXllci5jb25maWcuZGF0YUlkID09PSAoZGF0YXNldCAmJiBkYXRhc2V0LmlkKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImRlbGV0ZS1kYXRhc2V0LW1vZGFsXCI+XG4gICAgICA8RGF0YXNldExhYmVsIGRhdGFzZXQ9e2RhdGFzZXR9IC8+XG4gICAgICA8U3R5bGVkTXNnIGNsYXNzTmFtZT1cImRlbGV0ZS1kYXRhc2V0LW1zZ1wiPlxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZVxuICAgICAgICAgIGlkPXsnbW9kYWwuZGVsZXRlRGF0YS53YXJuaW5nJ31cbiAgICAgICAgICB2YWx1ZXM9e3tsZW5ndGg6IGN1cnJEYXRhc2V0TGF5ZXJzLmxlbmd0aH19XG4gICAgICAgIC8+XG4gICAgICA8L1N0eWxlZE1zZz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IERlbGV0ZURhdGFzZXRNb2RhbEZhY3RvcnkgPSAoKSA9PiBEZWxldGVEYXRhc2V0TW9kYWw7XG5leHBvcnQgZGVmYXVsdCBEZWxldGVEYXRhc2V0TW9kYWxGYWN0b3J5O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFILE9BQUE7QUFBeUQsSUFBQUksZUFBQSxFQU56RDtBQUNBO0FBU0EsSUFBTUMsU0FBUyxHQUFHQyw0QkFBTSxDQUFDQyxHQUFHLENBQUFILGVBQUEsS0FBQUEsZUFBQSxPQUFBSSx1QkFBQSwyQ0FFM0I7QUFPTSxJQUFNQyxrQkFBcUQsR0FBQUMsT0FBQSxDQUFBRCxrQkFBQSxHQUFHLFNBQXhEQSxrQkFBcURBLENBQUFFLElBQUEsRUFBK0I7RUFBQSxJQUExQkMsT0FBTyxHQUFBRCxJQUFBLENBQVBDLE9BQU87SUFBQUMsV0FBQSxHQUFBRixJQUFBLENBQUVHLE1BQU07SUFBTkEsTUFBTSxHQUFBRCxXQUFBLGNBQUcsRUFBRSxHQUFBQSxXQUFBO0VBQ3pGO0VBQ0EsSUFBTUUsaUJBQWlCLEdBQUdELE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLFVBQUFDLEtBQUs7SUFBQSxPQUFJQSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTSxNQUFNUCxPQUFPLElBQUlBLE9BQU8sQ0FBQ1EsRUFBRSxDQUFDO0VBQUEsRUFBQztFQUVqRyxvQkFDRXRCLE1BQUEsWUFBQXVCLGFBQUE7SUFBS0MsU0FBUyxFQUFDO0VBQXNCLGdCQUNuQ3hCLE1BQUEsWUFBQXVCLGFBQUEsQ0FBQ25CLGFBQUEsV0FBWTtJQUFDVSxPQUFPLEVBQUVBO0VBQVEsQ0FBRSxDQUFDLGVBQ2xDZCxNQUFBLFlBQUF1QixhQUFBLENBQUNoQixTQUFTO0lBQUNpQixTQUFTLEVBQUM7RUFBb0IsZ0JBQ3ZDeEIsTUFBQSxZQUFBdUIsYUFBQSxDQUFDbEIsYUFBQSxDQUFBb0IsZ0JBQWdCO0lBQ2ZILEVBQUUsRUFBRSwwQkFBMkI7SUFDL0JJLE1BQU0sRUFBRTtNQUFDQyxNQUFNLEVBQUVWLGlCQUFpQixDQUFDVTtJQUFNO0VBQUUsQ0FDNUMsQ0FDUSxDQUNSLENBQUM7QUFFVixDQUFDO0FBRUQsSUFBTUMseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUF5QkEsQ0FBQTtFQUFBLE9BQVNqQixrQkFBa0I7QUFBQTtBQUFDLElBQUFrQixRQUFBLEdBQUFqQixPQUFBLGNBQzVDZ0IseUJBQXlCIiwiaWdub3JlTGlzdCI6W119