"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DragItem = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _core = require("@dnd-kit/core");
var _console = _interopRequireDefault(require("global/console"));
var _constants = require("@kepler.gl/constants");
var _reducers = require("@kepler.gl/reducers");
var _layerPanelHeader = _interopRequireDefault(require("./side-panel/layer-panel/layer-panel-header"));
var _injector = require("./injector");
var _useDndLayers2 = _interopRequireDefault(require("./hooks/use-dnd-layers"));
var _useDndEffects2 = _interopRequireDefault(require("./hooks/use-dnd-effects"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var DragItem = exports.DragItem = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  border-radius: ", "px;\n  padding: 5px 10px;\n  display: inline;\n"])), function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.radioButtonRadius;
});
var nop = function nop() {
  return undefined;
};
DndContextFactory.deps = [_layerPanelHeader["default"]];
function DndContextFactory(LayerPanelHeader) {
  var LayerPanelOverlay = function LayerPanelOverlay(_ref) {
    var layer = _ref.layer,
      datasets = _ref.datasets;
    var color = layer.config.dataId && datasets[layer.config.dataId] ? datasets[layer.config.dataId].color : null;
    return /*#__PURE__*/_react["default"].createElement(LayerPanelHeader, {
      isConfigActive: false,
      layerId: layer.id,
      isVisible: true,
      isValid: true,
      label: layer.config.label,
      labelRCGColorValues: color,
      onToggleVisibility: nop,
      onResetIsValid: nop,
      onUpdateLayerLabel: nop,
      onToggleEnableConfig: nop,
      onDuplicateLayer: nop,
      onRemoveLayer: nop,
      onZoomToLayer: nop,
      layerType: layer.type,
      allowDuplicate: false,
      isDragNDropEnabled: false
    });
  };
  var DndContext = function DndContext(_ref2) {
    var children = _ref2.children,
      visState = _ref2.visState;
    var datasets = visState.datasets,
      layerOrder = visState.layerOrder,
      layers = visState.layers,
      effects = visState.effects,
      effectOrder = visState.effectOrder,
      splitMaps = visState.splitMaps;
    var _useDndLayers = (0, _useDndLayers2["default"])(layers, layerOrder),
      activeLayer = _useDndLayers.activeLayer,
      onLayerDragStart = _useDndLayers.onDragStart,
      onLayerDragEnd = _useDndLayers.onDragEnd;
    var _useDndEffects = (0, _useDndEffects2["default"])(effects, effectOrder),
      onEffectDragStart = _useDndEffects.onDragStart,
      onEffectDragEnd = _useDndEffects.onDragEnd;
    var isSplit = (0, _react.useMemo)(function () {
      return (splitMaps === null || splitMaps === void 0 ? void 0 : splitMaps.length) > 1;
    }, [splitMaps]);
    var dndModifiers = (0, _react.useMemo)(function () {
      return isSplit ? _constants.DND_EMPTY_MODIFIERS : _constants.DND_MODIFIERS;
    }, [isSplit]);
    var onDragStart = (0, _react.useCallback)(function (event) {
      var _event$active$data;
      var activeType = (_event$active$data = event.active.data) === null || _event$active$data === void 0 || (_event$active$data = _event$active$data.current) === null || _event$active$data === void 0 ? void 0 : _event$active$data.type;
      switch (activeType) {
        case _constants.SORTABLE_LAYER_TYPE:
          onLayerDragStart(event);
          break;
        case _constants.SORTABLE_EFFECT_TYPE:
          onEffectDragStart(event);
          break;
        default:
          _console["default"].log("activeType ".concat(activeType, " unknown"));
      }
    }, [onLayerDragStart, onEffectDragStart]);
    var onDragEnd = (0, _react.useCallback)(function (event) {
      var _event$active$data2;
      var activeType = (_event$active$data2 = event.active.data) === null || _event$active$data2 === void 0 || (_event$active$data2 = _event$active$data2.current) === null || _event$active$data2 === void 0 ? void 0 : _event$active$data2.type;
      switch (activeType) {
        case _constants.SORTABLE_LAYER_TYPE:
          onLayerDragEnd(event);
          break;
        case _constants.SORTABLE_EFFECT_TYPE:
          onEffectDragEnd(event);
          break;
        default:
          _console["default"].log("activeType ".concat(activeType, " unknown"));
      }
    }, [onLayerDragEnd, onEffectDragEnd]);
    return /*#__PURE__*/_react["default"].createElement(_core.DndContext, {
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      modifiers: dndModifiers
    }, children, activeLayer ? /*#__PURE__*/_react["default"].createElement(_core.DragOverlay, {
      modifiers: dndModifiers,
      dropAnimation: null
    }, /*#__PURE__*/_react["default"].createElement(DragItem, null, /*#__PURE__*/_react["default"].createElement(LayerPanelOverlay, {
      layer: activeLayer,
      datasets: datasets
    }))) : null);
  };
  return (0, _injector.withState)([_reducers.visStateLens], function (state) {
    return state;
  })(DndContext);
}
var _default = exports["default"] = DndContextFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,