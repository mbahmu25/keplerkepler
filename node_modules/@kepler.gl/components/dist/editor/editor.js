"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = EditorFactory;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _window = _interopRequireDefault(require("global/window"));
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = _interopRequireDefault(require("lodash.get"));
var _reselect = require("reselect");
var _featureActionPanel = _interopRequireDefault(require("./feature-action-panel"));
var _constants = require("@kepler.gl/constants");
var _layers = require("@kepler.gl/layers");
var _context = require("../context");
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DECKGL_RENDER_LAYER = 'default-deckgl-overlay-wrapper';
var StyledWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n"])));
var editorLayerFilter = function editorLayerFilter(layer) {
  return _constants.EDITOR_AVAILABLE_LAYERS.includes(layer.type || '');
};
EditorFactory.deps = [_featureActionPanel["default"]];
function EditorFactory(FeatureActionPanel) {
  var PortalEditor = function PortalEditor(_ref) {
    var visiblePanel = _ref.visiblePanel,
      className = _ref.className,
      style = _ref.style,
      selectedFeature = _ref.selectedFeature,
      datasets = _ref.datasets,
      layers = _ref.layers,
      currentFilter = _ref.currentFilter,
      onClose = _ref.onClose,
      onDeleteFeature = _ref.onDeleteFeature,
      onToggleLayer = _ref.onToggleLayer,
      position = _ref.position;
    return /*#__PURE__*/_react["default"].createElement(_context.RootContext.Consumer, null, function (context) {
      var _context$current;
      return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
        className: (0, _classnames["default"])('editor', className),
        style: style
      }, visiblePanel ? /*#__PURE__*/_react["default"].createElement(FeatureActionPanel, {
        selectedFeature: selectedFeature,
        datasets: datasets,
        layers: layers,
        currentFilter: currentFilter,
        onClose: onClose,
        onDeleteFeature: onDeleteFeature,
        onToggleLayer: onToggleLayer,
        position: position || null
      }) : null), (_context$current = context === null || context === void 0 ? void 0 : context.current) !== null && _context$current !== void 0 ? _context$current : document.body));
    });
  };
  var EditorUnmemoized = /*#__PURE__*/function (_Component) {
    function EditorUnmemoized() {
      var _this;
      (0, _classCallCheck2["default"])(this, EditorUnmemoized);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, EditorUnmemoized, [].concat(args));
      (0, _defineProperty2["default"])(_this, "state", {});
      (0, _defineProperty2["default"])(_this, "layerSelector", function (props) {
        return props.layers;
      });
      (0, _defineProperty2["default"])(_this, "filterSelector", function (props) {
        return props.filters;
      });
      (0, _defineProperty2["default"])(_this, "selectedFeatureIdSelector", function (props) {
        return (0, _lodash["default"])(props, ['editor', 'selectedFeature', 'id']);
      });
      (0, _defineProperty2["default"])(_this, "editorFeatureSelector", function (props) {
        return (0, _lodash["default"])(props, ['editor', 'features']);
      });
      (0, _defineProperty2["default"])(_this, "currentFilterSelector", (0, _reselect.createSelector)(_this.filterSelector, _this.selectedFeatureIdSelector, function (filters, selectedFeatureId) {
        return filters.find(function (f) {
          return f.value && f.value.id === selectedFeatureId;
        });
      }));
      (0, _defineProperty2["default"])(_this, "availableLayersSelector", (0, _reselect.createSelector)(_this.layerSelector, function (layers) {
        return layers.filter(editorLayerFilter).filter(function (layer) {
          var _layer$config;
          return ((_layer$config = layer.config) === null || _layer$config === void 0 ? void 0 : _layer$config.isVisible) && layer.id !== _constants.GEOCODER_LAYER_ID;
        });
      }));
      (0, _defineProperty2["default"])(_this, "allFeaturesSelector", (0, _reselect.createSelector)(_this.filterSelector, _this.editorFeatureSelector, function (filters, editorFeatures) {
        return filters.filter(function (f) {
          return f.type === _constants.FILTER_TYPES.polygon;
        }).map(function (f) {
          return f.value;
        }).concat(editorFeatures);
      }));
      (0, _defineProperty2["default"])(_this, "isInFocus", function () {
        var _document$activeEleme;
        return ((_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.id) === DECKGL_RENDER_LAYER;
      });
      (0, _defineProperty2["default"])(_this, "_onKeyPressed", function (event) {
        if (_this.isInFocus()) {
          switch (event.keyCode) {
            case _constants.KeyEvent.DOM_VK_DELETE:
            case _constants.KeyEvent.DOM_VK_BACK_SPACE:
              _this._onDeleteSelectedFeature();
              break;
            case _constants.KeyEvent.DOM_VK_ESCAPE:
              // reset active drawing
              if (_layers.EditorLayerUtils.isDrawingActive(true, _this.props.editor.mode)) {
                _this.props.onSetEditorMode(_constants.EDITOR_MODES.EDIT);
              }
              _this.props.onSelect(null);
              break;
            default:
              break;
          }
        }
      });
      (0, _defineProperty2["default"])(_this, "_onDeleteSelectedFeature", function () {
        var editor = _this.props.editor;
        var selectedFeature = editor.selectedFeature;
        if (selectedFeature) {
          _this.props.onDeleteFeature(selectedFeature);
        }
      });
      (0, _defineProperty2["default"])(_this, "_closeFeatureAction", function () {
        // reset selection context
        var selectedFeature = _this.props.editor.selectedFeature;
        _this.props.onSelect(selectedFeature);
      });
      (0, _defineProperty2["default"])(_this, "_togglePolygonFilter", function (layer) {
        var selectedFeature = _this.props.editor.selectedFeature;
        if (selectedFeature) {
          _this.props.onTogglePolygonFilter(layer, selectedFeature);
        }
      });
      return _this;
    }
    (0, _inherits2["default"])(EditorUnmemoized, _Component);
    return (0, _createClass2["default"])(EditorUnmemoized, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        _window["default"].addEventListener('keydown', this._onKeyPressed);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        _window["default"].removeEventListener('keydown', this._onKeyPressed);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
          className = _this$props.className,
          datasets = _this$props.datasets,
          editor = _this$props.editor,
          style = _this$props.style,
          index = _this$props.index;
        var selectedFeature = editor.selectedFeature,
          selectionContext = editor.selectionContext;
        var currentFilter = this.currentFilterSelector(this.props);
        var availableLayers = this.availableLayersSelector(this.props);
        var _ref2 = selectionContext || {},
          rightClick = _ref2.rightClick,
          position = _ref2.position,
          mapIndex = _ref2.mapIndex;
        return /*#__PURE__*/_react["default"].createElement(PortalEditor, {
          selectedFeature: selectedFeature,
          visiblePanel: Boolean(rightClick) && selectedFeature && index === mapIndex,
          datasets: datasets,
          layers: availableLayers,
          currentFilter: currentFilter,
          onClose: this._closeFeatureAction,
          onDeleteFeature: this._onDeleteSelectedFeature,
          onToggleLayer: this._togglePolygonFilter,
          position: position || null,
          className: className,
          style: style
        });
      }
    }]);
  }(_react.Component);
  (0, _defineProperty2["default"])(EditorUnmemoized, "defaultProps", {});
  (0, _defineProperty2["default"])(EditorUnmemoized, "displayName", 'Editor');
  var Editor = /*#__PURE__*/_react["default"].memo(EditorUnmemoized);
  Editor.displayName = 'Editor';
  return Editor;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,