"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.RootContext = exports.FeatureFlagsContextProvider = exports.FeatureFlagsContext = exports.CloudProviderContext = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var identity = function identity(state) {
  return state;
};
// New Context API only supported after 16.3
var KeplerGlContext = /*#__PURE__*/(0, _react.createContext)({
  selector: identity,
  id: 'map'
});

// TODO: breakdown this file into multiple files
var FeatureFlagsContext = exports.FeatureFlagsContext = /*#__PURE__*/(0, _react.createContext)({});
var FeatureFlagsContextProvider = exports.FeatureFlagsContextProvider = function FeatureFlagsContextProvider(props) {
  return /*#__PURE__*/_react["default"].createElement(FeatureFlagsContext.Provider, {
    value: props.featureFlags || null
  }, props.children);
};

/**
 * This provides keeps track of the ist cloud providers
 * and the current selected one
 */
var CloudProviderContext = exports.CloudProviderContext = /*#__PURE__*/(0, _react.createContext)({
  provider: null,
  setProvider: function setProvider() {
    return;
  },
  cloudProviders: []
});
var RootContext = exports.RootContext = /*#__PURE__*/(0, _react.createContext)(null);
var _default = exports["default"] = KeplerGlContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJpZGVudGl0eSIsInN0YXRlIiwiS2VwbGVyR2xDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInNlbGVjdG9yIiwiaWQiLCJGZWF0dXJlRmxhZ3NDb250ZXh0IiwiZXhwb3J0cyIsIkZlYXR1cmVGbGFnc0NvbnRleHRQcm92aWRlciIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJmZWF0dXJlRmxhZ3MiLCJjaGlsZHJlbiIsIkNsb3VkUHJvdmlkZXJDb250ZXh0IiwicHJvdmlkZXIiLCJzZXRQcm92aWRlciIsImNsb3VkUHJvdmlkZXJzIiwiUm9vdENvbnRleHQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtjcmVhdGVDb250ZXh0LCBSZWZPYmplY3QsIFJlYWN0Tm9kZSwgUmVhY3RFbGVtZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdAa2VwbGVyLmdsL2Nsb3VkLXByb3ZpZGVycyc7XG5cbmNvbnN0IGlkZW50aXR5ID0gc3RhdGUgPT4gc3RhdGU7XG4vLyBOZXcgQ29udGV4dCBBUEkgb25seSBzdXBwb3J0ZWQgYWZ0ZXIgMTYuM1xuY29uc3QgS2VwbGVyR2xDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7XG4gIHNlbGVjdG9yOiBpZGVudGl0eSxcbiAgaWQ6ICdtYXAnXG59KTtcblxuLy8gVE9ETzogYnJlYWtkb3duIHRoaXMgZmlsZSBpbnRvIG11bHRpcGxlIGZpbGVzXG5leHBvcnQgY29uc3QgRmVhdHVyZUZsYWdzQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8b2JqZWN0IHwgbnVsbD4oe30pO1xuXG5leHBvcnQgdHlwZSBGZWF0dXJlRmxhZ3MgPSB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgYm9vbGVhbn07XG5cbmV4cG9ydCB0eXBlIEZlYXR1cmVGbGFnc0NvbnRleHRQcm92aWRlclByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBmZWF0dXJlRmxhZ3M/OiBGZWF0dXJlRmxhZ3M7XG59O1xuXG5leHBvcnQgdHlwZSBDbG91ZFByb3ZpZGVyQ29udGV4dFR5cGUgPSB7XG4gIHByb3ZpZGVyOiBQcm92aWRlciB8IG51bGw7XG4gIHNldFByb3ZpZGVyOiAocHJvdmlkZXI6IFByb3ZpZGVyIHwgbnVsbCkgPT4gdm9pZDtcbiAgY2xvdWRQcm92aWRlcnM6IFByb3ZpZGVyW107XG59O1xuXG5leHBvcnQgY29uc3QgRmVhdHVyZUZsYWdzQ29udGV4dFByb3ZpZGVyID0gKFxuICBwcm9wczogRmVhdHVyZUZsYWdzQ29udGV4dFByb3ZpZGVyUHJvcHNcbik6IFJlYWN0RWxlbWVudCA9PiAoXG4gIDxGZWF0dXJlRmxhZ3NDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9wcy5mZWF0dXJlRmxhZ3MgfHwgbnVsbH0+XG4gICAge3Byb3BzLmNoaWxkcmVufVxuICA8L0ZlYXR1cmVGbGFnc0NvbnRleHQuUHJvdmlkZXI+XG4pO1xuXG4vKipcbiAqIFRoaXMgcHJvdmlkZXMga2VlcHMgdHJhY2sgb2YgdGhlIGlzdCBjbG91ZCBwcm92aWRlcnNcbiAqIGFuZCB0aGUgY3VycmVudCBzZWxlY3RlZCBvbmVcbiAqL1xuZXhwb3J0IGNvbnN0IENsb3VkUHJvdmlkZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxDbG91ZFByb3ZpZGVyQ29udGV4dFR5cGU+KHtcbiAgcHJvdmlkZXI6IG51bGwsXG4gIHNldFByb3ZpZGVyOiAoKSA9PiB7XG4gICAgcmV0dXJuO1xuICB9LFxuICBjbG91ZFByb3ZpZGVyczogW11cbn0pO1xuXG5leHBvcnQgY29uc3QgUm9vdENvbnRleHQgPSBjcmVhdGVDb250ZXh0PFJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD4gfCBudWxsPihudWxsKTtcblxuZXhwb3J0IGRlZmF1bHQgS2VwbGVyR2xDb250ZXh0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQStFLFNBQUFDLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSCx3QkFBQUcsQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLGdCQUFBSyxPQUFBLENBQUFMLENBQUEsMEJBQUFBLENBQUEsc0JBQUFBLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxjQUFBUixDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUgvRTtBQUNBOztBQUtBLElBQU1XLFFBQVEsR0FBRyxTQUFYQSxRQUFRQSxDQUFHQyxLQUFLO0VBQUEsT0FBSUEsS0FBSztBQUFBO0FBQy9CO0FBQ0EsSUFBTUMsZUFBZSxnQkFBRyxJQUFBQyxvQkFBYSxFQUFDO0VBQ3BDQyxRQUFRLEVBQUVKLFFBQVE7RUFDbEJLLEVBQUUsRUFBRTtBQUNOLENBQUMsQ0FBQzs7QUFFRjtBQUNPLElBQU1DLG1CQUFtQixHQUFBQyxPQUFBLENBQUFELG1CQUFBLGdCQUFHLElBQUFILG9CQUFhLEVBQWdCLENBQUMsQ0FBQyxDQUFDO0FBZTVELElBQU1LLDJCQUEyQixHQUFBRCxPQUFBLENBQUFDLDJCQUFBLEdBQUcsU0FBOUJBLDJCQUEyQkEsQ0FDdENDLEtBQXVDO0VBQUEsb0JBRXZDaEMsTUFBQSxZQUFBaUMsYUFBQSxDQUFDSixtQkFBbUIsQ0FBQ0ssUUFBUTtJQUFDQyxLQUFLLEVBQUVILEtBQUssQ0FBQ0ksWUFBWSxJQUFJO0VBQUssR0FDN0RKLEtBQUssQ0FBQ0ssUUFDcUIsQ0FBQztBQUFBLENBQ2hDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUMsb0JBQW9CLEdBQUFSLE9BQUEsQ0FBQVEsb0JBQUEsZ0JBQUcsSUFBQVosb0JBQWEsRUFBMkI7RUFDMUVhLFFBQVEsRUFBRSxJQUFJO0VBQ2RDLFdBQVcsRUFBRSxTQUFiQSxXQUFXQSxDQUFBLEVBQVE7SUFDakI7RUFDRixDQUFDO0VBQ0RDLGNBQWMsRUFBRTtBQUNsQixDQUFDLENBQUM7QUFFSyxJQUFNQyxXQUFXLEdBQUFaLE9BQUEsQ0FBQVksV0FBQSxnQkFBRyxJQUFBaEIsb0JBQWEsRUFBbUMsSUFBSSxDQUFDO0FBQUMsSUFBQWlCLFFBQUEsR0FBQWIsT0FBQSxjQUVsRUwsZUFBZSIsImlnbm9yZUxpc3QiOltdfQ==