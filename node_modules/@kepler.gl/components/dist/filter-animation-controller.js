"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _utils = require("@kepler.gl/utils");
var _constants = require("@kepler.gl/constants");
var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

FilterAnimationControllerFactory.deps = [_animationController["default"]];
function FilterAnimationControllerFactory(AnimationController) {
  var FilterAnimationController = function FilterAnimationController(_ref) {
    var _filter$plotType2;
    var filter = _ref.filter,
      filterIdx = _ref.filterIdx,
      setFilterAnimationTime = _ref.setFilterAnimationTime,
      children = _ref.children;
    var binThresholds = (0, _react.useMemo)(function () {
      var _filter$plotType;
      return (0, _utils.getBinThresholds)((_filter$plotType = filter.plotType) === null || _filter$plotType === void 0 ? void 0 : _filter$plotType.interval, filter.domain);
    }, [(_filter$plotType2 = filter.plotType) === null || _filter$plotType2 === void 0 ? void 0 : _filter$plotType2.interval, filter.domain]);
    var steps = (0, _react.useMemo)(function () {
      if (binThresholds) {
        var thresholds = (0, _toConsumableArray2["default"])(binThresholds);
        // pop last threshold
        thresholds.pop();
        return thresholds;
      }
      return null;
    }, [binThresholds]);
    var updateAnimation = (0, _react.useCallback)(function (value) {
      switch (filter.animationWindow) {
        case _constants.ANIMATION_WINDOW.interval:
          {
            var idx = value[1];
            if (idx < binThresholds.length - 1) {
              setFilterAnimationTime(filterIdx, 'value', [binThresholds[idx], binThresholds[idx + 1] - 1]);
            }
            break;
          }
        default:
          setFilterAnimationTime(filterIdx, 'value', value);
          break;
      }
    }, [filterIdx, binThresholds, filter.animationWindow, setFilterAnimationTime]);

    // if filter is synced merge the filter and animation config
    var timeline = (0, _utils.getTimelineFromFilter)(filter);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "filter-control",
      value: filter.value,
      domain: filter.domain,
      speed: filter.speed,
      isAnimating: filter.isAnimating,
      animationWindow: filter.animationWindow,
      steps: steps,
      updateAnimation: updateAnimation
      // @ts-expect-error different function type, goes to TimeWidget setFilterAnimationTime()
      ,
      setTimelineValue: setFilterAnimationTime,
      timeline: timeline,
      children: children
    });
  };
  return FilterAnimationController;
}
var _default = exports["default"] = FilterAnimationControllerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,