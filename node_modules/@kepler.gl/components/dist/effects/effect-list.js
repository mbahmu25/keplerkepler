"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _classnames3 = _interopRequireDefault(require("classnames"));
var _utilities = require("@dnd-kit/utilities");
var _sortable = require("@dnd-kit/sortable");
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _effectPanel = _interopRequireDefault(require("./effect-panel"));
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var Container = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n"])));
var SortableStyledItem = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  z-index: ", ";\n  transition: ", ";\n  transform: ", ";\n  outline: none;\n  &.sorting {\n    opacity: 0.3;\n    pointer-events: none;\n  }\n  &.sorting-effects .effect-panel__header {\n    background-color: ", ";\n    font-family: ", ";\n    font-weight: ", ";\n    font-size: ", ";\n    line-height: ", ";\n    *,\n    *:before,\n    *:after {\n      box-sizing: border-box;\n    }\n    .effect__drag-handle {\n      opacity: 1;\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.dropdownWrapperZ + 1;
}, function (props) {
  return props.transition;
}, function (props) {
  return props.transform;
}, function (props) {
  return props.theme.panelBackgroundHover;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.fontWeight;
}, function (props) {
  return props.theme.fontSize;
}, function (props) {
  return props.theme.lineHeight;
}, function (props) {
  return props.theme.textColorHl;
});
EffectListFactory.deps = [_effectPanel["default"]];
function EffectListFactory(EffectPanel) {
  var SortableItem = function SortableItem(_ref) {
    var effect = _ref.effect,
      idx = _ref.idx,
      panelProps = _ref.panelProps,
      disabled = _ref.disabled;
    var _useSortable = (0, _sortable.useSortable)({
        id: effect.id,
        data: {
          type: _constants.SORTABLE_EFFECT_TYPE,
          parent: _constants.SORTABLE_EFFECT_PANEL_TYPE
        },
        disabled: disabled
      }),
      attributes = _useSortable.attributes,
      listeners = _useSortable.listeners,
      setNodeRef = _useSortable.setNodeRef,
      isDragging = _useSortable.isDragging,
      transform = _useSortable.transform,
      transition = _useSortable.transition;
    return /*#__PURE__*/_react["default"].createElement(SortableStyledItem, (0, _extends2["default"])({
      ref: setNodeRef,
      className: (0, _classnames3["default"])((0, _defineProperty2["default"])({}, _constants.dataTestIds.sortableEffectItem, !disabled), (0, _defineProperty2["default"])({}, _constants.dataTestIds.staticEffectItem, disabled), {
        sorting: isDragging
      }),
      "data-testid": disabled ? _constants.dataTestIds.staticEffectItem : _constants.dataTestIds.sortableEffectItem,
      transform: _utilities.CSS.Transform.toString(transform),
      transition: transition || ''
    }, attributes), /*#__PURE__*/_react["default"].createElement(EffectPanel, (0, _extends2["default"])({}, panelProps, {
      key: effect.id,
      idx: idx,
      effect: effect,
      listeners: listeners,
      isDraggable: !disabled
    })));
  };
  var EffectList = function EffectList(props) {
    var effects = props.effects,
      effectOrder = props.effectOrder,
      visStateActions = props.visStateActions;
    var effectsToShow = (0, _react.useMemo)(function () {
      return effectOrder.reduce(function (acc, effectId) {
        var effect = (0, _utils.findById)(effectId)(effects.filter(Boolean));
        if (!effect) {
          return acc;
        }
        return [].concat((0, _toConsumableArray2["default"])(acc), [effect]);
      }, []);
    }, [effects, effectOrder]);
    var sidePanelDndItems = (0, _react.useMemo)(function () {
      return effectsToShow.map(function (_ref2) {
        var id = _ref2.id;
        return id;
      });
    }, [effectsToShow]);
    var panelProps = (0, _react.useMemo)(function () {
      return {
        effects: effects,
        effectOrder: effectOrder,
        removeEffect: visStateActions.removeEffect,
        updateEffect: visStateActions.updateEffect
      };
    }, [effects, effectOrder, visStateActions]);
    return /*#__PURE__*/_react["default"].createElement(Container, null, /*#__PURE__*/_react["default"].createElement(_sortable.SortableContext, {
      id: _constants.SORTABLE_EFFECT_PANEL_TYPE,
      items: sidePanelDndItems,
      strategy: _sortable.verticalListSortingStrategy,
      disabled: false
    }, effectsToShow.map(function (effect) {
      return /*#__PURE__*/_react["default"].createElement(SortableItem, {
        key: effect.id,
        effect: effect,
        idx: effects.findIndex(function (l) {
          return (l === null || l === void 0 ? void 0 : l.id) === effect.id;
        }),
        panelProps: panelProps,
        disabled: false
      });
    })));
  };
  return EffectList;
}
var _default = exports["default"] = EffectListFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,