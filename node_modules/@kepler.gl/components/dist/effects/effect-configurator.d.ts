import React from 'react';
import { Effect, EffectUpdateProps } from '@kepler.gl/types';
import RangeSliderFactory from '../common/range-slider';
import EffectTimeConfiguratorFactory from './effect-time-configurator';
export declare type EffectConfiguratorProps = {
    effect: Effect;
    updateEffectConfig: (e: Event | null | undefined, id: string, config: Partial<EffectUpdateProps>) => void;
};
export declare const PanelLabelWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").FastOmit<import("styled-components/dist/types").FastOmit<import("styled-components/dist/types").Substitute<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
}>, never>, never>>;
export declare const StyledColorSelectorWrapper: import("styled-components").IStyledComponent<"web", import("styled-components/dist/types").FastOmit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, never>>;
declare function EffectConfiguratorFactory(RangeSlider: ReturnType<typeof RangeSliderFactory>, EffectTimeConfigurator: ReturnType<typeof EffectTimeConfiguratorFactory>): React.FC<EffectConfiguratorProps>;
declare namespace EffectConfiguratorFactory {
    var deps: (typeof RangeSliderFactory | typeof EffectTimeConfiguratorFactory)[];
}
export default EffectConfiguratorFactory;
