"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _itemSelector = _interopRequireDefault(require("../common/item-selector/item-selector"));
var _effectTypeDropdownList = _interopRequireDefault(require("./effect-type-dropdown-list"));
var _effectTypeListItem = _interopRequireWildcard(require("./effect-type-list-item"));
var _templateObject, _templateObject2; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var DropdownWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  border: 0;\n  width: 100%;\n  left: 0;\n  z-index: ", ";\n  width: 297px;\n  margin-left: -194px;\n  margin-top: 26px;\n\n  .typeahead__input {\n    border-color: ", ";\n    border-radius: 4px 4px 0px 0px !important;\n  }\n  .typeahead__input_box {\n    padding: 0px;\n  }\n  .typeahead__input_icon {\n    top: 34px;\n    right: 9px;\n  }\n"])), function (props) {
  return props.theme.dropdownWrapperZ;
}, function (props) {
  return props.theme.activeColor;
});
var StyledEffectTypeSelector = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  .item-selector .item-selector__dropdown {\n    padding: 4px 10px 4px 10px;\n    background-color: ", ";\n    border-radius: ", ";\n    font-size: ", ";\n    border: none;\n\n    &:hover {\n      background-color: ", ";\n    }\n\n    .item-selector__dropdown__value {\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.secondaryBtnBgd;
}, function (props) {
  return props.theme.primaryBtnRadius;
}, function (props) {
  return props.theme.primaryBtnFontSizeDefault;
}, function (props) {
  return props.theme.secondaryBtnBgdHover;
}, function (props) {
  return props.theme.secondaryBtnActColor;
});
var getDisplayOption = function getDisplayOption(op) {
  return op.name;
};
var getOptionValue = function getOptionValue(op) {
  return op.type;
};
EffectTypeSelectorFactory.deps = [_effectTypeListItem["default"], _effectTypeDropdownList["default"]];
function EffectTypeSelectorFactory(EffectTypeListItem, EffectTypeDropdownList) {
  var EffectTypeSelector = function EffectTypeSelector(_ref) {
    var options = _ref.options,
      onSelect = _ref.onSelect,
      onBlur = _ref.onBlur,
      onOpen = _ref.onOpen;
    // Make sure effect type selector has dummy as selection
    var selectedItems = (0, _react.useMemo)(function () {
      return [{
        type: _effectTypeListItem.DUMMY_ITEM_ID,
        name: _effectTypeListItem.DUMMY_ITEM_ID
      }];
    }, []);
    return /*#__PURE__*/_react["default"].createElement(StyledEffectTypeSelector, {
      className: "effect-config__type"
    }, /*#__PURE__*/_react["default"].createElement(_itemSelector["default"], {
      selectedItems: selectedItems,
      options: options,
      multiSelect: false,
      disabled: false,
      placeholder: "effectManager.addEffect",
      onChange: onSelect,
      onBlur: onBlur,
      onOpen: onOpen,
      getOptionValue: getOptionValue,
      filterOption: "name",
      displayOption: getDisplayOption,
      DropDownLineItemRenderComponent: EffectTypeListItem,
      DropDownRenderComponent: EffectTypeDropdownList,
      DropDownWrapperComponent: DropdownWrapper
    }));
  };
  return (0, _styledComponents.withTheme)(EffectTypeSelector);
}
var _default = exports["default"] = EffectTypeSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,