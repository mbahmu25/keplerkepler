"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireWildcard(require("react"));
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _constants = require("@kepler.gl/constants");
var _itemSelector = _interopRequireDefault(require("../common/item-selector/item-selector"));
var _templateObject; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var getValue = function getValue(op) {
  return (op === null || op === void 0 ? void 0 : op.name) || _constants.DEFAULT_TIMEZONE;
};
var StyledItemSelector = (0, _styledComponents["default"])(_itemSelector["default"])(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  .item-selector__dropdown {\n    padding-left: 30px;\n    border-radius: 4px;\n  }\n  .active {\n    border-color: ", ";\n    border-radius: 4px 4px 0px 0px !important;\n  }\n"])), function (props) {
  return props.theme.activeColor;
});
var defaultTimezones = _momentTimezone["default"].tz.names().map(function (name) {
  return {
    name: name
  };
});
function TimezoneSelectorFactory() {
  var TimezoneTypeSelector = function TimezoneTypeSelector(_ref) {
    var selected = _ref.selected,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? defaultTimezones : _ref$options,
      onSelect = _ref.onSelect;
    var selectedItems = (0, _react.useMemo)(function () {
      return selected ? [{
        name: selected
      }] : [];
    }, [selected]);
    return /*#__PURE__*/_react["default"].createElement(StyledItemSelector, {
      selectedItems: selectedItems,
      options: options,
      multiSelect: false,
      disabled: false,
      placeholder: "effectManager.timezone",
      onChange: onSelect,
      filterOption: "name",
      getOptionValue: getValue,
      displayOption: getValue,
      searchable: true,
      showArrow: true
    });
  };
  return (0, _styledComponents.withTheme)(TimezoneTypeSelector);
}
var _default = exports["default"] = TimezoneSelectorFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfbW9tZW50VGltZXpvbmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0eWxlZENvbXBvbmVudHMiLCJfY29uc3RhbnRzIiwiX2l0ZW1TZWxlY3RvciIsIl90ZW1wbGF0ZU9iamVjdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImdldFZhbHVlIiwib3AiLCJuYW1lIiwiREVGQVVMVF9USU1FWk9ORSIsIlN0eWxlZEl0ZW1TZWxlY3RvciIsInN0eWxlZCIsIkl0ZW1TZWxlY3RvciIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwicHJvcHMiLCJ0aGVtZSIsImFjdGl2ZUNvbG9yIiwiZGVmYXVsdFRpbWV6b25lcyIsIm1vbWVudCIsInR6IiwibmFtZXMiLCJtYXAiLCJUaW1lem9uZVNlbGVjdG9yRmFjdG9yeSIsIlRpbWV6b25lVHlwZVNlbGVjdG9yIiwiX3JlZiIsInNlbGVjdGVkIiwiX3JlZiRvcHRpb25zIiwib3B0aW9ucyIsIm9uU2VsZWN0Iiwic2VsZWN0ZWRJdGVtcyIsInVzZU1lbW8iLCJjcmVhdGVFbGVtZW50IiwibXVsdGlTZWxlY3QiLCJkaXNhYmxlZCIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJmaWx0ZXJPcHRpb24iLCJnZXRPcHRpb25WYWx1ZSIsImRpc3BsYXlPcHRpb24iLCJzZWFyY2hhYmxlIiwic2hvd0Fycm93Iiwid2l0aFRoZW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VmZmVjdHMvdGltZXpvbmUtc2VsZWN0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCwge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJztcbmltcG9ydCBzdHlsZWQsIHt3aXRoVGhlbWV9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IHtERUZBVUxUX1RJTUVaT05FfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5cbmltcG9ydCBJdGVtU2VsZWN0b3IgZnJvbSAnLi4vY29tbW9uL2l0ZW0tc2VsZWN0b3IvaXRlbS1zZWxlY3Rvcic7XG5cbmNvbnN0IGdldFZhbHVlID0gb3AgPT4gb3A/Lm5hbWUgfHwgREVGQVVMVF9USU1FWk9ORTtcblxuZXhwb3J0IHR5cGUgVGltZXpvbmVTZWxlY3RvclByb3BzID0ge1xuICBzZWxlY3RlZD86IHN0cmluZztcbiAgb3B0aW9ucz86IHtuYW1lOiBzdHJpbmd9W107XG4gIG9uU2VsZWN0OiAoc3RyaW5nKSA9PiB2b2lkO1xuICB0aGVtZT86IGFueTtcbn07XG5cbmNvbnN0IFN0eWxlZEl0ZW1TZWxlY3RvciA9IHN0eWxlZChJdGVtU2VsZWN0b3IpYFxuICAuaXRlbS1zZWxlY3Rvcl9fZHJvcGRvd24ge1xuICAgIHBhZGRpbmctbGVmdDogMzBweDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIH1cbiAgLmFjdGl2ZSB7XG4gICAgYm9yZGVyLWNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmFjdGl2ZUNvbG9yfTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDBweCAwcHggIWltcG9ydGFudDtcbiAgfVxuYDtcblxuY29uc3QgZGVmYXVsdFRpbWV6b25lcyA9IG1vbWVudC50ei5uYW1lcygpLm1hcChuYW1lID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lXG4gIH07XG59KTtcblxuZnVuY3Rpb24gVGltZXpvbmVTZWxlY3RvckZhY3RvcnkoKSB7XG4gIGNvbnN0IFRpbWV6b25lVHlwZVNlbGVjdG9yOiBSZWFjdC5GQzxUaW1lem9uZVNlbGVjdG9yUHJvcHM+ID0gKHtcbiAgICBzZWxlY3RlZCxcbiAgICBvcHRpb25zID0gZGVmYXVsdFRpbWV6b25lcyxcbiAgICBvblNlbGVjdFxuICB9OiBUaW1lem9uZVNlbGVjdG9yUHJvcHMpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZEl0ZW1zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICByZXR1cm4gc2VsZWN0ZWQgPyBbe25hbWU6IHNlbGVjdGVkfV0gOiBbXTtcbiAgICB9LCBbc2VsZWN0ZWRdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U3R5bGVkSXRlbVNlbGVjdG9yXG4gICAgICAgIHNlbGVjdGVkSXRlbXM9e3NlbGVjdGVkSXRlbXN9XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgIG11bHRpU2VsZWN0PXtmYWxzZX1cbiAgICAgICAgZGlzYWJsZWQ9e2ZhbHNlfVxuICAgICAgICBwbGFjZWhvbGRlcj1cImVmZmVjdE1hbmFnZXIudGltZXpvbmVcIlxuICAgICAgICBvbkNoYW5nZT17b25TZWxlY3R9XG4gICAgICAgIGZpbHRlck9wdGlvbj1cIm5hbWVcIlxuICAgICAgICBnZXRPcHRpb25WYWx1ZT17Z2V0VmFsdWV9XG4gICAgICAgIGRpc3BsYXlPcHRpb249e2dldFZhbHVlfVxuICAgICAgICBzZWFyY2hhYmxlPXt0cnVlfVxuICAgICAgICBzaG93QXJyb3c9e3RydWV9XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIHdpdGhUaGVtZShUaW1lem9uZVR5cGVTZWxlY3RvcikgYXMgUmVhY3QuRkM8T21pdDxUaW1lem9uZVNlbGVjdG9yUHJvcHMsICd0aGVtZSc+Pjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGltZXpvbmVTZWxlY3RvckZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLGlCQUFBLEdBQUFKLHVCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBSSxVQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxhQUFBLEdBQUFILHNCQUFBLENBQUFGLE9BQUE7QUFBaUUsSUFBQU0sZUFBQSxFQVRqRTtBQUNBO0FBQUEsU0FBQUMseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFULHdCQUFBUyxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsZ0JBQUFLLE9BQUEsQ0FBQUwsQ0FBQSwwQkFBQUEsQ0FBQSxzQkFBQUEsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLGNBQUFSLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBVUEsSUFBTVcsUUFBUSxHQUFHLFNBQVhBLFFBQVFBLENBQUdDLEVBQUU7RUFBQSxPQUFJLENBQUFBLEVBQUUsYUFBRkEsRUFBRSx1QkFBRkEsRUFBRSxDQUFFQyxJQUFJLEtBQUlDLDJCQUFnQjtBQUFBO0FBU25ELElBQU1DLGtCQUFrQixHQUFHLElBQUFDLDRCQUFNLEVBQUNDLHdCQUFZLENBQUMsQ0FBQTNCLGVBQUEsS0FBQUEsZUFBQSxPQUFBNEIsdUJBQUEsdU1BTTNCLFVBQUFDLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsV0FBVztBQUFBLEVBR25EO0FBRUQsSUFBTUMsZ0JBQWdCLEdBQUdDLDBCQUFNLENBQUNDLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLFVBQUFiLElBQUksRUFBSTtFQUNyRCxPQUFPO0lBQ0xBLElBQUksRUFBSkE7RUFDRixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsU0FBU2MsdUJBQXVCQSxDQUFBLEVBQUc7RUFDakMsSUFBTUMsb0JBQXFELEdBQUcsU0FBeERBLG9CQUFxREEsQ0FBQUMsSUFBQSxFQUk5QjtJQUFBLElBSDNCQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtNQUFBQyxZQUFBLEdBQUFGLElBQUEsQ0FDUkcsT0FBTztNQUFQQSxPQUFPLEdBQUFELFlBQUEsY0FBR1QsZ0JBQWdCLEdBQUFTLFlBQUE7TUFDMUJFLFFBQVEsR0FBQUosSUFBQSxDQUFSSSxRQUFRO0lBRVIsSUFBTUMsYUFBYSxHQUFHLElBQUFDLGNBQU8sRUFBQyxZQUFNO01BQ2xDLE9BQU9MLFFBQVEsR0FBRyxDQUFDO1FBQUNqQixJQUFJLEVBQUVpQjtNQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUU7SUFDM0MsQ0FBQyxFQUFFLENBQUNBLFFBQVEsQ0FBQyxDQUFDO0lBRWQsb0JBQ0VoRCxNQUFBLFlBQUFzRCxhQUFBLENBQUNyQixrQkFBa0I7TUFDakJtQixhQUFhLEVBQUVBLGFBQWM7TUFDN0JGLE9BQU8sRUFBRUEsT0FBUTtNQUNqQkssV0FBVyxFQUFFLEtBQU07TUFDbkJDLFFBQVEsRUFBRSxLQUFNO01BQ2hCQyxXQUFXLEVBQUMsd0JBQXdCO01BQ3BDQyxRQUFRLEVBQUVQLFFBQVM7TUFDbkJRLFlBQVksRUFBQyxNQUFNO01BQ25CQyxjQUFjLEVBQUUvQixRQUFTO01BQ3pCZ0MsYUFBYSxFQUFFaEMsUUFBUztNQUN4QmlDLFVBQVUsRUFBRSxJQUFLO01BQ2pCQyxTQUFTLEVBQUU7SUFBSyxDQUNqQixDQUFDO0VBRU4sQ0FBQztFQUVELE9BQU8sSUFBQUMsMkJBQVMsRUFBQ2xCLG9CQUFvQixDQUFDO0FBQ3hDO0FBQUMsSUFBQW1CLFFBQUEsR0FBQUMsT0FBQSxjQUVjckIsdUJBQXVCIiwiaWdub3JlTGlzdCI6W119