"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateAccessors = validateAccessors;
exports.validateColorVector = validateColorVector;
exports.validateVectorAccessors = validateVectorAccessors;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typed = require("@deck.gl/core/typed");
var arrow = _interopRequireWildcard(require("apache-arrow"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// deck.gl-community
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
function validateAccessors(props, table) {
  var vectorAccessors = [];
  var colorVectorAccessors = [];
  for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
      accessorName = _Object$entries$_i[0],
      accessorValue = _Object$entries$_i[1];
    // Is it an accessor
    if (accessorName.startsWith('get')) {
      // Is it a vector accessor
      if (accessorValue instanceof arrow.Vector) {
        vectorAccessors.push(accessorValue);

        // Is it a color vector accessor
        if (accessorName.endsWith('Color')) {
          colorVectorAccessors.push(accessorValue);
        }
      }
    }
  }
  validateVectorAccessors(table, vectorAccessors);
  for (var _i2 = 0, _colorVectorAccessors = colorVectorAccessors; _i2 < _colorVectorAccessors.length; _i2++) {
    var colorVectorAccessor = _colorVectorAccessors[_i2];
    validateColorVector(colorVectorAccessor);
  }
}

/**
 * Provide validation for accessors provided
 *
 * - Assert that all vectors have the same number of chunks as the main table
 * - Assert that all chunks in each vector have the same number of rows as the
 *   relevant batch in the main table.
 *
 */
function validateVectorAccessors(table, vectorAccessors) {
  // Check the same number of chunks as the table's batches
  var _iterator = _createForOfIteratorHelper(vectorAccessors),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var vectorAccessor = _step.value;
      (0, _typed.assert)(table.batches.length === vectorAccessor.data.length);
    }

    // Check that each table batch/vector data has the same number of rows
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var _iterator2 = _createForOfIteratorHelper(vectorAccessors),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _vectorAccessor = _step2.value;
      for (var i = 0; i < table.batches.length; i++) {
        (0, _typed.assert)(table.batches[i].numRows === _vectorAccessor.data[i].length);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
function validateColorVector(vector) {
  // Assert the color vector is a FixedSizeList
  (0, _typed.assert)(arrow.DataType.isFixedSizeList(vector.type));

  // Assert it has 3 or 4 values
  (0, _typed.assert)(vector.type.listSize === 3 || vector.type.listSize === 4);

  // Assert the child type is an integer
  (0, _typed.assert)(arrow.DataType.isInt(vector.type.children[0]));

  // Assert the child type is a Uint8
  // Property 'type' does not exist on type 'Int_<Ints>'. Did you mean 'TType'?
  (0, _typed.assert)(vector.type.children[0].type.bitWidth === 8);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,