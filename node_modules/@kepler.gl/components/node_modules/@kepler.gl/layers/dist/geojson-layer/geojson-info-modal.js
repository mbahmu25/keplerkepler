"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _reactMarkdown = _interopRequireDefault(require("react-markdown"));
var _reactIntl = require("react-intl");
var _localization = require("@kepler.gl/localization");
var _exampleTable = _interopRequireDefault(require("../example-table"));
var _templateObject, _templateObject2, _templateObject3; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var InfoModal = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 13px;\n  color: ", ";\n\n  pre {\n    padding: 12px;\n    background-color: #f8f8f9;\n  }\n"])), function (props) {
  return props.theme.titleColorLT;
});
var StyledTitle = _styledComponents["default"].div(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n  font-size: 20px;\n  letter-spacing: 1.25px;\n  margin: 18px 0 14px 0;\n  color: ", ";\n"])), function (props) {
  return props.theme.titleColorLT;
});
var StyledCode = _styledComponents["default"].code(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n"])), function (props) {
  return props.theme.titleColorLT;
});
var exampleTableHeader = ['id', 'latitude', 'longitude', 'sort by'];
var exampleTabbleRows = [['A', '40.81773', '-74.20986', '0'], ['A', '40.81765', '-74.20987', '1'], ['A', '40.81746', '-74.20998', '2'], ['B', '40.64375', '-74.33242', '0'], ['B', '40.64353', '-74.20987', '1'], ['B', '40.64222', '-74.33001', '2']];
var ExampleTable = function ExampleTable() {
  return /*#__PURE__*/_react["default"].createElement(_exampleTable["default"], {
    className: "geojson-example-table"
  }, /*#__PURE__*/_react["default"].createElement("thead", null, /*#__PURE__*/_react["default"].createElement("tr", null, exampleTableHeader.map(function (v) {
    return /*#__PURE__*/_react["default"].createElement("th", {
      key: v
    }, v);
  }))), /*#__PURE__*/_react["default"].createElement("tbody", null, exampleTabbleRows.map(function (row, i) {
    return /*#__PURE__*/_react["default"].createElement("tr", {
      key: i
    }, row.map(function (v, j) {
      return /*#__PURE__*/_react["default"].createElement("td", {
        key: j
      }, /*#__PURE__*/_react["default"].createElement(StyledCode, null, v));
    }));
  })));
};
var GeojsonInfoModalFactory = function GeojsonInfoModalFactory(columnMode) {
  var GeojsonInfoModal = function GeojsonInfoModal() {
    var intl = (0, _reactIntl.useIntl)();
    return /*#__PURE__*/_react["default"].createElement(InfoModal, {
      className: "geojson-info-modal"
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: "geojson-info-modal__description"
    }, /*#__PURE__*/_react["default"].createElement(_reactMarkdown["default"], {
      children: intl.formatMessage({
        id: columnMode === 'geojson' ? 'modal.polygonInfo.description' : 'modal.polygonInfo.descriptionTable'
      })
    })), columnMode === 'table' ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "geojson-info-modal__example"
    }, /*#__PURE__*/_react["default"].createElement(StyledTitle, null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
      id: "modal.polygonInfo.exampleTable"
    })), /*#__PURE__*/_react["default"].createElement(ExampleTable, null)) : null);
  };
  return GeojsonInfoModal;
};
var _default = exports["default"] = GeojsonInfoModalFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHlsZWRDb21wb25lbnRzIiwiX3JlYWN0TWFya2Rvd24iLCJfcmVhY3RJbnRsIiwiX2xvY2FsaXphdGlvbiIsIl9leGFtcGxlVGFibGUiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGVtcGxhdGVPYmplY3QyIiwiX3RlbXBsYXRlT2JqZWN0MyIsIkluZm9Nb2RhbCIsInN0eWxlZCIsImRpdiIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWwyIiwicHJvcHMiLCJ0aGVtZSIsInRpdGxlQ29sb3JMVCIsIlN0eWxlZFRpdGxlIiwiU3R5bGVkQ29kZSIsImNvZGUiLCJleGFtcGxlVGFibGVIZWFkZXIiLCJleGFtcGxlVGFiYmxlUm93cyIsIkV4YW1wbGVUYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJtYXAiLCJ2Iiwia2V5Iiwicm93IiwiaSIsImoiLCJHZW9qc29uSW5mb01vZGFsRmFjdG9yeSIsImNvbHVtbk1vZGUiLCJHZW9qc29uSW5mb01vZGFsIiwiaW50bCIsInVzZUludGwiLCJjaGlsZHJlbiIsImZvcm1hdE1lc3NhZ2UiLCJpZCIsIkZvcm1hdHRlZE1lc3NhZ2UiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VvanNvbi1sYXllci9nZW9qc29uLWluZm8tbW9kYWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBSZWFjdE1hcmtkb3duIGZyb20gJ3JlYWN0LW1hcmtkb3duJztcbmltcG9ydCB7dXNlSW50bH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAnQGtlcGxlci5nbC9sb2NhbGl6YXRpb24nO1xuXG5pbXBvcnQgVGFibGUgZnJvbSAnLi4vZXhhbXBsZS10YWJsZSc7XG5cbmNvbnN0IEluZm9Nb2RhbCA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGl0bGVDb2xvckxUfTtcblxuICBwcmUge1xuICAgIHBhZGRpbmc6IDEycHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmOTtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkVGl0bGUgPSBzdHlsZWQuZGl2YFxuICBmb250LXNpemU6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAxLjI1cHg7XG4gIG1hcmdpbjogMThweCAwIDE0cHggMDtcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGl0bGVDb2xvckxUfTtcbmA7XG5cbmNvbnN0IFN0eWxlZENvZGUgPSBzdHlsZWQuY29kZWBcbiAgY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudGl0bGVDb2xvckxUfTtcbmA7XG5cbmNvbnN0IGV4YW1wbGVUYWJsZUhlYWRlciA9IFsnaWQnLCAnbGF0aXR1ZGUnLCAnbG9uZ2l0dWRlJywgJ3NvcnQgYnknXTtcbmNvbnN0IGV4YW1wbGVUYWJibGVSb3dzID0gW1xuICBbJ0EnLCAnNDAuODE3NzMnLCAnLTc0LjIwOTg2JywgJzAnXSxcbiAgWydBJywgJzQwLjgxNzY1JywgJy03NC4yMDk4NycsICcxJ10sXG4gIFsnQScsICc0MC44MTc0NicsICctNzQuMjA5OTgnLCAnMiddLFxuICBbJ0InLCAnNDAuNjQzNzUnLCAnLTc0LjMzMjQyJywgJzAnXSxcbiAgWydCJywgJzQwLjY0MzUzJywgJy03NC4yMDk4NycsICcxJ10sXG4gIFsnQicsICc0MC42NDIyMicsICctNzQuMzMwMDEnLCAnMiddXG5dO1xuXG5jb25zdCBFeGFtcGxlVGFibGUgPSAoKSA9PiAoXG4gIDxUYWJsZSBjbGFzc05hbWU9XCJnZW9qc29uLWV4YW1wbGUtdGFibGVcIj5cbiAgICA8dGhlYWQ+XG4gICAgICA8dHI+XG4gICAgICAgIHtleGFtcGxlVGFibGVIZWFkZXIubWFwKHYgPT4gKFxuICAgICAgICAgIDx0aCBrZXk9e3Z9Pnt2fTwvdGg+XG4gICAgICAgICkpfVxuICAgICAgPC90cj5cbiAgICA8L3RoZWFkPlxuICAgIDx0Ym9keT5cbiAgICAgIHtleGFtcGxlVGFiYmxlUm93cy5tYXAoKHJvdywgaSkgPT4gKFxuICAgICAgICA8dHIga2V5PXtpfT5cbiAgICAgICAgICB7cm93Lm1hcCgodiwgaikgPT4gKFxuICAgICAgICAgICAgPHRkIGtleT17an0+XG4gICAgICAgICAgICAgIDxTdHlsZWRDb2RlPnt2fTwvU3R5bGVkQ29kZT5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvdHI+XG4gICAgICApKX1cbiAgICA8L3Rib2R5PlxuICA8L1RhYmxlPlxuKTtcblxuY29uc3QgR2VvanNvbkluZm9Nb2RhbEZhY3RvcnkgPSBjb2x1bW5Nb2RlID0+IHtcbiAgY29uc3QgR2VvanNvbkluZm9Nb2RhbCA9ICgpID0+IHtcbiAgICBjb25zdCBpbnRsID0gdXNlSW50bCgpO1xuICAgIHJldHVybiAoXG4gICAgICA8SW5mb01vZGFsIGNsYXNzTmFtZT1cImdlb2pzb24taW5mby1tb2RhbFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdlb2pzb24taW5mby1tb2RhbF9fZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICA8UmVhY3RNYXJrZG93blxuICAgICAgICAgICAgY2hpbGRyZW49e2ludGwuZm9ybWF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgIGlkOlxuICAgICAgICAgICAgICAgIGNvbHVtbk1vZGUgPT09ICdnZW9qc29uJ1xuICAgICAgICAgICAgICAgICAgPyAnbW9kYWwucG9seWdvbkluZm8uZGVzY3JpcHRpb24nXG4gICAgICAgICAgICAgICAgICA6ICdtb2RhbC5wb2x5Z29uSW5mby5kZXNjcmlwdGlvblRhYmxlJ1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtjb2x1bW5Nb2RlID09PSAndGFibGUnID8gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2VvanNvbi1pbmZvLW1vZGFsX19leGFtcGxlXCI+XG4gICAgICAgICAgICA8U3R5bGVkVGl0bGU+XG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwibW9kYWwucG9seWdvbkluZm8uZXhhbXBsZVRhYmxlXCIgLz5cbiAgICAgICAgICAgIDwvU3R5bGVkVGl0bGU+XG4gICAgICAgICAgICA8RXhhbXBsZVRhYmxlIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9JbmZvTW9kYWw+XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIEdlb2pzb25JbmZvTW9kYWw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHZW9qc29uSW5mb01vZGFsRmFjdG9yeTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxpQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsY0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsVUFBQSxHQUFBSCxPQUFBO0FBRUEsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBRUEsSUFBQUssYUFBQSxHQUFBTixzQkFBQSxDQUFBQyxPQUFBO0FBQXFDLElBQUFNLGVBQUEsRUFBQUMsZ0JBQUEsRUFBQUMsZ0JBQUEsRUFWckM7QUFDQTtBQVdBLElBQU1DLFNBQVMsR0FBR0MsNEJBQU0sQ0FBQ0MsR0FBRyxDQUFBTCxlQUFBLEtBQUFBLGVBQUEsT0FBQU0sdUJBQUEsK0hBRWpCLFVBQUFDLEtBQUs7RUFBQSxPQUFJQSxLQUFLLENBQUNDLEtBQUssQ0FBQ0MsWUFBWTtBQUFBLEVBTTNDO0FBRUQsSUFBTUMsV0FBVyxHQUFHTiw0QkFBTSxDQUFDQyxHQUFHLENBQUFKLGdCQUFBLEtBQUFBLGdCQUFBLE9BQUFLLHVCQUFBLGdIQUluQixVQUFBQyxLQUFLO0VBQUEsT0FBSUEsS0FBSyxDQUFDQyxLQUFLLENBQUNDLFlBQVk7QUFBQSxFQUMzQztBQUVELElBQU1FLFVBQVUsR0FBR1AsNEJBQU0sQ0FBQ1EsSUFBSSxDQUFBVixnQkFBQSxLQUFBQSxnQkFBQSxPQUFBSSx1QkFBQSx1Q0FDbkIsVUFBQUMsS0FBSztFQUFBLE9BQUlBLEtBQUssQ0FBQ0MsS0FBSyxDQUFDQyxZQUFZO0FBQUEsRUFDM0M7QUFFRCxJQUFNSSxrQkFBa0IsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQztBQUNyRSxJQUFNQyxpQkFBaUIsR0FBRyxDQUN4QixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUNuQyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUNuQyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUNuQyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUNuQyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUNuQyxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUNwQztBQUVELElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBO0VBQUEsb0JBQ2hCdkIsTUFBQSxZQUFBd0IsYUFBQSxDQUFDakIsYUFBQSxXQUFLO0lBQUNrQixTQUFTLEVBQUM7RUFBdUIsZ0JBQ3RDekIsTUFBQSxZQUFBd0IsYUFBQSw2QkFDRXhCLE1BQUEsWUFBQXdCLGFBQUEsYUFDR0gsa0JBQWtCLENBQUNLLEdBQUcsQ0FBQyxVQUFBQyxDQUFDO0lBQUEsb0JBQ3ZCM0IsTUFBQSxZQUFBd0IsYUFBQTtNQUFJSSxHQUFHLEVBQUVEO0lBQUUsR0FBRUEsQ0FBTSxDQUFDO0VBQUEsQ0FDckIsQ0FDQyxDQUNDLENBQUMsZUFDUjNCLE1BQUEsWUFBQXdCLGFBQUEsZ0JBQ0dGLGlCQUFpQixDQUFDSSxHQUFHLENBQUMsVUFBQ0csR0FBRyxFQUFFQyxDQUFDO0lBQUEsb0JBQzVCOUIsTUFBQSxZQUFBd0IsYUFBQTtNQUFJSSxHQUFHLEVBQUVFO0lBQUUsR0FDUkQsR0FBRyxDQUFDSCxHQUFHLENBQUMsVUFBQ0MsQ0FBQyxFQUFFSSxDQUFDO01BQUEsb0JBQ1ovQixNQUFBLFlBQUF3QixhQUFBO1FBQUlJLEdBQUcsRUFBRUc7TUFBRSxnQkFDVC9CLE1BQUEsWUFBQXdCLGFBQUEsQ0FBQ0wsVUFBVSxRQUFFUSxDQUFjLENBQ3pCLENBQUM7SUFBQSxDQUNOLENBQ0MsQ0FBQztFQUFBLENBQ04sQ0FDSSxDQUNGLENBQUM7QUFBQSxDQUNUO0FBRUQsSUFBTUssdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUF1QkEsQ0FBR0MsVUFBVSxFQUFJO0VBQzVDLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBZ0JBLENBQUEsRUFBUztJQUM3QixJQUFNQyxJQUFJLEdBQUcsSUFBQUMsa0JBQU8sRUFBQyxDQUFDO0lBQ3RCLG9CQUNFcEMsTUFBQSxZQUFBd0IsYUFBQSxDQUFDYixTQUFTO01BQUNjLFNBQVMsRUFBQztJQUFvQixnQkFDdkN6QixNQUFBLFlBQUF3QixhQUFBO01BQUtDLFNBQVMsRUFBQztJQUFpQyxnQkFDOUN6QixNQUFBLFlBQUF3QixhQUFBLENBQUNwQixjQUFBLFdBQWE7TUFDWmlDLFFBQVEsRUFBRUYsSUFBSSxDQUFDRyxhQUFhLENBQUM7UUFDM0JDLEVBQUUsRUFDQU4sVUFBVSxLQUFLLFNBQVMsR0FDcEIsK0JBQStCLEdBQy9CO01BQ1IsQ0FBQztJQUFFLENBQ0osQ0FDRSxDQUFDLEVBQ0xBLFVBQVUsS0FBSyxPQUFPLGdCQUNyQmpDLE1BQUEsWUFBQXdCLGFBQUE7TUFBS0MsU0FBUyxFQUFDO0lBQTZCLGdCQUMxQ3pCLE1BQUEsWUFBQXdCLGFBQUEsQ0FBQ04sV0FBVyxxQkFDVmxCLE1BQUEsWUFBQXdCLGFBQUEsQ0FBQ2xCLGFBQUEsQ0FBQWtDLGdCQUFnQjtNQUFDRCxFQUFFLEVBQUM7SUFBZ0MsQ0FBRSxDQUM1QyxDQUFDLGVBQ2R2QyxNQUFBLFlBQUF3QixhQUFBLENBQUNELFlBQVksTUFBRSxDQUNaLENBQUMsR0FDSixJQUNLLENBQUM7RUFFaEIsQ0FBQztFQUNELE9BQU9XLGdCQUFnQjtBQUN6QixDQUFDO0FBQUMsSUFBQU8sUUFBQSxHQUFBQyxPQUFBLGNBRWFWLHVCQUF1QiIsImlnbm9yZUxpc3QiOltdfQ==