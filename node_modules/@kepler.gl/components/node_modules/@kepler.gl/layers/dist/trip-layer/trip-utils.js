"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coordHasLength4 = coordHasLength4;
exports.getAnimationDomainFromTimestamps = getAnimationDomainFromTimestamps;
exports.isTripGeoJsonField = isTripGeoJsonField;
exports.parseTripGeoJsonTimestamp = parseTripGeoJsonTimestamp;
var _geojsonUtils = require("../geojson-layer/geojson-utils");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * Parse geojson from string
 * @param {array} samples feature object values
 * @returns whether the geometry coordinates has length of 4
 */
function coordHasLength4(samples) {
  var hasLength4 = true;
  for (var i = 0; i < samples.length; i += 1) {
    var _samples$i;
    hasLength4 = Array.isArray((_samples$i = samples[i]) === null || _samples$i === void 0 || (_samples$i = _samples$i.geometry) === null || _samples$i === void 0 ? void 0 : _samples$i.coordinates) && !samples[i].geometry.coordinates.find(function (c) {
      return c.length < 4;
    });
    if (!hasLength4) {
      break;
    }
  }
  return hasLength4;
}

/**
 * Check if geojson features are trip layer animatable by meeting 3 conditions
 * @param dataContainer geojson feature objects container
 * @param {object} field array of geojson feature objects
 * @returns whether it is trip layer animatable
 */
function isTripGeoJsonField(dataContainer, field) {
  if (dataContainer.numRows() < 1) {
    return false;
  }
  var maxCount = 10000;
  var sampleRawFeatures = dataContainer.numRows() > maxCount ? (0, _utils.getSampleContainerData)(dataContainer, maxCount) : dataContainer;
  var features = sampleRawFeatures.mapIndex(field.valueAccessor).map(_geojsonUtils.parseGeoJsonRawFeature).filter(_commonUtils.notNullorUndefined);
  var featureTypes = (0, _geojsonUtils.getGeojsonFeatureTypes)(features);

  // condition 1: contain line string
  if (!featureTypes.line) {
    return false;
  }

  // condition 2:sample line strings contain 4 coordinates
  if (!coordHasLength4(features)) {
    return false;
  }

  // condition 3:the 4th coordinate of the first feature line strings is valid time
  // @ts-expect-error
  var tsHolder = features[0].geometry.coordinates.map(function (coord) {
    return coord[3];
  });
  return Boolean((0, _commonUtils.containValidTime)(tsHolder));
}

/**
 * Get unix timestamp from animatable geojson for deck.gl trip layer
 * @param dataToFeature array of geojson feature objects, can be null
 * @returns
 */
function parseTripGeoJsonTimestamp(dataToFeature) {
  // Analyze type based on coordinates of the 1st lineString
  // select a sample trip to analyze time format
  var empty = {
    dataToTimeStamp: [],
    animationDomain: null
  };
  var sampleTrip = dataToFeature.find(function (f) {
    var _f$geometry;
    return (f === null || f === void 0 || (_f$geometry = f.geometry) === null || _f$geometry === void 0 || (_f$geometry = _f$geometry.coordinates) === null || _f$geometry === void 0 || (_f$geometry = _f$geometry[0]) === null || _f$geometry === void 0 ? void 0 : _f$geometry.length) > 3;
  });

  // if no valid geometry
  if (!sampleTrip) {
    return empty;
  }
  var analyzedType = (0, _commonUtils.containValidTime)(sampleTrip.geometry.coordinates.map(function (coord) {
    return coord[3];
  }));
  if (!analyzedType) {
    return empty;
  }
  var format = analyzedType.format;
  var getTimeValue = function getTimeValue(coord) {
    return coord && (0, _commonUtils.notNullorUndefined)(coord[3]) ? (0, _utils.timeToUnixMilli)(coord[3], format) : null;
  };
  var dataToTimeStamp = dataToFeature.map(function (f) {
    return f && f.geometry && Array.isArray(f.geometry.coordinates) ? f.geometry.coordinates.map(getTimeValue) : null;
  });
  var animationDomain = getAnimationDomainFromTimestamps(dataToTimeStamp);
  return {
    dataToTimeStamp: dataToTimeStamp,
    animationDomain: animationDomain
  };
}
function findMinFromSorted(list) {
  // check if list is null since the default value [] will only be applied when the param is undefined
  return (list === null || list === void 0 ? void 0 : list.find(function (d) {
    return (0, _commonUtils.notNullorUndefined)(d) && Number.isFinite(d);
  })) || null;
}
function findMaxFromSorted() {
  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var i = list.length - 1;
  while (i > 0) {
    if ((0, _commonUtils.notNullorUndefined)(list[i]) && Number.isFinite(list[i])) {
      return list[i];
    }
    i--;
  }
  return null;
}
function getAnimationDomainFromTimestamps() {
  var dataToTimeStamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return dataToTimeStamp.reduce(function (accu, tss) {
    var tsMin = findMinFromSorted(tss);
    var tsMax = findMaxFromSorted(tss);
    if ((0, _commonUtils.notNullorUndefined)(tsMin) && (0, _commonUtils.notNullorUndefined)(tsMax) && Number.isFinite(tsMin) && Number.isFinite(tsMax)) {
      accu[0] = Math.min(accu[0], tsMin);
      accu[1] = Math.max(accu[1], tsMax);
    }
    return accu;
  }, [Infinity, -Infinity]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,