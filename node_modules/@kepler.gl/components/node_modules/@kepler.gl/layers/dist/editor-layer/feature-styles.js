"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LINE_STYLE = exports.FEATURE_STYLE = exports.EDIT_HANDLE_STYLE = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _constants = require("./constants");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var POINT_RADIUS = 5;
var STROKE_WIDTH_SELECTED = 2.5;
var STROKE_WIDTH_NOT_SELECTED = 2;
var STROKE_SOLID_ARRAY = [0, 0];
var STROKE_DASH_ARRAY = [4, 3];
var ALPHA_0 = 0x00;
var ALPHA_005 = 0x0d;
var ALPHA_01 = 0x1a;
var ALPHA_05 = 0x80;
var ALPHA_1 = 0xff;
var PRIMARY_COLOR_TRANSPARENT = [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.PRIMARY), [ALPHA_01]);
var PRIMARY_COLOR = [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.PRIMARY), [ALPHA_1]);
var SECONDARY_COLOR_TRANSPARENT = [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.SECONDARY), [ALPHA_0]);
var TENTATIVE_FEATURE_COLOR = [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.SECONDARY), [ALPHA_1]);
var TENTATIVE_FEATURE_COLOR_TRANSPARENT = [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.SECONDARY), [ALPHA_005]);
var EDIT_HANDLE_STYLE = exports.EDIT_HANDLE_STYLE = {
  getRadius: POINT_RADIUS,
  getFillColor: SECONDARY_COLOR_TRANSPARENT,
  getOutlineColor: function getOutlineColor(handle) {
    var _handle$properties;
    return (handle === null || handle === void 0 || (_handle$properties = handle.properties) === null || _handle$properties === void 0 ? void 0 : _handle$properties.featureIndex) < 0 ? TENTATIVE_FEATURE_COLOR : PRIMARY_COLOR;
  },
  highlightMultiplier: [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.HIGHLIGHT), [ALPHA_05]),
  highlightMultiplierNone: SECONDARY_COLOR_TRANSPARENT
};
var FEATURE_STYLE = exports.FEATURE_STYLE = {
  getColor: function getColor(feature, isSelected) {
    return isSelected ? PRIMARY_COLOR_TRANSPARENT : SECONDARY_COLOR_TRANSPARENT;
  },
  highlightMultiplier: [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.HIGHLIGHT), [ALPHA_01]),
  highlightMultiplierNone: SECONDARY_COLOR_TRANSPARENT
};
var LINE_STYLE = exports.LINE_STYLE = {
  getColor: function getColor(_feature, isSelected) {
    return isSelected ? PRIMARY_COLOR : PRIMARY_COLOR;
  },
  getWidth: function getWidth(_feature, isSelected) {
    return isSelected ? STROKE_WIDTH_SELECTED : STROKE_WIDTH_NOT_SELECTED;
  },
  getTentativeLineColor: function getTentativeLineColor() {
    return TENTATIVE_FEATURE_COLOR;
  },
  getTentativeLineWidth: function getTentativeLineWidth() {
    return STROKE_WIDTH_NOT_SELECTED;
  },
  getTentativeFillColor: TENTATIVE_FEATURE_COLOR_TRANSPARENT,
  dashArray: STROKE_DASH_ARRAY,
  solidArray: STROKE_SOLID_ARRAY,
  highlightMultiplier: [].concat((0, _toConsumableArray2["default"])(_constants.COLORS.HIGHLIGHT), [ALPHA_1])
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc3RhbnRzIiwicmVxdWlyZSIsIlBPSU5UX1JBRElVUyIsIlNUUk9LRV9XSURUSF9TRUxFQ1RFRCIsIlNUUk9LRV9XSURUSF9OT1RfU0VMRUNURUQiLCJTVFJPS0VfU09MSURfQVJSQVkiLCJTVFJPS0VfREFTSF9BUlJBWSIsIkFMUEhBXzAiLCJBTFBIQV8wMDUiLCJBTFBIQV8wMSIsIkFMUEhBXzA1IiwiQUxQSEFfMSIsIlBSSU1BUllfQ09MT1JfVFJBTlNQQVJFTlQiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiQ09MT1JTIiwiUFJJTUFSWSIsIlBSSU1BUllfQ09MT1IiLCJTRUNPTkRBUllfQ09MT1JfVFJBTlNQQVJFTlQiLCJTRUNPTkRBUlkiLCJURU5UQVRJVkVfRkVBVFVSRV9DT0xPUiIsIlRFTlRBVElWRV9GRUFUVVJFX0NPTE9SX1RSQU5TUEFSRU5UIiwiRURJVF9IQU5ETEVfU1RZTEUiLCJleHBvcnRzIiwiZ2V0UmFkaXVzIiwiZ2V0RmlsbENvbG9yIiwiZ2V0T3V0bGluZUNvbG9yIiwiaGFuZGxlIiwiX2hhbmRsZSRwcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImZlYXR1cmVJbmRleCIsImhpZ2hsaWdodE11bHRpcGxpZXIiLCJISUdITElHSFQiLCJoaWdobGlnaHRNdWx0aXBsaWVyTm9uZSIsIkZFQVRVUkVfU1RZTEUiLCJnZXRDb2xvciIsImZlYXR1cmUiLCJpc1NlbGVjdGVkIiwiTElORV9TVFlMRSIsIl9mZWF0dXJlIiwiZ2V0V2lkdGgiLCJnZXRUZW50YXRpdmVMaW5lQ29sb3IiLCJnZXRUZW50YXRpdmVMaW5lV2lkdGgiLCJnZXRUZW50YXRpdmVGaWxsQ29sb3IiLCJkYXNoQXJyYXkiLCJzb2xpZEFycmF5Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1sYXllci9mZWF0dXJlLXN0eWxlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1JHQkFDb2xvcn0gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5pbXBvcnQge0ZlYXR1cmV9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5pbXBvcnQge0NPTE9SU30gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBQT0lOVF9SQURJVVMgPSA1O1xuY29uc3QgU1RST0tFX1dJRFRIX1NFTEVDVEVEID0gMi41O1xuY29uc3QgU1RST0tFX1dJRFRIX05PVF9TRUxFQ1RFRCA9IDI7XG5cbmNvbnN0IFNUUk9LRV9TT0xJRF9BUlJBWSA9IFswLCAwXTtcbmNvbnN0IFNUUk9LRV9EQVNIX0FSUkFZID0gWzQsIDNdO1xuXG5jb25zdCBBTFBIQV8wID0gMHgwMDtcbmNvbnN0IEFMUEhBXzAwNSA9IDB4MGQ7XG5jb25zdCBBTFBIQV8wMSA9IDB4MWE7XG5jb25zdCBBTFBIQV8wNSA9IDB4ODA7XG5jb25zdCBBTFBIQV8xID0gMHhmZjtcblxuY29uc3QgUFJJTUFSWV9DT0xPUl9UUkFOU1BBUkVOVDogUkdCQUNvbG9yID0gWy4uLkNPTE9SUy5QUklNQVJZLCBBTFBIQV8wMV07XG5jb25zdCBQUklNQVJZX0NPTE9SOiBSR0JBQ29sb3IgPSBbLi4uQ09MT1JTLlBSSU1BUlksIEFMUEhBXzFdO1xuY29uc3QgU0VDT05EQVJZX0NPTE9SX1RSQU5TUEFSRU5UOiBSR0JBQ29sb3IgPSBbLi4uQ09MT1JTLlNFQ09OREFSWSwgQUxQSEFfMF07XG5jb25zdCBURU5UQVRJVkVfRkVBVFVSRV9DT0xPUjogUkdCQUNvbG9yID0gWy4uLkNPTE9SUy5TRUNPTkRBUlksIEFMUEhBXzFdO1xuY29uc3QgVEVOVEFUSVZFX0ZFQVRVUkVfQ09MT1JfVFJBTlNQQVJFTlQ6IFJHQkFDb2xvciA9IFsuLi5DT0xPUlMuU0VDT05EQVJZLCBBTFBIQV8wMDVdO1xuXG5leHBvcnQgY29uc3QgRURJVF9IQU5ETEVfU1RZTEUgPSB7XG4gIGdldFJhZGl1czogUE9JTlRfUkFESVVTLFxuICBnZXRGaWxsQ29sb3I6IFNFQ09OREFSWV9DT0xPUl9UUkFOU1BBUkVOVCxcbiAgZ2V0T3V0bGluZUNvbG9yOiBoYW5kbGUgPT5cbiAgICBoYW5kbGU/LnByb3BlcnRpZXM/LmZlYXR1cmVJbmRleCA8IDAgPyBURU5UQVRJVkVfRkVBVFVSRV9DT0xPUiA6IFBSSU1BUllfQ09MT1IsXG4gIGhpZ2hsaWdodE11bHRpcGxpZXI6IFsuLi5DT0xPUlMuSElHSExJR0hULCBBTFBIQV8wNV0sXG4gIGhpZ2hsaWdodE11bHRpcGxpZXJOb25lOiBTRUNPTkRBUllfQ09MT1JfVFJBTlNQQVJFTlRcbn07XG5cbmV4cG9ydCBjb25zdCBGRUFUVVJFX1NUWUxFID0ge1xuICBnZXRDb2xvcjogKGZlYXR1cmU6IEZlYXR1cmUsIGlzU2VsZWN0ZWQ6IGJvb2xlYW4pID0+XG4gICAgaXNTZWxlY3RlZCA/IFBSSU1BUllfQ09MT1JfVFJBTlNQQVJFTlQgOiBTRUNPTkRBUllfQ09MT1JfVFJBTlNQQVJFTlQsXG4gIGhpZ2hsaWdodE11bHRpcGxpZXI6IFsuLi5DT0xPUlMuSElHSExJR0hULCBBTFBIQV8wMV0sXG4gIGhpZ2hsaWdodE11bHRpcGxpZXJOb25lOiBTRUNPTkRBUllfQ09MT1JfVFJBTlNQQVJFTlRcbn07XG5cbmV4cG9ydCBjb25zdCBMSU5FX1NUWUxFID0ge1xuICBnZXRDb2xvcjogKF9mZWF0dXJlOiBGZWF0dXJlLCBpc1NlbGVjdGVkOiBib29sZWFuKTogUkdCQUNvbG9yID0+XG4gICAgaXNTZWxlY3RlZCA/IFBSSU1BUllfQ09MT1IgOiBQUklNQVJZX0NPTE9SLFxuICBnZXRXaWR0aDogKF9mZWF0dXJlOiBGZWF0dXJlLCBpc1NlbGVjdGVkOiBib29sZWFuKTogbnVtYmVyID0+XG4gICAgaXNTZWxlY3RlZCA/IFNUUk9LRV9XSURUSF9TRUxFQ1RFRCA6IFNUUk9LRV9XSURUSF9OT1RfU0VMRUNURUQsXG4gIGdldFRlbnRhdGl2ZUxpbmVDb2xvcjogKCk6IFJHQkFDb2xvciA9PiBURU5UQVRJVkVfRkVBVFVSRV9DT0xPUixcbiAgZ2V0VGVudGF0aXZlTGluZVdpZHRoOiAoKTogbnVtYmVyID0+IFNUUk9LRV9XSURUSF9OT1RfU0VMRUNURUQsXG4gIGdldFRlbnRhdGl2ZUZpbGxDb2xvcjogVEVOVEFUSVZFX0ZFQVRVUkVfQ09MT1JfVFJBTlNQQVJFTlQsXG4gIGRhc2hBcnJheTogU1RST0tFX0RBU0hfQVJSQVksXG4gIHNvbGlkQXJyYXk6IFNUUk9LRV9TT0xJRF9BUlJBWSxcbiAgaGlnaGxpZ2h0TXVsdGlwbGllcjogWy4uLkNPTE9SUy5ISUdITElHSFQsIEFMUEhBXzFdXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU1BLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQU5BO0FBQ0E7O0FBT0EsSUFBTUMsWUFBWSxHQUFHLENBQUM7QUFDdEIsSUFBTUMscUJBQXFCLEdBQUcsR0FBRztBQUNqQyxJQUFNQyx5QkFBeUIsR0FBRyxDQUFDO0FBRW5DLElBQU1DLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQyxJQUFNQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFaEMsSUFBTUMsT0FBTyxHQUFHLElBQUk7QUFDcEIsSUFBTUMsU0FBUyxHQUFHLElBQUk7QUFDdEIsSUFBTUMsUUFBUSxHQUFHLElBQUk7QUFDckIsSUFBTUMsUUFBUSxHQUFHLElBQUk7QUFDckIsSUFBTUMsT0FBTyxHQUFHLElBQUk7QUFFcEIsSUFBTUMseUJBQW9DLE1BQUFDLE1BQUEsS0FBQUMsbUJBQUEsYUFBT0MsaUJBQU0sQ0FBQ0MsT0FBTyxJQUFFUCxRQUFRLEVBQUM7QUFDMUUsSUFBTVEsYUFBd0IsTUFBQUosTUFBQSxLQUFBQyxtQkFBQSxhQUFPQyxpQkFBTSxDQUFDQyxPQUFPLElBQUVMLE9BQU8sRUFBQztBQUM3RCxJQUFNTywyQkFBc0MsTUFBQUwsTUFBQSxLQUFBQyxtQkFBQSxhQUFPQyxpQkFBTSxDQUFDSSxTQUFTLElBQUVaLE9BQU8sRUFBQztBQUM3RSxJQUFNYSx1QkFBa0MsTUFBQVAsTUFBQSxLQUFBQyxtQkFBQSxhQUFPQyxpQkFBTSxDQUFDSSxTQUFTLElBQUVSLE9BQU8sRUFBQztBQUN6RSxJQUFNVSxtQ0FBOEMsTUFBQVIsTUFBQSxLQUFBQyxtQkFBQSxhQUFPQyxpQkFBTSxDQUFDSSxTQUFTLElBQUVYLFNBQVMsRUFBQztBQUVoRixJQUFNYyxpQkFBaUIsR0FBQUMsT0FBQSxDQUFBRCxpQkFBQSxHQUFHO0VBQy9CRSxTQUFTLEVBQUV0QixZQUFZO0VBQ3ZCdUIsWUFBWSxFQUFFUCwyQkFBMkI7RUFDekNRLGVBQWUsRUFBRSxTQUFqQkEsZUFBZUEsQ0FBRUMsTUFBTTtJQUFBLElBQUFDLGtCQUFBO0lBQUEsT0FDckIsQ0FBQUQsTUFBTSxhQUFOQSxNQUFNLGdCQUFBQyxrQkFBQSxHQUFORCxNQUFNLENBQUVFLFVBQVUsY0FBQUQsa0JBQUEsdUJBQWxCQSxrQkFBQSxDQUFvQkUsWUFBWSxJQUFHLENBQUMsR0FBR1YsdUJBQXVCLEdBQUdILGFBQWE7RUFBQTtFQUNoRmMsbUJBQW1CLEtBQUFsQixNQUFBLEtBQUFDLG1CQUFBLGFBQU1DLGlCQUFNLENBQUNpQixTQUFTLElBQUV0QixRQUFRLEVBQUM7RUFDcER1Qix1QkFBdUIsRUFBRWY7QUFDM0IsQ0FBQztBQUVNLElBQU1nQixhQUFhLEdBQUFYLE9BQUEsQ0FBQVcsYUFBQSxHQUFHO0VBQzNCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBR0MsT0FBZ0IsRUFBRUMsVUFBbUI7SUFBQSxPQUM5Q0EsVUFBVSxHQUFHekIseUJBQXlCLEdBQUdNLDJCQUEyQjtFQUFBO0VBQ3RFYSxtQkFBbUIsS0FBQWxCLE1BQUEsS0FBQUMsbUJBQUEsYUFBTUMsaUJBQU0sQ0FBQ2lCLFNBQVMsSUFBRXZCLFFBQVEsRUFBQztFQUNwRHdCLHVCQUF1QixFQUFFZjtBQUMzQixDQUFDO0FBRU0sSUFBTW9CLFVBQVUsR0FBQWYsT0FBQSxDQUFBZSxVQUFBLEdBQUc7RUFDeEJILFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFHSSxRQUFpQixFQUFFRixVQUFtQjtJQUFBLE9BQy9DQSxVQUFVLEdBQUdwQixhQUFhLEdBQUdBLGFBQWE7RUFBQTtFQUM1Q3VCLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFHRCxRQUFpQixFQUFFRixVQUFtQjtJQUFBLE9BQy9DQSxVQUFVLEdBQUdsQyxxQkFBcUIsR0FBR0MseUJBQXlCO0VBQUE7RUFDaEVxQyxxQkFBcUIsRUFBRSxTQUF2QkEscUJBQXFCQSxDQUFBO0lBQUEsT0FBbUJyQix1QkFBdUI7RUFBQTtFQUMvRHNCLHFCQUFxQixFQUFFLFNBQXZCQSxxQkFBcUJBLENBQUE7SUFBQSxPQUFnQnRDLHlCQUF5QjtFQUFBO0VBQzlEdUMscUJBQXFCLEVBQUV0QixtQ0FBbUM7RUFDMUR1QixTQUFTLEVBQUV0QyxpQkFBaUI7RUFDNUJ1QyxVQUFVLEVBQUV4QyxrQkFBa0I7RUFDOUIwQixtQkFBbUIsS0FBQWxCLE1BQUEsS0FBQUMsbUJBQUEsYUFBTUMsaUJBQU0sQ0FBQ2lCLFNBQVMsSUFBRXJCLE9BQU87QUFDcEQsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==