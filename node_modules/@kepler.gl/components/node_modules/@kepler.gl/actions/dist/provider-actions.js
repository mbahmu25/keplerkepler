"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetProviderStatus = exports.postSaveLoadSuccess = exports.loadCloudMapSuccess2 = exports.loadCloudMapSuccess = exports.loadCloudMapError = exports.loadCloudMap = exports.exportFileToCloud = exports.exportFileSuccess = exports.exportFileError = exports.ActionTypes = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _actionTypes = require("./action-types");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

// eslint-disable-next-line prettier/prettier
var assignType = function assignType(obj) {
  return obj;
};
var ActionTypes = exports.ActionTypes = assignType({
  EXPORT_FILE_TO_CLOUD: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_TO_CLOUD"),
  EXPORT_FILE_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_SUCCESS"),
  EXPORT_FILE_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_ERROR"),
  RESET_PROVIDER_STATUS: "".concat(_actionTypes.ACTION_PREFIX, "RESET_PROVIDER_STATUS"),
  POST_SAVE_LOAD_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "POST_SAVE_LOAD_SUCCESS"),
  LOAD_CLOUD_MAP: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP"),
  LOAD_CLOUD_MAP_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_SUCCESS"),
  LOAD_CLOUD_MAP_SUCCESS_2: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_SUCCESS_2"),
  LOAD_CLOUD_MAP_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_ERROR")
});

/**
 * Call provider to upload file to cloud
 * @param mapData
 * @param provider
 * @param options
 * @param onSuccess
 * @param onError
 * @param closeModal
 */
var exportFileToCloud = exports.exportFileToCloud = (0, _toolkit.createAction)(ActionTypes.EXPORT_FILE_TO_CLOUD, function (payload) {
  return {
    payload: payload
  };
});

/** EXPORT_FILE_SUCCESS */

var exportFileSuccess = exports.exportFileSuccess = (0, _toolkit.createAction)(ActionTypes.EXPORT_FILE_SUCCESS, function (payload) {
  return {
    payload: payload
  };
});

/** EXPORT_FILE_ERROR */

var exportFileError = exports.exportFileError = (0, _toolkit.createAction)(ActionTypes.EXPORT_FILE_ERROR, function (payload) {
  return {
    payload: payload
  };
});

/** POST_SAVE_LOAD_SUCCESS */

var postSaveLoadSuccess = exports.postSaveLoadSuccess = (0, _toolkit.createAction)(ActionTypes.POST_SAVE_LOAD_SUCCESS, function (message) {
  return {
    payload: message
  };
});
var resetProviderStatus = exports.resetProviderStatus = (0, _toolkit.createAction)(ActionTypes.RESET_PROVIDER_STATUS);

/** LOAD_CLOUD_MAP */

var loadCloudMap = exports.loadCloudMap = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP, function (payload) {
  return {
    payload: payload
  };
});

/** LOAD_CLOUD_MAP_SUCCESS */

var loadCloudMapSuccess = exports.loadCloudMapSuccess = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP_SUCCESS, function (payload) {
  return {
    payload: payload
  };
});

/** LOAD_CLOUD_MAP_SUCCESS_2 */

var loadCloudMapSuccess2 = exports.loadCloudMapSuccess2 = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP_SUCCESS_2, function (payload) {
  return {
    payload: payload
  };
});

/** LOAD_CLOUD_MAP_ERROR */

var loadCloudMapError = exports.loadCloudMapError = (0, _toolkit.createAction)(ActionTypes.LOAD_CLOUD_MAP_ERROR, function (payload) {
  return {
    payload: payload
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,