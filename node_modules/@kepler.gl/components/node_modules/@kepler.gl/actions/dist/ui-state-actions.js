"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toggleSidePanelCloseButton = exports.toggleSidePanel = exports.togglePanelListView = exports.toggleModal = exports.toggleMapControl = exports.startExportingImage = exports.showExportDropdown = exports.setUserMapboxAccessToken = exports.setMapControlVisibility = exports.setMapControlSettings = exports.setLocale = exports.setLoadingIndicator = exports.setExportSelectedDataset = exports.setExportMapFormat = exports.setExportImageSetting = exports.setExportImageError = exports.setExportImageDataUri = exports.setExportHTMLMapMode = exports.setExportFiltered = exports.setExportDataType = exports.setExportData = exports.removeNotification = exports.openDeleteModal = exports.hideExportDropdown = exports.cleanupExportImage = exports.addNotification = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _actionTypes = _interopRequireDefault(require("./action-types"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/** TOGGLE_SIDE_PANEL */

/**
 * Toggle active side panel
 * @memberof uiStateActions
 * @param id  id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`
 * @public
 */
var toggleSidePanel = exports.toggleSidePanel = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_SIDE_PANEL, function (id) {
  return {
    payload: id
  };
});

/** TOGGLE_MODAL */

/**
 * Show and hide modal dialog
 * @memberof uiStateActions
 * @param id - id of modal to be shown, null to hide modals. One of:
 *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)
 *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)
 *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)
 *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)
 *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)
 *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)
 * @public
 */
var toggleModal = exports.toggleModal = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_MODAL, function (id) {
  return {
    payload: id
  };
});

/** SHOW_EXPORT_DROPDOWN */

/**
 * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel
 * @memberof uiStateActions
 * @param id - id of the dropdown
 * @public
 */
var showExportDropdown = exports.showExportDropdown = (0, _toolkit.createAction)(_actionTypes["default"].SHOW_EXPORT_DROPDOWN, function (id) {
  return {
    payload: id
  };
});

/**
 * Hide side panel header dropdown, activated by clicking the share link on top of the side panel
 * @memberof uiStateActions
 * @public
 */
var hideExportDropdown = exports.hideExportDropdown = (0, _toolkit.createAction)(_actionTypes["default"].HIDE_EXPORT_DROPDOWN);

/** TOGGLE_SIDE_PANEL_CLOSE_BUTTON*/

/**
 * Toggle side panel close button
 * @memberof uiStateActions
 * @param show - if side panel button visible
 * @public
 */
var toggleSidePanelCloseButton = exports.toggleSidePanelCloseButton = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_SIDE_PANEL_CLOSE_BUTTON, function (show) {
  return {
    payload: {
      show: show
    }
  };
});

/** TOGGLE_MAP_CONTROL */

/**
 * Toggle active map control panel
 * @memberof uiStateActions
 * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)
 * @public
 */
var toggleMapControl = exports.toggleMapControl = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_MAP_CONTROL, function (panelId, index) {
  return {
    payload: {
      panelId: panelId,
      index: index
    }
  };
});

/** SET_MAP_CONTROL_VISIBILITY */

/**
 * Toggle active map control panel
 * @memberof uiStateActions
 * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)
 * @public
 */
var setMapControlVisibility = exports.setMapControlVisibility = (0, _toolkit.createAction)(_actionTypes["default"].SET_MAP_CONTROL_VISIBILITY, function (panelId, show) {
  return {
    payload: {
      panelId: panelId,
      show: show
    }
  };
});

/** SET_MAP_CONTROL_SETTINGS */

/**
 * Set map control settings
 * @memberof uiStateActions
 * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)
 * @public
 */
var setMapControlSettings = exports.setMapControlSettings = (0, _toolkit.createAction)(_actionTypes["default"].SET_MAP_CONTROL_SETTINGS, function (panelId, settings) {
  return {
    payload: {
      panelId: panelId,
      settings: settings
    }
  };
});

/** OPEN_DELETE_MODAL */

/**
 * Toggle active map control panel
 * @memberof uiStateActions
 * @param datasetId - `id` of the dataset to be deleted
 * @public
 */
var openDeleteModal = exports.openDeleteModal = (0, _toolkit.createAction)(_actionTypes["default"].OPEN_DELETE_MODAL, function (datasetId) {
  return {
    payload: datasetId
  };
});

/** ADD_NOTIFICATION */

/**
 * Add a notification to be displayed.
 * Existing notification will be updated in case of matching id.
 * @memberof uiStateActions
 * @param notification - The `notification` object to be added or updated
 * @public
 */
var addNotification = exports.addNotification = (0, _toolkit.createAction)(_actionTypes["default"].ADD_NOTIFICATION, function (notification) {
  return {
    payload: notification
  };
});

/** REMOVE_NOTIFICATION */

/**
 * Remove a notification
 * @memberof uiStateActions
 * @param id - `id` of the notification to be removed
 * @public
 */
var removeNotification = exports.removeNotification = (0, _toolkit.createAction)(_actionTypes["default"].REMOVE_NOTIFICATION, function (id) {
  return {
    payload: id
  };
});

/** SET_EXPORT_IMAGE_SETTING */

/**
 * Set `exportImage` settings: ratio, resolution, legend
 * @memberof uiStateActions
 * @param newSetting - {ratio: '1x'}
 * @public
 */
var setExportImageSetting = exports.setExportImageSetting = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_SETTING, function (newSetting) {
  return {
    payload: newSetting
  };
});

/**
 * Start exporting image flow
 * @memberof uiStateActions
 * @public
 */
var startExportingImage = exports.startExportingImage = (0, _toolkit.createAction)(_actionTypes["default"].START_EXPORTING_IMAGE, function (payload) {
  return {
    payload: payload
  };
});

/** SET_EXPORT_IMAGE_DATA_URI */

/**
 * Set `exportImage.setExportImageDataUri` to a dataUri
 * @memberof uiStateActions
 * @param dataUri - export image data uri
 * @public
 */
var setExportImageDataUri = exports.setExportImageDataUri = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_DATA_URI, function (dataUri) {
  return {
    payload: dataUri
  };
});

/** SET_EXPORT_IMAGE_ERROR */

/**
 * Set Export image error
 * @memberof uiStateActions
 * @public
 */
var setExportImageError = exports.setExportImageError = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_ERROR, function (error) {
  return {
    payload: error
  };
});

/**
 * Delete cached export image
 * @memberof uiStateActions
 * @public
 */
var cleanupExportImage = exports.cleanupExportImage = (0, _toolkit.createAction)(_actionTypes["default"].CLEANUP_EXPORT_IMAGE);

/** SET_EXPORT_SELECTED_DATASET */

/**
 * Set selected dataset for export
 * @memberof uiStateActions
 * @param datasetId - dataset id
 * @public
 */
var setExportSelectedDataset = exports.setExportSelectedDataset = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_SELECTED_DATASET, function (datasetId) {
  return {
    payload: datasetId
  };
});

/** SET_EXPORT_DATA_TYPE */

/**
 * Set data format for exporting data
 * @memberof uiStateActions
 * @param dataType - one of `'text/csv'`
 * @public
 */
var setExportDataType = exports.setExportDataType = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_DATA_TYPE, function (dataType) {
  return {
    payload: dataType
  };
});

/** SET_EXPORT_FILTERED */

/**
 * Whether to export filtered data, `true` or `false`
 * @memberof uiStateActions
 * @param payload - set `true` to ony export filtered data
 * @public
 */
var setExportFiltered = exports.setExportFiltered = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_FILTERED, function (payload) {
  return {
    payload: payload
  };
});

/**
 * Whether to including data in map config, toggle between `true` or `false`
 * @memberof uiStateActions
 * @public
 */
var setExportData = exports.setExportData = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_DATA);

/** SET_USER_MAPBOX_ACCESS_TOKEN */

/**
 * Whether we export a mapbox access token used to create a single map html file
 * @memberof uiStateActions
 * @param payload - mapbox access token
 * @public
 */
var setUserMapboxAccessToken = exports.setUserMapboxAccessToken = (0, _toolkit.createAction)(_actionTypes["default"].SET_USER_MAPBOX_ACCESS_TOKEN, function (payload) {
  return {
    payload: payload
  };
});

/** SET_EXPORT_MAP_FORMAT */

/**
 * Set the export map format (html, json)
 * @memberOf uiStateActions
 * @param payload - map format
 * @public
 */
var setExportMapFormat = exports.setExportMapFormat = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_MAP_FORMAT, function (payload) {
  return {
    payload: payload
  };
});

/** SET_EXPORT_MAP_HTML_MODE */

/**
 * Set the HTML mode to use to export HTML mode
 * @memberOf uiStateActions
 * @param payload - map mode
 */
var setExportHTMLMapMode = exports.setExportHTMLMapMode = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_MAP_HTML_MODE, function (payload) {
  return {
    payload: payload
  };
});

/** SET_LOCALE */

/**
 * Set `locale` value
 * @memberof uiStateActions
 * @param locale - locale of the UI
 * @public
 */
var setLocale = exports.setLocale = (0, _toolkit.createAction)(_actionTypes["default"].SET_LOCALE, function (locale) {
  return {
    payload: {
      locale: locale
    }
  };
});

/** TOGGLE_PANEL_LIST_VIEW */

/**
 * Toggle layer panel list view
 * @memberof uiStateActions
 * @param payload
 * @param payload.panelId panel id.
 * @param payload.listView layer panel listView value. Can be 'list' or 'sortByDataset'
 * @public
 */
var togglePanelListView = exports.togglePanelListView = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_PANEL_LIST_VIEW, function (payload) {
  return {
    payload: payload
  };
});

/**
 * This declaration is needed to group actions in docs
 */
/**
 * Actions handled mostly by  `uiState` reducer.
 * They manage UI changes in tha app, such as open and close side panel,
 * switch between tabs in the side panel, open and close modal dialog for exporting data / images etc.
 * It also manges which settings are selected during image and map export
 *
 * @public
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
// @ts-ignore
var uiStateActions = null;
/* eslint-enable @typescript-eslint/no-unused-vars */

/** SET_LOADING_INDICATOR */

/**
 * Change of number of active loading actions.
 * @memberof uiStateActions
 * @param payload
 * @param payload.change Change of number of active loading actions.
 * @public
 */
var setLoadingIndicator = exports.setLoadingIndicator = (0, _toolkit.createAction)(_actionTypes["default"].SET_LOADING_INDICATOR, function (payload) {
  return {
    payload: payload
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,