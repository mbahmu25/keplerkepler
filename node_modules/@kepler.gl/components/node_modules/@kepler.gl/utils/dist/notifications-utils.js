"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.successNotification = exports.exportImageError = exports.errorNotification = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _excluded = ["message", "type", "topic", "id", "count"]; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/**
 * Creates a notification
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
    message = _ref$message === void 0 ? _constants.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? _constants.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
    _ref$topic = _ref.topic,
    topic = _ref$topic === void 0 ? _constants.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
    _ref$id = _ref.id,
    id = _ref$id === void 0 ? (0, _commonUtils.generateHashId)(_constants.DEFAULT_UUID_COUNT) : _ref$id,
    _ref$count = _ref.count,
    count = _ref$count === void 0 ? 1 : _ref$count,
    options = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return _objectSpread(_objectSpread({}, options), {}, {
    id: id,
    message: message,
    type: type,
    topic: topic,
    count: count > 99 ? 99 : count // no more than 2 digits
  });
}

/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */
var errorNotification = exports.errorNotification = function errorNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _constants.DEFAULT_NOTIFICATION_TYPES.error
  });
};

/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */
var successNotification = exports.successNotification = function successNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _constants.DEFAULT_NOTIFICATION_TYPES.success
  });
};
var exportImageError = exports.exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread(_objectSpread({}, options), {}, {
    id: 'EXPORT_IMAGE_ERROR_ID',
    topic: _constants.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_constants.BUG_REPORT_LINK, ") ")
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29tbW9uVXRpbHMiLCJyZXF1aXJlIiwiX2NvbnN0YW50cyIsIl9leGNsdWRlZCIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiY3JlYXRlTm90aWZpY2F0aW9uIiwiX3JlZiIsIl9yZWYkbWVzc2FnZSIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwiX3JlZiR0eXBlIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsIl9yZWYkdG9waWMiLCJ0b3BpYyIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUyIsImdsb2JhbCIsIl9yZWYkaWQiLCJpZCIsImdlbmVyYXRlSGFzaElkIiwiREVGQVVMVF9VVUlEX0NPVU5UIiwiX3JlZiRjb3VudCIsImNvdW50Iiwib3B0aW9ucyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJlcnJvck5vdGlmaWNhdGlvbiIsImV4cG9ydHMiLCJlcnJvciIsInN1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdWNjZXNzIiwiZXhwb3J0SW1hZ2VFcnJvciIsImNvbmNhdCIsIkJVR19SRVBPUlRfTElOSyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9ub3RpZmljYXRpb25zLXV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7Z2VuZXJhdGVIYXNoSWR9IGZyb20gJ0BrZXBsZXIuZ2wvY29tbW9uLXV0aWxzJztcblxuaW1wb3J0IHtcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fTUVTU0FHRSxcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLFxuICBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUyxcbiAgREVGQVVMVF9VVUlEX0NPVU5ULFxuICBCVUdfUkVQT1JUX0xJTktcbn0gZnJvbSAnQGtlcGxlci5nbC9jb25zdGFudHMnO1xuXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb24gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+ICYge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHR5cGU6ICdpbmZvJyB8ICdlcnJvcicgfCAnd2FybmluZycgfCAnc3VjY2Vzcyc7XG4gIHRvcGljOiAnZ2xvYmFsJyB8ICdmaWxlJztcbiAgY291bnQ6IG51bWJlcjtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5vdGlmaWNhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKHtcbiAgbWVzc2FnZSA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX01FU1NBR0UsXG4gIHR5cGUgPSBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5pbmZvLFxuICB0b3BpYyA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUy5nbG9iYWwsXG4gIGlkID0gZ2VuZXJhdGVIYXNoSWQoREVGQVVMVF9VVUlEX0NPVU5UKSxcbiAgY291bnQgPSAxLFxuICAuLi5vcHRpb25zXG59OiBQYXJ0aWFsPE5vdGlmaWNhdGlvbj4pOiBOb3RpZmljYXRpb24ge1xuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaWQsXG4gICAgbWVzc2FnZSxcbiAgICB0eXBlLFxuICAgIHRvcGljLFxuICAgIGNvdW50OiBjb3VudCA+IDk5ID8gOTkgOiBjb3VudCAvLyBubyBtb3JlIHRoYW4gMiBkaWdpdHNcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVycm9yIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zIHt7dG9waWMsIGlkLCBtZXNzYWdlLCB0eXBlOiAobnVsbHxudW1iZXIpfX1cbiAqL1xuZXhwb3J0IGNvbnN0IGVycm9yTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXG4gIHR5cGU6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLmVycm9yXG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3VjY2VzcyBub3RpZmljYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3RvcGljLCBpZCwgbWVzc2FnZSwgdHlwZTogbnVsbH19XG4gKi9cbmV4cG9ydCBjb25zdCBzdWNjZXNzTm90aWZpY2F0aW9uID0gb3B0aW9ucyA9PiAoe1xuICAuLi5jcmVhdGVOb3RpZmljYXRpb24ob3B0aW9ucyksXG4gIHR5cGU6IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLnN1Y2Nlc3Ncbn0pO1xuXG5leHBvcnQgY29uc3QgZXhwb3J0SW1hZ2VFcnJvciA9IG9wdGlvbnMgPT5cbiAgZXJyb3JOb3RpZmljYXRpb24oe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaWQ6ICdFWFBPUlRfSU1BR0VfRVJST1JfSUQnLFxuICAgIHRvcGljOiBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MuZ2xvYmFsLFxuICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gZXhwb3J0IGltYWdlLCBwbGVhc2UgdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGphdmFzY3JpcHQgY29uc29sZSwgcmVwb3J0IHRoZSB3aXRoIFt0aGlzIGxpbmtdKCR7QlVHX1JFUE9SVF9MSU5LfSkgYFxuICB9KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUdBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLFVBQUEsR0FBQUQs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