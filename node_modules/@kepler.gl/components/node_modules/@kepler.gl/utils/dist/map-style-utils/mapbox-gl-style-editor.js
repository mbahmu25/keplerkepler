"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editTopMapStyle = exports.editBottomMapStyle = void 0;
exports.getDefaultLayerGroupVisibility = getDefaultLayerGroupVisibility;
exports.getStyleDownloadUrl = getStyleDownloadUrl;
exports.getStyleImageIcon = getStyleImageIcon;
exports.mergeLayerGroupVisibility = mergeLayerGroupVisibility;
exports.scaleMapStyleByResolution = scaleMapStyleByResolution;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _lodash = _interopRequireDefault(require("lodash.memoize"));
var _lodash2 = _interopRequireDefault(require("lodash.clonedeep"));
var _constants = require("@kepler.gl/constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function getDefaultLayerGroupVisibility(_ref) {
  var _ref$layerGroups = _ref.layerGroups,
    layerGroups = _ref$layerGroups === void 0 ? [] : _ref$layerGroups;
  return layerGroups.reduce(function (accu, layer) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, layer.slug, layer.defaultVisibility));
  }, {});
}
var resolver = function resolver(_ref2) {
  var id = _ref2.id,
    _ref2$visibleLayerGro = _ref2.visibleLayerGroups,
    visibleLayerGroups = _ref2$visibleLayerGro === void 0 ? {} : _ref2$visibleLayerGro;
  return "".concat(id, ":").concat(Object.keys(visibleLayerGroups).filter(function (d) {
    return visibleLayerGroups[d];
  }).sort().join('-'));
};

/**
 * Edit preset map style to keep only visible layers
 *
 * @param mapStyle - preset map style
 * @param visibleLayerGroups - visible layers of top map
 * @returns top map style
 */
var editTopMapStyle = exports.editTopMapStyle = (0, _lodash["default"])(function (_ref3) {
  var mapStyle = _ref3.mapStyle,
    visibleLayerGroups = _ref3.visibleLayerGroups;
  var visibleFilters = (mapStyle.layerGroups || []).filter(function (lg) {
    return visibleLayerGroups[lg.slug];
  }).map(function (lg) {
    return lg.filter;
  });

  // if top map
  // keep only visible layers
  // @ts-expect-error
  var filteredLayers = mapStyle.style.layers.filter(function (layer) {
    return visibleFilters.some(function (match) {
      return match(layer);
    });
  });
  return _objectSpread(_objectSpread({}, mapStyle.style), {}, {
    layers: filteredLayers
  });
}, resolver);

/**
 * Edit preset map style to filter out invisible layers
 *
 * @param {Object} mapStyle - preset map style
 * @param {Object} visibleLayerGroups - visible layers of bottom map
 * @returns {Object} bottom map style
 */
var editBottomMapStyle = exports.editBottomMapStyle = (0, _lodash["default"])(function (_ref4) {
  var id = _ref4.id,
    mapStyle = _ref4.mapStyle,
    visibleLayerGroups = _ref4.visibleLayerGroups;
  if (id === _constants.NO_MAP_ID) {
    return _constants.EMPTY_MAPBOX_STYLE;
  }
  var invisibleFilters = (mapStyle.layerGroups || []).filter(function (lg) {
    return !visibleLayerGroups[lg.slug];
  }).map(function (lg) {
    return lg.filter;
  });

  // if bottom map
  // filter out invisible layers
  var filteredLayers = mapStyle.style.layers.filter(function (layer) {
    return invisibleFilters.every(function (match) {
      return !match(layer);
    });
  });
  return _objectSpread(_objectSpread({}, mapStyle.style), {}, {
    layers: filteredLayers
  });
}, resolver);
function getStyleDownloadUrl(styleUrl, accessToken, mapboxApiUrl) {
  if (styleUrl.startsWith('http')) {
    return styleUrl;
  }

  // mapbox://styles/jckr/cjhcl0lxv13di2rpfoytdbdyj
  if (styleUrl.startsWith('mapbox://styles')) {
    var styleId = styleUrl.replace('mapbox://styles/', '');

    // https://api.mapbox.com/styles/v1/heshan0131/cjg1bfumo1cwm2rlrjxkinfgw?pluginName=Keplergl&access_token=<token>
    return "".concat(mapboxApiUrl || _constants.DEFAULT_MAPBOX_API_URL, "/styles/v1/").concat(styleId, "?pluginName=Keplergl&access_token=").concat(accessToken);
  }

  // style url not recognized
  return null;
}

/**
 * Generate static map image from style Url to be used as icon
 * @param param
 * @param param.styleUrl
 * @param param.mapboxApiAccessToken
 * @param param.mapboxApiUrl
 * @param param.mapState
 * @param param.mapW
 * @param param.mapH
 */
function getStyleImageIcon(_ref5) {
  var styleUrl = _ref5.styleUrl,
    mapboxApiAccessToken = _ref5.mapboxApiAccessToken,
    _ref5$mapboxApiUrl = _ref5.mapboxApiUrl,
    mapboxApiUrl = _ref5$mapboxApiUrl === void 0 ? _constants.DEFAULT_MAPBOX_API_URL : _ref5$mapboxApiUrl,
    _ref5$mapState = _ref5.mapState,
    mapState = _ref5$mapState === void 0 ? {
      longitude: -122.3391,
      latitude: 37.7922,
      zoom: 9
    } : _ref5$mapState,
    _ref5$mapW = _ref5.mapW,
    mapW = _ref5$mapW === void 0 ? 400 : _ref5$mapW,
    _ref5$mapH = _ref5.mapH,
    mapH = _ref5$mapH === void 0 ? 300 : _ref5$mapH;
  var styleId = styleUrl.replace('mapbox://styles/', '');
  return "".concat(mapboxApiUrl, "/styles/v1/").concat(styleId, "/static/") + "".concat(mapState.longitude, ",").concat(mapState.latitude, ",").concat(mapState.zoom, ",0,0/") + "".concat(mapW, "x").concat(mapH) + "?access_token=".concat(mapboxApiAccessToken, "&logo=false&attribution=false");
}
function scaleMapStyleByResolution(mapboxStyle, scale) {
  if (scale !== 1 && mapboxStyle) {
    var labelLayerGroup = _constants.DEFAULT_LAYER_GROUPS.find(function (lg) {
      return lg.slug === 'label';
    });
    // @ts-ignore
    var labelLayerFilter = labelLayerGroup.filter;
    var zoomOffset = Math.log2(scale);
    var copyStyle = (0, _lodash2["default"])(mapboxStyle);
    (copyStyle.layers || []).forEach(function (d) {
      // edit minzoom and maxzoom
      if (d.maxzoom) {
        d.maxzoom = Math.max(d.maxzoom + zoomOffset, 1);

        // The maximum zoom is 24
        // https://github.com/visgl/react-map-gl/blob/master/docs/api-reference/map.md#maxzoom-number-maxzoom
        if (d.maxzoom > 24) {
          d.maxzoom = 24;
        }
      }
      if (d.minzoom) {
        d.minzoom = Math.max(d.minzoom + zoomOffset, 1);
      }

      // edit text size
      if (labelLayerFilter(d)) {
        if (d.layout && d.layout['text-size'] && Array.isArray(d.layout['text-size'].stops)) {
          d.layout['text-size'].stops.forEach(function (stop) {
            // zoom
            stop[0] = Math.max(stop[0] + zoomOffset, 1);
            // size
            stop[1] *= scale;
          });
        }
      }
    });
    return copyStyle;
  }
  return mapboxStyle;
}

/**
 * When switch to a new style, try to keep current layer group visibility
 * by merging default and current
 * @param {Object} defaultLayerGroup
 * @param {Object} currentLayerGroup
 * @return {Object} mergedLayerGroups
 */
function mergeLayerGroupVisibility(defaultLayerGroup, currentLayerGroup) {
  return Object.keys(defaultLayerGroup).reduce(function (accu, key) {
    return _objectSpread(_objectSpread({}, accu), Object.prototype.hasOwnProperty.call(currentLayerGroup, key) ? (0, _defineProperty2["default"])({}, key, currentLayerGroup[key]) : {});
  }, defaultLayerGroup);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,