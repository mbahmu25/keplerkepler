"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.datasetColorMaker = exports.addTimeLabel = void 0;
exports.findDefaultColorField = findDefaultColorField;
exports.getFieldFormatLabels = getFieldFormatLabels;
exports.getFormatLabels = void 0;
exports.validateInputData = validateInputData;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _constants = require("@kepler.gl/constants");
var _commonUtils = require("@kepler.gl/common-utils");
var _typeAnalyzer = require("type-analyzer");
var _assert = _interopRequireDefault(require("assert"));
var _utils = require("./utils");
var _dataUtils = require("./data-utils");
var _format = require("./format");
var _colorUtils = require("./color-utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _marked = /*#__PURE__*/_regenerator["default"].mark(generateColor); // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// apply a color for each dataset
// to use as label colors
var datasetColors = ['#8F2FBF', '#005CFF', '#C06C84', '#F8B195', '#547A82', '#3EACA8', '#A2D4AB'].map(_colorUtils.hexToRgb);

/**
 * Random color generator
 */
function generateColor() {
  var index;
  return _regenerator["default"].wrap(function generateColor$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        index = 0;
      case 1:
        if (!(index < datasetColors.length + 1)) {
          _context.next = 7;
          break;
        }
        if (index === datasetColors.length) {
          index = 0;
        }
        _context.next = 5;
        return datasetColors[index++];
      case 5:
        _context.next = 1;
        break;
      case 7:
      case "end":
        return _context.stop();
    }
  }, _marked);
}
var datasetColorMaker = exports.datasetColorMaker = generateColor();

/**
 * Field name prefixes and suffixes which should not be considered
 * as metrics. Fields will still be included if a 'metric word'
 * is found on the field name, however.
 */
var EXCLUDED_DEFAULT_FIELDS = [
// Serial numbers and identification numbers
'_id', 'id', 'index', 'uuid', 'guid', 'uid', 'gid', 'serial',
// Geographic IDs are unlikely to be interesting to color
'zip', 'code', 'post', 'region', 'fips', 'cbgs', 'h3', 's2',
// Geographic coords (but not z/elevation/altitude
// since that might be a metric)
'lat', 'lon', 'lng', 'latitude', 'longitude', '_x', '_y'];

/**
 * Prefixes and suffixes that indicate a field is a metric.
 *
 * Note that these are in order of preference, first being
 * most preferred.
 */
var METRIC_DEFAULT_FIELDS = ['metric', 'value', 'sum', 'count', 'unique', 'mean', 'mode', 'median', 'max', 'min', 'deviation', 'variance', 'p99', 'p95', 'p75', 'p50', 'p25', 'p05',
// Abbreviations are less preferred
'cnt', 'val'];

/**
 * Choose a field to use as the default color field of a layer.
 *
 * The heuristic is:
 *
 * First, exclude fields that are on the exclusion list and don't
 * have names that suggest they contain metrics. Also exclude
 * field names that are blank.
 *
 * Next, look for a field that is of real type and contains one
 * of the preferred names (in order of the preferred names).
 *
 * Next, look for a field that is of integer type and contains
 * one of the preferred names (in order of the preferred names).
 *
 * Next, look for the first field that is of real type (in order
 * of field index).
 *
 * Next, look for the first field that is of integer type (in
 * order of field index).
 *
 * It's possible no field will be chosen (i.e. because all fields
 * are strings.)
 *
 * @param dataset
 */
function findDefaultColorField(_ref) {
  var fields = _ref.fields,
    _ref$fieldPairs = _ref.fieldPairs,
    fieldPairs = _ref$fieldPairs === void 0 ? [] : _ref$fieldPairs;
  var fieldsWithoutExcluded = fields.filter(function (field) {
    if (field.type !== _constants.ALL_FIELD_TYPES.real && field.type !== _constants.ALL_FIELD_TYPES.integer) {
      // Only select numeric fields.
      return false;
    }
    if (fieldPairs.find(function (pair) {
      return pair.pair.lat.value === field.name || pair.pair.lng.value === field.name;
    })) {
      // Do not permit lat, lon fields
      return false;
    }
    var normalizedFieldName = field.name.toLowerCase();
    if (normalizedFieldName === '') {
      // Special case excluded name when the name is blank.
      return false;
    }
    var hasExcluded = EXCLUDED_DEFAULT_FIELDS.find(function (f) {
      return normalizedFieldName.startsWith(f) || normalizedFieldName.endsWith(f);
    });
    var hasInclusion = METRIC_DEFAULT_FIELDS.find(function (f) {
      return normalizedFieldName.startsWith(f) || normalizedFieldName.endsWith(f);
    });
    return !hasExcluded || hasInclusion;
  });
  var sortedFields = fieldsWithoutExcluded.sort(function (left, right) {
    var normalizedLeft = left.name.toLowerCase();
    var normalizedRight = right.name.toLowerCase();
    var leftHasInclusion = METRIC_DEFAULT_FIELDS.findIndex(function (f) {
      return normalizedLeft.startsWith(f) || normalizedLeft.endsWith(f);
    });
    var rightHasInclusion = METRIC_DEFAULT_FIELDS.findIndex(function (f) {
      return normalizedRight.startsWith(f) || normalizedRight.endsWith(f);
    });
    if (leftHasInclusion !== rightHasInclusion) {
      if (leftHasInclusion === -1) {
        // Elements that do not have the inclusion list should go after those that do.
        return 1;
      } else if (rightHasInclusion === -1) {
        // Elements that do have the inclusion list should go before those that don't.
        return -1;
      }
      // Compare based on order in the inclusion list
      return leftHasInclusion - rightHasInclusion;
    }

    // Compare based on type
    if (left.type !== right.type) {
      if (left.type === _constants.ALL_FIELD_TYPES.real) {
        return -1;
      }
      // left is an integer and right is not
      // and reals come before integers
      return 1;
    }

    // Finally, order based on the order in the datasets columns
    // @ts-expect-error
    return left.index - right.index;
  });
  if (sortedFields.length) {
    // There was a best match
    return sortedFields[0];
  }
  // No matches
  return null;
}

/**
 * Validate input data, adding missing field types, rename duplicate columns
 */
function validateInputData(data) {
  if (!(0, _utils.isPlainObject)(data)) {
    (0, _assert["default"])('addDataToMap Error: dataset.data cannot be null');
    return null;
  } else if (!Array.isArray(data.fields)) {
    (0, _assert["default"])('addDataToMap Error: expect dataset.data.fields to be an array');
    return null;
  } else if (!Array.isArray(data.rows)) {
    (0, _assert["default"])('addDataToMap Error: expect dataset.data.rows to be an array');
    return null;
  }
  var fields = data.fields,
    rows = data.rows,
    cols = data.cols;

  // check if all fields has name, format and type
  var allValid = fields.every(function (f, i) {
    if (!(0, _utils.isPlainObject)(f)) {
      (0, _assert["default"])("fields needs to be an array of object, but find ".concat((0, _typeof2["default"])(f)));
      fields[i] = {
        name: "column_".concat(i),
        type: _constants.ALL_FIELD_TYPES.string
      };
    }
    if (!f.name) {
      (0, _assert["default"])("field.name is required but missing in ".concat(JSON.stringify(f)));
      // assign a name
      fields[i].name = "column_".concat(i);
    }
    if (!f.type || !_constants.ALL_FIELD_TYPES[f.type]) {
      (0, _assert["default"])("unknown field type ".concat(f.type));
      return false;
    }
    if (!f.analyzerType) {
      (0, _assert["default"])("field ".concat(i, " missing analyzerType"));
      return false;
    }

    // check time format is correct based on first 10 not empty element
    if (f.type === _constants.ALL_FIELD_TYPES.timestamp) {
      var sample = (cols ? findNonEmptyRowsAtFieldArrow(cols, i, 10) : findNonEmptyRowsAtField(rows, i, 10)).map(function (r) {
        return {
          ts: r[i]
        };
      });
      var analyzedType = _typeAnalyzer.Analyzer.computeColMeta(sample)[0];
      return analyzedType && analyzedType.category === 'TIME' && analyzedType.format === f.format;
    }

    // check existing string field is H3 type
    if (f.type === _constants.ALL_FIELD_TYPES.string) {
      var _sample = (cols ? findNonEmptyRowsAtFieldArrow(cols, i, 10) : findNonEmptyRowsAtField(rows, i, 10)).map(function (r) {
        return r[i];
      });
      return _sample.every(function (item) {
        return !(0, _commonUtils.h3IsValid)(item);
      });
    }
    return true;
  });
  if (allValid) {
    return {
      rows: rows,
      fields: fields,
      cols: cols
    };
  }

  // if any field has missing type, recalculate it for everyone
  // because we simply lost faith in humanity
  var sampleData = cols ? (0, _commonUtils.getSampleForTypeAnalyzeArrow)(cols, fields.map(function (f) {
    return f.name;
  })) : (0, _commonUtils.getSampleForTypeAnalyze)({
    fields: fields.map(function (f) {
      return f.name;
    }),
    rows: rows
  });
  var fieldOrder = fields.map(function (f) {
    return f.name;
  });
  var meta = (0, _commonUtils.getFieldsFromData)(sampleData, fieldOrder);
  var updatedFields = fields.map(function (f, i) {
    return _objectSpread(_objectSpread({}, f), {}, {
      type: meta[i].type,
      format: meta[i].format,
      analyzerType: meta[i].analyzerType
    });
  });
  return _objectSpread({
    fields: updatedFields,
    rows: rows
  }, cols ? {
    cols: cols
  } : {});
}
function findNonEmptyRowsAtField(rows, fieldIdx, total) {
  var sample = [];
  var i = 0;
  while (sample.length < total && i < rows.length) {
    var _rows$i;
    if ((0, _commonUtils.notNullorUndefined)((_rows$i = rows[i]) === null || _rows$i === void 0 ? void 0 : _rows$i[fieldIdx])) {
      sample.push(rows[i]);
    }
    i++;
  }
  return sample;
}
function findNonEmptyRowsAtFieldArrow(cols, fieldIdx, total) {
  var sample = [];
  var numRows = cols[fieldIdx].length;
  var i = 0;
  while (sample.length < total && i < numRows) {
    if ((0, _commonUtils.notNullorUndefined)(cols[fieldIdx].get(i))) {
      var row = cols.map(function (col) {
        return col.get(i);
      });
      sample.push(row);
    }
    i++;
  }
  return sample;
}
var TIME_DISPLAY = '2020-05-11 14:00';
var addTimeLabel = exports.addTimeLabel = function addTimeLabel(formats) {
  return formats.map(function (f) {
    return _objectSpread(_objectSpread({}, f), {}, {
      label: f.type === _constants.TOOLTIP_FORMAT_TYPES.DATE_TIME || f.type === _constants.TOOLTIP_FORMAT_TYPES.DATE ? (0, _dataUtils.getFormatter)((0, _format.getFormatValue)(f))(TIME_DISPLAY) : f.label
    });
  });
};
function getFieldFormatLabels(fieldType) {
  var tooltipTypes = fieldType && _constants.FIELD_OPTS[fieldType].format.tooltip || [];
  var formatLabels = Object.values(_constants.TOOLTIP_FORMATS).filter(function (t) {
    return tooltipTypes.includes(t.type);
  });
  return addTimeLabel(formatLabels);
}
var getFormatLabels = exports.getFormatLabels = function getFormatLabels(fields, fieldName) {
  var _fields$find;
  var fieldType = (_fields$find = fields.find(function (f) {
    return f.name === fieldName;
  })) === null || _fields$find === void 0 ? void 0 : _fields$find.type;
  return getFieldFormatLabels(fieldType);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,