"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMVTMetadata = getMVTMetadata;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mvt = require("@loaders.gl/mvt");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * MVTSource in current loaders ignores attribution
 * TODO: remove once MVTSource is ready
 */
function getMVTMetadata(_x) {
  return _getMVTMetadata.apply(this, arguments);
}
function _getMVTMetadata() {
  _getMVTMetadata = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(metadataURL) {
    var _TileJSONLoader$parse;
    var response, tileJSON, metadata, rawMetadata;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          if (metadataURL) {
            _context.next = 2;
            break;
          }
          return _context.abrupt("return", null);
        case 2:
          _context.prev = 2;
          _context.next = 5;
          return fetch(metadataURL);
        case 5:
          response = _context.sent;
          _context.next = 12;
          break;
        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](2);
          // eslint-disable-next-line no-console
          console.error(_context.t0.message);
          return _context.abrupt("return", null);
        case 12:
          if (response.ok) {
            _context.next = 15;
            break;
          }
          // eslint-disable-next-line no-console
          console.error(response.statusText);
          return _context.abrupt("return", null);
        case 15:
          _context.next = 17;
          return response.text();
        case 17:
          tileJSON = _context.sent;
          metadata = ((_TileJSONLoader$parse = _mvt.TileJSONLoader.parseTextSync) === null || _TileJSONLoader$parse === void 0 ? void 0 : _TileJSONLoader$parse.call(_mvt.TileJSONLoader, tileJSON)) || null;
          rawMetadata = JSON.parse(tileJSON);
          if (rawMetadata !== null && rawMetadata !== void 0 && rawMetadata.attribution) {
            metadata.attributions = [rawMetadata.attribution];
          }
          return _context.abrupt("return", metadata);
        case 22:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[2, 8]]);
  }));
  return _getMVTMetadata.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbXZ0IiwicmVxdWlyZSIsImdldE1WVE1ldGFkYXRhIiwiX3giLCJfZ2V0TVZUTWV0YWRhdGEiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWdlbmVyYXRvciIsIm1hcmsiLCJfY2FsbGVlIiwibWV0YWRhdGFVUkwiLCJfVGlsZUpTT05Mb2FkZXIkcGFyc2UiLCJyZXNwb25zZSIsInRpbGVKU09OIiwibWV0YWRhdGEiLCJyYXdNZXRhZGF0YSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJhYnJ1cHQiLCJmZXRjaCIsInNlbnQiLCJ0MCIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJvayIsInN0YXR1c1RleHQiLCJ0ZXh0IiwiVGlsZUpTT05Mb2FkZXIiLCJwYXJzZVRleHRTeW5jIiwiY2FsbCIsIkpTT04iLCJwYXJzZSIsImF0dHJpYnV0aW9uIiwiYXR0cmlidXRpb25zIiwic3RvcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aWxlc2V0L3RpbGVzZXQtdXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IHtUaWxlSlNPTkxvYWRlciwgVGlsZUpTT059IGZyb20gJ0Bsb2FkZXJzLmdsL212dCc7XG5cbi8qKlxuICogTVZUU291cmNlIGluIGN1cnJlbnQgbG9hZGVycyBpZ25vcmVzIGF0dHJpYnV0aW9uXG4gKiBUT0RPOiByZW1vdmUgb25jZSBNVlRTb3VyY2UgaXMgcmVhZHlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE1WVE1ldGFkYXRhKG1ldGFkYXRhVVJMOiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTxUaWxlSlNPTiB8IG51bGw+IHtcbiAgaWYgKCFtZXRhZGF0YVVSTCkgcmV0dXJuIG51bGw7XG5cbiAgbGV0IHJlc3BvbnNlOiBSZXNwb25zZTtcbiAgdHJ5IHtcbiAgICAvLyBBbm5veWluZ2x5LCBvbiBDT1JTIGVycm9ycywgZmV0Y2ggZG9lc24ndCB1c2UgdGhlIHJlc3BvbnNlIHN0YXR1cy9vayBtZWNoYW5pc20gYnV0IGluc3RlYWQgdGhyb3dzXG4gICAgLy8gQ09SUyBlcnJvcnMgYXJlIGNvbW1vbiB3aGVuIHJlcXVlc3RpbmcgYW4gdW5hdmFpbGFibGUgc3ViIHJlc291cmNlIHN1Y2ggYXMgYSBtZXRhZGF0YSBmaWxlIG9yIGFuIHVuYXZhaWxhYmxlIHRpbGUpXG4gICAgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChtZXRhZGF0YVVSTCk7XG4gIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKChlcnJvciBhcyBUeXBlRXJyb3IpLm1lc3NhZ2UpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgdGlsZUpTT04gPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gIGNvbnN0IG1ldGFkYXRhID0gVGlsZUpTT05Mb2FkZXIucGFyc2VUZXh0U3luYz8uKHRpbGVKU09OKSB8fCBudWxsO1xuXG4gIGNvbnN0IHJhd01ldGFkYXRhID0gSlNPTi5wYXJzZSh0aWxlSlNPTik7XG4gIGlmIChyYXdNZXRhZGF0YT8uYXR0cmlidXRpb24pIHtcbiAgICBtZXRhZGF0YS5hdHRyaWJ1dGlvbnMgPSBbcmF3TWV0YWRhdGEuYXR0cmlidXRpb25dO1xuICB9XG5cbiAgcmV0dXJuIG1ldGFkYXRhO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQSxJQUFBQSxJQUFBLEdBQUFDLE9BQUE7QUFIQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFIQSxTQUlzQkMsY0FBY0EsQ0FBQUMsRUFBQTtFQUFBLE9BQUFDLGVBQUEsQ0FBQUMsS0FBQSxPQUFBQyxTQUFBO0FBQUE7QUFBQSxTQUFBRixnQkFBQTtFQUFBQSxlQUFBLE9BQUFHLGtCQUFBLDJCQUFBQyxZQUFBLFlBQUFDLElBQUEsQ0FBN0IsU0FBQUMsUUFBOEJDLFdBQTBCO0lBQUEsSUFBQUMscUJBQUE7SUFBQSxJQUFBQyxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUFBQyxXQUFBO0lBQUEsT0FBQVIsWUFBQSxZQUFBUyxJQUFBLFVBQUFDLFNBQUFDLFFBQUE7TUFBQSxrQkFBQUEsUUFBQSxDQUFBQyxJQUFBLEdBQUFELFFBQUEsQ0FBQUUsSUFBQTtRQUFBO1VBQUEsSUFDeERWLFdBQVc7WUFBQVEsUUFBQSxDQUFBRSxJQUFBO1lBQUE7VUFBQTtVQUFBLE9BQUFGLFFBQUEsQ0FBQUcsTUFBQSxXQUFTLElBQUk7UUFBQTtVQUFBSCxRQUFBLENBQUFDLElBQUE7VUFBQUQsUUFBQSxDQUFBRSxJQUFBO1VBQUEsT0FNVkUsS0FBSyxDQUFDWixXQUFXLENBQUM7UUFBQTtVQUFuQ0UsUUFBUSxHQUFBTSxRQUFBLENBQUFLLElBQUE7VUFBQUwsUUFBQSxDQUFBRSxJQUFBO1VBQUE7UUFBQTtVQUFBRixRQUFBLENBQUFDLElBQUE7VUFBQUQsUUFBQSxDQUFBTSxFQUFBLEdBQUFOLFFBQUE7VUFFUjtVQUNBTyxPQUFPLENBQUNDLEtBQUssQ0FBQ1IsUUFBQSxDQUFBTSxFQUFBLENBQXFCRyxPQUFPLENBQUM7VUFBQyxPQUFBVCxRQUFBLENBQUFHLE1BQUEsV0FDckMsSUFBSTtRQUFBO1VBQUEsSUFFUlQsUUFBUSxDQUFDZ0IsRUFBRTtZQUFBVixRQUFBLENBQUFFLElBQUE7WUFBQTtVQUFBO1VBQ2Q7VUFDQUssT0FBTyxDQUFDQyxLQUFLLENBQUNkLFFBQVEsQ0FBQ2lCLFVBQVUsQ0FBQztVQUFDLE9BQUFYLFFBQUEsQ0FBQUcsTUFBQSxXQUM1QixJQUFJO1FBQUE7VUFBQUgsUUFBQSxDQUFBRSxJQUFBO1VBQUEsT0FFVVIsUUFBUSxDQUFDa0IsSUFBSSxDQUFDLENBQUM7UUFBQTtVQUFoQ2pCLFFBQVEsR0FBQUssUUFBQSxDQUFBSyxJQUFBO1VBQ1JULFFBQVEsR0FBRyxFQUFBSCxxQkFBQSxHQUFBb0IsbUJBQWMsQ0FBQ0MsYUFBYSxjQUFBckIscUJBQUEsdUJBQTVCQSxxQkFBQSxDQUFBc0IsSUFBQSxDQUFBRixtQkFBYyxFQUFpQmxCLFFBQVEsQ0FBQyxLQUFJLElBQUk7VUFFM0RFLFdBQVcsR0FBR21CLElBQUksQ0FBQ0MsS0FBSyxDQUFDdEIsUUFBUSxDQUFDO1VBQ3hDLElBQUlFLFdBQVcsYUFBWEEsV0FBVyxlQUFYQSxXQUFXLENBQUVxQixXQUFXLEVBQUU7WUFDNUJ0QixRQUFRLENBQUN1QixZQUFZLEdBQUcsQ0FBQ3RCLFdBQVcsQ0FBQ3FCLFdBQVcsQ0FBQztVQUNuRDtVQUFDLE9BQUFsQixRQUFBLENBQUFHLE1BQUEsV0FFTVAsUUFBUTtRQUFBO1FBQUE7VUFBQSxPQUFBSSxRQUFBLENBQUFvQixJQUFBO01BQUE7SUFBQSxHQUFBN0IsT0FBQTtFQUFBLENBQ2hCO0VBQUEsT0FBQU4sZUFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==