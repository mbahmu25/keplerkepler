"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFieldsFromTile = void 0;
exports.getFilterProps = getFilterProps;
exports.getLoaderOptions = void 0;
exports.getMetaUrl = getMetaUrl;
exports.getTileUrl = getTileUrl;
exports.isTileDataset = isTileDataset;
exports.matchDatasetType = matchDatasetType;
exports.parseVectorMetadata = parseVectorMetadata;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _typeAnalyzer = require("type-analyzer");
var _d3Array = require("d3-array");
var _console = _interopRequireDefault(require("global/console"));
var _lodash = _interopRequireDefault(require("lodash.uniq"));
var _mvt = require("@loaders.gl/mvt");
var _pmtiles = require("@loaders.gl/pmtiles");
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var getLoaderOptions = exports.getLoaderOptions = function getLoaderOptions() {
  return {
    mvt: {
      workerUrl: "https://unpkg.com/@loaders.gl/mvt/dist/mvt-worker.js"
    }
  };
};
function isTileDataset(dataset) {
  return Boolean((dataset === null || dataset === void 0 ? void 0 : dataset.type) === _constants.DatasetType.VECTOR_TILE);
}
// https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
function isLat(num) {
  return Number.isFinite(num) && num <= 90 && num >= -90;
}
function isLng(num) {
  return Number.isFinite(num) && num <= 180 && num >= -180;
}
function isZoom(num) {
  return Number.isFinite(num) && num >= 0 && num <= 22;
}
function fromArrayOrString(data) {
  if (typeof data === 'string') {
    return data.split(',').map(parseFloat);
  } else if (Array.isArray(data)) {
    return data;
  }
  return null;
}
function parseCenter(center) {
  // supported formats
  // string: "-96.657715,40.126127,-90.140061,43.516689",
  // array: [-91.505127,41.615442,14]
  var result = fromArrayOrString(center);
  if (Array.isArray(result) && result.length === 3 && isLng(result[0]) && isLat(result[1]) && isZoom(result[2])) {
    return result;
  }
  return null;
}

/**
 * bounds should be [minLng, minLat, maxLng, maxLat]
 * @param {*} bounds
 */
function parseBounds(bounds) {
  // supported formats
  // string: "-96.657715,40.126127,-90.140061,43.516689",
  // array: [ -180, -85.05112877980659, 180, 85.0511287798066 ]
  var result = fromArrayOrString(bounds);
  // validate bounds
  if (Array.isArray(result) && result.length === 4 && [result[0], result[2]].every(isLng) && [result[1], result[3]].every(isLat)) {
    return result;
  }
  return null;
}
var X_PATT = /\{x\}/;
var Y_PATT = /\{y\}/;
var Z_PATT = /\{z\}/;
function isFullyQualifiedTileUrl(tileUrl) {
  return X_PATT.test(tileUrl) && Y_PATT.test(tileUrl) && Z_PATT.test(tileUrl);
}

/**
 * Normalize tile URL
 * @param  {string} tileUrl Initial tile URL, which may be either the root URL for the
 *                          tileset or a fully qualified template
 * @param  {function} validateUrl function to validate tile URL
 * @return {string|null}    Fully qualified tile URL template, or null if input does not
 *                          appear to be a valid URL
 */
function getTileUrl(tileUrl) {
  var validateUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isFullyQualifiedTileUrl;
  // Check for a valid URL. Ideally we'd have a simple method here.
  var uriParts = (0, _commonUtils.parseUri)(tileUrl);
  if (!uriParts.protocol || !uriParts.host) {
    return null;
  }
  if (validateUrl(tileUrl)) {
    return tileUrl;
  }
  return "".concat(tileUrl.replace(/\/$/, ''), "/{z}/{x}/{y}.pbf");
}

/**
 * Map of util functions for different tileset types, keyed by host
 */
var TILESET_FUNCTIONS = {
  'api.mapbox.com': {
    getMetaUrl: getMetaUrlMapbox,
    parseMetadata: parseMetadataTileJSON
  },
  "default": {
    getMetaUrl: getMetaUrlTippecanoe,
    parseMetadata: parseMetadataTileJSON
  }
};
function getTilesetFunctions(tileUrl) {
  var host = '';
  try {
    host = new URL(tileUrl || '').hostname;
  } catch (error) {
    // do nothing
  }
  return TILESET_FUNCTIONS[host] || TILESET_FUNCTIONS["default"];
}

/**
 * Get the metadata URL for a given tileset
 */
function getMetaUrl(tileUrl) {
  return getTilesetFunctions(tileUrl).getMetaUrl(tileUrl);
}
/**
 * Parse the metadata for a given tileset
 */
function parseVectorMetadata(
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
metadata, option) {
  var _ref = option || {},
    _ref$tileUrl = _ref.tileUrl,
    tileUrl = _ref$tileUrl === void 0 ? '' : _ref$tileUrl;
  return getTilesetFunctions(tileUrl).parseMetadata(metadata);
}
var MAPBOX_URL_PATT = /\/\{z\}\/\{x\}\/\{y\}\.mvt/;
function getMetaUrlMapbox() {
  var tileUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return tileUrl.replace(MAPBOX_URL_PATT, '.json');
}
function parseMetadataTileJSON(metadata) {
  var _parsed$fields;
  var parsed = parseMetadataTippecanoeFromDataSource(metadata);
  if (!parsed) return null;
  // Fields already parsed from `json` property
  if ((_parsed$fields = parsed.fields) !== null && _parsed$fields !== void 0 && _parsed$fields.length) {
    return parsed;
  }
  return parsed;
}
function getMetaUrlTippecanoe(tileUrl) {
  var url = getTileUrl(tileUrl);
  if (!url) return null;
  // assumes the structure <url_base>/{z}...
  var baseUrl = url.split(Z_PATT)[0].replace(/\/$/, '');
  return "".concat(baseUrl, "/metadata.json");
}

/**
 * Special parsing for metadata returned by MVTSource and PMTilesSource.
 * @param metadata Tileset metadata parsed by a DataSouce
 * @returns Metadata in Kepler-friendly format.
 */
function parseMetadataTippecanoeFromDataSource(metadata) {
  var _pmTileMetadata$tilej, _pmTileMetadata$tilej2;
  if (!metadata || (0, _typeof2["default"])(metadata) !== 'object') {
    return null;
  }
  var result = {
    attributions: [],
    metaJson: null,
    bounds: null,
    center: null,
    maxZoom: null,
    minZoom: null,
    fields: []
  };
  var mvtMetadata = metadata;
  var pmTileMetadata = metadata;

  // try to parse metaJson
  if (typeof mvtMetadata.metaJson === 'string') {
    try {
      result.metaJson = JSON.parse(mvtMetadata.metaJson);
    } catch (err) {
      // do nothing
    }
  } else if ((0, _typeof2["default"])(mvtMetadata.metaJson) === 'object') {
    result.metaJson = mvtMetadata.metaJson;
  }
  result.bounds = parseBounds(Array.isArray(metadata.boundingBox) ? metadata.boundingBox.flat() : '');

  // PMTileSource has centerZoom and center [lon, lat], MVTSource - [lon, lat, zoom]
  var center = pmTileMetadata.centerZoom !== undefined && Array.isArray(metadata.center) ? [].concat((0, _toConsumableArray2["default"])(metadata.center), [pmTileMetadata.centerZoom]) : metadata.center;
  result.center = parseCenter(center || '');
  result.maxZoom = safeParseFloat(metadata.maxZoom);
  result.minZoom = safeParseFloat(metadata.minZoom);
  result.name = metadata.name || '';
  result.description = mvtMetadata.description || ((_pmTileMetadata$tilej = pmTileMetadata.tilejson) === null || _pmTileMetadata$tilej === void 0 ? void 0 : _pmTileMetadata$tilej.description) || '';
  if (Array.isArray((_pmTileMetadata$tilej2 = pmTileMetadata.tilejson) === null || _pmTileMetadata$tilej2 === void 0 ? void 0 : _pmTileMetadata$tilej2.layers)) {
    var _pmTileMetadata$tilej3;
    var layers = pmTilesLayerToTippecanoeLayer((_pmTileMetadata$tilej3 = pmTileMetadata.tilejson) === null || _pmTileMetadata$tilej3 === void 0 ? void 0 : _pmTileMetadata$tilej3.layers);
    result.fields = collectAttributes(layers);
  } else if (Array.isArray(mvtMetadata.layers)) {
    var _layers = pmTilesLayerToTippecanoeLayer(mvtMetadata.layers);
    result.fields = collectAttributes(_layers);
  }
  result = _objectSpread(_objectSpread({}, result), {}, {
    attributions: pmTileMetadata.attributions || (mvtMetadata.htmlAttribution ? [mvtMetadata.htmlAttribution] : undefined) || []
  }, parseMetaJson(result.metaJson));
  return result;
}
function safeParseFloat(input) {
  var result = typeof input === 'string' ? parseFloat(input) : typeof input === 'number' ? input : null;
  return result === null || isNaN(result) ? null : result;
}
function parseMetaJson(metaJson) {
  if (!metaJson || (0, _typeof2["default"])(metaJson) !== 'object') {
    return null;
  }
  if (metaJson.tilestats && Array.isArray(metaJson.tilestats.layers)) {
    // we are in luck!
    return {
      fields: collectAttributes(metaJson.tilestats.layers)
    };
  }
  return null;
}
function getTimeAnimationDomain(mappedValue) {
  var timeSteps = (0, _lodash["default"])(mappedValue).sort(_d3Array.ascending).filter(_commonUtils.notNullorUndefined);
  var domain = [timeSteps[0], timeSteps[timeSteps.length - 1]];

  // if taks 10 * 1000 ms to finish the entire animation
  var duration = 10000 / timeSteps.length;
  var clamped = (0, _utils.clamp)([100, 2000], duration);
  return {
    domain: domain,
    timeSteps: timeSteps,
    duration: clamped,
    mappedValue: mappedValue
  };
}
var pmTileTypeToAttrMap = {
  float32: 'number',
  string: 'string',
  utf8: 'string',
  "int": 'int',
  "boolean": 'boolean'
};

/**
 * Transform TileJSON['layers'] back to TippecanoeLayer
 */
function pmTilesLayerToTippecanoeLayer(layers) {
  if (!layers) return [];
  var outLayers = [];
  var _iterator = _createForOfIteratorHelper(layers),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var layer = _step.value;
      var _ref2 = layer || {},
        _ref2$fields = _ref2.fields,
        fields = _ref2$fields === void 0 ? [] : _ref2$fields;
      var _iterator2 = _createForOfIteratorHelper(fields),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _pmField$values;
          var pmField = _step2.value;
          var attribute = {
            attribute: pmField.name,
            type: pmTileTypeToAttrMap[pmField.type],
            count: pmField.uniqueValueCount,
            values: (_pmField$values = pmField.values) !== null && _pmField$values !== void 0 ? _pmField$values : [],
            min: pmField.min,
            max: pmField.max
          };
          outLayers.push({
            attributes: [attribute]
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return outLayers;
}
function collectAttributes() {
  var layers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var fields = {};
  var indexedAttributes = {};
  var _iterator3 = _createForOfIteratorHelper(layers),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var layer = _step3.value;
      var _ref3 = layer || {},
        _ref3$attributes = _ref3.attributes,
        attributes = _ref3$attributes === void 0 ? [] : _ref3$attributes;
      var _iterator5 = _createForOfIteratorHelper(attributes),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var attr = _step5.value;
          var _name = attr.attribute;
          if (typeof _name === 'string') {
            // eslint-disable-next-line max-depth
            if (_name.split('|').length > 1) {
              // indexed field
              var fname = _name.split('|')[0];
              indexedAttributes[fname] = indexedAttributes[fname] || [];
              indexedAttributes[fname].push(attr);
            } else if (!fields[_name]) {
              fields[_name] = attributeToField(attr);
            } else {
              mergeAttributeDomain(fields[_name], attr);
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }

    // parse indexed attribute, and put index key unidentified back as normal field
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  for (var _i = 0, _Object$entries = Object.entries(indexedAttributes); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
      name = _Object$entries$_i[0],
      attrs = _Object$entries$_i[1];
    var _parseIndexedField = parseIndexedField(name, attrs),
      indexedField = _parseIndexedField.indexedField,
      unidentified = _parseIndexedField.unidentified;
    fields[indexedField.name] = indexedField;
    var _iterator4 = _createForOfIteratorHelper(unidentified),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var unidentifiedAttr = _step4.value;
        if (unidentifiedAttr.attribute) {
          fields[unidentifiedAttr.attribute] = fields[unidentifiedAttr.attribute] || attributeToField(unidentifiedAttr);
          mergeAttributeDomain(fields[unidentifiedAttr.attribute], unidentifiedAttr);
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }
  return Object.values(fields);
}
function getIndexKeyFromFieldName(name) {
  return name && name.split('|').length > 1 ? name.split('|')[1] : null;
}
function parseIndexedField(name, attrs) {
  var unidentified = [];
  // analyze time format
  var field;
  var _iterator6 = _createForOfIteratorHelper(attrs),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var attr = _step6.value;
      var fieldName = attr.attribute;
      var indexKey = getIndexKeyFromFieldName(fieldName || '');
      var analyzedType = indexKey && (0, _commonUtils.containValidTime)([indexKey]);
      if (analyzedType) {
        field = field || _objectSpread(_objectSpread({}, attributeToField(attr)), {}, {
          // overide name and id to truncated name
          name: name,
          id: name,
          indexBy: {
            format: analyzedType.format,
            type: (0, _commonUtils.analyzerTypeToFieldType)(analyzedType.type),
            mappedValue: {}
          }
        });
        mergeAttributeDomain(field, attr);
        // save epoch time in mappedValue
        var fieldTs = indexKey;
        if (analyzedType.format === 'x' || analyzedType.format === 'X') {
          fieldTs = Number(indexKey);
        }
        var epoch = (0, _utils.timeToUnixMilli)(fieldTs, analyzedType.format);
        if (epoch) {
          field.indexBy.mappedValue[epoch] = fieldName;
        }
      } else {
        // key is not valid timestamp
        unidentified.push(attr);
      }
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  if (field.indexBy && field.indexBy.type === _constants.ALL_FIELD_TYPES.timestamp) {
    field.indexBy.timeDomain = getTimeAnimationDomain(Object.keys(field.indexBy.mappedValue).map(Number));
  }
  return {
    unidentified: unidentified,
    indexedField: field
  };
}
function compare(num1, num2, operator) {
  return Number.isFinite(num1) && Number.isFinite(num2) ? Math[operator](num1, num2) : Number.isFinite(num1) ? num1 : Number.isFinite(num2) ? num2 : NaN;
}
function getFilterProps(fieldType, attribute) {
  switch (fieldType) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
      {
        var _getAttributeDomain = getAttributeDomain(fieldType, attribute),
          _getAttributeDomain2 = (0, _slicedToArray2["default"])(_getAttributeDomain, 2),
          min = _getAttributeDomain2[0],
          max = _getAttributeDomain2[1];
        var diff = max - min;
        var step = (0, _utils.getNumericStepSize)(diff) || 0.1;
        var domain = [(0, _utils.formatNumberByStep)(min, step, 'floor'), (0, _utils.formatNumberByStep)(max, step, 'ceil')];
        var filterProps = {
          domain: domain,
          value: domain,
          type: _constants.FILTER_TYPES.range,
          typeOptions: [_constants.FILTER_TYPES.range],
          gpu: true,
          step: step
        };
        return filterProps;
      }
    case _constants.ALL_FIELD_TYPES["boolean"]:
      {
        var _filterProps = {
          domain: [true, false],
          value: true,
          type: _constants.FILTER_TYPES.select,
          gpu: true
        };
        return _filterProps;
      }
    default:
      {
        // Assume string for all other fields
        var _filterProps2 = {
          domain: attribute.values,
          value: attribute.values,
          type: _constants.FILTER_TYPES.multiSelect,
          gpu: false
        };
        return _filterProps2;
      }
  }
}
function attributeToField() {
  var attribute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    values: []
  };
  // attribute: "_season_peaks_color"
  // count: 1000
  // max: 0.95
  // min: 0.24375
  // type: "number"
  var fieldTypes = attributeTypeToFieldType(attribute.type);
  return _objectSpread({
    name: attribute.attribute,
    id: attribute.attribute,
    format: '',
    filterProps: getFilterProps(fieldTypes.type, attribute)
  }, fieldTypes);
}
function getAttributeDomain(type, attribute) {
  switch (type) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
      return [Number.isFinite(attribute.min) ? attribute.min : NaN, Number.isFinite(attribute.max) ? attribute.max : NaN];
    case _constants.ALL_FIELD_TYPES["boolean"]:
      return [0, 1];
    default:
      return [0, 1];
  }
}

/**
 * @param field This function mutates the field parameter
 */
function mergeAttributeDomain(field, attribute) {
  switch (field.type) {
    case _constants.ALL_FIELD_TYPES.real:
    case _constants.ALL_FIELD_TYPES.integer:
      {
        var _field$metadata, _field$filterProps;
        var domain = ((_field$metadata = field.metadata) === null || _field$metadata === void 0 ? void 0 : _field$metadata.domain) || ((_field$filterProps = field.filterProps) === null || _field$filterProps === void 0 ? void 0 : _field$filterProps.domain);
        if (domain) {
          domain.min = compare(attribute.min, domain[0], 'min');
          domain.max = compare(attribute.max, domain[1], 'max');
        }
        return;
      }
    default:
      return;
  }
}

// possible types https://github.com/mapbox/tippecanoe#modifying-feature-attributes
var attrTypeMap = {
  number: {
    type: _constants.ALL_FIELD_TYPES.real,
    analyzerType: _typeAnalyzer.DATA_TYPES.FLOAT
  },
  numeric: {
    type: _constants.ALL_FIELD_TYPES.real,
    analyzerType: _typeAnalyzer.DATA_TYPES.FLOAT
  },
  string: {
    type: _constants.ALL_FIELD_TYPES.string,
    analyzerType: _typeAnalyzer.DATA_TYPES.STRING
  },
  vachar: {
    type: _constants.ALL_FIELD_TYPES.string,
    analyzerType: _typeAnalyzer.DATA_TYPES.STRING
  },
  "float": {
    type: _constants.ALL_FIELD_TYPES.real,
    analyzerType: _typeAnalyzer.DATA_TYPES.FLOAT
  },
  "int": {
    type: _constants.ALL_FIELD_TYPES.integer,
    analyzerType: _typeAnalyzer.DATA_TYPES.INT
  },
  int4: {
    type: _constants.ALL_FIELD_TYPES.integer,
    analyzerType: _typeAnalyzer.DATA_TYPES.INT
  },
  "boolean": {
    type: _constants.ALL_FIELD_TYPES["boolean"],
    analyzerType: _typeAnalyzer.DATA_TYPES.BOOLEAN
  },
  bool: {
    type: _constants.ALL_FIELD_TYPES["boolean"],
    analyzerType: _typeAnalyzer.DATA_TYPES.BOOLEAN
  }
};
function attributeTypeToFieldType(aType) {
  var type = aType === null || aType === void 0 ? void 0 : aType.toLowerCase();
  if (!type || !attrTypeMap[type]) {
    _console["default"].warn("cannot convert attribute type ".concat(type, " to kepler.gl data type, use string by default"));
    return attrTypeMap.string;
  }
  return attrTypeMap[type];
}

/**
 * Returns true if a dataset can be used as source data for a layer.
 * @param dataset A dataset.
 * @param layer A layer.
 * @returns Returns true if a dataset can be used as source data for a layer.
 */
function matchDatasetType(dataset, layer) {
  // allow selection if type is not assigned yet
  if (!layer.type) {
    return true;
  }
  // allow selection if is current selected dataset
  if (layer.config.dataId === dataset.id) {
    return true;
  }
  // allow selection if layer doesn't have supportedDatasetTypes
  if (!layer.supportedDatasetTypes) {
    return true;
  }
  return Array.isArray(layer.supportedDatasetTypes) && layer.supportedDatasetTypes.includes(dataset.type || '');
}
/**
 * Extracts fields from a tile and updates the metadata object with found fields.
 * Note: this function is for tilesets that don't include fields in metadata (most likely saved with older spec.).
 * @param params.remoteTileFormat The format of the remote tile (MVT or PMTiles).
 * @param params.tilesetUrl The URL of the tileset.
 * @param params.metadataUrl The URL of the metadata.
 * @param params.metadata The metadata object containing fields and tile properties.
 */
var getFieldsFromTile = exports.getFieldsFromTile = /*#__PURE__*/function () {
  var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref4) {
    var remoteTileFormat, tilesetUrl, metadataUrl, metadata, _metadata$fields, _metadata$bounds, lon, lat, tileIndices, tileSource, tile, updatedFields;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          remoteTileFormat = _ref4.remoteTileFormat, tilesetUrl = _ref4.tilesetUrl, metadataUrl = _ref4.metadataUrl, metadata = _ref4.metadata;
          _context.prev = 1;
          if (!(tilesetUrl && metadataUrl && metadata && ((_metadata$fields = metadata.fields) === null || _metadata$fields === void 0 ? void 0 : _metadata$fields.length) === 0 && metadata.minZoom && ((_metadata$bounds = metadata.bounds) === null || _metadata$bounds === void 0 ? void 0 : _metadata$bounds.length) === 4)) {
            _context.next = 12;
            break;
          }
          lon = (metadata.bounds[0] + metadata.bounds[2]) / 2;
          lat = (metadata.bounds[1] + metadata.bounds[3]) / 2;
          tileIndices = lonLatToTileIndex(lon, lat, metadata.minZoom);
          tileSource = remoteTileFormat === _constants.RemoteTileFormat.MVT ? _mvt.MVTSource.createDataSource(decodeURIComponent(tilesetUrl), {
            mvt: {
              metadataUrl: decodeURIComponent(metadataUrl)
            }
          }) : _pmtiles.PMTilesSource.createDataSource(tilesetUrl, {});
          _context.next = 9;
          return tileSource.getTileData({
            index: tileIndices
          });
        case 9:
          tile = _context.sent;
          updatedFields = tileToFields(tile).map(function (f) {
            return _objectSpread(_objectSpread({}, f), {}, {
              analyzerType: f.analyzerType || _constants.ALL_FIELD_TYPES.string,
              id: f.id || f.name
            });
          });
          metadata.fields = updatedFields;
        case 12:
          _context.next = 16;
          break;
        case 14:
          _context.prev = 14;
          _context.t0 = _context["catch"](1);
        case 16:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 14]]);
  }));
  return function getFieldsFromTile(_x) {
    return _ref5.apply(this, arguments);
  };
}();

/**
 * Converts tile features into Kepler fields.
 * @param tile The tile object containing features.
 * @returns An array of Kepler fields derived from the tile's features.
 */
var tileToFields = function tileToFields(tile) {
  var _tile$features;
  if ((tile === null || tile === void 0 || (_tile$features = tile.features) === null || _tile$features === void 0 ? void 0 : _tile$features.length) > 0) {
    var header = Object.keys(tile.features[0].properties);
    var output = tile.features.map(function (f) {
      var obj = {};
      header.forEach(function (columnName) {
        obj[columnName] = f.properties[columnName];
      });
      return obj;
    });
    var fields = (0, _commonUtils.getFieldsFromData)(output, header);
    // extra transformation of strings to numbers for tiles isn't implemented, so use string, not computed types
    return fields.map(function (f) {
      var forceString = (f.type === 'integer' || f.type === 'float') && typeof tile.features[0].properties[f.name] === 'string';
      return _objectSpread(_objectSpread({}, f), {}, {
        analyzerType: forceString ? _typeAnalyzer.DATA_TYPES.STRING : f.analyzerType,
        type: forceString ? 'string' : f.type
      });
    });
  }
  return [];
};

/**
 * Converts longitude, latitude, and zoom level into vector tile indices (x, y, z).
 * @param lon Longitude in degrees, ranging from -180 to 180.
 * @param lat Latitude in degrees, ranging from -90 to 90.
 * @param zoom Zoom level (integer), where higher values provide more detail.
 * @returns Tile indices with x and y coordinates and zoom level z.
 */
function lonLatToTileIndex(lon, lat, zoom) {
  if (lat < -85.0511 || lat > 85.0511) {
    throw new Error('Latitude out of range. Must be between -85.0511 and 85.0511.');
  }
  if (zoom < 0) {
    throw new Error('Zoom level must be a non-negative integer.');
  }

  // 2^zoom (number of tiles per axis at given zoom level)
  var scale = 1 << zoom;
  // Convert longitude to tile X
  var x = Math.floor((lon + 180) / 360 * scale);
  // Convert latitude to tile Y
  var latRad = lat * Math.PI / 180;
  var y = Math.floor((1 - Math.log(Math.tan(latRad) + 1 / Math.cos(latRad)) / Math.PI) / 2 * scale);
  return {
    x: x,
    y: y,
    z: zoom
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,