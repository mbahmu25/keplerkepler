"use strict";

var _typeAnalyzer = require("type-analyzer");
var _constants = require("@kepler.gl/constants");
var _vectorTileUtils = require("./vector-tile-utils");
var _tileMetadata = require("../../../../test/fixtures/tile-metadata");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

describe('getTileUrl', function () {
  [{
    name: 'empty string',
    input: '',
    expected: null
  }, {
    name: 'invalid URL',
    input: '/foo/bar/baz.mvt',
    expected: null
  }, {
    name: 'Valid URL, no placeholders',
    input: 'http://www.example.com',
    expected: 'http://www.example.com/{z}/{x}/{y}.pbf'
  }, {
    name: 'Valid URL, no placeholders, trailing slash',
    input: 'http://www.example.com/',
    expected: 'http://www.example.com/{z}/{x}/{y}.pbf'
  }, {
    name: 'Valid URL, placeholders',
    input: 'http://www.example.com/{z}/{x}/{y}.pbf',
    expected: 'http://www.example.com/{z}/{x}/{y}.pbf'
  }, {
    name: 'Valid URL, placeholders, mvt',
    input: 'http://www.example.com/{z}/{x}/{y}.mvt',
    expected: 'http://www.example.com/{z}/{x}/{y}.mvt'
  }, {
    name: 'Valid URL, placeholders, mvt, access token',
    input: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt?access_token=sk.fobar.baz',
    expected: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt?access_token=sk.fobar.baz'
  }].forEach(function (_ref) {
    var name = _ref.name,
      input = _ref.input,
      expected = _ref.expected;
    test(name, function () {
      expect((0, _vectorTileUtils.getTileUrl)(input)).toBe(expected);
    });
  });
});
describe('getMetaUrl', function () {
  [{
    name: 'empty string',
    input: '',
    expected: null
  }, {
    name: 'invalid URL',
    input: '/foo/bar/baz.mvt',
    expected: null
  }, {
    name: 'Valid URL, unknown domain',
    input: 'http://www.example.com/some_tiles',
    expected: 'http://www.example.com/some_tiles/metadata.json'
  }, {
    name: 'Valid URL, unknown domain, trailing slash',
    input: 'http://www.example.com/some_tiles/',
    expected: 'http://www.example.com/some_tiles/metadata.json'
  }, {
    name: 'Valid URL, Mapbox domain',
    input: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt',
    expected: 'https://api.mapbox.com/v4/spam.json'
  }, {
    name: 'Valid URL, placeholders, mvt, access token',
    input: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt?access_token=sk.fobar.baz',
    expected: 'https://api.mapbox.com/v4/spam.json?access_token=sk.fobar.baz'
  }, {
    name: 'Valid URL, placeholders, mvt, access token, published style version',
    input: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt?style=mapbox://styles/user/styleId@00&access_token=pk.xxx.zzz',
    expected: 'https://api.mapbox.com/v4/spam.json?style=mapbox://styles/user/styleId@00&access_token=pk.xxx.zzz'
  }].forEach(function (_ref2) {
    var name = _ref2.name,
      input = _ref2.input,
      expected = _ref2.expected;
    test(name, function () {
      expect((0, _vectorTileUtils.getMetaUrl)(input)).toBe(expected);
    });
  });
});
test('parseMetadata, metadata from MVTSource and Mapbox URL', function () {
  expect((0, _vectorTileUtils.parseVectorMetadata)(_tileMetadata.MVT_METADATA, {
    tileUrl: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt'
  })).toEqual({
    attributions: [],
    metaJson: null,
    bounds: [-180, -85, 180, 85],
    center: [0, 0, 0],
    maxZoom: 16,
    minZoom: 0,
    fields: [{
      name: 'class',
      id: 'class',
      format: '',
      filterProps: {
        domain: [],
        value: [],
        type: 'multiSelect',
        gpu: false
      },
      type: 'string',
      analyzerType: 'STRING'
    }],
    name: 'Mapbox Streets v8',
    description: ''
  });
});
test('parseMetadata, PMTiles from PMTileSource', function () {
  expect((0, _vectorTileUtils.parseVectorMetadata)(_tileMetadata.PMTILES_METADATA, {
    tileUrl: 'https://4sq-studio-data-staging.s3.us-west-2.amazonaws.com/some_path/some_file.pmtiles'
  })).toEqual({
    attributions: [],
    name: 'My Custom Tiles',
    description: 'My Custom Tiles Description',
    metaJson: null,
    bounds: [-150.1122219, -51.8952777, 179.3577783, 69.6043747],
    center: [14.0625, 50.7026397, 6],
    maxZoom: 6,
    minZoom: 0,
    fields: [{
      id: 'metric',
      name: 'metric',
      format: '',
      type: _constants.ALL_FIELD_TYPES.real,
      analyzerType: _typeAnalyzer.DATA_TYPES.FLOAT,
      filterProps: {
        domain: [-1, 10],
        value: [-1, 10],
        type: _constants.FILTER_TYPES.range,
        typeOptions: [_constants.FILTER_TYPES.range],
        gpu: true,
        step: 0.01
      }
    }, {
      id: 'continent',
      name: 'continent',
      format: '',
      type: _constants.ALL_FIELD_TYPES.string,
      analyzerType: _typeAnalyzer.DATA_TYPES.STRING,
      filterProps: {
        domain: ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'],
        value: ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America'],
        type: _constants.FILTER_TYPES.multiSelect,
        gpu: false
      }
    }]
  });
});
test('parseMetadata, empty input', function () {
  expect((0, _vectorTileUtils.parseVectorMetadata)({})).toEqual({
    attributions: [],
    name: '',
    description: '',
    metaJson: null,
    bounds: null,
    center: null,
    maxZoom: null,
    minZoom: null,
    fields: []
  });
  expect((0, _vectorTileUtils.parseVectorMetadata)({}, {
    tileUrl: 'http://xyz.api.here.com/some_id/tile/web/{z}_{x}_{y}.pbf'
  })).toEqual({
    attributions: [],
    name: '',
    description: '',
    metaJson: null,
    bounds: null,
    center: null,
    maxZoom: null,
    minZoom: null,
    fields: []
  });
  expect((0, _vectorTileUtils.parseVectorMetadata)({}, {
    tileUrl: 'https://api.mapbox.com/v4/spam/{z}/{x}/{y}.mvt'
  })).toEqual({
    attributions: [],
    name: '',
    description: '',
    metaJson: null,
    bounds: null,
    center: null,
    maxZoom: null,
    minZoom: null,
    fields: []
  });
});
describe('parseMetadata, bad cases', function () {
  [{
    name: 'empty string',
    input: '',
    expected: null
  }, {
    name: 'null',
    input: null,
    expected: null
  }, {
    name: 'undefined',
    input: undefined,
    expected: null
  }, {
    name: 'string',
    input: 'spam',
    expected: null
  }].forEach(function (_ref3) {
    var name = _ref3.name,
      input = _ref3.input,
      expected = _ref3.expected;
    test(name, function () {
      expect((0, _vectorTileUtils.parseVectorMetadata)(input)).toBe(expected);
    });
  });
});
describe('getTileUrl', function () {
  test.each([['', null], ['foo', null], ['http', null], ['http://', null], ['https://', null], ['http://mytiles.com', 'http://mytiles.com/{z}/{x}/{y}.pbf'], ['https://mytiles.com', 'https://mytiles.com/{z}/{x}/{y}.pbf'], ['http://mytiles.com/', 'http://mytiles.com/{z}/{x}/{y}.pbf'], ['http://mytiles.com/foo', 'http://mytiles.com/foo/{z}/{x}/{y}.pbf'], ['http://mytiles.com/foo/', 'http://mytiles.com/foo/{z}/{x}/{y}.pbf'], ['https://mytiles.com/foo/bar.baz', 'https://mytiles.com/foo/bar.baz/{z}/{x}/{y}.pbf'], ['http://localhost', 'http://localhost/{z}/{x}/{y}.pbf'], ['http://localhost/', 'http://localhost/{z}/{x}/{y}.pbf'], ['http://localhost:8080', 'http://localhost:8080/{z}/{x}/{y}.pbf'], ['http://localhost:8080/', 'http://localhost:8080/{z}/{x}/{y}.pbf'], ['http://mytiles.com/foo/{z}/{x}/{y}.mvt', 'http://mytiles.com/foo/{z}/{x}/{y}.mvt']])('%s', function (input, expected) {
    expect((0, _vectorTileUtils.getTileUrl)(input)).toEqual(expected);
  });
});
describe('getMetaUrl', function () {
  test.each([['', null], ['foo', null], ['http', null], ['http://', null], ['https://', null], ['http://mytiles.com', 'http://mytiles.com/metadata.json'], ['https://mytiles.com', 'https://mytiles.com/metadata.json'], ['http://mytiles.com/', 'http://mytiles.com/metadata.json'], ['http://mytiles.com/foo', 'http://mytiles.com/foo/metadata.json'], ['http://mytiles.com/foo/', 'http://mytiles.com/foo/metadata.json'], ['https://mytiles.com/foo/bar.baz', 'https://mytiles.com/foo/bar.baz/metadata.json'], ['http://localhost', 'http://localhost/metadata.json'], ['http://localhost/', 'http://localhost/metadata.json'], ['http://localhost:8080', 'http://localhost:8080/metadata.json'], ['http://localhost:8080/', 'http://localhost:8080/metadata.json'], ['http://mytiles.com/foo/{z}/{x}/{y}.mvt', 'http://mytiles.com/foo/metadata.json']])('%s', function (input, expected) {
    expect((0, _vectorTileUtils.getMetaUrl)(input)).toEqual(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,