import type { LoaderOptions } from '@loaders.gl/loader-utils';
import { parseNDJSONSync } from "./lib/parsers/parse-ndjson.js";
import { parseNDJSONInBatches } from "./lib/parsers/parse-ndjson-in-batches.js";
import { ArrayRowTable, ObjectRowTable, Batch } from '@loaders.gl/schema';
/** Options for NDGeoJSONLoader */
export type NDGeoJSONLoaderOptions = LoaderOptions & {
    geojson?: {
        shape?: 'object-row-table';
    };
    gis?: {
        format: 'geojson';
    };
};
/** NDGeoJSONLoader */
export declare const NDJSONLoader: {
    readonly dataType: ArrayRowTable | ObjectRowTable;
    readonly batchType: Batch;
    readonly name: "NDJSON";
    readonly id: "ndjson";
    readonly module: "json";
    readonly version: any;
    readonly extensions: ["ndjson", "ndgeojson"];
    readonly mimeTypes: ["application/geo+x-ndjson", "application/geo+x-ldjson", "application/jsonlines", "application/geo+json-seq", "application/x-ndjson"];
    readonly category: "table";
    readonly text: true;
    readonly parse: (arrayBuffer: ArrayBuffer) => Promise<ArrayRowTable | ObjectRowTable>;
    readonly parseTextSync: typeof parseNDJSONSync;
    readonly parseInBatches: typeof parseNDJSONInBatches;
    readonly options: {
        readonly geojson: {
            readonly shape: "object-row-table";
        };
        readonly gis: {
            readonly format: "geojson";
        };
    };
};
//# sourceMappingURL=ndgeoson-loader.d.ts.map