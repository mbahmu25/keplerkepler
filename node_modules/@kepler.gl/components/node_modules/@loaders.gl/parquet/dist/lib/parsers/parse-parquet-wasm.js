// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import { serializeArrowSchema } from '@loaders.gl/arrow';
import * as arrow from 'apache-arrow';
import { loadWasm } from "../utils/load-wasm.js";
import { makeStreamIterator } from "../utils/make-stream-iterator.js";
export async function parseParquetFileWasm(file, options) {
    const wasmUrl = options?.wasmUrl;
    const wasm = await loadWasm(wasmUrl);
    let parquetFile;
    if (file.handle instanceof Blob) {
        // TODO - let's assume fromFile() works on Blobs and not just on File...
        parquetFile = await wasm.ParquetFile.fromFile(file.handle);
    }
    else {
        parquetFile = await wasm.ParquetFile.fromUrl(file.url);
    }
    const wasmTable = await parquetFile.read(options);
    const ipcStream = wasmTable.intoIPCStream();
    const arrowTable = arrow.tableFromIPC(ipcStream);
    return {
        shape: 'arrow-table',
        schema: serializeArrowSchema(arrowTable.schema),
        data: arrowTable
    };
}
export async function* parseParquetFileInBatchesWasm(file, options) {
    const wasmUrl = options?.wasmUrl;
    const wasm = await loadWasm(wasmUrl);
    let parquetFile;
    if (file.handle instanceof Blob) {
        // Works on Blobs: https://kylebarron.dev/parquet-wasm/classes/esm_parquet_wasm.ParquetFile.html#fromFile
        parquetFile = await wasm.ParquetFile.fromFile(file.handle);
    }
    else {
        parquetFile = await wasm.ParquetFile.fromUrl(file.url);
    }
    const stream = await parquetFile.stream(options);
    let schema;
    for await (const table of makeStreamIterator(stream)) {
        schema ||= serializeArrowSchema(table.schema);
        yield {
            batchType: 'data',
            shape: 'arrow-table',
            schema,
            data: table.batches[0],
            length: table.numRows
        };
    }
}
