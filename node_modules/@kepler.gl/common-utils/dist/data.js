"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.containValidTime = containValidTime;
exports.isHexWkb = isHexWkb;
exports.notNullorUndefined = notNullorUndefined;
exports.toArray = toArray;
var _typeAnalyzer = require("type-analyzer");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

function notNullorUndefined(d) {
  return d !== undefined && d !== null;
}

/**
 * Check if string is a valid Well-known binary (WKB) in HEX format
 * https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry
 *
 * @param str input string
 * @returns true if string is a valid WKB in HEX format
 */
function isHexWkb(str) {
  if (!str) return false;
  // check if the length of the string is even and is at least 10 characters long
  if (str.length < 10 || str.length % 2 !== 0) {
    return false;
  }
  // check if first two characters are 00 or 01
  if (!str.startsWith('00') && !str.startsWith('01')) {
    return false;
  }
  // check if the rest of the string is a valid hex
  return /^[0-9a-fA-F]+$/.test(str.slice(2));
}

/**
 * Converts non-arrays to arrays.  Leaves arrays alone.  Converts
 * undefined values to empty arrays ([] instead of [undefined]).
 * Otherwise, just returns [item] for non-array items.
 *
 * @param {*} item
 * @returns {array} boom! much array. very indexed. so useful.
 */
function toArray(item) {
  if (Array.isArray(item)) {
    return item;
  }
  if (typeof item === 'undefined' || item === null) {
    return [];
  }
  return [item];
}

/**
 * Check whether geojson linestring's 4th coordinate is 1) not timestamp 2) unix time stamp 3) real date time
 * @param timestamps array to be tested if its elements are timestamp
 * @returns the type of timestamp: unix/datetime/invalid(not timestamp)
 */
function containValidTime(timestamps) {
  var formattedTimeStamps = timestamps.map(function (ts) {
    return {
      ts: ts
    };
  });
  var ignoredDataTypes = Object.keys(_typeAnalyzer.DATA_TYPES).filter(function (type) {
    return ![_typeAnalyzer.DATA_TYPES.TIME, _typeAnalyzer.DATA_TYPES.DATETIME, _typeAnalyzer.DATA_TYPES.DATE].includes(type);
  });

  // ignore all types but TIME to improve performance
  var analyzedType = _typeAnalyzer.Analyzer.computeColMeta(formattedTimeStamps, [], {
    ignoredDataTypes: ignoredDataTypes
  })[0];
  if (!analyzedType || analyzedType.category !== 'TIME') {
    return null;
  }
  return analyzedType;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZUFuYWx5emVyIiwicmVxdWlyZSIsIm5vdE51bGxvclVuZGVmaW5lZCIsImQiLCJ1bmRlZmluZWQiLCJpc0hleFdrYiIsInN0ciIsImxlbmd0aCIsInN0YXJ0c1dpdGgiLCJ0ZXN0Iiwic2xpY2UiLCJ0b0FycmF5IiwiaXRlbSIsIkFycmF5IiwiaXNBcnJheSIsImNvbnRhaW5WYWxpZFRpbWUiLCJ0aW1lc3RhbXBzIiwiZm9ybWF0dGVkVGltZVN0YW1wcyIsIm1hcCIsInRzIiwiaWdub3JlZERhdGFUeXBlcyIsIk9iamVjdCIsImtleXMiLCJEQVRBX1RZUEVTIiwiZmlsdGVyIiwidHlwZSIsIlRJTUUiLCJEQVRFVElNRSIsIkRBVEUiLCJpbmNsdWRlcyIsImFuYWx5emVkVHlwZSIsIkFuYWx5emVyIiwiY29tcHV0ZUNvbE1ldGEiLCJjYXRlZ29yeSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7QW5hbHl6ZXIsIERBVEFfVFlQRVN9IGZyb20gJ3R5cGUtYW5hbHl6ZXInO1xuXG5pbXBvcnQge0ZpZWxkfSBmcm9tICdAa2VwbGVyLmdsL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdE51bGxvclVuZGVmaW5lZDxUIGV4dGVuZHMgTm9uTnVsbGFibGU8YW55Pj4oZDogVCB8IG51bGwgfCB1bmRlZmluZWQpOiBkIGlzIFQge1xuICByZXR1cm4gZCAhPT0gdW5kZWZpbmVkICYmIGQgIT09IG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgc3RyaW5nIGlzIGEgdmFsaWQgV2VsbC1rbm93biBiaW5hcnkgKFdLQikgaW4gSEVYIGZvcm1hdFxuICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2VsbC1rbm93bl90ZXh0X3JlcHJlc2VudGF0aW9uX29mX2dlb21ldHJ5XG4gKlxuICogQHBhcmFtIHN0ciBpbnB1dCBzdHJpbmdcbiAqIEByZXR1cm5zIHRydWUgaWYgc3RyaW5nIGlzIGEgdmFsaWQgV0tCIGluIEhFWCBmb3JtYXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSGV4V2tiKHN0cjogc3RyaW5nIHwgbnVsbCk6IGJvb2xlYW4ge1xuICBpZiAoIXN0cikgcmV0dXJuIGZhbHNlO1xuICAvLyBjaGVjayBpZiB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgaXMgZXZlbiBhbmQgaXMgYXQgbGVhc3QgMTAgY2hhcmFjdGVycyBsb25nXG4gIGlmIChzdHIubGVuZ3RoIDwgMTAgfHwgc3RyLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gY2hlY2sgaWYgZmlyc3QgdHdvIGNoYXJhY3RlcnMgYXJlIDAwIG9yIDAxXG4gIGlmICghc3RyLnN0YXJ0c1dpdGgoJzAwJykgJiYgIXN0ci5zdGFydHNXaXRoKCcwMScpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIGNoZWNrIGlmIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBoZXhcbiAgcmV0dXJuIC9eWzAtOWEtZkEtRl0rJC8udGVzdChzdHIuc2xpY2UoMikpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIG5vbi1hcnJheXMgdG8gYXJyYXlzLiAgTGVhdmVzIGFycmF5cyBhbG9uZS4gIENvbnZlcnRzXG4gKiB1bmRlZmluZWQgdmFsdWVzIHRvIGVtcHR5IGFycmF5cyAoW10gaW5zdGVhZCBvZiBbdW5kZWZpbmVkXSkuXG4gKiBPdGhlcndpc2UsIGp1c3QgcmV0dXJucyBbaXRlbV0gZm9yIG5vbi1hcnJheSBpdGVtcy5cbiAqXG4gKiBAcGFyYW0geyp9IGl0ZW1cbiAqIEByZXR1cm5zIHthcnJheX0gYm9vbSEgbXVjaCBhcnJheS4gdmVyeSBpbmRleGVkLiBzbyB1c2VmdWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0FycmF5PFQ+KGl0ZW06IFQgfCBUW10pOiBUW10ge1xuICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpdGVtID09PSAndW5kZWZpbmVkJyB8fCBpdGVtID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIFtpdGVtXTtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGdlb2pzb24gbGluZXN0cmluZydzIDR0aCBjb29yZGluYXRlIGlzIDEpIG5vdCB0aW1lc3RhbXAgMikgdW5peCB0aW1lIHN0YW1wIDMpIHJlYWwgZGF0ZSB0aW1lXG4gKiBAcGFyYW0gdGltZXN0YW1wcyBhcnJheSB0byBiZSB0ZXN0ZWQgaWYgaXRzIGVsZW1lbnRzIGFyZSB0aW1lc3RhbXBcbiAqIEByZXR1cm5zIHRoZSB0eXBlIG9mIHRpbWVzdGFtcDogdW5peC9kYXRldGltZS9pbnZhbGlkKG5vdCB0aW1lc3RhbXApXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb250YWluVmFsaWRUaW1lKHRpbWVzdGFtcHM6IHN0cmluZ1tdKTogRmllbGQgfCBudWxsIHtcbiAgY29uc3QgZm9ybWF0dGVkVGltZVN0YW1wcyA9IHRpbWVzdGFtcHMubWFwKHRzID0+ICh7dHN9KSk7XG4gIGNvbnN0IGlnbm9yZWREYXRhVHlwZXMgPSBPYmplY3Qua2V5cyhEQVRBX1RZUEVTKS5maWx0ZXIoXG4gICAgdHlwZSA9PiAhW0RBVEFfVFlQRVMuVElNRSwgREFUQV9UWVBFUy5EQVRFVElNRSwgREFUQV9UWVBFUy5EQVRFXS5pbmNsdWRlcyh0eXBlKVxuICApO1xuXG4gIC8vIGlnbm9yZSBhbGwgdHlwZXMgYnV0IFRJTUUgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZVxuICBjb25zdCBhbmFseXplZFR5cGUgPSBBbmFseXplci5jb21wdXRlQ29sTWV0YShmb3JtYXR0ZWRUaW1lU3RhbXBzLCBbXSwge2lnbm9yZWREYXRhVHlwZXN9KVswXTtcblxuICBpZiAoIWFuYWx5emVkVHlwZSB8fCBhbmFseXplZFR5cGUuY2F0ZWdvcnkgIT09ICdUSU1FJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBhbmFseXplZFR5cGU7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUdBLElBQUFBLGFBQUEsR0FBQUMsT0FBQTtBQUhBO0FBQ0E7O0FBTU8sU0FBU0Msa0JBQWtCQSxDQUE2QkMsQ0FBdUIsRUFBVTtFQUM5RixPQUFPQSxDQUFDLEtBQUtDLFNBQVMsSUFBSUQsQ0FBQyxLQUFLLElBQUk7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRSxRQUFRQSxDQUFDQyxHQUFrQixFQUFXO0VBQ3BELElBQUksQ0FBQ0EsR0FBRyxFQUFFLE9BQU8sS0FBSztFQUN0QjtFQUNBLElBQUlBLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLEVBQUUsSUFBSUQsR0FBRyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUMzQyxPQUFPLEtBQUs7RUFDZDtFQUNBO0VBQ0EsSUFBSSxDQUFDRCxHQUFHLENBQUNFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDRixHQUFHLENBQUNFLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNsRCxPQUFPLEtBQUs7RUFDZDtFQUNBO0VBQ0EsT0FBTyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDSCxHQUFHLENBQUNJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsT0FBT0EsQ0FBSUMsSUFBYSxFQUFPO0VBQzdDLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixJQUFJLENBQUMsRUFBRTtJQUN2QixPQUFPQSxJQUFJO0VBQ2I7RUFFQSxJQUFJLE9BQU9BLElBQUksS0FBSyxXQUFXLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQUU7SUFDaEQsT0FBTyxFQUFFO0VBQ1g7RUFFQSxPQUFPLENBQUNBLElBQUksQ0FBQztBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyxnQkFBZ0JBLENBQUNDLFVBQW9CLEVBQWdCO0VBQ25FLElBQU1DLG1CQUFtQixHQUFHRCxVQUFVLENBQUNFLEdBQUcsQ0FBQyxVQUFBQyxFQUFFO0lBQUEsT0FBSztNQUFDQSxFQUFFLEVBQUZBO0lBQUUsQ0FBQztFQUFBLENBQUMsQ0FBQztFQUN4RCxJQUFNQyxnQkFBZ0IsR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLHdCQUFVLENBQUMsQ0FBQ0MsTUFBTSxDQUNyRCxVQUFBQyxJQUFJO0lBQUEsT0FBSSxDQUFDLENBQUNGLHdCQUFVLENBQUNHLElBQUksRUFBRUgsd0JBQVUsQ0FBQ0ksUUFBUSxFQUFFSix3QkFBVSxDQUFDSyxJQUFJLENBQUMsQ0FBQ0MsUUFBUSxDQUFDSixJQUFJLENBQUM7RUFBQSxDQUNqRixDQUFDOztFQUVEO0VBQ0EsSUFBTUssWUFBWSxHQUFHQyxzQkFBUSxDQUFDQyxjQUFjLENBQUNmLG1CQUFtQixFQUFFLEVBQUUsRUFBRTtJQUFDRyxnQkFBZ0IsRUFBaEJBO0VBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUU1RixJQUFJLENBQUNVLFlBQVksSUFBSUEsWUFBWSxDQUFDRyxRQUFRLEtBQUssTUFBTSxFQUFFO0lBQ3JELE9BQU8sSUFBSTtFQUNiO0VBQ0EsT0FBT0gsWUFBWTtBQUNyQiIsImlnbm9yZUxpc3QiOltdfQ==