"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ACCEPTED_ANALYZER_TYPES = void 0;
exports.analyzerTypeToFieldType = analyzerTypeToFieldType;
exports.getFieldsFromData = getFieldsFromData;
exports.getSampleForTypeAnalyze = getSampleForTypeAnalyze;
exports.getSampleForTypeAnalyzeArrow = getSampleForTypeAnalyzeArrow;
exports.renameDuplicateFields = renameDuplicateFields;
var _typeAnalyzer = require("type-analyzer");
var _constants = require("@kepler.gl/constants");
var _window = require("global/window");
var _d3Array = require("d3-array");
var _data = require("./data");
var _h3Utils = require("./h3-utils");
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var H3_ANALYZER_TYPE = 'H3';
var ACCEPTED_ANALYZER_TYPES = exports.ACCEPTED_ANALYZER_TYPES = [_typeAnalyzer.DATA_TYPES.DATE, _typeAnalyzer.DATA_TYPES.TIME, _typeAnalyzer.DATA_TYPES.DATETIME, _typeAnalyzer.DATA_TYPES.NUMBER, _typeAnalyzer.DATA_TYPES.INT, _typeAnalyzer.DATA_TYPES.FLOAT, _typeAnalyzer.DATA_TYPES.BOOLEAN, _typeAnalyzer.DATA_TYPES.STRING, _typeAnalyzer.DATA_TYPES.GEOMETRY, _typeAnalyzer.DATA_TYPES.GEOMETRY_FROM_STRING, _typeAnalyzer.DATA_TYPES.PAIR_GEOMETRY_FROM_STRING, _typeAnalyzer.DATA_TYPES.ZIPCODE, _typeAnalyzer.DATA_TYPES.ARRAY, _typeAnalyzer.DATA_TYPES.OBJECT, H3_ANALYZER_TYPE];
var IGNORE_DATA_TYPES = Object.keys(_typeAnalyzer.DATA_TYPES).filter(function (type) {
  return !ACCEPTED_ANALYZER_TYPES.includes(type);
});

/**
 * Getting sample data for analyzing field type.
 */
function getSampleForTypeAnalyze(_ref) {
  var fields = _ref.fields,
    rows = _ref.rows,
    _ref$sampleCount = _ref.sampleCount,
    sampleCount = _ref$sampleCount === void 0 ? 50 : _ref$sampleCount;
  var total = Math.min(sampleCount, rows.length);
  // const fieldOrder = fields.map(f => f.name);
  var sample = (0, _d3Array.range)(0, total, 1).map(function () {
    return {};
  });
  if (rows.length < 1) {
    return [];
  }
  var isRowObject = !Array.isArray(rows[0]);

  // collect sample data for each field
  fields.forEach(function (field, fieldIdx) {
    // row counter
    var i = 0;
    // sample counter
    var j = 0;
    while (j < total) {
      if (i >= rows.length) {
        // if depleted data pool
        sample[j][field] = null;
        j++;
      } else if ((0, _data.notNullorUndefined)(rows[i][isRowObject ? field : fieldIdx])) {
        var value = rows[i][isRowObject ? field : fieldIdx];
        sample[j][field] = typeof value === 'string' ? value.trim() : value;
        j++;
        i++;
      } else {
        i++;
      }
    }
  });
  return sample;
}

/**
 * Getting sample data for analyzing field type for Arrow tables.
 * @param table Arrow table or an array of vectors.
 * @param fields Field names.
 * @param sampleCount Number of sample rows to get.
 * @returns Sample rows.
 */
function getSampleForTypeAnalyzeArrow(table, fields) {
  var sampleCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
  var isTable = !Array.isArray(table);
  var numRows = isTable ? table.numRows : table[0].length;
  var getVector = isTable ? function (index) {
    return table.getChildAt(index);
  } : function (index) {
    return table[index];
  };
  var total = Math.min(sampleCount, numRows);
  var sample = (0, _d3Array.range)(0, total, 1).map(function () {
    return {};
  });
  if (numRows < 1) {
    return [];
  }

  // collect sample data for each field
  fields.forEach(function (field, fieldIdx) {
    var rowIndex = 0;
    var sampleIndex = 0;
    while (sampleIndex < total) {
      var _getVector;
      if (rowIndex >= numRows) {
        // if depleted data pool
        sample[sampleIndex][field] = null;
        sampleIndex++;
      } else if ((0, _data.notNullorUndefined)((_getVector = getVector(fieldIdx)) === null || _getVector === void 0 ? void 0 : _getVector.get(rowIndex))) {
        var _getVector2;
        var value = (_getVector2 = getVector(fieldIdx)) === null || _getVector2 === void 0 ? void 0 : _getVector2.get(rowIndex);
        sample[sampleIndex][field] = typeof value === 'string' ? value.trim() : value;
        sampleIndex++;
        rowIndex++;
      } else {
        rowIndex++;
      }
    }
  });
  return sample;
}

/**
 * Convert type-analyzer output to kepler.gl field types
 *
 * @param aType
 * @returns corresponding type in `ALL_FIELD_TYPES`
 */
/* eslint-disable complexity */
function analyzerTypeToFieldType(aType) {
  var DATE = _typeAnalyzer.DATA_TYPES.DATE,
    TIME = _typeAnalyzer.DATA_TYPES.TIME,
    DATETIME = _typeAnalyzer.DATA_TYPES.DATETIME,
    NUMBER = _typeAnalyzer.DATA_TYPES.NUMBER,
    INT = _typeAnalyzer.DATA_TYPES.INT,
    FLOAT = _typeAnalyzer.DATA_TYPES.FLOAT,
    BOOLEAN = _typeAnalyzer.DATA_TYPES.BOOLEAN,
    STRING = _typeAnalyzer.DATA_TYPES.STRING,
    GEOMETRY = _typeAnalyzer.DATA_TYPES.GEOMETRY,
    GEOMETRY_FROM_STRING = _typeAnalyzer.DATA_TYPES.GEOMETRY_FROM_STRING,
    PAIR_GEOMETRY_FROM_STRING = _typeAnalyzer.DATA_TYPES.PAIR_GEOMETRY_FROM_STRING,
    ZIPCODE = _typeAnalyzer.DATA_TYPES.ZIPCODE,
    ARRAY = _typeAnalyzer.DATA_TYPES.ARRAY,
    OBJECT = _typeAnalyzer.DATA_TYPES.OBJECT;

  // TODO: un recognized types
  // CURRENCY PERCENT NONE
  switch (aType) {
    case DATE:
      return _constants.ALL_FIELD_TYPES.date;
    case TIME:
    case DATETIME:
      return _constants.ALL_FIELD_TYPES.timestamp;
    case FLOAT:
      return _constants.ALL_FIELD_TYPES.real;
    case INT:
      return _constants.ALL_FIELD_TYPES.integer;
    case BOOLEAN:
      return _constants.ALL_FIELD_TYPES["boolean"];
    case GEOMETRY:
    case GEOMETRY_FROM_STRING:
    case PAIR_GEOMETRY_FROM_STRING:
      return _constants.ALL_FIELD_TYPES.geojson;
    case ARRAY:
      return _constants.ALL_FIELD_TYPES.array;
    case OBJECT:
      return _constants.ALL_FIELD_TYPES.object;
    case NUMBER:
    case STRING:
    case ZIPCODE:
      return _constants.ALL_FIELD_TYPES.string;
    case H3_ANALYZER_TYPE:
      return _constants.ALL_FIELD_TYPES.h3;
    default:
      _window.console.warn("Unsupported analyzer type: ".concat(aType));
      return _constants.ALL_FIELD_TYPES.string;
  }
}

/**
 * Analyze field types from data in `string` format, e.g. uploaded csv.
 * Assign `type`, `fieldIdx` and `format` (timestamp only) to each field
 *
 * @param data array of row object
 * @param fieldOrder array of field names as string
 * @returns formatted fields
 * @public
 * @example
 *
 * import {getFieldsFromData} from 'kepler.gl/common-utils';
 * const data = [{
 *   time: '2016-09-17 00:09:55',
 *   value: '4',
 *   surge: '1.2',
 *   isTrip: 'true',
 *   zeroOnes: '0'
 * }, {
 *   time: '2016-09-17 00:30:08',
 *   value: '3',
 *   surge: null,
 *   isTrip: 'false',
 *   zeroOnes: '1'
 * }, {
 *   time: null,
 *   value: '2',
 *   surge: '1.3',
 *   isTrip: null,
 *   zeroOnes: '1'
 * }];
 *
 * const fieldOrder = ['time', 'value', 'surge', 'isTrip', 'zeroOnes'];
 * const fields = getFieldsFromData(data, fieldOrder);
 * // fields = [
 * // {name: 'time', format: 'YYYY-M-D H:m:s', fieldIdx: 1, type: 'timestamp'},
 * // {name: 'value', format: '', fieldIdx: 4, type: 'integer'},
 * // {name: 'surge', format: '', fieldIdx: 5, type: 'real'},
 * // {name: 'isTrip', format: '', fieldIdx: 6, type: 'boolean'},
 * // {name: 'zeroOnes', format: '', fieldIdx: 7, type: 'integer'}];
 *
 */
function getFieldsFromData(data, fieldOrder) {
  // add a check for epoch timestamp
  var metadata = _typeAnalyzer.Analyzer.computeColMeta(data, [{
    regex: /.*geojson|all_points/g,
    dataType: 'GEOMETRY'
  }, {
    regex: /.*census/g,
    dataType: 'STRING'
  }], {
    ignoredDataTypes: IGNORE_DATA_TYPES
  });
  var _renameDuplicateField = renameDuplicateFields(fieldOrder),
    fieldByIndex = _renameDuplicateField.fieldByIndex;
  var result = fieldOrder.map(function (field, index) {
    var name = fieldByIndex[index];
    var fieldMeta = metadata.find(function (m) {
      return m.key === field;
    });

    // fieldMeta could be undefined if the field has no data and Analyzer.computeColMeta
    // will ignore the field. In this case, we will simply assign the field type to STRING
    // since dropping the column in the RowData could be expensive
    var type = (fieldMeta === null || fieldMeta === void 0 ? void 0 : fieldMeta.type) || 'STRING';
    var format = (fieldMeta === null || fieldMeta === void 0 ? void 0 : fieldMeta.format) || '';

    // quick check if first valid string in column is H3
    if (type === _typeAnalyzer.DATA_TYPES.STRING) {
      for (var i = 0, n = data.length; i < n; ++i) {
        if ((0, _data.notNullorUndefined)(data[i][name])) {
          type = (0, _h3Utils.h3IsValid)(data[i][name] || '') ? H3_ANALYZER_TYPE : type;
          break;
        }
      }
    }

    // quick check if string is hex wkb
    if (type === _typeAnalyzer.DATA_TYPES.STRING) {
      type = data.some(function (d) {
        return (0, _data.isHexWkb)(d[name]);
      }) ? _typeAnalyzer.DATA_TYPES.GEOMETRY : type;
    }
    return {
      name: name,
      id: name,
      displayName: name,
      format: format,
      fieldIdx: index,
      type: analyzerTypeToFieldType(type),
      analyzerType: type,
      valueAccessor: function valueAccessor(dc) {
        return function (d) {
          return dc.valueAt(d.index, index);
        };
      }
    };
  });
  return result;
}

/**
 * pass in an array of field names, rename duplicated one
 * and return a map from old field index to new name
 *
 * @param fieldOrder
 * @returns new field name by index
 */
function renameDuplicateFields(fieldOrder) {
  return fieldOrder.reduce(function (accu, field, i) {
    var allNames = accu.allNames;
    var fieldName = field;

    // add a counter to duplicated names
    if (allNames.includes(field)) {
      var counter = 0;
      while (allNames.includes("".concat(field, "-").concat(counter))) {
        counter++;
      }
      fieldName = "".concat(field, "-").concat(counter);
    }
    accu.fieldByIndex[i] = fieldName;
    accu.allNames.push(fieldName);
    return accu;
  }, {
    allNames: [],
    fieldByIndex: []
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,