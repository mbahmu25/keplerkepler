"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WGS84ToPseudoMercator = WGS84ToPseudoMercator;
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _webMercator = require("@math.gl/web-mercator");
var _typed = require("@deck.gl/core/typed");
var _typed2 = require("@deck.gl/layers/typed");
var _wms = require("@loaders.gl/wms");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// TODO: This is a modified copy of WMSLayer from deck.gl. Remove this once we upgrade deck.gl and loaders.gl.

/** All props supported by the TileLayer */

/** Props added by the TileLayer */

var defaultProps = {
  id: 'imagery-layer',
  data: '',
  serviceType: 'auto',
  srs: 'auto',
  layers: {
    type: 'array',
    compare: true,
    value: []
  },
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onMetadataLoad: {
    type: 'function',
    value: function value() {}
  },
  // eslint-disable-next-line
  onMetadataLoadError: {
    type: 'function',
    value: console.error
  },
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onImageLoadStart: {
    type: 'function',
    value: function value() {}
  },
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  onImageLoad: {
    type: 'function',
    value: function value() {}
  },
  onImageLoadError: {
    type: 'function',
    compare: false,
    // eslint-disable-next-line
    value: function value(requestId, error) {
      return console.error(error, requestId);
    }
  }
};
var WMSLayer = exports["default"] = /*#__PURE__*/function (_CompositeLayer) {
  function WMSLayer() {
    (0, _classCallCheck2["default"])(this, WMSLayer);
    return _callSuper(this, WMSLayer, arguments);
  }
  (0, _inherits2["default"])(WMSLayer, _CompositeLayer);
  return (0, _createClass2["default"])(WMSLayer, [{
    key: "isLoaded",
    get: /** Returns true if all async resources are loaded */
    function get() {
      // Track the explicit loading done by this layer
      return Boolean(this.state) && this.state.loadCounter === 0 && _superPropGet(WMSLayer, "isLoaded", this, 1);
    }

    /** Lets deck.gl know that we want viewport change events */
  }, {
    key: "shouldUpdateState",
    value: function shouldUpdateState() {
      return true;
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      // intentionally empty, initialization is done in updateState
      this.state._nextRequestId = 0;
      this.state.lastRequestId = -1;
      this.state.loadCounter = 0;
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var _this = this;
      var changeFlags = _ref.changeFlags,
        props = _ref.props,
        oldProps = _ref.oldProps;
      var viewport = this.context.viewport;

      // Check if data source has changed
      if (changeFlags.dataChanged || props.serviceType !== oldProps.serviceType) {
        this.state.imageSource = this._createImageSource(props);
        this._loadMetadata();
        this.debounce(function () {
          return _this.loadImage(viewport, 'image source changed');
        }, 0);
      } else if (!(0, _typed._deepEqual)(props.layers, oldProps.layers, 1)) {
        this.debounce(function () {
          return _this.loadImage(viewport, 'layers changed');
        }, 0);
      } else if (changeFlags.viewportChanged) {
        this.debounce(function () {
          return _this.loadImage(viewport, 'viewport changed');
        });
      }
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this$state = this.state,
        bounds = _this$state.bounds,
        image = _this$state.image,
        lastRequestParameters = _this$state.lastRequestParameters;
      return image && new _typed2.BitmapLayer(_objectSpread(_objectSpread({}, this.getSubLayerProps({
        id: 'bitmap'
      })), {}, {
        _imageCoordinateSystem: lastRequestParameters.srs === 'EPSG:4326' ? _typed.COORDINATE_SYSTEM.LNGLAT : _typed.COORDINATE_SYSTEM.CARTESIAN,
        bounds: bounds,
        image: image,
        pickable: this.props.pickable
      }));
    }
  }, {
    key: "getFeatureInfoText",
    value: function () {
      var _getFeatureInfoText = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(x, y) {
        var lastRequestParameters, _this$state$imageSour, _this$state$imageSour2, featureInfo;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              lastRequestParameters = this.state.lastRequestParameters;
              if (!lastRequestParameters) {
                _context.next = 6;
                break;
              }
              _context.next = 4;
              return (_this$state$imageSour = (_this$state$imageSour2 = this.state.imageSource).getFeatureInfoText) === null || _this$state$imageSour === void 0 ? void 0 : _this$state$imageSour.call(_this$state$imageSour2, _objectSpread(_objectSpread({}, lastRequestParameters), {}, {
                query_layers: lastRequestParameters.layers,
                x: x,
                y: y,
                info_format: 'application/vnd.ogc.gml'
              }));
            case 4:
              featureInfo = _context.sent;
              return _context.abrupt("return", featureInfo);
            case 6:
              return _context.abrupt("return", '');
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function getFeatureInfoText(_x, _x2) {
        return _getFeatureInfoText.apply(this, arguments);
      }
      return getFeatureInfoText;
    }()
  }, {
    key: "_createImageSource",
    value: function _createImageSource(props) {
      if (props.data instanceof _wms.ImageSource) {
        return props.data;
      }
      if (typeof props.data === 'string') {
        return (0, _wms.createImageSource)({
          url: props.data,
          loadOptions: props.loadOptions,
          type: props.serviceType
        });
      }
      throw new Error('invalid image source in props.data');
    }

    /** Run a getMetadata on the image service */
  }, {
    key: "_loadMetadata",
    value: (function () {
      var _loadMetadata2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var imageSource, metadata, _this$getCurrentLayer, _this$getCurrentLayer2;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              imageSource = this.state.imageSource;
              _context2.prev = 1;
              this.state.loadCounter++;
              _context2.next = 5;
              return imageSource.getMetadata();
            case 5:
              metadata = _context2.sent;
              // If a request takes a long time, it may no longer be expected
              if (this.state.imageSource === imageSource) {
                (_this$getCurrentLayer = this.getCurrentLayer()) === null || _this$getCurrentLayer === void 0 || _this$getCurrentLayer.props.onMetadataLoad(metadata);
              }
              _context2.next = 12;
              break;
            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](1);
              (_this$getCurrentLayer2 = this.getCurrentLayer()) === null || _this$getCurrentLayer2 === void 0 || _this$getCurrentLayer2.props.onMetadataLoadError(_context2.t0);
            case 12:
              _context2.prev = 12;
              this.state.loadCounter--;
              return _context2.finish(12);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[1, 9, 12, 15]]);
      }));
      function _loadMetadata() {
        return _loadMetadata2.apply(this, arguments);
      }
      return _loadMetadata;
    }() /** Load an image */)
  }, {
    key: "loadImage",
    value: (function () {
      var _loadImage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(viewport, _reason) {
        var _this$props, layers, serviceType, transparent, bounds, width, height, requestId, srs, requestParams, _WGS84ToPseudoMercato, _WGS84ToPseudoMercato2, minX, minY, _WGS84ToPseudoMercato3, _WGS84ToPseudoMercato4, maxX, maxY, image, _this$getCurrentLayer3, _this$context$onError, _this$context, _this$getCurrentLayer4;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _this$props = this.props, layers = _this$props.layers, serviceType = _this$props.serviceType, transparent = _this$props.transparent; // TODO - move to ImageSource?
              if (!(serviceType === 'wms' && layers.length === 0)) {
                _context3.next = 3;
                break;
              }
              return _context3.abrupt("return");
            case 3:
              bounds = viewport.getBounds();
              width = viewport.width, height = viewport.height;
              requestId = this.getRequestId();
              srs = this.props.srs;
              if (srs === 'auto') {
                // BitmapLayer only supports LNGLAT or CARTESIAN (Web-Mercator)
                srs = viewport.resolution ? 'EPSG:4326' : 'EPSG:3857';
              }
              requestParams = {
                width: width,
                height: height,
                // TODO: remove bbox once deck.gl is upgraded to ^8.10 with loaders.gl ^4
                bbox: bounds,
                boundingBox: [[bounds[0], bounds[1]], [bounds[2], bounds[3]]],
                layers: layers,
                srs: srs,
                transparent: transparent
              };
              if (srs === 'EPSG:3857') {
                _WGS84ToPseudoMercato = WGS84ToPseudoMercator([bounds[0], bounds[1]]), _WGS84ToPseudoMercato2 = (0, _slicedToArray2["default"])(_WGS84ToPseudoMercato, 2), minX = _WGS84ToPseudoMercato2[0], minY = _WGS84ToPseudoMercato2[1];
                _WGS84ToPseudoMercato3 = WGS84ToPseudoMercator([bounds[2], bounds[3]]), _WGS84ToPseudoMercato4 = (0, _slicedToArray2["default"])(_WGS84ToPseudoMercato3, 2), maxX = _WGS84ToPseudoMercato4[0], maxY = _WGS84ToPseudoMercato4[1];
                requestParams.boundingBox = [[minX, minY], [maxX, maxY]];
                // TODO: remove bbox once deck.gl is upgraded to ^8.10 with loaders.gl ^4
                requestParams.bbox = [minX, minY, maxX, maxY];
              }
              _context3.prev = 10;
              this.state.loadCounter++;
              this.props.onImageLoadStart(requestId);
              _context3.next = 15;
              return this.state.imageSource.getImage(requestParams);
            case 15:
              image = _context3.sent;
              // If a request takes a long time, later requests may have already loaded.
              if (this.state.lastRequestId < requestId) {
                (_this$getCurrentLayer3 = this.getCurrentLayer()) === null || _this$getCurrentLayer3 === void 0 || _this$getCurrentLayer3.props.onImageLoad(requestId);
                // Not type safe...
                this.setState({
                  image: image,
                  bounds: bounds,
                  lastRequestParameters: requestParams,
                  lastRequestId: requestId
                });
              }
              _context3.next = 23;
              break;
            case 19:
              _context3.prev = 19;
              _context3.t0 = _context3["catch"](10);
              (_this$context$onError = (_this$context = this.context).onError) === null || _this$context$onError === void 0 || _this$context$onError.call(_this$context, _context3.t0, this);
              (_this$getCurrentLayer4 = this.getCurrentLayer()) === null || _this$getCurrentLayer4 === void 0 || _this$getCurrentLayer4.props.onImageLoadError(requestId, _context3.t0);
            case 23:
              _context3.prev = 23;
              this.state.loadCounter--;
              return _context3.finish(23);
            case 26:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[10, 19, 23, 26]]);
      }));
      function loadImage(_x3, _x4) {
        return _loadImage.apply(this, arguments);
      }
      return loadImage;
    }() // HELPERS
    /** Global counter for issuing unique request ids */
    )
  }, {
    key: "getRequestId",
    value: function getRequestId() {
      return this.state._nextRequestId++;
    }

    /** Runs an action in the future, cancels it if the new action is issued before it executes */
  }, {
    key: "debounce",
    value: function debounce(fn) {
      var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
      clearTimeout(this.state._timeoutId);
      this.state._timeoutId = setTimeout(function () {
        return fn();
      }, ms);
    }
  }]);
}(_typed.CompositeLayer); // https://epsg.io/3857
// +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs +type=crs
(0, _defineProperty2["default"])(WMSLayer, "layerName", 'WMSLayer');
(0, _defineProperty2["default"])(WMSLayer, "defaultProps", defaultProps);
var HALF_EARTH_CIRCUMFERENCE = 6378137 * Math.PI;

/** Projects EPSG:4326 to EPSG:3857
 * This is a lightweight replacement of proj4. Use tests to ensure conformance.
 */
function WGS84ToPseudoMercator(coord) {
  var mercator = (0, _webMercator.lngLatToWorld)(coord);
  mercator[0] = (mercator[0] / 256 - 1) * HALF_EARTH_CIRCUMFERENCE;
  mercator[1] = (mercator[1] / 256 - 1) * HALF_EARTH_CIRCUMFERENCE;
  return mercator;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,