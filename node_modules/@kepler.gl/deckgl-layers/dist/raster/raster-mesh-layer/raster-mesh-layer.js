"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typed = require("@deck.gl/core/typed");
var _typed2 = require("@deck.gl/mesh-layers/typed");
var _constants = _interopRequireDefault(require("@luma.gl/constants"));
var _core = require("@luma.gl/core");
var _engine = require("@luma.gl/engine");
var _rasterMeshLayerWebgl = _interopRequireDefault(require("./raster-mesh-layer-webgl1.fs"));
var _rasterMeshLayerWebgl2 = _interopRequireDefault(require("./raster-mesh-layer-webgl1.vs"));
var _rasterMeshLayerWebgl3 = _interopRequireDefault(require("./raster-mesh-layer-webgl2.fs"));
var _rasterMeshLayerWebgl4 = _interopRequireDefault(require("./raster-mesh-layer-webgl2.vs"));
var _images = require("../images");
var _util = require("../util");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function validateGeometryAttributes(attributes) {
  _typed.log.assert(attributes.positions || attributes.POSITION, 'RasterMeshLayer requires "postions" or "POSITION" attribute in mesh property.');
}

/*
 * Convert mesh data into geometry
 * @returns geometry
 */
function getGeometry(data) {
  if (data.attributes) {
    validateGeometryAttributes(data.attributes);
    if (data instanceof _core.Geometry) {
      return data;
    }
    return new _core.Geometry(data);
  } else if (data.positions || data.POSITION) {
    validateGeometryAttributes(data);
    return new _core.Geometry({
      attributes: data
    });
  }
  throw Error('Invalid mesh');
}
var defaultProps = _objectSpread(_objectSpread({}, _typed2.SimpleMeshLayer.defaultProps), {}, {
  modules: {
    type: 'array',
    value: [],
    compare: true
  },
  images: {
    type: 'object',
    value: {},
    compare: true
  },
  moduleProps: {
    type: 'object',
    value: {},
    compare: true
  }
});
var RasterMeshLayer = exports["default"] = /*#__PURE__*/function (_SimpleMeshLayer) {
  function RasterMeshLayer() {
    (0, _classCallCheck2["default"])(this, RasterMeshLayer);
    return _callSuper(this, RasterMeshLayer, arguments);
  }
  (0, _inherits2["default"])(RasterMeshLayer, _SimpleMeshLayer);
  return (0, _createClass2["default"])(RasterMeshLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var gl = this.context.gl;
      var programManager = _engine.ProgramManager.getDefaultProgramManager(gl);
      var fsStr1 = 'fs:DECKGL_MUTATE_COLOR(inout vec4 image, in vec2 coord)';
      var fsStr2 = 'fs:DECKGL_CREATE_COLOR(inout vec4 image, in vec2 coord)';

      // Only initialize shader hook functions _once globally_
      // Since the program manager is shared across all layers, but many layers
      // might be created, this solves the performance issue of always adding new
      // hook functions.
      if (!programManager._hookFunctions.includes(fsStr1)) {
        programManager.addShaderHook(fsStr1);
      }
      if (!programManager._hookFunctions.includes(fsStr2)) {
        programManager.addShaderHook(fsStr2);
      }

      // images is a mapping from keys to Texture2D objects. The keys should match
      // names of uniforms in shader modules
      this.setState({
        images: {}
      });
      _superPropGet(RasterMeshLayer, "initializeState", this, 3)([]);
    }
  }, {
    key: "getShaders",
    value: function getShaders() {
      var gl = this.context.gl;
      var _this$props$modules = this.props.modules,
        modules = _this$props$modules === void 0 ? [] : _this$props$modules;
      var webgl2 = (0, _core.isWebGL2)(gl);

      // Choose webgl version for module
      // If fs2 or fs1 keys exist, prefer them, but fall back to fs, so that
      // version-independent modules don't need to care
      var _iterator = _createForOfIteratorHelper(modules),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var module = _step.value;
          module.fs = webgl2 ? module.fs2 || module.fs : module.fs1 || module.fs;

          // Sampler type is always float for WebGL1
          if (!webgl2 && module.defines) {
            module.defines.SAMPLER_TYPE = 'sampler2D';
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return _objectSpread(_objectSpread({}, _superPropGet(RasterMeshLayer, "getShaders", this, 3)([])), {}, {
        vs: webgl2 ? _rasterMeshLayerWebgl4["default"] : _rasterMeshLayerWebgl2["default"],
        fs: webgl2 ? _rasterMeshLayerWebgl3["default"] : _rasterMeshLayerWebgl["default"],
        modules: [_typed.project32, _typed.phongLighting].concat((0, _toConsumableArray2["default"])(modules))
      });
    }

    // eslint-disable-next-line complexity
  }, {
    key: "updateState",
    value: function updateState(params) {
      var props = params.props,
        oldProps = params.oldProps,
        changeFlags = params.changeFlags,
        context = params.context;
      _superPropGet(RasterMeshLayer, "updateState", this, 3)([{
        props: props,
        oldProps: oldProps,
        changeFlags: changeFlags,
        context: context
      }]);
      var modules = props && props.modules;
      var oldModules = oldProps && oldProps.modules;

      // If the list of modules changed, need to recompile the shaders
      if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged || !(0, _util.modulesEqual)(modules, oldModules)) {
        var _this$getAttributeMan;
        if (this.state.model) {
          this.state.model["delete"]();
        }
        if (props.mesh) {
          this.state.model = this.getModel(props.mesh);
          var attributes = props.mesh.attributes || props.mesh;
          this.setState({
            hasNormals: Boolean(attributes.NORMAL || attributes.normals)
          });
        }
        (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 || _this$getAttributeMan.invalidateAll();
      }
      if (props && props.images) {
        this.updateImages({
          props: props,
          oldProps: oldProps
        });
      }
      if (this.state.model) {
        this.state.model.setDrawMode(this.props.wireframe ? _constants["default"].LINE_STRIP : _constants["default"].TRIANGLES);
      }
    }
  }, {
    key: "updateImages",
    value: function updateImages(_ref) {
      var props = _ref.props,
        oldProps = _ref.oldProps;
      var images = this.state.images;
      var gl = this.context.gl;
      var newImages = (0, _images.loadImages)({
        gl: gl,
        images: images,
        imagesData: props.images,
        oldImagesData: oldProps.images
      });
      if (newImages) {
        this.setState({
          images: newImages
        });
      }
    }
  }, {
    key: "draw",
    value: function draw(_ref2) {
      var uniforms = _ref2.uniforms;
      var _this$state = this.state,
        model = _this$state.model,
        images = _this$state.images;
      var moduleProps = this.props.moduleProps;

      // Render the image
      if (!model || !images || Object.keys(images).length === 0 || !Object.values(images).every(function (item) {
        return item;
      })) {
        return;
      }
      var sizeScale = this.props.sizeScale;
      model.setUniforms(Object.assign({}, uniforms, {
        sizeScale: sizeScale,
        flatShading: !this.state.hasNormals
      })).updateModuleSettings(_objectSpread(_objectSpread({}, moduleProps), images)).draw();
    }
  }, {
    key: "finalizeState",
    value: function finalizeState() {
      _superPropGet(RasterMeshLayer, "finalizeState", this, 3)([this.context]);
      if (this.state.images) {
        for (var _i = 0, _Object$values = Object.values(this.state.images); _i < _Object$values.length; _i++) {
          var image = _Object$values[_i];
          if (Array.isArray(image)) {
            image.map(function (x) {
              return x && x["delete"]();
            });
          } else if (image) {
            image["delete"]();
          }
        }
      }
    }
  }, {
    key: "getModel",
    value: function getModel(mesh) {
      var gl = this.context.gl;
      var model = new _core.Model(gl, Object.assign({}, this.getShaders(), {
        id: this.props.id,
        geometry: getGeometry(mesh),
        isInstanced: false
      }));
      return model;
    }
  }]);
}(_typed2.SimpleMeshLayer);
RasterMeshLayer.layerName = 'RasterMeshLayer';
RasterMeshLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,