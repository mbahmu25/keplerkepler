"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typed = require("@deck.gl/core/typed");
var _typed2 = require("@deck.gl/layers/typed");
var _core = require("@luma.gl/core");
var _engine = require("@luma.gl/engine");
var _rasterLayerWebgl = _interopRequireDefault(require("./raster-layer-webgl1.fs"));
var _rasterLayerWebgl2 = _interopRequireDefault(require("./raster-layer-webgl1.vs"));
var _rasterLayerWebgl3 = _interopRequireDefault(require("./raster-layer-webgl2.fs"));
var _rasterLayerWebgl4 = _interopRequireDefault(require("./raster-layer-webgl2.vs"));
var _images = require("../images");
var _util = require("../util");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var defaultProps = _objectSpread(_objectSpread({}, _typed2.BitmapLayer.defaultProps), {}, {
  modules: {
    type: 'array',
    value: [],
    compare: true
  },
  images: {
    type: 'object',
    value: {},
    compare: true
  },
  moduleProps: {
    type: 'object',
    value: {},
    compare: true
  }
});
var RasterLayer = exports["default"] = /*#__PURE__*/function (_BitmapLayer) {
  function RasterLayer() {
    (0, _classCallCheck2["default"])(this, RasterLayer);
    return _callSuper(this, RasterLayer, arguments);
  }
  (0, _inherits2["default"])(RasterLayer, _BitmapLayer);
  return (0, _createClass2["default"])(RasterLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var gl = this.context.gl;
      var programManager = _engine.ProgramManager.getDefaultProgramManager(gl);
      var fsStr1 = 'fs:DECKGL_MUTATE_COLOR(inout vec4 image, in vec2 coord)';
      var fsStr2 = 'fs:DECKGL_CREATE_COLOR(inout vec4 image, in vec2 coord)';

      // Only initialize shader hook functions _once globally_
      // Since the program manager is shared across all layers, but many layers
      // might be created, this solves the performance issue of always adding new
      // hook functions.
      if (!programManager._hookFunctions.includes(fsStr1)) {
        programManager.addShaderHook(fsStr1);
      }
      if (!programManager._hookFunctions.includes(fsStr2)) {
        programManager.addShaderHook(fsStr2);
      }

      // images is a mapping from keys to Texture2D objects. The keys should match
      // names of uniforms in shader modules
      this.setState({
        images: {}
      });
      _superPropGet(RasterLayer, "initializeState", this, 3)([]);
    }
  }, {
    key: "draw",
    value: function draw(_ref) {
      var uniforms = _ref.uniforms;
      var _this$state = this.state,
        model = _this$state.model,
        images = _this$state.images,
        coordinateConversion = _this$state.coordinateConversion,
        bounds = _this$state.bounds;
      var _this$props = this.props,
        desaturate = _this$props.desaturate,
        transparentColor = _this$props.transparentColor,
        tintColor = _this$props.tintColor,
        moduleProps = _this$props.moduleProps;

      // Render the image
      if (!model || !images || Object.keys(images).length === 0 || !Object.values(images).every(function (item) {
        return item;
      })) {
        return;
      }
      model.setUniforms(_objectSpread(_objectSpread({}, uniforms), {}, {
        desaturate: desaturate,
        transparentColor: transparentColor === null || transparentColor === void 0 ? void 0 : transparentColor.map(function (x) {
          return x ? x / 255 : 0;
        }),
        tintColor: tintColor === null || tintColor === void 0 ? void 0 : tintColor.slice(0, 3).map(function (x) {
          return x / 255;
        }),
        coordinateConversion: coordinateConversion,
        bounds: bounds
      })).updateModuleSettings(_objectSpread(_objectSpread({}, moduleProps), images)).draw();
    }
  }, {
    key: "getShaders",
    value: function getShaders() {
      var gl = this.context.gl;
      var _this$props$modules = this.props.modules,
        modules = _this$props$modules === void 0 ? [] : _this$props$modules;
      var webgl2 = (0, _core.isWebGL2)(gl);

      // Choose webgl version for module
      // If fs2 or fs1 keys exist, prefer them, but fall back to fs, so that
      // version-independent modules don't need to care
      var _iterator = _createForOfIteratorHelper(modules),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var module = _step.value;
          module.fs = webgl2 ? module.fs2 || module.fs : module.fs1 || module.fs;

          // Sampler type is always float for WebGL1
          if (!webgl2 && module.defines) {
            module.defines.SAMPLER_TYPE = 'sampler2D';
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return _objectSpread(_objectSpread({}, _superPropGet(RasterLayer, "getShaders", this, 3)([])), {}, {
        vs: webgl2 ? _rasterLayerWebgl4["default"] : _rasterLayerWebgl2["default"],
        fs: webgl2 ? _rasterLayerWebgl3["default"] : _rasterLayerWebgl["default"],
        modules: [_typed.project32].concat((0, _toConsumableArray2["default"])(modules))
      });
    }

    // eslint-disable-next-line complexity
  }, {
    key: "updateState",
    value: function updateState(params) {
      var props = params.props,
        oldProps = params.oldProps,
        changeFlags = params.changeFlags;
      var modules = props && props.modules;
      var oldModules = oldProps && oldProps.modules;

      // setup model first
      // If the list of modules changed, need to recompile the shaders
      if (changeFlags.extensionsChanged || !(0, _util.modulesEqual)(modules, oldModules)) {
        var _this$state$model, _this$getAttributeMan;
        var gl = this.context.gl;
        (_this$state$model = this.state.model) === null || _this$state$model === void 0 || _this$state$model["delete"]();
        this.state.model = this._getModel(gl);
        (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 || _this$getAttributeMan.invalidateAll();
      }
      if (props && props.images) {
        this.updateImages({
          props: props,
          oldProps: oldProps
        });
      }
      var attributeManager = this.getAttributeManager();
      if (props.bounds !== oldProps.bounds) {
        var _this$state$model2;
        var oldMesh = this.state.mesh;
        var mesh = this._createMesh();
        (_this$state$model2 = this.state.model) === null || _this$state$model2 === void 0 || _this$state$model2.setVertexCount(mesh.vertexCount);
        for (var key in mesh) {
          if (oldMesh && oldMesh[key] !== mesh[key]) {
            attributeManager === null || attributeManager === void 0 || attributeManager.invalidate(key);
          }
        }
        this.setState(_objectSpread({
          mesh: mesh
        }, this._getCoordinateUniforms()));
      } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {
        this.setState(this._getCoordinateUniforms());
      }
    }
  }, {
    key: "updateImages",
    value: function updateImages(_ref2) {
      var props = _ref2.props,
        oldProps = _ref2.oldProps;
      var images = this.state.images;
      var gl = this.context.gl;
      var newImages = (0, _images.loadImages)({
        gl: gl,
        images: images,
        imagesData: props.images,
        oldImagesData: oldProps.images
      });
      if (newImages) {
        this.setState({
          images: newImages
        });
      }
    }
  }, {
    key: "finalizeState",
    value: function finalizeState() {
      _superPropGet(RasterLayer, "finalizeState", this, 3)([this.context]);
      if (this.state.images) {
        for (var _i = 0, _Object$values = Object.values(this.state.images); _i < _Object$values.length; _i++) {
          var image = _Object$values[_i];
          if (Array.isArray(image)) {
            image.map(function (x) {
              return x && x["delete"]();
            });
          } else if (image) {
            image["delete"]();
          }
        }
      }
    }
  }]);
}(_typed2.BitmapLayer);
RasterLayer.defaultProps = defaultProps;
RasterLayer.layerName = 'RasterLayer';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,