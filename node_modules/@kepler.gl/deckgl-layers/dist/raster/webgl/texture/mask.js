"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maskUint = exports.maskInt = exports.maskFloat = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var inf = Math.pow(2, 62);
function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var imageMask = opts.imageMask,
    maskKeepMin = opts.maskKeepMin,
    maskKeepMax = opts.maskKeepMax;
  if (!imageMask) {
    return null;
  }
  return {
    bitmapTextureMask: imageMask,
    uMaskKeepMin: Number.isFinite(maskKeepMin) ? maskKeepMin : -inf,
    uMaskKeepMax: Number.isFinite(maskKeepMax) ? maskKeepMax : inf
  };
}
var fs1 = "uniform sampler2D bitmapTextureMask;\nuniform float uMaskKeepMin;\nuniform float uMaskKeepMax;\n";
var fs2 = "precision mediump float;\nprecision mediump int;\nprecision mediump usampler2D;\n\n#ifdef SAMPLER_TYPE\n  uniform SAMPLER_TYPE bitmapTextureMask;\n#else\n  uniform sampler2D bitmapTextureMask;\n#endif\n\nuniform float uMaskKeepMin;\nuniform float uMaskKeepMax;\n";
var mask = {
  name: 'mask-image',
  fs1: fs1,
  fs2: fs2,
  getUniforms: getUniforms,
  defines: {
    SAMPLER_TYPE: 'sampler2D'
  },
  inject: {
    'fs:DECKGL_CREATE_COLOR': "\n    float mask_value = float(texture2D(bitmapTextureMask, coord).r);\n    if (mask_value < uMaskKeepMin) discard;\n    if (mask_value > uMaskKeepMax) discard;\n    "
  }
};
var maskFloat = exports.maskFloat = _objectSpread(_objectSpread({}, mask), {}, {
  name: 'mask-image-float'
});
var maskUint = exports.maskUint = _objectSpread(_objectSpread({}, mask), {}, {
  name: 'mask-image-uint',
  defines: {
    SAMPLER_TYPE: 'usampler2D'
  }
});
var maskInt = exports.maskInt = _objectSpread(_objectSpread({}, mask), {}, {
  name: 'mask-image-int',
  defines: {
    SAMPLER_TYPE: 'isampler2D'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmYiLCJNYXRoIiwicG93IiwiZ2V0VW5pZm9ybXMiLCJvcHRzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaW1hZ2VNYXNrIiwibWFza0tlZXBNaW4iLCJtYXNrS2VlcE1heCIsImJpdG1hcFRleHR1cmVNYXNrIiwidU1hc2tLZWVwTWluIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJ1TWFza0tlZXBNYXgiLCJmczEiLCJmczIiLCJtYXNrIiwibmFtZSIsImRlZmluZXMiLCJTQU1QTEVSX1RZUEUiLCJpbmplY3QiLCJtYXNrRmxvYXQiLCJleHBvcnRzIiwiX29iamVjdFNwcmVhZCIsIm1hc2tVaW50IiwibWFza0ludCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yYXN0ZXIvd2ViZ2wvdGV4dHVyZS9tYXNrLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8vIENvcHlyaWdodCBjb250cmlidXRvcnMgdG8gdGhlIGtlcGxlci5nbCBwcm9qZWN0XG5cbmltcG9ydCB7VGV4dHVyZTJEfSBmcm9tICdAbHVtYS5nbC93ZWJnbCc7XG5cbmltcG9ydCB7R2V0VW5pZm9ybXNPdXRwdXQsIFNoYWRlck1vZHVsZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBpbmYgPSBNYXRoLnBvdygyLCA2Mik7XG5cbmZ1bmN0aW9uIGdldFVuaWZvcm1zKFxuICBvcHRzOiB7aW1hZ2VNYXNrPzogVGV4dHVyZTJEOyBtYXNrS2VlcE1pbj86IG51bWJlcjsgbWFza0tlZXBNYXg/OiBudW1iZXJ9ID0ge31cbik6IEdldFVuaWZvcm1zT3V0cHV0IHtcbiAgY29uc3Qge2ltYWdlTWFzaywgbWFza0tlZXBNaW4sIG1hc2tLZWVwTWF4fSA9IG9wdHM7XG4gIGlmICghaW1hZ2VNYXNrKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJpdG1hcFRleHR1cmVNYXNrOiBpbWFnZU1hc2ssXG4gICAgdU1hc2tLZWVwTWluOiBOdW1iZXIuaXNGaW5pdGUobWFza0tlZXBNaW4pID8gbWFza0tlZXBNaW4gOiAtaW5mLFxuICAgIHVNYXNrS2VlcE1heDogTnVtYmVyLmlzRmluaXRlKG1hc2tLZWVwTWF4KSA/IG1hc2tLZWVwTWF4IDogaW5mXG4gIH07XG59XG5cbmNvbnN0IGZzMSA9IGBcXFxudW5pZm9ybSBzYW1wbGVyMkQgYml0bWFwVGV4dHVyZU1hc2s7XG51bmlmb3JtIGZsb2F0IHVNYXNrS2VlcE1pbjtcbnVuaWZvcm0gZmxvYXQgdU1hc2tLZWVwTWF4O1xuYDtcblxuY29uc3QgZnMyID0gYFxcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcbnByZWNpc2lvbiBtZWRpdW1wIGludDtcbnByZWNpc2lvbiBtZWRpdW1wIHVzYW1wbGVyMkQ7XG5cbiNpZmRlZiBTQU1QTEVSX1RZUEVcbiAgdW5pZm9ybSBTQU1QTEVSX1RZUEUgYml0bWFwVGV4dHVyZU1hc2s7XG4jZWxzZVxuICB1bmlmb3JtIHNhbXBsZXIyRCBiaXRtYXBUZXh0dXJlTWFzaztcbiNlbmRpZlxuXG51bmlmb3JtIGZsb2F0IHVNYXNrS2VlcE1pbjtcbnVuaWZvcm0gZmxvYXQgdU1hc2tLZWVwTWF4O1xuYDtcblxuY29uc3QgbWFzazogU2hhZGVyTW9kdWxlID0ge1xuICBuYW1lOiAnbWFzay1pbWFnZScsXG4gIGZzMSxcbiAgZnMyLFxuICBnZXRVbmlmb3JtcyxcbiAgZGVmaW5lczoge1xuICAgIFNBTVBMRVJfVFlQRTogJ3NhbXBsZXIyRCdcbiAgfSxcbiAgaW5qZWN0OiB7XG4gICAgJ2ZzOkRFQ0tHTF9DUkVBVEVfQ09MT1InOiBgXG4gICAgZmxvYXQgbWFza192YWx1ZSA9IGZsb2F0KHRleHR1cmUyRChiaXRtYXBUZXh0dXJlTWFzaywgY29vcmQpLnIpO1xuICAgIGlmIChtYXNrX3ZhbHVlIDwgdU1hc2tLZWVwTWluKSBkaXNjYXJkO1xuICAgIGlmIChtYXNrX3ZhbHVlID4gdU1hc2tLZWVwTWF4KSBkaXNjYXJkO1xuICAgIGBcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IG1hc2tGbG9hdDogU2hhZGVyTW9kdWxlID0ge1xuICAuLi5tYXNrLFxuICBuYW1lOiAnbWFzay1pbWFnZS1mbG9hdCdcbn07XG5leHBvcnQgY29uc3QgbWFza1VpbnQ6IFNoYWRlck1vZHVsZSA9IHtcbiAgLi4ubWFzayxcbiAgbmFtZTogJ21hc2staW1hZ2UtdWludCcsXG4gIGRlZmluZXM6IHtcbiAgICBTQU1QTEVSX1RZUEU6ICd1c2FtcGxlcjJEJ1xuICB9XG59O1xuZXhwb3J0IGNvbnN0IG1hc2tJbnQ6IFNoYWRlck1vZHVsZSA9IHtcbiAgLi4ubWFzayxcbiAgbmFtZTogJ21hc2staW1hZ2UtaW50JyxcbiAgZGVmaW5lczoge1xuICAgIFNBTVBMRVJfVFlQRTogJ2lzYW1wbGVyMkQnXG4gIH1cbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBOztBQU1BLElBQU1BLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUUzQixTQUFTQyxXQUFXQSxDQUFBLEVBRUM7RUFBQSxJQURuQkMsSUFBeUUsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBRTlFLElBQU9HLFNBQVMsR0FBOEJKLElBQUksQ0FBM0NJLFNBQVM7SUFBRUMsV0FBVyxHQUFpQkwsSUFBSSxDQUFoQ0ssV0FBVztJQUFFQyxXQUFXLEdBQUlOLElBQUksQ0FBbkJNLFdBQVc7RUFDMUMsSUFBSSxDQUFDRixTQUFTLEVBQUU7SUFDZCxPQUFPLElBQUk7RUFDYjtFQUVBLE9BQU87SUFDTEcsaUJBQWlCLEVBQUVILFNBQVM7SUFDNUJJLFlBQVksRUFBRUMsTUFBTSxDQUFDQyxRQUFRLENBQUNMLFdBQVcsQ0FBQyxHQUFHQSxXQUFXLEdBQUcsQ0FBQ1QsR0FBRztJQUMvRGUsWUFBWSxFQUFFRixNQUFNLENBQUNDLFFBQVEsQ0FBQ0osV0FBVyxDQUFDLEdBQUdBLFdBQVcsR0FBR1Y7RUFDN0QsQ0FBQztBQUNIO0FBRUEsSUFBTWdCLEdBQUcscUdBSVI7QUFFRCxJQUFNQyxHQUFHLDJRQWFSO0FBRUQsSUFBTUMsSUFBa0IsR0FBRztFQUN6QkMsSUFBSSxFQUFFLFlBQVk7RUFDbEJILEdBQUcsRUFBSEEsR0FBRztFQUNIQyxHQUFHLEVBQUhBLEdBQUc7RUFDSGQsV0FBVyxFQUFYQSxXQUFXO0VBQ1hpQixPQUFPLEVBQUU7SUFDUEMsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFDREMsTUFBTSxFQUFFO0lBQ04sd0JBQXdCO0VBSzFCO0FBQ0YsQ0FBQztBQUVNLElBQU1DLFNBQXVCLEdBQUFDLE9BQUEsQ0FBQUQsU0FBQSxHQUFBRSxhQUFBLENBQUFBLGFBQUEsS0FDL0JQLElBQUk7RUFDUEMsSUFBSSxFQUFFO0FBQWtCLEVBQ3pCO0FBQ00sSUFBTU8sUUFBc0IsR0FBQUYsT0FBQSxDQUFBRSxRQUFBLEdBQUFELGFBQUEsQ0FBQUEsYUFBQSxLQUM5QlAsSUFBSTtFQUNQQyxJQUFJLEVBQUUsaUJBQWlCO0VBQ3ZCQyxPQUFPLEVBQUU7SUFDUEMsWUFBWSxFQUFFO0VBQ2hCO0FBQUMsRUFDRjtBQUNNLElBQU1NLE9BQXFCLEdBQUFILE9BQUEsQ0FBQUcsT0FBQSxHQUFBRixhQUFBLENBQUFBLGFBQUEsS0FDN0JQLElBQUk7RUFDUEMsSUFBSSxFQUFFLGdCQUFnQjtFQUN0QkMsT0FBTyxFQUFFO0lBQ1BDLFlBQVksRUFBRTtFQUNoQjtBQUFDLEVBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=