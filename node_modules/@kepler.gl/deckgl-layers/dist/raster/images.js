"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadImages = loadImages;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = _interopRequireDefault(require("@luma.gl/constants"));
var _core = require("@luma.gl/core");
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Texture parameters that should work for every texture on both WebGL1 and WebGL2
 */
var DEFAULT_UNIVERSAL_TEXTURE_PARAMETERS = (0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])((0, _defineProperty2["default"])({}, _constants["default"].TEXTURE_MIN_FILTER, _constants["default"].NEAREST), _constants["default"].TEXTURE_MAG_FILTER, _constants["default"].NEAREST), _constants["default"].TEXTURE_WRAP_S, _constants["default"].CLAMP_TO_EDGE), _constants["default"].TEXTURE_WRAP_T, _constants["default"].CLAMP_TO_EDGE);
/**
 * Load image items to webgl context
 * @param gl webgl rendering context
 * @param imageItem image item, might be single texture or array of textures
 * @returns loaded single webgl texture or array of webgl texture or null
 */
function loadImageItem(gl, imageItem) {
  var result;
  if (Array.isArray(imageItem)) {
    var dirtyResult = imageItem.map(function (x) {
      return loadTexture(gl, x);
    });
    result = [];
    var _iterator = _createForOfIteratorHelper(dirtyResult),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var texture = _step.value;
        if (texture) {
          result.push(texture);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!result.length) {
      result = null;
    }
  } else {
    result = loadTexture(gl, imageItem);
  }
  return result;
}

// eslint-disable-next-line complexity
function loadImages(_ref) {
  var gl = _ref.gl,
    images = _ref.images,
    imagesData = _ref.imagesData,
    oldImagesData = _ref.oldImagesData;
  // Change to `true` if we need to setState with a new `images` object
  var imagesDirty = false;

  // If there are any removed keys, which previously existed in oldProps and
  // this.state.images but no longer exist in props, remove from the images
  // object
  if (oldImagesData) {
    for (var key in oldImagesData) {
      if (imagesData && !(key in imagesData) && key in images) {
        delete images[key];
        imagesDirty = true;
      }
    }
  }

  // Check if any keys of props.images have changed
  var changedKeys = [];
  for (var _key in imagesData) {
    // If oldProps.images didn't exist or it existed and this key didn't exist
    if (!oldImagesData || oldImagesData && !(_key in oldImagesData)) {
      changedKeys.push(_key);
      continue;
    }

    // Deep compare when the key previously existed to see if it changed
    if (!(0, _isEqual["default"])(imagesData[_key], oldImagesData[_key])) {
      changedKeys.push(_key);
    }
  }
  for (var _i = 0, _changedKeys = changedKeys; _i < _changedKeys.length; _i++) {
    var _key2 = _changedKeys[_i];
    var imageData = imagesData[_key2];
    if (!imageData) {
      continue;
    }
    var loadedItem = loadImageItem(gl, imageData);
    if (loadedItem) {
      images[_key2] = loadedItem;
    }
    imagesDirty = true;
  }
  if (imagesDirty) {
    return images;
  }
  return null;
}

/**
 * Create Texture2D object from image data
 */
function loadTexture(gl, imageData) {
  if (!imageData) {
    return null;
  }
  if (imageData instanceof _core.Texture2D) {
    return imageData;
  }
  var textureParams = _objectSpread({
    parameters: DEFAULT_UNIVERSAL_TEXTURE_PARAMETERS
  }, imageData);
  if (!(0, _core.isWebGL2)(gl)) {
    textureParams = webgl1TextureFallbacks(textureParams);
  }
  return new _core.Texture2D(gl, textureParams);
}

/**
 * Texture fallbacks for WebGL1
 * Fallback ideas derived from viv
 * https://github.com/hms-dbmi/viv/blob/5bcec429eeba55914ef3d7155a610d82048520a0/src/layers/XRLayer/XRLayer.js#L280-L302
 */
function webgl1TextureFallbacks(textureParams) {
  // Set mipmaps to false
  // Not sure if this is necessary?
  // Might actually only be necessary for uint textures
  textureParams.mipmaps = false;

  // Change format to Luminance
  if (textureParams.format && [_constants["default"].R8UI, _constants["default"].R16UI, _constants["default"].R32UI].includes(textureParams.format)) {
    textureParams.format = _constants["default"].LUMINANCE;
  }

  // Change dataFormat to Luminance
  if (textureParams.dataFormat === _constants["default"].RED_INTEGER) {
    textureParams.dataFormat = _constants["default"].LUMINANCE;
  }

  // Set data type to float
  if (textureParams.type && [_constants["default"].UNSIGNED_BYTE, _constants["default"].UNSIGNED_SHORT, _constants["default"].UNSIGNED_INT].includes(textureParams.type)) {
    textureParams.type = _constants["default"].FLOAT;
  }

  // Cast data to float 32 if one of the uint types
  if (textureParams.data instanceof Uint8Array || textureParams.data instanceof Uint16Array || textureParams.data instanceof Uint32Array) {
    textureParams.data = new Float32Array(textureParams.data);
  }

  // Override texture parameters to make sure they're valid on WebGL1
  textureParams.parameters = _objectSpread(_objectSpread({}, textureParams.parameters), DEFAULT_UNIVERSAL_TEXTURE_PARAMETERS);
  return textureParams;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,