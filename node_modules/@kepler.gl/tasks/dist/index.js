"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNWRAP_TASK = exports.PROCESS_FILE_DATA = exports.LOAD_MAP_STYLE_TASK = exports.LOAD_FILE_TASK = exports.LOAD_CLOUD_MAP_TASK = exports.EXPORT_FILE_TO_CLOUD_TASK = exports.DELAY_TASK = exports.ACTION_TASK = void 0;
var _tasks = _interopRequireWildcard(require("react-palm/tasks"));
var _processors = require("@kepler.gl/processors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var LOAD_FILE_TASK = exports.LOAD_FILE_TASK = _tasks["default"].fromPromise(function (_ref) {
  var file = _ref.file,
    fileCache = _ref.fileCache,
    loaders = _ref.loaders,
    loadOptions = _ref.loadOptions;
  return (0, _processors.readFileInBatches)({
    file: file,
    fileCache: fileCache,
    loaders: loaders,
    loadOptions: loadOptions
  });
}, 'LOAD_FILE_TASK');
var PROCESS_FILE_DATA = exports.PROCESS_FILE_DATA = _tasks["default"].fromPromise(_processors.processFileData, 'PROCESS_FILE_CONTENT');
var LOAD_MAP_STYLE_TASK = exports.LOAD_MAP_STYLE_TASK = (0, _tasks.taskCreator)(function (_ref2, success, error) {
  var url = _ref2.url,
    id = _ref2.id;
  return fetch(url).then(function (response) {
    if (!response.ok) {
      return response.text().then(function (text) {
        error(text);
      });
    }
    return response.json();
  }).then(function (result) {
    if (!result) {
      error(new Error('Map style response is empty'));
    }
    success({
      id: id,
      style: result
    });
  });
}, 'LOAD_MAP_STYLE_TASK');

/**
 * task to upload file to cloud provider
 */
var EXPORT_FILE_TO_CLOUD_TASK = exports.EXPORT_FILE_TO_CLOUD_TASK = _tasks["default"].fromPromise(function (_ref3) {
  var provider = _ref3.provider,
    payload = _ref3.payload;
  return provider.uploadMap(payload);
}, 'EXPORT_FILE_TO_CLOUD_TASK');
var LOAD_CLOUD_MAP_TASK = exports.LOAD_CLOUD_MAP_TASK = _tasks["default"].fromPromise(function (_ref4) {
  var provider = _ref4.provider,
    payload = _ref4.payload;
  return provider.downloadMap(payload);
}, 'LOAD_CLOUD_MAP_TASK');

/**
 *  task to dispatch a function as a task
 */
var ACTION_TASK = exports.ACTION_TASK = _tasks["default"].fromCallback(function (_, cb) {
  return cb();
}, 'ACTION_TASK');
var DELAY_TASK = exports.DELAY_TASK = _tasks["default"].fromCallback(function (delay, cb) {
  return window.setTimeout(function () {
    return cb();
  }, delay);
}, 'DELAY_TASK');
var UNWRAP_TASK = exports.UNWRAP_TASK = _tasks["default"].fromPromise(function (promise) {
  return promise;
}, 'UNWRAP');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGFza3MiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvY2Vzc29ycyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkxPQURfRklMRV9UQVNLIiwiZXhwb3J0cyIsIlRhc2siLCJmcm9tUHJvbWlzZSIsIl9yZWYiLCJmaWxlIiwiZmlsZUNhY2hlIiwibG9hZGVycyIsImxvYWRPcHRpb25zIiwicmVhZEZpbGVJbkJhdGNoZXMiLCJQUk9DRVNTX0ZJTEVfREFUQSIsInByb2Nlc3NGaWxlRGF0YSIsIkxPQURfTUFQX1NUWUxFX1RBU0siLCJ0YXNrQ3JlYXRvciIsIl9yZWYyIiwic3VjY2VzcyIsImVycm9yIiwidXJsIiwiaWQiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsImpzb24iLCJyZXN1bHQiLCJFcnJvciIsInN0eWxlIiwiRVhQT1JUX0ZJTEVfVE9fQ0xPVURfVEFTSyIsIl9yZWYzIiwicHJvdmlkZXIiLCJwYXlsb2FkIiwidXBsb2FkTWFwIiwiTE9BRF9DTE9VRF9NQVBfVEFTSyIsIl9yZWY0IiwiZG93bmxvYWRNYXAiLCJBQ1RJT05fVEFTSyIsImZyb21DYWxsYmFjayIsIl8iLCJjYiIsIkRFTEFZX1RBU0siLCJkZWxheSIsIndpbmRvdyIsInNldFRpbWVvdXQiLCJVTldSQVBfVEFTSyIsInByb21pc2UiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IFRhc2ssIHt0YXNrQ3JlYXRvcn0gZnJvbSAncmVhY3QtcGFsbS90YXNrcyc7XG5pbXBvcnQge3JlYWRGaWxlSW5CYXRjaGVzLCBwcm9jZXNzRmlsZURhdGF9IGZyb20gJ0BrZXBsZXIuZ2wvcHJvY2Vzc29ycyc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX0ZJTEVfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gICh7ZmlsZSwgZmlsZUNhY2hlLCBsb2FkZXJzLCBsb2FkT3B0aW9uc30pID0+XG4gICAgcmVhZEZpbGVJbkJhdGNoZXMoe2ZpbGUsIGZpbGVDYWNoZSwgbG9hZGVycywgbG9hZE9wdGlvbnN9KSxcbiAgJ0xPQURfRklMRV9UQVNLJ1xuKTtcblxuZXhwb3J0IGNvbnN0IFBST0NFU1NfRklMRV9EQVRBID0gVGFzay5mcm9tUHJvbWlzZShwcm9jZXNzRmlsZURhdGEsICdQUk9DRVNTX0ZJTEVfQ09OVEVOVCcpO1xuXG5leHBvcnQgY29uc3QgTE9BRF9NQVBfU1RZTEVfVEFTSyA9IHRhc2tDcmVhdG9yKFxuICAoe3VybCwgaWR9LCBzdWNjZXNzLCBlcnJvcikgPT5cbiAgICBmZXRjaCh1cmwpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4odGV4dCA9PiB7XG4gICAgICAgICAgICBlcnJvcih0ZXh0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgZXJyb3IobmV3IEVycm9yKCdNYXAgc3R5bGUgcmVzcG9uc2UgaXMgZW1wdHknKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3VjY2Vzcyh7aWQsIHN0eWxlOiByZXN1bHR9KTtcbiAgICAgIH0pLFxuXG4gICdMT0FEX01BUF9TVFlMRV9UQVNLJ1xuKTtcblxuLyoqXG4gKiB0YXNrIHRvIHVwbG9hZCBmaWxlIHRvIGNsb3VkIHByb3ZpZGVyXG4gKi9cbmV4cG9ydCBjb25zdCBFWFBPUlRfRklMRV9UT19DTE9VRF9UQVNLID0gVGFzay5mcm9tUHJvbWlzZShcbiAgKHtwcm92aWRlciwgcGF5bG9hZH0pID0+IHByb3ZpZGVyLnVwbG9hZE1hcChwYXlsb2FkKSxcblxuICAnRVhQT1JUX0ZJTEVfVE9fQ0xPVURfVEFTSydcbik7XG5cbmV4cG9ydCBjb25zdCBMT0FEX0NMT1VEX01BUF9UQVNLID0gVGFzay5mcm9tUHJvbWlzZShcbiAgKHtwcm92aWRlciwgcGF5bG9hZH0pID0+IHByb3ZpZGVyLmRvd25sb2FkTWFwKHBheWxvYWQpLFxuXG4gICdMT0FEX0NMT1VEX01BUF9UQVNLJ1xuKTtcblxuLyoqXG4gKiAgdGFzayB0byBkaXNwYXRjaCBhIGZ1bmN0aW9uIGFzIGEgdGFza1xuICovXG5leHBvcnQgY29uc3QgQUNUSU9OX1RBU0sgPSBUYXNrLmZyb21DYWxsYmFjayhcbiAgKF8sIGNiKSA9PiBjYigpLFxuXG4gICdBQ1RJT05fVEFTSydcbik7XG5cbmV4cG9ydCBjb25zdCBERUxBWV9UQVNLID0gVGFzay5mcm9tQ2FsbGJhY2soXG4gIChkZWxheSwgY2IpID0+IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IGNiKCksIGRlbGF5KSxcblxuICAnREVMQVlfVEFTSydcbik7XG5cbmV4cG9ydCBjb25zdCBVTldSQVBfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gIHByb21pc2UgPT4gcHJvbWlzZSxcblxuICAnVU5XUkFQJ1xuKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUF5RSxTQUFBRSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxP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LEtBQUssQ0FBQyxJQUFJVSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUNqRDtJQUNBWCxPQUFPLENBQUM7TUFBQ0csRUFBRSxFQUFGQSxFQUFFO01BQUVTLEtBQUssRUFBRUY7SUFBTSxDQUFDLENBQUM7RUFDOUIsQ0FBQyxDQUFDO0FBQUEsR0FFTixxQkFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNPLElBQU1HLHlCQUF5QixHQUFBM0IsT0FBQSxDQUFBMkIseUJBQUEsR0FBRzFCLGlCQUFJLENBQUNDLFdBQVcsQ0FDdkQsVUFBQTBCLEtBQUE7RUFBQSxJQUFFQyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtJQUFFQyxPQUFPLEdBQUFGLEtBQUEsQ0FBUEUsT0FBTztFQUFBLE9BQU1ELFFBQVEsQ0FBQ0UsU0FBUyxDQUFDRCxPQUFPLENBQUM7QUFBQSxHQUVwRCwyQkFDRixDQUFDO0FBRU0sSUFBTUUsbUJBQW1CLEdBQUFoQyxPQUFBLENBQUFnQyxtQkFBQSxHQUFHL0IsaUJBQUksQ0FBQ0MsV0FBVyxDQUNqRCxVQUFBK0IsS0FBQTtFQUFBLElBQUVKLFFBQVEsR0FBQUksS0FBQSxDQUFSSixRQUFRO0lBQUVDLE9BQU8sR0FBQUcsS0FBQSxDQUFQSCxPQUFPO0VBQUEsT0FBTUQsUUFBUSxDQUFDSyxXQUFXLENBQUNKLE9BQU8sQ0FBQztBQUFBLEdBRXRELHFCQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ08sSUFBTUssV0FBVyxHQUFBbkMsT0FBQSxDQUFBbUMsV0FBQSxHQUFHbEMsaUJBQUksQ0FBQ21DLFlBQVksQ0FDMUMsVUFBQ0MsQ0FBQyxFQUFFQyxFQUFFO0VBQUEsT0FBS0EsRUFBRSxDQUFDLENBQUM7QUFBQSxHQUVmLGFBQ0YsQ0FBQztBQUVNLElBQU1DLFVBQVUsR0FBQXZDLE9BQUEsQ0FBQXVDLFVBQUEsR0FBR3RDLGlCQUFJLENBQUNtQyxZQUFZLENBQ3pDLFVBQUNJLEtBQUssRUFBRUYsRUFBRTtFQUFBLE9BQUtHLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDO0lBQUEsT0FBTUosRUFBRSxDQUFDLENBQUM7RUFBQSxHQUFFRSxLQUFLLENBQUM7QUFBQSxHQUVuRCxZQUNGLENBQUM7QUFFTSxJQUFNRyxXQUFXLEdBQUEzQyxPQUFBLENBQUEyQyxXQUFBLEdBQUcxQyxpQkFBSSxDQUFDQyxXQUFXLENBQ3pDLFVBQUEwQyxPQUFPO0VBQUEsT0FBSUEsT0FBTztBQUFBLEdBRWxCLFFBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==