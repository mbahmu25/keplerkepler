import type { LoaderOptions } from '@loaders.gl/loader-utils';
import { Geometry } from '@loaders.gl/schema';
import { parseTWKBGeometry, isTWKB } from "./lib/parse-twkb.js";
export type WKBLoaderOptions = LoaderOptions & {
    wkb?: {
        shape: 'geojson-geometry' | 'binary-geometry';
    };
};
/**
 * Worker loader for WKB (Well-Known Binary)
 */
export declare const TWKBWorkerLoader: {
    readonly dataType: Geometry;
    readonly batchType: never;
    readonly name: "TWKB (Tiny Well-Known Binary)";
    readonly id: "twkb";
    readonly module: "wkt";
    readonly version: any;
    readonly worker: true;
    readonly category: "geometry";
    readonly extensions: ["twkb"];
    readonly mimeTypes: [];
    readonly tests: [typeof isTWKB];
    readonly options: {
        readonly wkb: {
            readonly shape: "binary-geometry";
        };
    };
};
/**
 * Loader for WKB (Well-Known Binary)
 */
export declare const TWKBLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer) => Promise<Geometry>;
    readonly parseSync: typeof parseTWKBGeometry;
    readonly dataType: Geometry;
    readonly batchType: never;
    readonly name: "TWKB (Tiny Well-Known Binary)";
    readonly id: "twkb";
    readonly module: "wkt";
    readonly version: any;
    readonly worker: true;
    readonly category: "geometry";
    readonly extensions: ["twkb"];
    readonly mimeTypes: [];
    readonly tests: [typeof isTWKB];
    readonly options: {
        readonly wkb: {
            readonly shape: "binary-geometry";
        };
    };
};
//# sourceMappingURL=twkb-loader.d.ts.map