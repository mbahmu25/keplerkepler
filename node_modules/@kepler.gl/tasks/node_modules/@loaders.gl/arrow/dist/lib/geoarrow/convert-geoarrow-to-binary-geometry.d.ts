import * as arrow from 'apache-arrow';
import { BinaryFeatureCollection as BinaryFeatures } from '@loaders.gl/schema';
import { GeoArrowEncoding } from '@loaders.gl/gis';
/**
 * Binary data from geoarrow column and can be used by e.g. deck.gl GeojsonLayer
 */
export type BinaryDataFromGeoArrow = {
    /** Binary format geometries, an array of BinaryFeatureCollection */
    binaryGeometries: BinaryFeatures[];
    /** Boundary of the binary geometries */
    bounds: [number, number, number, number];
    /** Feature types of the binary geometries */
    featureTypes: {
        polygon: boolean;
        point: boolean;
        line: boolean;
    };
    /** (Optional) mean centers of the binary geometries for e.g. polygon filtering */
    meanCenters?: number[][];
};
/**
 * binary geometry template, see deck.gl BinaryGeometry
 */
export declare function getBinaryGeometryTemplate(): {
    globalFeatureIds: {
        value: Uint32Array;
        size: number;
    };
    positions: {
        value: Float32Array;
        size: number;
    };
    properties: never[];
    numericProps: {};
    featureIds: {
        value: Uint32Array;
        size: number;
    };
};
export type BinaryGeometriesFromArrowOptions = {
    /** option to specify which chunk to get binary geometries from, for progressive rendering */
    chunkIndex?: number;
    /** The offset (beginning index of rows) of input chunk. Used for reconstructing globalFeatureIds in web workers */
    chunkOffset?: number;
    /** option to get mean centers from geometries, for polygon filtering */
    calculateMeanCenters?: boolean;
    /** option to compute the triangle indices by tesselating polygons */
    triangulate?: boolean;
};
/**
 * get binary geometries from geoarrow column
 *
 * @param geoColumn the geoarrow column, e.g. arrowTable.getChildAt(geoColumnIndex)
 * @param geoEncoding the geo encoding of the geoarrow column, e.g. getGeoArrowEncoding(arrowTable.schema, geoColumnName)
 * @param options options for getting binary geometries {meanCenter: boolean}
 * @returns BinaryDataFromGeoArrow
 */
export declare function getBinaryGeometriesFromArrow(geoColumn: arrow.Vector, geoEncoding: GeoArrowEncoding, options?: BinaryGeometriesFromArrowOptions): BinaryDataFromGeoArrow;
/**
 * Get mean centers from binary geometries
 * @param binaryGeometries binary geometries from geoarrow column, an array of BinaryFeatureCollection
 * @returns mean centers of the binary geometries
 */
export declare function getMeanCentersFromBinaryGeometries(binaryGeometries: BinaryFeatures[]): number[][];
/**
 * get triangle indices. Allows deck.gl to skip performing costly triangulation on main thread.
 * @param polygonIndices Indices within positions of the start of each simple Polygon
 * @param primitivePolygonIndices Indices within positions of the start of each primitive Polygon/ring
 * @param flatCoordinateArray Array of x, y or x, y, z positions
 * @param nDim - number of dimensions per position
 * @returns triangle indices or null if invalid polygon and earcut fails
 */
export declare function getTriangleIndices(polygonIndices: Uint16Array, primitivePolygonIndices: Int32Array, flatCoordinateArray: Float64Array, nDim: number): Uint32Array | null;
//# sourceMappingURL=convert-geoarrow-to-binary-geometry.d.ts.map