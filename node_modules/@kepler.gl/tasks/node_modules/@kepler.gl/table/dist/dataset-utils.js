"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNewDataEntry = createNewDataEntry;
exports.getNewDatasetColor = getNewDatasetColor;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _lodash = _interopRequireDefault(require("lodash.uniq"));
var _keplerTable = _interopRequireDefault(require("./kepler-table"));
var _tasks = _interopRequireDefault(require("react-palm/tasks"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _pmtiles = require("@loaders.gl/pmtiles");
var _tilesetUtils = require("./tileset/tileset-utils");
var _vectorTileUtils = require("./tileset/vector-tile-utils");
var _excluded = ["info", "data"]; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// apply a color for each dataset
// to use as label colors
var datasetColors = ['#8F2FBF', '#005CFF', '#C06C84', '#F8B195', '#547A82', '#3EACA8', '#A2D4AB'].map(_utils.hexToRgb);
function getNewDatasetColor(datasets) {
  var presetColors = datasetColors.map(String);
  var usedColors = (0, _lodash["default"])(Object.values(datasets).map(function (d) {
    return String(d.color);
  })).filter(function (c) {
    return presetColors.includes(c);
  });
  if (usedColors.length === presetColors.length) {
    // if we already depleted the pool of color
    return _utils.datasetColorMaker.next().value;
  }
  var color = _utils.datasetColorMaker.next().value;
  while (usedColors.includes(String(color))) {
    color = _utils.datasetColorMaker.next().value;
  }
  return color;
}

/**
 * Take datasets payload from addDataToMap, create datasets entry save to visState
 */
function createNewDataEntry(_ref) {
  var _getApplicationConfig;
  var info = _ref.info,
    data = _ref.data,
    opts = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var TableClass = (_getApplicationConfig = (0, _utils.getApplicationConfig)().table) !== null && _getApplicationConfig !== void 0 ? _getApplicationConfig : _keplerTable["default"];
  var dataValidator = _utils.validateInputData;
  if (typeof TableClass.getInputDataValidator === 'function') {
    dataValidator = TableClass.getInputDataValidator();
  }
  var validatedData = dataValidator(data);
  if (!validatedData) {
    return null;
  }

  // check if dataset already exists, and update it when loading data by batches incrementally
  if (info && info.id && datasets[info.id]) {
    // get keplerTable from datasets
    var keplerTable = datasets[info.id];
    // update the data in keplerTable
    return UPDATE_TABLE_TASK({
      table: keplerTable,
      data: validatedData
    });
  }
  info = info || {};
  var color = info.color || getNewDatasetColor(datasets);
  return CREATE_TABLE_TASK({
    info: info,
    color: color,
    opts: opts,
    data: validatedData
  });
}
function updateTable(_x) {
  return _updateTable.apply(this, arguments);
}
function _updateTable() {
  _updateTable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
    var table, data, updated;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          table = _ref2.table, data = _ref2.data;
          _context.next = 3;
          return table.update(data);
        case 3:
          updated = _context.sent;
          return _context.abrupt("return", updated);
        case 5:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _updateTable.apply(this, arguments);
}
function createTable(_x2) {
  return _createTable.apply(this, arguments);
}
function _createTable() {
  _createTable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(datasetInfo) {
    var _getApplicationConfig2;
    var info, color, opts, data, refreshedMetadata, metadata, _metadata, TableClass, table;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          info = datasetInfo.info, color = datasetInfo.color, opts = datasetInfo.opts, data = datasetInfo.data; // update metadata for remote tiled datasets
          _context2.next = 3;
          return refreshRemoteData(datasetInfo);
        case 3:
          refreshedMetadata = _context2.sent;
          metadata = opts.metadata;
          if (refreshedMetadata) {
            metadata = _objectSpread(_objectSpread({}, opts.metadata), refreshedMetadata);
            data.fields = (_metadata = metadata) === null || _metadata === void 0 ? void 0 : _metadata.fields;
          }
          TableClass = (_getApplicationConfig2 = (0, _utils.getApplicationConfig)().table) !== null && _getApplicationConfig2 !== void 0 ? _getApplicationConfig2 : _keplerTable["default"];
          table = new TableClass(_objectSpread(_objectSpread({
            info: info,
            color: color
          }, opts), {}, {
            metadata: metadata
          }));
          _context2.next = 10;
          return table.importData({
            data: data
          });
        case 10:
          return _context2.abrupt("return", table);
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _createTable.apply(this, arguments);
}
var UPDATE_TABLE_TASK = _tasks["default"].fromPromise(updateTable, 'UPDATE_TABLE_TASK');
var CREATE_TABLE_TASK = _tasks["default"].fromPromise(createTable, 'CREATE_TABLE_TASK');

/**
 * Fetch metadata for vector tile layers using tilesetMetadataUrl from metadata
 * @param datasetInfo
 * @returns
 */
function refreshRemoteData(_x3) {
  return _refreshRemoteData.apply(this, arguments);
}
function _refreshRemoteData() {
  _refreshRemoteData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(datasetInfo) {
    var _ref3, remoteTileFormat, tilesetMetadataUrl, tilesetDataUrl, rawMetadata, tileSource, metadata;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(datasetInfo.info.type !== _constants.DatasetType.VECTOR_TILE)) {
            _context3.next = 2;
            break;
          }
          return _context3.abrupt("return", null);
        case 2:
          _ref3 = datasetInfo.opts.metadata || {}, remoteTileFormat = _ref3.remoteTileFormat, tilesetMetadataUrl = _ref3.tilesetMetadataUrl, tilesetDataUrl = _ref3.tilesetDataUrl;
          if (!(!(remoteTileFormat === _constants.RemoteTileFormat.PMTILES || remoteTileFormat === _constants.RemoteTileFormat.MVT) || typeof tilesetMetadataUrl !== 'string' || typeof tilesetDataUrl !== 'string')) {
            _context3.next = 5;
            break;
          }
          return _context3.abrupt("return", null);
        case 5:
          _context3.prev = 5;
          rawMetadata = null;
          if (!(remoteTileFormat === _constants.RemoteTileFormat.MVT)) {
            _context3.next = 13;
            break;
          }
          _context3.next = 10;
          return (0, _tilesetUtils.getMVTMetadata)(tilesetMetadataUrl);
        case 10:
          rawMetadata = _context3.sent;
          _context3.next = 17;
          break;
        case 13:
          tileSource = _pmtiles.PMTilesSource.createDataSource(tilesetMetadataUrl, {});
          _context3.next = 16;
          return tileSource.metadata;
        case 16:
          rawMetadata = _context3.sent;
        case 17:
          if (!rawMetadata) {
            _context3.next = 22;
            break;
          }
          metadata = (0, _vectorTileUtils.parseVectorMetadata)(rawMetadata);
          _context3.next = 21;
          return (0, _vectorTileUtils.getFieldsFromTile)({
            remoteTileFormat: remoteTileFormat,
            tilesetUrl: tilesetDataUrl,
            metadataUrl: tilesetMetadataUrl,
            metadata: metadata
          });
        case 21:
          return _context3.abrupt("return", metadata);
        case 22:
          _context3.next = 26;
          break;
        case 24:
          _context3.prev = 24;
          _context3.t0 = _context3["catch"](5);
        case 26:
          return _context3.abrupt("return", null);
        case 27:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[5, 24]]);
  }));
  return _refreshRemoteData.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,