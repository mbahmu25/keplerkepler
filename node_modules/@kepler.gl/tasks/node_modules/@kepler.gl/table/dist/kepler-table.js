"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyTable = copyTable;
exports.copyTableAndUpdate = copyTableAndUpdate;
exports["default"] = void 0;
exports.findPointFieldPairs = findPointFieldPairs;
exports.getFieldValueAccessor = getFieldValueAccessor;
exports.maybeToDate = maybeToDate;
exports.pinTableColumns = pinTableColumns;
exports.sortDatasetByColumn = sortDatasetByColumn;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _console = _interopRequireDefault(require("global/console"));
var _d3Array = require("d3-array");
var _constants = require("@kepler.gl/constants");
var _gpuFilterUtils = require("./gpu-filter-utils");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// TODO isolate layer type, depends on @kepler.gl/layers

// Unique identifier of each field
var FID_KEY = 'name';
function maybeToDate(isTime, fieldIdx, format, dc, d) {
  if (isTime) {
    return (0, _utils.timeToUnixMilli)(dc.valueAt(d.index, fieldIdx), format);
  }
  return dc.valueAt(d.index, fieldIdx);
}
var KeplerTable = /*#__PURE__*/function () {
  function KeplerTable(_ref) {
    var info = _ref.info,
      color = _ref.color,
      metadata = _ref.metadata,
      _ref$supportedFilterT = _ref.supportedFilterTypes,
      supportedFilterTypes = _ref$supportedFilterT === void 0 ? null : _ref$supportedFilterT,
      _ref$disableDataOpera = _ref.disableDataOperation,
      disableDataOperation = _ref$disableDataOpera === void 0 ? false : _ref$disableDataOpera;
    (0, _classCallCheck2["default"])(this, KeplerTable);
    (0, _defineProperty2["default"])(this, "id", void 0);
    (0, _defineProperty2["default"])(this, "type", void 0);
    (0, _defineProperty2["default"])(this, "label", void 0);
    (0, _defineProperty2["default"])(this, "color", void 0);
    // fields and data
    (0, _defineProperty2["default"])(this, "fields", []);
    (0, _defineProperty2["default"])(this, "dataContainer", void 0);
    (0, _defineProperty2["default"])(this, "allIndexes", []);
    (0, _defineProperty2["default"])(this, "filteredIndex", []);
    (0, _defineProperty2["default"])(this, "filteredIdxCPU", void 0);
    (0, _defineProperty2["default"])(this, "filteredIndexForDomain", []);
    (0, _defineProperty2["default"])(this, "fieldPairs", []);
    (0, _defineProperty2["default"])(this, "gpuFilter", void 0);
    (0, _defineProperty2["default"])(this, "filterRecord", void 0);
    (0, _defineProperty2["default"])(this, "filterRecordCPU", void 0);
    (0, _defineProperty2["default"])(this, "changedFilters", void 0);
    // table-injected metadata
    (0, _defineProperty2["default"])(this, "sortColumn", void 0);
    (0, _defineProperty2["default"])(this, "sortOrder", void 0);
    (0, _defineProperty2["default"])(this, "pinnedColumns", void 0);
    (0, _defineProperty2["default"])(this, "supportedFilterTypes", void 0);
    (0, _defineProperty2["default"])(this, "disableDataOperation", void 0);
    // table-injected metadata
    (0, _defineProperty2["default"])(this, "metadata", void 0);
    (0, _defineProperty2["default"])(this, "getFileProcessor", void 0);
    // TODO - what to do if validation fails? Can kepler handle exceptions?
    // const validatedData = validateInputData(data);
    // if (!validatedData) {
    //   return this;
    // }

    var datasetInfo = _objectSpread({
      id: (0, _commonUtils.generateHashId)(4),
      label: 'new dataset',
      type: ''
    }, info);
    var defaultMetadata = {
      id: datasetInfo.id,
      // @ts-ignore
      format: datasetInfo.format || '',
      label: datasetInfo.label || ''
    };
    this.id = datasetInfo.id;
    this.type = datasetInfo.type;
    this.label = datasetInfo.label;
    this.color = color;
    this.metadata = _objectSpread(_objectSpread({}, defaultMetadata), metadata);
    this.supportedFilterTypes = supportedFilterTypes;
    this.disableDataOperation = disableDataOperation;
    this.dataContainer = (0, _utils.createDataContainer)([]);
    this.gpuFilter = (0, _gpuFilterUtils.getGpuFilterProps)([], this.id, [], undefined);
  }
  return (0, _createClass2["default"])(KeplerTable, [{
    key: "importData",
    value: function () {
      var _importData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
        var data, dataContainerData, inputDataFormat, dataContainer, fields, allIndexes;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              data = _ref2.data;
              dataContainerData = data.cols ? data.cols : data.rows;
              inputDataFormat = data.cols ? _utils.DataForm.COLS_ARRAY : _utils.DataForm.ROWS_ARRAY;
              dataContainer = (0, _utils.createDataContainer)(dataContainerData, {
                fields: data.fields,
                inputDataFormat: inputDataFormat
              });
              fields = data.fields.map(function (f, i) {
                return _objectSpread(_objectSpread({}, f), {}, {
                  fieldIdx: i,
                  id: f.name,
                  displayName: f.displayName || f.name,
                  analyzerType: f.analyzerType || _constants.ALL_FIELD_TYPES.string,
                  format: f.format || '',
                  valueAccessor: getFieldValueAccessor(f, i, dataContainer)
                });
              });
              allIndexes = dataContainer.getPlainIndex();
              this.dataContainer = dataContainer;
              this.allIndexes = allIndexes;
              this.filteredIndex = allIndexes;
              this.filteredIndexForDomain = allIndexes;
              this.fieldPairs = findPointFieldPairs(fields);
              // @ts-expect-error Make sure that fields satisfies F extends Field
              this.fields = fields;
              this.gpuFilter = (0, _gpuFilterUtils.getGpuFilterProps)([], this.id, fields, undefined);
            case 13:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function importData(_x) {
        return _importData.apply(this, arguments);
      }
      return importData;
    }()
    /**
     * update table with new data
     * @param data - new data e.g. the arrow data with new batches loaded
     */
  }, {
    key: "update",
    value: (function () {
      var _update = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(data) {
        var _this$dataContainer$u, _this$dataContainer;
        var dataContainerData;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              dataContainerData = data.cols ? data.cols : data.rows;
              (_this$dataContainer$u = (_this$dataContainer = this.dataContainer).update) === null || _this$dataContainer$u === void 0 || _this$dataContainer$u.call(_this$dataContainer, dataContainerData);
              this.allIndexes = this.dataContainer.getPlainIndex();
              this.filteredIndex = this.allIndexes;
              this.filteredIndexForDomain = this.allIndexes;
              return _context2.abrupt("return", this);
            case 6:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function update(_x2) {
        return _update.apply(this, arguments);
      }
      return update;
    }())
  }, {
    key: "length",
    get: function get() {
      return this.dataContainer.numRows();
    }

    /**
     * Get field
     * @param columnName
     */
  }, {
    key: "getColumnField",
    value: function getColumnField(columnName) {
      var field = this.fields.find(function (fd) {
        return fd[FID_KEY] === columnName;
      });
      this._assetField(columnName, field);
      return field;
    }

    /**
     * Get fieldIdx
     * @param columnName
     */
  }, {
    key: "getColumnFieldIdx",
    value: function getColumnFieldIdx(columnName) {
      var fieldIdx = this.fields.findIndex(function (fd) {
        return fd[FID_KEY] === columnName;
      });
      this._assetField(columnName, Boolean(fieldIdx > -1));
      return fieldIdx;
    }

    /**
     * Get displayFormat
     * @param columnName
     */
  }, {
    key: "getColumnDisplayFormat",
    value: function getColumnDisplayFormat(columnName) {
      var field = this.fields.find(function (fd) {
        return fd[FID_KEY] === columnName;
      });
      this._assetField(columnName, field);
      return field === null || field === void 0 ? void 0 : field.displayFormat;
    }

    /**
     * Get the value of a cell
     */
  }, {
    key: "getValue",
    value: function getValue(columnName, rowIdx) {
      var field = this.getColumnField(columnName);
      return field ? field.valueAccessor({
        index: rowIdx
      }) : null;
    }

    /**
     * Updates existing field with a new object
     * @param fieldIdx
     * @param newField
     */
  }, {
    key: "updateColumnField",
    value: function updateColumnField(fieldIdx, newField) {
      this.fields = Object.assign((0, _toConsumableArray2["default"])(this.fields), (0, _defineProperty2["default"])({}, fieldIdx, newField));
    }

    /**
     * Update dataset color by custom color
     * @param newColor
     */
  }, {
    key: "updateTableColor",
    value: function updateTableColor(newColor) {
      this.color = newColor;
    }

    /**
     * Save filterProps to field and retrieve it
     * @param columnName
     */
  }, {
    key: "getColumnFilterProps",
    value: function getColumnFilterProps(columnName) {
      var fieldIdx = this.getColumnFieldIdx(columnName);
      if (fieldIdx < 0) {
        return null;
      }
      var field = this.fields[fieldIdx];
      if (Object.prototype.hasOwnProperty.call(field, 'filterProps')) {
        return field.filterProps;
      }
      var fieldDomain = this.getColumnFilterDomain(field);
      if (!fieldDomain) {
        return null;
      }
      var filterProps = (0, _utils.getFilterProps)(field, fieldDomain);
      var newField = _objectSpread(_objectSpread({}, field), {}, {
        filterProps: filterProps
      });
      this.updateColumnField(fieldIdx, newField);
      return filterProps;
    }

    /**
     * Apply filters to dataset, return the filtered dataset with updated `gpuFilter`, `filterRecord`, `filteredIndex`, `filteredIndexForDomain`
     * @param filters
     * @param layers
     * @param opt
     */
  }, {
    key: "filterTable",
    value: function filterTable(filters, layers, opt) {
      var _this = this;
      var dataContainer = this.dataContainer,
        dataId = this.id,
        oldFilterRecord = this.filterRecord,
        fields = this.fields;

      // if there is no filters
      var filterRecord = (0, _utils.getFilterRecord)(dataId, filters, opt || {});
      this.filterRecord = filterRecord;
      this.gpuFilter = (0, _gpuFilterUtils.getGpuFilterProps)(filters, dataId, fields, this.gpuFilter);
      this.changedFilters = (0, _utils.diffFilters)(filterRecord, oldFilterRecord);
      if (!filters.length) {
        this.filteredIndex = this.allIndexes;
        this.filteredIndexForDomain = this.allIndexes;
        return this;
      }

      // generate 2 sets of filter result
      // filteredIndex used to calculate layer data
      // filteredIndexForDomain used to calculate layer Domain
      var shouldCalDomain = Boolean(this.changedFilters.dynamicDomain);
      var shouldCalIndex = Boolean(this.changedFilters.cpu);
      var filterResult = {};
      if (shouldCalDomain || shouldCalIndex) {
        var dynamicDomainFilters = shouldCalDomain ? filterRecord.dynamicDomain : null;
        var cpuFilters = shouldCalIndex ? filterRecord.cpu : null;
        var filterFuncs = filters.reduce(function (acc, filter) {
          var fieldIndex = (0, _gpuFilterUtils.getDatasetFieldIndexForFilter)(_this.id, filter);
          var field = fieldIndex !== -1 ? fields[fieldIndex] : null;
          return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, filter.id, (0, _utils.getFilterFunction)(field, _this.id, filter, layers, dataContainer)));
        }, {});
        filterResult = (0, _utils.filterDataByFilterTypes)({
          dynamicDomainFilters: dynamicDomainFilters,
          cpuFilters: cpuFilters,
          filterFuncs: filterFuncs
        }, dataContainer);
      }
      this.filteredIndex = filterResult.filteredIndex || this.filteredIndex;
      this.filteredIndexForDomain = filterResult.filteredIndexForDomain || this.filteredIndexForDomain;
      return this;
    }

    /**
     * Apply filters to a dataset all on CPU, assign to `filteredIdxCPU`, `filterRecordCPU`
     * @param filters
     * @param layers
     */
  }, {
    key: "filterTableCPU",
    value: function filterTableCPU(filters, layers) {
      var opt = {
        cpuOnly: true,
        ignoreDomain: true
      };

      // no filter
      if (!filters.length) {
        this.filteredIdxCPU = this.allIndexes;
        this.filterRecordCPU = (0, _utils.getFilterRecord)(this.id, filters, opt);
        return this;
      }

      // no gpu filter
      if (!filters.find(function (f) {
        return f.gpu;
      })) {
        this.filteredIdxCPU = this.filteredIndex;
        this.filterRecordCPU = (0, _utils.getFilterRecord)(this.id, filters, opt);
        return this;
      }

      // make a copy for cpu filtering
      var copied = copyTable(this);
      copied.filterRecord = this.filterRecordCPU;
      copied.filteredIndex = this.filteredIdxCPU || [];
      var filtered = copied.filterTable(filters, layers, opt);
      this.filteredIdxCPU = filtered.filteredIndex;
      this.filterRecordCPU = filtered.filterRecord;
      return this;
    }

    /**
     * Calculate field domain based on field type and data
     * for Filter
     */
  }, {
    key: "getColumnFilterDomain",
    value: function getColumnFilterDomain(field) {
      var dataContainer = this.dataContainer;
      var valueAccessor = field.valueAccessor;
      var domain;
      switch (field.type) {
        case _constants.ALL_FIELD_TYPES.real:
        case _constants.ALL_FIELD_TYPES.integer:
          // calculate domain and step
          return (0, _utils.getNumericFieldDomain)(dataContainer, valueAccessor);
        case _constants.ALL_FIELD_TYPES["boolean"]:
          return {
            domain: [true, false]
          };
        case _constants.ALL_FIELD_TYPES.string:
        case _constants.ALL_FIELD_TYPES.h3:
        case _constants.ALL_FIELD_TYPES.date:
          domain = (0, _utils.getOrdinalDomain)(dataContainer, valueAccessor);
          return {
            domain: domain
          };
        case _constants.ALL_FIELD_TYPES.timestamp:
          return (0, _utils.getTimestampFieldDomain)(dataContainer, valueAccessor);
        default:
          return {
            domain: (0, _utils.getOrdinalDomain)(dataContainer, valueAccessor)
          };
      }
    }

    /**
     *  Get the domain of this column based on scale type
     */
  }, {
    key: "getColumnLayerDomain",
    value: function getColumnLayerDomain(field, scaleType) {
      var dataContainer = this.dataContainer,
        filteredIndexForDomain = this.filteredIndexForDomain;
      if (!_constants.SCALE_TYPES[scaleType]) {
        _console["default"].error("scale type ".concat(scaleType, " not supported"));
        return null;
      }
      var valueAccessor = field.valueAccessor;
      var indexValueAccessor = function indexValueAccessor(i) {
        return valueAccessor({
          index: i
        });
      };
      var sortFunction = (0, _utils.getSortingFunction)(field.type);
      switch (scaleType) {
        case _constants.SCALE_TYPES.ordinal:
        case _constants.SCALE_TYPES.customOrdinal:
        case _constants.SCALE_TYPES.point:
          // do not recalculate ordinal domain based on filtered data
          // don't need to update ordinal domain every time
          return (0, _utils.getOrdinalDomain)(dataContainer, valueAccessor);
        case _constants.SCALE_TYPES.quantile:
          return (0, _utils.getQuantileDomain)(filteredIndexForDomain, indexValueAccessor, sortFunction);
        case _constants.SCALE_TYPES.log:
          return (0, _utils.getLogDomain)(filteredIndexForDomain, indexValueAccessor);
        case _constants.SCALE_TYPES.quantize:
        case _constants.SCALE_TYPES.linear:
        case _constants.SCALE_TYPES.sqrt:
        case _constants.SCALE_TYPES.custom:
        default:
          return (0, _utils.getLinearDomain)(filteredIndexForDomain, indexValueAccessor);
      }
    }

    /**
     * Get a sample of rows to calculate layer boundaries
     */
    // getSampleData(rows)

    /**
     * Parse cell value based on column type and return a string representation
     * Value the field value, type the field type
     */
    // parseFieldValue(value, type)

    // sortDatasetByColumn()

    /**
     * Assert whether field exist
     * @param fieldName
     * @param condition
     */
  }, {
    key: "_assetField",
    value: function _assetField(fieldName, condition) {
      if (!condition) {
        _console["default"].error("".concat(fieldName, " doesnt exist in dataset ").concat(this.id));
      }
    }
  }]);
}();
// HELPER FUNCTIONS (MAINLY EXPORTED FOR TEST...)
// have to double excape
var specialCharacterSet = "[#_&@\\.\\-\\ ]";
function foundMatchingFields(re, suffixPair, allNames, fieldName) {
  var partnerIdx = allNames.findIndex(function (d) {
    return d === fieldName.replace(re, function (match) {
      return match.replace(suffixPair[0], suffixPair[1]);
    });
  });
  var altIdx = -1;
  if (partnerIdx > -1) {
    // if found partner, go on and look for altitude
    _constants.ALTITUDE_FIELDS.some(function (alt) {
      altIdx = allNames.findIndex(function (d) {
        return d === fieldName.replace(re, function (match) {
          return match.replace(suffixPair[0], alt);
        });
      });
      return altIdx > -1;
    });
  }
  return {
    partnerIdx: partnerIdx,
    altIdx: altIdx
  };
}
/**
 * Find point fields pairs from fields
 *
 * @param fields
 * @returns found point fields
 */
function findPointFieldPairs(fields) {
  var allNames = fields.map(function (f) {
    return f.name.toLowerCase();
  });

  // get list of all fields with matching suffixes
  var acc = [];
  return allNames.reduce(function (carry, fieldName, idx) {
    // This search for pairs will early exit if found.
    var _iterator = _createForOfIteratorHelper(_constants.TRIP_POINT_FIELDS),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var suffixPair = _step.value;
        // match first suffix
        // (^|[#_&@\.\-\ ])lat([#_&@\.\-\ ]|$)
        var re = new RegExp("(^|".concat(specialCharacterSet, ")").concat(suffixPair[0], "(").concat(specialCharacterSet, "|$)"));
        if (re.test(fieldName)) {
          var _foundMatchingFields = foundMatchingFields(re, suffixPair, allNames, fieldName),
            partnerIdx = _foundMatchingFields.partnerIdx,
            altIdx = _foundMatchingFields.altIdx;
          if (partnerIdx > -1) {
            var trimName = fieldName.replace(re, '').trim();
            carry.push({
              defaultName: trimName || 'point',
              pair: _objectSpread({
                lat: {
                  fieldIdx: idx,
                  value: fields[idx].name
                },
                lng: {
                  fieldIdx: partnerIdx,
                  value: fields[partnerIdx].name
                }
              }, altIdx > -1 ? {
                altitude: {
                  fieldIdx: altIdx,
                  value: fields[altIdx].name
                }
              } : {}),
              suffix: suffixPair
            });
            return carry;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return carry;
  }, acc);
}

/**
 *
 * @param dataset
 * @param column
 * @param mode
 * @type
 */
function sortDatasetByColumn(dataset, column, mode) {
  var allIndexes = dataset.allIndexes,
    fields = dataset.fields,
    dataContainer = dataset.dataContainer;
  var fieldIndex = fields.findIndex(function (f) {
    return f.name === column;
  });
  if (fieldIndex < 0) {
    return dataset;
  }
  var sortBy = _constants.SORT_ORDER[mode || ''] || _constants.SORT_ORDER.ASCENDING;
  if (sortBy === _constants.SORT_ORDER.UNSORT) {
    dataset.sortColumn = {};
    dataset.sortOrder = null;
    return dataset;
  }
  var sortFunction = sortBy === _constants.SORT_ORDER.ASCENDING ? _d3Array.ascending : _d3Array.descending;
  var sortOrder = allIndexes.slice().sort(function (a, b) {
    var value1 = dataContainer.valueAt(a, fieldIndex);
    var value2 = dataContainer.valueAt(b, fieldIndex);
    if (!(0, _commonUtils.notNullorUndefined)(value1) && (0, _commonUtils.notNullorUndefined)(value2)) {
      return 1;
    } else if ((0, _commonUtils.notNullorUndefined)(value1) && !(0, _commonUtils.notNullorUndefined)(value2)) {
      return -1;
    }
    return sortFunction(value1, value2);
  });
  dataset.sortColumn = (0, _defineProperty2["default"])({}, column, sortBy);
  dataset.sortOrder = sortOrder;
  return dataset;
}
function pinTableColumns(dataset, column) {
  var field = dataset.getColumnField(column);
  if (!field) {
    return dataset;
  }
  var pinnedColumns;
  if (Array.isArray(dataset.pinnedColumns) && dataset.pinnedColumns.includes(field.name)) {
    // unpin it
    pinnedColumns = dataset.pinnedColumns.filter(function (co) {
      return co !== field.name;
    });
  } else {
    pinnedColumns = (dataset.pinnedColumns || []).concat(field.name);
  }

  // @ts-ignore
  return copyTableAndUpdate(dataset, {
    pinnedColumns: pinnedColumns
  });
}
function copyTable(original) {
  return Object.assign(Object.create(Object.getPrototypeOf(original)), original);
}

/**
 * @type
 * @returns
 */
function copyTableAndUpdate(original) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Object.entries(options).reduce(function (acc, entry) {
    acc[entry[0]] = entry[1];
    return acc;
  }, copyTable(original));
}
function getFieldValueAccessor(f, i, dc) {
  return maybeToDate.bind(null,
  // is time
  f.type === _constants.ALL_FIELD_TYPES.timestamp, i, f.format || '', dc);
}
var _default = exports["default"] = KeplerTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,