"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCategoricalValuesToColorMap = addCategoricalValuesToColorMap;
exports.colorBreaksToCategoricalColorMap = colorBreaksToCategoricalColorMap;
exports.colorBreaksToColorMap = colorBreaksToColorMap;
exports.colorMapToCategoricalColorBreaks = colorMapToCategoricalColorBreaks;
exports.colorMapToColorBreaks = colorMapToColorBreaks;
exports.getCategoricalColorMap = getCategoricalColorMap;
exports.getCategoricalColorScale = getCategoricalColorScale;
exports.getDomainStepsbyZoom = getDomainStepsbyZoom;
exports.getHistogramDomain = getHistogramDomain;
exports.getLayerColorScale = getLayerColorScale;
exports.getLegendOfScale = getLegendOfScale;
exports.getLinearDomain = getLinearDomain;
exports.getLogDomain = getLogDomain;
exports.getOrdinalDomain = getOrdinalDomain;
exports.getOrdinalLegends = getOrdinalLegends;
exports.getQuantLabelFormat = getQuantLabelFormat;
exports.getQuantLegends = getQuantLegends;
exports.getQuantileDomain = getQuantileDomain;
exports.getScaleFunction = getScaleFunction;
exports.getThresholdsFromQuantiles = getThresholdsFromQuantiles;
exports.getVisualChannelScaleByZoom = getVisualChannelScaleByZoom;
exports.initCustomPaletteByCustomScale = initCustomPaletteByCustomScale;
exports.initializeLayerColorMap = initializeLayerColorMap;
exports.isDomainQuantile = isDomainQuantile;
exports.isDomainStops = isDomainStops;
exports.isNumericColorBreaks = isNumericColorBreaks;
exports.removeCategoricalValueFromColorMap = removeCategoricalValueFromColorMap;
exports.resetCategoricalColorMapByIndex = resetCategoricalColorMapByIndex;
exports.selectRestCategoricalColorMapByIndex = selectRestCategoricalColorMapByIndex;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _d3Array = require("d3-array");
var _lodash = _interopRequireDefault(require("lodash.uniq"));
var _moment = _interopRequireDefault(require("moment"));
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _colorUtils = require("./color-utils");
var _dataUtils = require("./data-utils");
var _filterUtils = require("./filter-utils");
var _utils = require("./utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// import {FilterProps, KeplerTable} from '@kepler.gl/layers';
// TODO isolate types - depends on @kepler.gl/layers

/**
 * return quantile domain for an array of data
 */
function getQuantileDomain(data, valueAccessor, sortFunc) {
  var values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;
  return values.filter(_commonUtils.notNullorUndefined).sort(sortFunc);
}

/**
 * return ordinal domain for a data container
 */
function getOrdinalDomain(dataContainer, valueAccessor) {
  var values = dataContainer.mapIndex(valueAccessor);
  return (0, _dataUtils.unique)(values).filter(_commonUtils.notNullorUndefined).sort();
}

/**
 * return linear domain for an array of data
 */
function getLinearDomain(data, valueAccessor) {
  var range = typeof valueAccessor === 'function' ? (0, _d3Array.extent)(data, valueAccessor) : (0, _d3Array.extent)(data);
  return range.map(function (d, i) {
    return d === undefined ? i : d;
  });
}

/**
 * return linear domain for an array of data. A log scale domain cannot contain 0
 */
function getLogDomain(data, valueAccessor) {
  var _getLinearDomain = getLinearDomain(data, valueAccessor),
    _getLinearDomain2 = (0, _slicedToArray2["default"])(_getLinearDomain, 2),
    d0 = _getLinearDomain2[0],
    d1 = _getLinearDomain2[1];
  return [d0 === 0 ? 1e-5 : d0, d1];
}
/**
 * whether field domain is stops
 */
function isDomainStops(domain) {
  return (0, _utils.isPlainObject)(domain) && Array.isArray(domain.stops) && Array.isArray(domain.z);
}
/**
 * whether field domain is quantiles
 */
function isDomainQuantile(domain) {
  return (0, _utils.isPlainObject)(domain) && Array.isArray(domain.quantiles) && Array.isArray(domain.z);
}

/**
 * get the domain at zoom
 */
function getThresholdsFromQuantiles(quantiles, buckets) {
  var thresholds = [];
  if (!Number.isFinite(buckets) || buckets < 1) {
    return [quantiles[0], quantiles[quantiles.length - 1]];
  }
  for (var i = 1; i < buckets; i++) {
    // position in sorted array
    var position = i / buckets;
    // @ts-ignore
    thresholds.push((0, _d3Array.quantileSorted)(quantiles, position));
  }
  return thresholds;
}

/**
 * get the domain at zoom
 */
function getDomainStepsbyZoom(domain, steps, z) {
  var i = (0, _d3Array.bisectLeft)(steps, z);
  if (steps[i] === z) {
    // If z is an integer value exactly matching a step, return the corresponding domain
    return domain[i];
  }
  // Otherwise, return the next coarsest domain
  return domain[Math.max(i - 1, 0)];
}

/**
 * Get d3 scale function
 */
function getScaleFunction(scale, range, domain, fixed) {
  var scaleFunction = _constants.SCALE_FUNC[fixed ? 'linear' : scale]().domain(domain).range(fixed ? domain : range);
  scaleFunction.scaleType = fixed ? 'linear' : scale;
  return scaleFunction;
}

/**
 * Get threshold scale color labels
 */
function getThresholdLabels(scale, labelFormat) {
  var genLength = scale.range().length;
  return scale.range().map(function (d, i) {
    var invert = scale.invertExtent(d);
    var inputs = [i === 0 ? null : (0, _dataUtils.reverseFormatNumber)(labelFormat(invert[0])), i === genLength - 1 ? null : (0, _dataUtils.reverseFormatNumber)(labelFormat(invert[1]))];
    return {
      // raw value
      range: invert,
      // formatted value
      inputs: inputs,
      label: i === 0 ? "Less than ".concat(labelFormat(invert[1])) : i === genLength - 1 ? "".concat(labelFormat(invert[0]), " or more") : "".concat(labelFormat(invert[0]), " to ").concat(labelFormat(invert[1]))
    };
  });
}

/**
 * Get linear / quant scale color labels
 */
function getScaleLabels(scale, labelFormat) {
  return scale.range().map(function (d) {
    // @ts-ignore
    var invert = scale.invertExtent(d);
    var inputs = [(0, _dataUtils.reverseFormatNumber)(labelFormat(invert[0])), (0, _dataUtils.reverseFormatNumber)(labelFormat(invert[1]))];
    return {
      label: "".concat(labelFormat(invert[0]), " to ").concat(labelFormat(invert[1])),
      // raw value
      range: invert,
      // formatted value
      inputs: inputs
    };
  });
}
var customScaleLabelFormat = function customScaleLabelFormat(n) {
  return n ? (0, _dataUtils.formatNumber)(n, 'real') : 'no value';
};
/**
 * Get linear / quant scale color breaks
 */
function getQuantLegends(scale, labelFormat) {
  if (typeof scale.invertExtent !== 'function') {
    return [];
  }
  var thresholdLabelFormat = function thresholdLabelFormat(n, type) {
    return n && labelFormat ? labelFormat(n) : n ? (0, _dataUtils.formatNumber)(n, type) : 'no value';
  };
  var labels = scale.scaleType === 'threshold' ? getThresholdLabels(scale, thresholdLabelFormat) : scale.scaleType === 'custom' ? getThresholdLabels(scale, customScaleLabelFormat) : getScaleLabels(scale, labelFormat);
  var data = scale.range();
  return labels.map(function (label, index) {
    return _objectSpread({
      data: Array.isArray(data[index]) ? (0, _colorUtils.rgbToHex)(data[index]) : data[index]
    }, label);
  });
}

/**
 * Get ordinal color scale legends
 */
function getOrdinalLegends(scale) {
  var domain = scale.domain();
  var labels = scale.domain();
  var data = domain.map(scale);
  return data.map(function (datum, index) {
    return {
      data: (0, _colorUtils.isRgbColor)(datum) ? (0, _colorUtils.rgbToHex)(datum) : datum,
      label: labels[index]
    };
  });
}
var defaultFormat = function defaultFormat(d) {
  return d;
};
var getTimeLabelFormat = function getTimeLabelFormat(domain) {
  var formatter = (0, _filterUtils.getTimeWidgetHintFormatter)(domain);
  return function (val) {
    return _moment["default"].utc(val).format(formatter);
  };
};
function getQuantLabelFormat(domain, fieldType) {
  // quant scale can only be assigned to linear Fields: real, timestamp, integer
  return fieldType === _constants.ALL_FIELD_TYPES.timestamp ? getTimeLabelFormat(domain) : !fieldType ? defaultFormat : function (n) {
    return (0, _dataUtils.isNumber)(n) ? (0, _dataUtils.formatNumber)(n, fieldType) : 'no value';
  };
}

/**
 * Get legends for scale
 */
function getLegendOfScale(_ref) {
  var scale = _ref.scale,
    scaleType = _ref.scaleType,
    labelFormat = _ref.labelFormat,
    fieldType = _ref.fieldType;
  if (!scale || scale.byZoom) {
    return [];
  }
  if (scaleType === _constants.SCALE_TYPES.ordinal || scaleType === _constants.SCALE_TYPES.customOrdinal || fieldType === _constants.ALL_FIELD_TYPES.string) {
    return getOrdinalLegends(scale);
  }
  var formatLabel = labelFormat || getQuantLabelFormat(scale.domain(), fieldType);
  return getQuantLegends(scale, formatLabel);
}

/**
 * Get color scale function
 */
function getLayerColorScale(_ref2) {
  var range = _ref2.range,
    domain = _ref2.domain,
    scaleType = _ref2.scaleType,
    layer = _ref2.layer;
  if (range && domain && scaleType) {
    return layer.getColorScale(scaleType, domain, range);
  }
  return null;
}

/**
 * Convert colorRange.colorMap into color breaks UI input
 */
function initializeLayerColorMap(layer, visualChannel) {
  var domain = layer.config[visualChannel.domain];
  var range = layer.config.visConfig[visualChannel.range];
  var scaleType = layer.config[visualChannel.scale];
  var field = layer.config[visualChannel.field];
  var scale = getLayerColorScale({
    range: range,
    domain: domain,
    scaleType: scaleType,
    layer: layer
  });
  var colorBreaks = getLegendOfScale({
    scale: scale !== null && scale !== void 0 && scale.byZoom ? scale(0) : scale,
    scaleType: scaleType,
    fieldType: field.type
  });
  return colorBreaksToColorMap(colorBreaks);
}

/**
 * Get visual chanel scale function if it's based on zoom
 */
function getVisualChannelScaleByZoom(_ref3) {
  var _scale;
  var scale = _ref3.scale,
    layer = _ref3.layer,
    mapState = _ref3.mapState;
  if ((_scale = scale) !== null && _scale !== void 0 && _scale.byZoom) {
    var _layer$meta;
    var z = (_layer$meta = layer.meta) !== null && _layer$meta !== void 0 && _layer$meta.getZoom ? layer.meta.getZoom(mapState) : mapState === null || mapState === void 0 ? void 0 : mapState.zoom;
    scale = Number.isFinite(z) ? scale(z) : null;
  }
  return scale;
}

/**
 * Get categorical colorMap from colors and domain (unique values)
 */
function getCategoricalColorMap(colors, domain) {
  // colorMap: [string | string[], hexstring]
  var colorToUniqueValues = {};
  var uniqueValues = (0, _dataUtils.unique)(domain).filter(_commonUtils.notNullorUndefined).sort();
  // each unique value assign to a color, the rest unique values assign to last color
  var lastColor = colors[colors.length - 1];
  for (var i = 0; i < uniqueValues.length; ++i) {
    if (i < colors.length) {
      colorToUniqueValues[colors[i]] = uniqueValues[i];
    } else {
      colorToUniqueValues[lastColor] = [].concat((0, _toConsumableArray2["default"])(Array.isArray(colorToUniqueValues[lastColor]) ? colorToUniqueValues[lastColor] : [colorToUniqueValues[lastColor]]), [uniqueValues[i]]);
    }
  }
  var colorMap = colors.map(function (color) {
    if (color in colorToUniqueValues) {
      return [colorToUniqueValues[color], color];
    }
    return [null, color];
  });
  return colorMap;
}

/**
 * Get categorical colorBreaks from colorMap
 */
function colorMapToCategoricalColorBreaks(colorMap) {
  if (!colorMap) {
    return null;
  }
  var colorBreaks = colorMap.map(function (_ref4) {
    var _ref5 = (0, _slicedToArray2["default"])(_ref4, 2),
      value = _ref5[0],
      color = _ref5[1];
    return {
      data: color,
      label: value
    };
  });
  return colorBreaks;
}

/**
 * create categorical colorMap from colorBreaks
 */
function colorBreaksToCategoricalColorMap(colorBreaks) {
  // colorMap: [string | string[], hexstring]
  var colors = (0, _lodash["default"])(colorBreaks.map(function (cb) {
    return cb.data;
  }));
  var values = (0, _lodash["default"])(colorBreaks.map(function (cb) {
    return cb.label;
  }));
  return getCategoricalColorMap(colors, values);
}

/**
 * Convert color breaks UI input into colorRange.colorMap
 */
function colorBreaksToColorMap(colorBreaks) {
  var colorMap = colorBreaks.map(function (colorBreak, i) {
    // [value, hex]
    return [colorBreak.inputs ? i === colorBreaks.length - 1 ? null // last
    : colorBreak.inputs[1] : colorBreak.label, colorBreak.data];
  });

  // @ts-ignore tuple
  return colorMap;
}

/**
 * Convert colorRange.colorMap into color breaks UI input
 */
function colorMapToColorBreaks(colorMap) {
  if (!colorMap) {
    return null;
  }
  var colorBreaks = colorMap.map(function (_ref6, i) {
    var _ref7 = (0, _slicedToArray2["default"])(_ref6, 2),
      value = _ref7[0],
      color = _ref7[1];
    var range = i === 0 ?
    // first
    [-Infinity, value] :
    // last
    i === colorMap.length - 1 ? [colorMap[i - 1][0], Infinity] :
    // else
    [colorMap[i - 1][0], value];
    return {
      data: color,
      range: range,
      inputs: range,
      label:
      // first
      i === 0 ? "Less than ".concat(value) :
      // last
      i === colorMap.length - 1 ? "".concat(colorMap[i - 1][0], " or more") : "".concat(colorMap[i - 1][0], " to ").concat(value)
    };
  });

  // @ts-ignore implement conversion for ordinal
  return colorBreaks;
}

/**
 * Whether color breaks is for numeric field
 */
function isNumericColorBreaks(colorBreaks) {
  return Boolean(Array.isArray(colorBreaks) && colorBreaks.length && colorBreaks[0].inputs);
}

// return domainMin, domainMax, histogramMean
function getHistogramDomain(_ref8) {
  var aggregatedBins = _ref8.aggregatedBins,
    columnStats = _ref8.columnStats,
    dataset = _ref8.dataset,
    fieldValueAccessor = _ref8.fieldValueAccessor;
  var domainMin = Number.POSITIVE_INFINITY;
  var domainMax = Number.NEGATIVE_INFINITY;
  var nValid = 0;
  var domainSum = 0;
  if (aggregatedBins) {
    Object.values(aggregatedBins).forEach(function (bin) {
      var val = bin.value;
      if ((0, _dataUtils.isNumber)(val)) {
        if (val < domainMin) domainMin = val;
        if (val > domainMax) domainMax = val;
        domainSum += val;
        nValid += 1;
      }
    });
  } else {
    if (columnStats && columnStats.quantiles && columnStats.mean) {
      // no need to recalcuate min/max/mean if its already in columnStats
      return [columnStats.quantiles[0].value, columnStats.quantiles[columnStats.quantiles.length - 1].value, columnStats.mean];
    }
    if (dataset && fieldValueAccessor) {
      dataset.allIndexes.forEach(function (x) {
        var val = fieldValueAccessor(x);
        if ((0, _dataUtils.isNumber)(val)) {
          if (val < domainMin) domainMin = val;
          if (val > domainMax) domainMax = val;
          domainSum += val;
          nValid += 1;
        }
      });
    }
  }
  var histogramMean = nValid > 0 ? domainSum / nValid : 0;
  return [nValid > 0 ? domainMin : 0, nValid > 0 ? domainMax : 0, histogramMean];
}
function resetCategoricalColorMapByIndex(colorMap, index) {
  if (!colorMap) {
    return colorMap;
  }
  var newColorMap = colorMap.map(function (cm, i) {
    if (i === index) {
      return [null, cm[1]];
    }
    return cm;
  });
  return newColorMap;
}

/**
 * select rest categorical values for a colorMap by its index
 */
function selectRestCategoricalColorMapByIndex(colorMap, index, uniqueValues) {
  if (!colorMap || !uniqueValues) {
    return colorMap;
  }

  // find unique values that has not been used in current colorMap
  var uniqValueDict = Object.fromEntries(uniqueValues.map(function (val) {
    return [val, false];
  }));
  colorMap.forEach(function (cm) {
    (0, _commonUtils.toArray)(cm[0]).forEach(function (v) {
      if (v) uniqValueDict[v] = true;
    });
  });
  var rest = Object.keys(uniqValueDict).filter(function (v) {
    return !uniqValueDict[v];
  });

  // use the not used unique values in the selected color map
  var newColorMap = colorMap.map(function (cm, i) {
    if (i === index) {
      return [[].concat((0, _toConsumableArray2["default"])(rest), (0, _toConsumableArray2["default"])((0, _commonUtils.toArray)(cm[0]))), cm[1]];
    }
    return cm;
  });
  return newColorMap;
}

/**
 * remove a categorical value from a colorMap by its index
 */
function removeCategoricalValueFromColorMap(colorMap, item, index) {
  if (!colorMap) {
    return colorMap;
  }
  var newColorMap = colorMap.map(function (cm, i) {
    if (i === index) {
      if (!cm[0]) {
        return [null, cm[1]];
      }
      var currentUniqueValues = (0, _commonUtils.toArray)(cm[0]);
      var updatedUniqueValues = currentUniqueValues.filter(function (v) {
        return v !== item;
      });
      return [updatedUniqueValues, cm[1]];
    }
    return cm;
  });
  return newColorMap;
}

/**
 * add categorical values (from multisel dropdown) to a colorMap by its index
 */
function addCategoricalValuesToColorMap(colorMap, items, index) {
  if (!colorMap) {
    return colorMap;
  }
  var newColorMap = colorMap.map(function (cm, i) {
    if (i === index) {
      if (!cm[0]) {
        return [items, cm[1]];
      }
      var _currentUniqueValues = (0, _commonUtils.toArray)(cm[0]);
      var updatedUniqueValues = (0, _lodash["default"])(_currentUniqueValues.concat(items));
      return [updatedUniqueValues, cm[1]];
    }
    // remove value from other colorMap
    var currentUniqueValues = cm[0];
    if (Array.isArray(currentUniqueValues)) {
      var _updatedUniqueValues = currentUniqueValues.filter(function (v) {
        return !items.includes(v);
      });
      return [_updatedUniqueValues, cm[1]];
    } else if (currentUniqueValues && items.includes(currentUniqueValues)) {
      return [null, cm[1]];
    }
    return cm;
  });
  return newColorMap;
}

/**
 * get a color scale func for categorical (custom ordinal) scale
 */
function getCategoricalColorScale(colorDomain, colorRange) {
  var useRgb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var cMap = colorRange.colorMap ? colorRange.colorMap : getCategoricalColorMap(colorRange.colors, colorDomain);
  var range = [];
  var domain = [];
  cMap.forEach(function (cm) {
    if (Array.isArray(cm[0])) {
      cm[0].forEach(function (val) {
        domain.push(val);
        range.push(useRgb ? (0, _colorUtils.hexToRgb)(cm[1]) : cm[1]);
      });
    } else {
      domain.push(cm[0]);
      range.push(useRgb ? (0, _colorUtils.hexToRgb)(cm[1]) : cm[1]);
    }
  });
  var scale = getScaleFunction(_constants.SCALE_TYPES.customOrdinal, range, domain, false);
  scale.unknown(_constants.NO_VALUE_COLOR);
  return scale;
}

/**
 * initialize customPalette by custom scale or customOrdinal scale
 */
function initCustomPaletteByCustomScale(_ref9) {
  var scale = _ref9.scale,
    field = _ref9.field,
    ordinalDomain = _ref9.ordinalDomain,
    range = _ref9.range,
    colorBreaks = _ref9.colorBreaks;
  var customPaletteName = "color.customPalette.".concat(scale, ".").concat(field.name);
  // reuse range.colorMap if the field and scale not changed
  var reuseColorMap = range.colorMap && range.name === customPaletteName && range.type === scale;
  var colorMap = reuseColorMap ? range.colorMap : scale === _constants.SCALE_TYPES.customOrdinal && ordinalDomain ? getCategoricalColorMap(range.colors, ordinalDomain) : colorBreaks && isNumericColorBreaks(colorBreaks) ? colorBreaksToColorMap(colorBreaks) : null;
  var colors = reuseColorMap ? range.colors : colorMap ? colorMap.map(function (cm) {
    return cm[1];
  }) : range.colors;

  // update custom breaks
  var customPalette = {
    category: 'Custom',
    name: customPaletteName,
    type: scale,
    colorMap: colorMap,
    colors: colors || []
  };
  return customPalette;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,