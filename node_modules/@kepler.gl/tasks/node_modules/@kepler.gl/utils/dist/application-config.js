"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApplicationConfig = void 0;
exports.initApplicationConfig = initApplicationConfig;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

/**
 * A mechanism to override default Kepler values/settings so that we
 * without having to make application-specific changes to the kepler repo.
 */

var DEFAULT_APPLICATION_CONFIG = {
  defaultHtmlName: 'kepler.gl.html',
  defaultImageName: 'kepler.gl.png',
  defaultJsonName: 'kepler.gl.json',
  defaultDataName: 'kepler.gl',
  defaultExportJsonSettings: {
    hasData: true
  },
  baseMapLibraryConfig: {
    maplibre: {
      getMapLib: function getMapLib() {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(require('maplibre-gl'));
        });
      },
      mapLibCssClass: 'maplibregl',
      mapLibAttributionCssClass: 'maplibre-attribution-container',
      mapLibName: 'MapLibre',
      mapLibUrl: 'https://www.maplibre.org/'
    },
    mapbox: {
      getMapLib: function getMapLib() {
        return Promise.resolve().then(function () {
          return _interopRequireWildcard(require('mapbox-gl'));
        });
      },
      mapLibCssClass: 'mapboxgl',
      mapLibAttributionCssClass: 'mapbox-attribution-container',
      mapLibName: 'Mapbox',
      mapLibUrl: 'https://www.mapbox.com/'
    }
  },
  plugins: [],
  // The default table class is KeplerTable.
  // TODO include KeplerTable here when the circular dependency with @kepler.gl/table and @kepler.gl/utils are resolved.
  table: null,
  useArrowProgressiveLoading: true,
  showReleaseBanner: true,
  useOnFilteredItemsChange: false
};
var applicationConfig = DEFAULT_APPLICATION_CONFIG;
var getApplicationConfig = exports.getApplicationConfig = function getApplicationConfig() {
  return applicationConfig;
};
function initApplicationConfig() {
  var appConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  Object.assign(applicationConfig, appConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX0FQUExJQ0FUSU9OX0NPTkZJRyIsImRlZmF1bHRIdG1sTmFtZSIsImRlZmF1bHRJbWFnZU5hbWUiLCJkZWZhdWx0SnNvbk5hbWUiLCJkZWZhdWx0RGF0YU5hbWUiLCJkZWZhdWx0RXhwb3J0SnNvblNldHRpbmdzIiwiaGFzRGF0YSIsImJhc2VNYXBMaWJyYXJ5Q29uZmlnIiwibWFwbGlicmUiLCJnZXRNYXBMaWIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJtYXBMaWJDc3NDbGFzcyIsIm1hcExpYkF0dHJpYnV0aW9uQ3NzQ2xhc3MiLCJtYXBMaWJOYW1lIiwibWFwTGliVXJsIiwibWFwYm94IiwicGx1Z2lucyIsInRhYmxlIiwidXNlQXJyb3dQcm9ncmVzc2l2ZUxvYWRpbmciLCJzaG93UmVsZWFzZUJhbm5lciIsInVzZU9uRmlsdGVyZWRJdGVtc0NoYW5nZSIsImFwcGxpY2F0aW9uQ29uZmlnIiwiZ2V0QXBwbGljYXRpb25Db25maWciLCJleHBvcnRzIiwiaW5pdEFwcGxpY2F0aW9uQ29uZmlnIiwiYXBwQ29uZmlnIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FwcGxpY2F0aW9uLWNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge01hcExpYiwgTWFwUmVmfSBmcm9tICdyZWFjdC1tYXAtZ2wnO1xuXG5pbXBvcnQgdHlwZSB7QmFzZU1hcExpYnJhcnlUeXBlfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5cbmV4cG9ydCB0eXBlIE1hcExpYkluc3RhbmNlID0gTWFwTGliPGFueT47XG5leHBvcnQgdHlwZSBHZXRNYXBSZWYgPSBSZXR1cm5UeXBlPE1hcFJlZlsnZ2V0TWFwJ10+O1xuXG5leHBvcnQgdHlwZSBCYXNlTWFwTGlicmFyeUNvbmZpZyA9IHtcbiAgZ2V0TWFwTGliOiAoKSA9PiBQcm9taXNlPE1hcExpYkluc3RhbmNlPjtcbiAgbWFwTGliQXR0cmlidXRpb25Dc3NDbGFzczogc3RyaW5nO1xuICBtYXBMaWJDc3NDbGFzczogc3RyaW5nO1xuICBtYXBMaWJOYW1lOiBzdHJpbmc7XG4gIG1hcExpYlVybDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIG1lY2hhbmlzbSB0byBvdmVycmlkZSBkZWZhdWx0IEtlcGxlciB2YWx1ZXMvc2V0dGluZ3Mgc28gdGhhdCB3ZVxuICogd2l0aG91dCBoYXZpbmcgdG8gbWFrZSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBjaGFuZ2VzIHRvIHRoZSBrZXBsZXIgcmVwby5cbiAqL1xuZXhwb3J0IHR5cGUgS2VwbGVyQXBwbGljYXRpb25Db25maWcgPSB7XG4gIC8qKiBEZWZhdWx0IG5hbWUgb2YgZXhwb3J0IEhUTUwgZmlsZSwgY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlciAqL1xuICBkZWZhdWx0SHRtbE5hbWU/OiBzdHJpbmc7XG4gIGRlZmF1bHRJbWFnZU5hbWU/OiBzdHJpbmc7XG4gIGRlZmF1bHRKc29uTmFtZT86IHN0cmluZztcbiAgZGVmYXVsdERhdGFOYW1lPzogc3RyaW5nO1xuICBkZWZhdWx0RXhwb3J0SnNvblNldHRpbmdzPzoge1xuICAgIGhhc0RhdGE/OiBib29sZWFuO1xuICB9O1xuICBiYXNlTWFwTGlicmFyeUNvbmZpZz86IFJlY29yZDxCYXNlTWFwTGlicmFyeVR5cGUsIEJhc2VNYXBMaWJyYXJ5Q29uZmlnPjtcbiAgcGx1Z2lucz86IGFueVtdO1xuICAvLyBLZXBsZXJUYWJsZSBhbHRlcm5hdGl2ZVxuICAvLyBUT0RPIGltcHJvdmUgdHlwaW5nIGJ5IGV4cG9ydGluZyBLZXBsZXJUYWJsZSBpbnRlcmZhY2UgdG8gQGtlcGxlci5nbC90eXBlc1xuICB0YWJsZT86IGFueTtcblxuICAvLyBEaXNhYmxlIHByb2dyZXNzaXZlIGxvYWRpbmcgZm9yIGFycm93IGZpbGVzXG4gIHVzZUFycm93UHJvZ3Jlc3NpdmVMb2FkaW5nPzogYm9vbGVhbjtcbiAgLy8gU2hvdyBidWlsdC1pbiBiYW5uZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgS2VwbGVyLmdsXG4gIHNob3dSZWxlYXNlQmFubmVyPzogYm9vbGVhbjtcbiAgLy8gVXNlIHRoZSBvbkZpbHRlcmVkSXRlbXNDaGFuZ2UgY2FsbGJhY2sgZm9yIERhdGFGaWx0ZXJFeHRlbnNpb24uXG4gIC8vIEVuYWJsaW5nIHRoaXMgb3B0aW9uIG1heSBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZXMgd2hlbiBkZWFsaW5nIHdpdGggYSBsYXJnZSBudW1iZXIgb2YgbGF5ZXJzIG9yIHN1YmxheWVycyxcbiAgLy8gZXNwZWNpYWxseSBpZiBsYXJnZSBBcnJvdyBmaWxlcyBhcmUgc3BsaXQgaW50byByZWxhdGl2ZWx5IHNtYWxsIGJhdGNoZXMgKHNob3VsZCBiZSBmaXhlZCBpbiB0aGUgZnV0dXJlKS5cbiAgdXNlT25GaWx0ZXJlZEl0ZW1zQ2hhbmdlPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IERFRkFVTFRfQVBQTElDQVRJT05fQ09ORklHOiBSZXF1aXJlZDxLZXBsZXJBcHBsaWNhdGlvbkNvbmZpZz4gPSB7XG4gIGRlZmF1bHRIdG1sTmFtZTogJ2tlcGxlci5nbC5odG1sJyxcbiAgZGVmYXVsdEltYWdlTmFtZTogJ2tlcGxlci5nbC5wbmcnLFxuICBkZWZhdWx0SnNvbk5hbWU6ICdrZXBsZXIuZ2wuanNvbicsXG4gIGRlZmF1bHREYXRhTmFtZTogJ2tlcGxlci5nbCcsXG4gIGRlZmF1bHRFeHBvcnRKc29uU2V0dGluZ3M6IHtcbiAgICBoYXNEYXRhOiB0cnVlXG4gIH0sXG5cbiAgYmFzZU1hcExpYnJhcnlDb25maWc6IHtcbiAgICBtYXBsaWJyZToge1xuICAgICAgZ2V0TWFwTGliOiAoKSA9PiBpbXBvcnQoJ21hcGxpYnJlLWdsJyksXG4gICAgICBtYXBMaWJDc3NDbGFzczogJ21hcGxpYnJlZ2wnLFxuICAgICAgbWFwTGliQXR0cmlidXRpb25Dc3NDbGFzczogJ21hcGxpYnJlLWF0dHJpYnV0aW9uLWNvbnRhaW5lcicsXG4gICAgICBtYXBMaWJOYW1lOiAnTWFwTGlicmUnLFxuICAgICAgbWFwTGliVXJsOiAnaHR0cHM6Ly93d3cubWFwbGlicmUub3JnLydcbiAgICB9LFxuICAgIG1hcGJveDoge1xuICAgICAgZ2V0TWFwTGliOiAoKSA9PiBpbXBvcnQoJ21hcGJveC1nbCcpLFxuICAgICAgbWFwTGliQ3NzQ2xhc3M6ICdtYXBib3hnbCcsXG4gICAgICBtYXBMaWJBdHRyaWJ1dGlvbkNzc0NsYXNzOiAnbWFwYm94LWF0dHJpYnV0aW9uLWNvbnRhaW5lcicsXG4gICAgICBtYXBMaWJOYW1lOiAnTWFwYm94JyxcbiAgICAgIG1hcExpYlVybDogJ2h0dHBzOi8vd3d3Lm1hcGJveC5jb20vJ1xuICAgIH1cbiAgfSxcblxuICBwbHVnaW5zOiBbXSxcbiAgLy8gVGhlIGRlZmF1bHQgdGFibGUgY2xhc3MgaXMgS2VwbGVyVGFibGUuXG4gIC8vIFRPRE8gaW5jbHVkZSBLZXBsZXJUYWJsZSBoZXJlIHdoZW4gdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kgd2l0aCBAa2VwbGVyLmdsL3RhYmxlIGFuZCBAa2VwbGVyLmdsL3V0aWxzIGFyZSByZXNvbHZlZC5cbiAgdGFibGU6IG51bGwsXG5cbiAgdXNlQXJyb3dQcm9ncmVzc2l2ZUxvYWRpbmc6IHRydWUsXG4gIHNob3dSZWxlYXNlQmFubmVyOiB0cnVlLFxuICB1c2VPbkZpbHRlcmVkSXRlbXNDaGFuZ2U6IGZhbHNlXG59O1xuXG5jb25zdCBhcHBsaWNhdGlvbkNvbmZpZzogUmVxdWlyZWQ8S2VwbGVyQXBwbGljYXRpb25Db25maWc+ID0gREVGQVVMVF9BUFBMSUNBVElPTl9DT05GSUc7XG5cbmV4cG9ydCBjb25zdCBnZXRBcHBsaWNhdGlvbkNvbmZpZyA9ICgpOiBSZXF1aXJlZDxLZXBsZXJBcHBsaWNhdGlvbkNvbmZpZz4gPT4gYXBwbGljYXRpb25Db25maWc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0QXBwbGljYXRpb25Db25maWcoYXBwQ29uZmlnOiBLZXBsZXJBcHBsaWNhdGlvbkNvbmZpZyA9IHt9KSB7XG4gIE9iamVjdC5hc3NpZ24oYXBwbGljYXRpb25Db25maWcsIGFwcENvbmZpZyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7O0FBMEJBLElBQU1BLDBCQUE2RCxHQUFHO0VBQ3BFQyxlQUFlLEVBQUUsZ0JBQWdCO0VBQ2pDQyxnQkFBZ0IsRUFBRSxlQUFlO0VBQ2pDQyxlQUFlLEVBQUUsZ0JBQWdCO0VBQ2pDQyxlQUFlLEVBQUUsV0FBVztFQUM1QkMseUJBQXlCLEVBQUU7SUFDekJDLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFFREMsb0JBQW9CLEVBQUU7SUFDcEJDLFFBQVEsRUFBRTtNQUNSQyxTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBQTtRQUFBLE9BQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUFBQyxJQUFBO1VBQUEsT0FBQUMsdUJBQUEsQ0FBQUMsT0FBQSxDQUFlLGFBQWE7UUFBQTtNQUFBLENBQUM7TUFDdENDLGNBQWMsRUFBRSxZQUFZO01BQzVCQyx5QkFBeUIsRUFBRSxnQ0FBZ0M7TUFDM0RDLFVBQVUsRUFBRSxVQUFVO01BQ3RCQyxTQUFTLEVBQUU7SUFDYixDQUFDO0lBQ0RDLE1BQU0sRUFBRTtNQUNOVixTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBQTtRQUFBLE9BQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUFBQyxJQUFBO1VBQUEsT0FBQUMsdUJBQUEsQ0FBQUMsT0FBQSxDQUFlLFdBQVc7UUFBQTtNQUFBLENBQUM7TUFDcENDLGNBQWMsRUFBRSxVQUFVO01BQzFCQyx5QkFBeUIsRUFBRSw4QkFBOEI7TUFDekRDLFVBQVUsRUFBRSxRQUFRO01BQ3BCQyxTQUFTLEVBQUU7SUFDYjtFQUNGLENBQUM7RUFFREUsT0FBTyxFQUFFLEVBQUU7RUFDWDtFQUNBO0VBQ0FDLEtBQUssRUFBRSxJQUFJO0VBRVhDLDBCQUEwQixFQUFFLElBQUk7RUFDaENDLGlCQUFpQixFQUFFLElBQUk7RUFDdkJDLHdCQUF3QixFQUFFO0FBQzVCLENBQUM7QUFFRCxJQUFNQyxpQkFBb0QsR0FBR3pCLDBCQUEwQjtBQUVoRixJQUFNMEIsb0JBQW9CLEdBQUFDLE9BQUEsQ0FBQUQsb0JBQUEsR0FBRyxTQUF2QkEsb0JBQW9CQSxDQUFBO0VBQUEsT0FBNENELGlCQUFpQjtBQUFBO0FBRXZGLFNBQVNHLHFCQUFxQkEsQ0FBQSxFQUEwQztFQUFBLElBQXpDQyxTQUFrQyxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7RUFDM0VHLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDVCxpQkFBaUIsRUFBRUksU0FBUyxDQUFDO0FBQzdDIiwiaWdub3JlTGlzdCI6W119