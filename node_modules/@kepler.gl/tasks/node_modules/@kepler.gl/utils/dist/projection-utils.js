"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAPBOX_TILE_SIZE = void 0;
exports.getCenterAndZoomFromBounds = getCenterAndZoomFromBounds;
exports.normalizeEvent = normalizeEvent;
exports.validateBounds = validateBounds;
var _geoViewport = _interopRequireDefault(require("@mapbox/geo-viewport"));
var _console = _interopRequireDefault(require("global/console"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var MAPBOX_TILE_SIZE = exports.MAPBOX_TILE_SIZE = 512;
function isLat(num) {
  return Number.isFinite(num) && num <= 90 && num >= -90;
}
function isLng(num) {
  return Number.isFinite(num) && num <= 180 && num >= -180;
}

/**
 * bounds should be [minLng, minLat, maxLng, maxLat]
 * @param {*} bounds
 */
function validateBounds(bounds) {
  // array: [ -180, -85.05112877980659, 180, 85.0511287798066 ]
  // validate bounds
  if (Array.isArray(bounds) && bounds.length === 4 && [bounds[0], bounds[2]].every(isLng) && [bounds[1], bounds[3]].every(isLat)) {
    return bounds;
  }
  return null;
}
function getCenterAndZoomFromBounds(bounds, _ref) {
  var width = _ref.width,
    height = _ref.height;
  var validBounds = validateBounds(bounds);
  if (!validBounds) {
    _console["default"].warn('invalid map bounds provided');
    return null;
  }

  // viewport(bounds, dimensions, minzoom, maxzoom, tileSize, allowFloat)
  var _geoViewport$viewport = _geoViewport["default"].viewport(bounds, [width, height], undefined, undefined, MAPBOX_TILE_SIZE),
    zoom = _geoViewport$viewport.zoom;
  // center being calculated by geo-vieweport.viewport has a complex logic that
  // projects and then unprojects the coordinates to determine the center
  // Calculating a simple average instead as that is the expected behavior in most of cases
  var center = [(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2];
  return {
    zoom: zoom,
    center: center
  };
}

/**
 * Add extra info about screen space position and world position to the event.
 * @param {*} event Event to normalize.
 * @param {*} viewport Current viewport.
 * @returns Normalized event with extra information compatible with React-map-gl MapLayerMouseEvent
 * https://visgl.github.io/react-map-gl/docs/api-reference/types#maplayermouseevent
 */
function normalizeEvent(event, viewport) {
  var _event$target;
  var bounds = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.getBoundingClientRect();
  if (!bounds) {
    return event;
  }
  var x = event.clientX - bounds.left;
  var y = event.clientY - bounds.top;
  if (!Number.isFinite(x) || !Number.isFinite(y)) {
    return event;
  }
  event.point = [x, y];
  var location = viewport.unproject(event.point, {
    targetZ: 0
  });
  event.lngLat = [location[0], location[1]];
  return event;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2VvVmlld3BvcnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb25zb2xlIiwiTUFQQk9YX1RJTEVfU0laRSIsImV4cG9ydHMiLCJpc0xhdCIsIm51bSIsIk51bWJlciIsImlzRmluaXRlIiwiaXNMbmciLCJ2YWxpZGF0ZUJvdW5kcyIsImJvdW5kcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImV2ZXJ5IiwiZ2V0Q2VudGVyQW5kWm9vbUZyb21Cb3VuZHMiLCJfcmVmIiwid2lkdGgiLCJoZWlnaHQiLCJ2YWxpZEJvdW5kcyIsIkNvbnNvbGUiLCJ3YXJuIiwiX2dlb1ZpZXdwb3J0JHZpZXdwb3J0IiwiZ2VvVmlld3BvcnQiLCJ2aWV3cG9ydCIsInVuZGVmaW5lZCIsInpvb20iLCJjZW50ZXIiLCJub3JtYWxpemVFdmVudCIsImV2ZW50IiwiX2V2ZW50JHRhcmdldCIsInRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIngiLCJjbGllbnRYIiwibGVmdCIsInkiLCJjbGllbnRZIiwidG9wIiwicG9pbnQiLCJsb2NhdGlvbiIsInVucHJvamVjdCIsInRhcmdldFoiLCJsbmdMYXQiXSwic291cmNlcyI6WyIuLi9zcmMvcHJvamVjdGlvbi11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgZ2VvVmlld3BvcnQgZnJvbSAnQG1hcGJveC9nZW8tdmlld3BvcnQnO1xuXG5pbXBvcnQgV2ViTWVyY2F0b3JWaWV3cG9ydCBmcm9tICd2aWV3cG9ydC1tZXJjYXRvci1wcm9qZWN0JztcbmltcG9ydCBDb25zb2xlIGZyb20gJ2dsb2JhbC9jb25zb2xlJztcblxuZXhwb3J0IGNvbnN0IE1BUEJPWF9USUxFX1NJWkUgPSA1MTI7XG5cbmZ1bmN0aW9uIGlzTGF0KG51bSkge1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKG51bSkgJiYgbnVtIDw9IDkwICYmIG51bSA+PSAtOTA7XG59XG5mdW5jdGlvbiBpc0xuZyhudW0pIHtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShudW0pICYmIG51bSA8PSAxODAgJiYgbnVtID49IC0xODA7XG59XG5cbi8qKlxuICogYm91bmRzIHNob3VsZCBiZSBbbWluTG5nLCBtaW5MYXQsIG1heExuZywgbWF4TGF0XVxuICogQHBhcmFtIHsqfSBib3VuZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQm91bmRzKGJvdW5kcykge1xuICAvLyBhcnJheTogWyAtMTgwLCAtODUuMDUxMTI4Nzc5ODA2NTksIDE4MCwgODUuMDUxMTI4Nzc5ODA2NiBdXG4gIC8vIHZhbGlkYXRlIGJvdW5kc1xuICBpZiAoXG4gICAgQXJyYXkuaXNBcnJheShib3VuZHMpICYmXG4gICAgYm91bmRzLmxlbmd0aCA9PT0gNCAmJlxuICAgIFtib3VuZHNbMF0sIGJvdW5kc1syXV0uZXZlcnkoaXNMbmcpICYmXG4gICAgW2JvdW5kc1sxXSwgYm91bmRzWzNdXS5ldmVyeShpc0xhdClcbiAgKSB7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENlbnRlckFuZFpvb21Gcm9tQm91bmRzKGJvdW5kcywge3dpZHRoLCBoZWlnaHR9KSB7XG4gIGNvbnN0IHZhbGlkQm91bmRzID0gdmFsaWRhdGVCb3VuZHMoYm91bmRzKTtcbiAgaWYgKCF2YWxpZEJvdW5kcykge1xuICAgIENvbnNvbGUud2FybignaW52YWxpZCBtYXAgYm91bmRzIHByb3ZpZGVkJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyB2aWV3cG9ydChib3VuZHMsIGRpbWVuc2lvbnMsIG1pbnpvb20sIG1heHpvb20sIHRpbGVTaXplLCBhbGxvd0Zsb2F0KVxuICBjb25zdCB7em9vbX0gPSBnZW9WaWV3cG9ydC52aWV3cG9ydChcbiAgICBib3VuZHMsXG4gICAgW3dpZHRoLCBoZWlnaHRdLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWQsXG4gICAgTUFQQk9YX1RJTEVfU0laRVxuICApO1xuICAvLyBjZW50ZXIgYmVpbmcgY2FsY3VsYXRlZCBieSBnZW8tdmlld2Vwb3J0LnZpZXdwb3J0IGhhcyBhIGNvbXBsZXggbG9naWMgdGhhdFxuICAvLyBwcm9qZWN0cyBhbmQgdGhlbiB1bnByb2plY3RzIHRoZSBjb29yZGluYXRlcyB0byBkZXRlcm1pbmUgdGhlIGNlbnRlclxuICAvLyBDYWxjdWxhdGluZyBhIHNpbXBsZSBhdmVyYWdlIGluc3RlYWQgYXMgdGhhdCBpcyB0aGUgZXhwZWN0ZWQgYmVoYXZpb3IgaW4gbW9zdCBvZiBjYXNlc1xuICBjb25zdCBjZW50ZXIgPSBbKGJvdW5kc1swXSArIGJvdW5kc1syXSkgLyAyLCAoYm91bmRzWzFdICsgYm91bmRzWzNdKSAvIDJdO1xuXG4gIHJldHVybiB7em9vbSwgY2VudGVyfTtcbn1cblxuLyoqXG4gKiBBZGQgZXh0cmEgaW5mbyBhYm91dCBzY3JlZW4gc3BhY2UgcG9zaXRpb24gYW5kIHdvcmxkIHBvc2l0aW9uIHRvIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7Kn0gZXZlbnQgRXZlbnQgdG8gbm9ybWFsaXplLlxuICogQHBhcmFtIHsqfSB2aWV3cG9ydCBDdXJyZW50IHZpZXdwb3J0LlxuICogQHJldHVybnMgTm9ybWFsaXplZCBldmVudCB3aXRoIGV4dHJhIGluZm9ybWF0aW9uIGNvbXBhdGlibGUgd2l0aCBSZWFjdC1tYXAtZ2wgTWFwTGF5ZXJNb3VzZUV2ZW50XG4gKiBodHRwczovL3Zpc2dsLmdpdGh1Yi5pby9yZWFjdC1tYXAtZ2wvZG9jcy9hcGktcmVmZXJlbmNlL3R5cGVzI21hcGxheWVybW91c2VldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplRXZlbnQoZXZlbnQ6IGFueSwgdmlld3BvcnQ6IFdlYk1lcmNhdG9yVmlld3BvcnQpIHtcbiAgY29uc3QgYm91bmRzID0gZXZlbnQudGFyZ2V0Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgaWYgKCFib3VuZHMpIHtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIGJvdW5kcy5sZWZ0O1xuICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIGJvdW5kcy50b3A7XG4gIGlmICghTnVtYmVyLmlzRmluaXRlKHgpIHx8ICFOdW1iZXIuaXNGaW5pdGUoeSkpIHtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cblxuICBldmVudC5wb2ludCA9IFt4LCB5XTtcbiAgY29uc3QgbG9jYXRpb24gPSB2aWV3cG9ydC51bnByb2plY3QoZXZlbnQucG9pbnQsIHt0YXJnZXRaOiAwfSk7XG4gIGV2ZW50LmxuZ0xhdCA9IFtsb2NhdGlvblswXSwgbG9jYXRpb25bMV1dO1xuXG4gIHJldHVybiBldmVudDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUdBLElBQUFBLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQUFDLFFBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQU5BO0FBQ0E7O0FBT08sSUFBTUUsZ0JBQWdCLEdBQUFDLE9BQUEsQ0FBQUQsZ0JBQUEsR0FBRyxHQUFHO0FBRW5DLFNBQVNFLEtBQUtBLENBQUNDLEdBQUcsRUFBRTtFQUNsQixPQUFPQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0YsR0FBRyxDQUFDLElBQUlBLEdBQUcsSUFBSSxFQUFFLElBQUlBLEdBQUcsSUFBSSxDQUFDLEVBQUU7QUFDeEQ7QUFDQSxTQUFTRyxLQUFLQSxDQUFDSCxHQUFHLEVBQUU7RUFDbEIsT0FBT0MsTUFBTSxDQUFDQyxRQUFRLENBQUNGLEdBQUcsQ0FBQyxJQUFJQSxHQUFHLElBQUksR0FBRyxJQUFJQSxHQUFHLElBQUksQ0FBQyxHQUFHO0FBQzFEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0ksY0FBY0EsQ0FBQ0MsTUFBTSxFQUFF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