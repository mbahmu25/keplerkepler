"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apply_ = apply_;
exports.compose_ = compose_;
exports.filterOutById = filterOutById;
exports.if_ = if_;
exports.log = log;
exports.map_ = map_;
exports.merge_ = merge_;
exports.payload_ = payload_;
exports.pick_ = pick_;
exports.removeElementAtIndex = removeElementAtIndex;
exports.swap_ = swap_;
exports.with_ = with_;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _console = _interopRequireDefault(require("global/console"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var identity = function identity(state) {
  return state;
};

/** Returns a function that logs a value with a given message */
function log(text) {
  return function (value) {
    return _console["default"].log(text, value);
  };
}
/** Wraps a value in an object and stores it the `payload` field */
function payload_(payload) {
  return {
    payload: payload
  };
}
/** Wraps a value in an object and stores it the `payload` field */
function apply_(updater, payload) {
  return function (state) {
    return updater(state, payload);
  };
}
function with_(fn) {
  return function (state) {
    return fn(state)(state);
  };
}
function if_(pred, fn) {
  return pred ? fn : identity;
}
function compose_(fns) {
  return function (state) {
    return fns.reduce(function (state2, fn) {
      return fn(state2);
    }, state);
  };
}
/** Returns a reducer function that merges props with state */
function merge_(obj) {
  return function (state) {
    return _objectSpread(_objectSpread({}, state), obj);
  };
}
function pick_(prop) {
  return function (fn) {
    return function (state) {
      return _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2["default"])({}, prop, fn(state[prop])));
    };
  };
}
function swap_(item) {
  return function (arr) {
    return arr.map(function (a) {
      return a.id === item.id ? item : a;
    });
  };
}
function map_(fn) {
  return function (arr) {
    return arr.map(function (e) {
      return fn(e);
    });
  };
}
function filterOutById(id) {
  return function (arr) {
    return arr.filter(function (e) {
      return e.id !== id;
    });
  };
}
function removeElementAtIndex(index) {
  return function (arr) {
    return [].concat((0, _toConsumableArray2["default"])(arr.slice(0, index)), (0, _toConsumableArray2["default"])(arr.slice(index + 1, arr.length)));
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uc29sZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJpZGVudGl0eSIsInN0YXRlIiwibG9nIiwidGV4dCIsInZhbHVlIiwiQ29uc29sZSIsInBheWxvYWRfIiwicGF5bG9hZCIsImFwcGx5XyIsInVwZGF0ZXIiLCJ3aXRoXyIsImZuIiwiaWZfIiwicHJlZCIsImNvbXBvc2VfIiwiZm5zIiwicmVkdWNlIiwic3RhdGUyIiwibWVyZ2VfIiwib2JqIiwicGlja18iLCJwcm9wIiwic3dhcF8iLCJpdGVtIiwiYXJyIiwibWFwIiwiYSIsImlkIiwibWFwXyIsImZpbHRlck91dEJ5SWQiLCJyZW1vdmVFbGVtZW50QXRJbmRleCIsImluZGV4IiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsInNsaWNlIl0sInNvdXJjZXMiOlsiLi4vc3JjL2NvbXBvc2VyLWhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuaW1wb3J0IENvbnNvbGUgZnJvbSAnZ2xvYmFsL2NvbnNvbGUnO1xuXG5jb25zdCBpZGVudGl0eSA9IHN0YXRlID0+IHN0YXRlO1xuXG4vKiogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbG9ncyBhIHZhbHVlIHdpdGggYSBnaXZlbiBtZXNzYWdlICovXG5leHBvcnQgZnVuY3Rpb24gbG9nKHRleHQ6IHN0cmluZyk6ICh2YWx1ZTogYW55KSA9PiB2b2lkIHtcbiAgcmV0dXJuIHZhbHVlID0+IENvbnNvbGUubG9nKHRleHQsIHZhbHVlKTtcbn1cbi8qKiBXcmFwcyBhIHZhbHVlIGluIGFuIG9iamVjdCBhbmQgc3RvcmVzIGl0IHRoZSBgcGF5bG9hZGAgZmllbGQgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXlsb2FkXzxQPihwYXlsb2FkOiBQKSB7XG4gIHJldHVybiB7cGF5bG9hZH07XG59XG4vKiogV3JhcHMgYSB2YWx1ZSBpbiBhbiBvYmplY3QgYW5kIHN0b3JlcyBpdCB0aGUgYHBheWxvYWRgIGZpZWxkICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlfPFN0YXRlLCBQPihcbiAgdXBkYXRlcjogKHN0YXRlOiBTdGF0ZSwgbmV4dFBheWxvYWQ6IFApID0+IFN0YXRlLFxuICBwYXlsb2FkOiBQXG4pOiAoc3RhdGU6IFN0YXRlKSA9PiBTdGF0ZSB7XG4gIHJldHVybiBzdGF0ZSA9PiB1cGRhdGVyKHN0YXRlLCBwYXlsb2FkKTtcbn1cblxudHlwZSBBcmc8U3RhdGU+ID0gKHN0YXRlOiBTdGF0ZSkgPT4gKG5leHRTdGF0ZTogU3RhdGUpID0+IFN0YXRlO1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhfPFN0YXRlPihmbjogQXJnPFN0YXRlPik6IChzdGF0ZTogU3RhdGUpID0+IFN0YXRlIHtcbiAgcmV0dXJuIHN0YXRlID0+IGZuKHN0YXRlKShzdGF0ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpZl88U3RhdGU+KHByZWQ6IGJvb2xlYW4sIGZuOiAoc3RhdGU6IFN0YXRlKSA9PiBTdGF0ZSk6IChzdGF0ZTogU3RhdGUpID0+IFN0YXRlIHtcbiAgcmV0dXJuIHByZWQgPyBmbiA6IGlkZW50aXR5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcG9zZV88U3RhdGU+KGZuczogQXJyYXk8KHM6IFN0YXRlKSA9PiBTdGF0ZT4pOiAoczogU3RhdGUpID0+IFN0YXRlIHtcbiAgcmV0dXJuIHN0YXRlID0+IGZucy5yZWR1Y2UoKHN0YXRlMiwgZm4pID0+IGZuKHN0YXRlMiksIHN0YXRlKTtcbn1cbi8qKiBSZXR1cm5zIGEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IG1lcmdlcyBwcm9wcyB3aXRoIHN0YXRlICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VfPFByb3BzPihvYmo6IFByb3BzKTogPFN0YXRlPihzdGF0ZTogU3RhdGUpID0+IFN0YXRlIHtcbiAgcmV0dXJuIHN0YXRlID0+ICh7Li4uc3RhdGUsIC4uLm9ian0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGlja188UHJvcCBleHRlbmRzIHN0cmluZz4oXG4gIHByb3A6IFByb3Bcbik6IDxWYWx1ZT4oZm46IChwOiBWYWx1ZSkgPT4gVmFsdWUpID0+IDxTdGF0ZSBleHRlbmRzIFJlY29yZDxQcm9wLCBWYWx1ZT4+KHN0YXRlOiBTdGF0ZSkgPT4gU3RhdGUge1xuICByZXR1cm4gZm4gPT4gc3RhdGUgPT4gKHsuLi5zdGF0ZSwgW3Byb3BdOiBmbihzdGF0ZVtwcm9wXSl9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN3YXBfPFggZXh0ZW5kcyB7aWQ6IHN0cmluZ30+KGl0ZW06IFgpOiAoYXJyOiBYW10pID0+IFhbXSB7XG4gIHJldHVybiBhcnIgPT4gYXJyLm1hcChhID0+IChhLmlkID09PSBpdGVtLmlkID8gaXRlbSA6IGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcF88WCwgVD4oZm46IChzdGF0ZTogWCkgPT4gVCk6IChhcnI6IFhbXSkgPT4gVFtdIHtcbiAgcmV0dXJuIGFyciA9PiBhcnIubWFwKGUgPT4gZm4oZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyT3V0QnlJZDxYIGV4dGVuZHMge2lkOiBzdHJpbmd9PihpZDogc3RyaW5nKTogKGFycjogWFtdKSA9PiBYW10ge1xuICByZXR1cm4gYXJyID0+IGFyci5maWx0ZXIoZSA9PiBlLmlkICE9PSBpZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbGVtZW50QXRJbmRleDxYPihpbmRleDogbnVtYmVyKTogKGFycjogWFtdKSA9PiBYW10ge1xuICByZXR1cm4gYXJyID0+IFsuLi5hcnIuc2xpY2UoMCwgaW5kZXgpLCAuLi5hcnIuc2xpY2UoaW5kZXggKyAxLCBhcnIubGVuZ3RoKV07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0EsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXFDLFNBQUFDLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsUUFBQWUsZ0JBQUEsYUFBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJB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