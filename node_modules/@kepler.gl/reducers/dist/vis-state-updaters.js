"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_VIS_STATE = exports.DEFAULT_EDITOR = exports.DEFAULT_ANIMATION_CONFIG = void 0;
exports.addDefaultLayers = addDefaultLayers;
exports.addDefaultTooltips = addDefaultTooltips;
exports.applyCPUFilterUpdater = exports.addLayerUpdater = exports.addFilterUpdater = exports.addEffectUpdater = void 0;
exports.applyFilterConfigUpdater = applyFilterConfigUpdater;
exports.applyLayerConfigUpdater = applyLayerConfigUpdater;
exports.applyMergersUpdater = applyMergersUpdater;
exports.closeSpecificMapAtIndex = closeSpecificMapAtIndex;
exports.copyTableColumnUpdater = copyTableColumnUpdater;
exports.defaultInteractionConfig = exports.createOrUpdateFilterUpdater = exports.createNewDatasetSuccessUpdater = void 0;
exports.deleteFeatureUpdater = deleteFeatureUpdater;
exports.duplicateLayerUpdater = void 0;
exports.initialFileLoadingProgress = initialFileLoadingProgress;
exports.interactionConfigChangeUpdater = interactionConfigChangeUpdater;
exports.isFilterAnimationConfig = isFilterAnimationConfig;
exports.layerAnimationChangeUpdater = layerAnimationChangeUpdater;
exports.layerColorUIChangeUpdater = exports.layerClickUpdater = void 0;
exports.layerConfigChangeUpdater = layerConfigChangeUpdater;
exports.layerDataIdChangeUpdater = layerDataIdChangeUpdater;
exports.layerFilteredItemsChangeUpdater = layerFilteredItemsChangeUpdater;
exports.layerHoverUpdater = void 0;
exports.layerSetIsValidUpdater = layerSetIsValidUpdater;
exports.layerTextLabelChangeUpdater = layerTextLabelChangeUpdater;
exports.layerToggleVisibilityUpdater = layerToggleVisibilityUpdater;
exports.layerTypeChangeUpdater = layerTypeChangeUpdater;
exports.layerVisConfigChangeUpdater = layerVisConfigChangeUpdater;
exports.layerVisualChannelChangeUpdater = layerVisualChannelChangeUpdater;
exports.loadFileStepSuccessUpdater = loadFileStepSuccessUpdater;
exports.loadFilesUpdater = exports.loadFilesErrUpdater = void 0;
exports.loadNextFileUpdater = loadNextFileUpdater;
exports.makeLoadFileTask = makeLoadFileTask;
exports.nextFileBatchUpdater = exports.mouseMoveUpdater = exports.mapClickUpdater = void 0;
exports.parseProgress = parseProgress;
exports.pinTableColumnUpdater = pinTableColumnUpdater;
exports.prepareStateForDatasetReplace = prepareStateForDatasetReplace;
exports.processFileContentUpdater = processFileContentUpdater;
exports.receiveMapConfigUpdater = void 0;
exports.removeDatasetUpdater = removeDatasetUpdater;
exports.removeFilterUpdater = exports.removeEffectUpdater = void 0;
exports.removeLayerUpdater = removeLayerUpdater;
exports.renameDatasetUpdater = renameDatasetUpdater;
exports.reorderLayerUpdater = exports.reorderEffectUpdater = void 0;
exports.replaceDatasetDepsInState = replaceDatasetDepsInState;
exports.resetMapConfigUpdater = void 0;
exports.setAnimationConfigUpdater = setAnimationConfigUpdater;
exports.setColumnDisplayFormatUpdater = setColumnDisplayFormatUpdater;
exports.setEditorModeUpdater = void 0;
exports.setFeaturesUpdater = setFeaturesUpdater;
exports.setFilterAnimationTimeConfigUpdater = setFilterAnimationTimeConfigUpdater;
exports.setFilterAnimationTimeUpdater = setFilterAnimationTimeUpdater;
exports.setFilterAnimationWindowUpdater = setFilterAnimationWindowUpdater;
exports.setFilterPlotUpdater = void 0;
exports.setFilterUpdater = setFilterUpdater;
exports.setFilterViewUpdater = void 0;
exports.setInitialLayerConfig = setInitialLayerConfig;
exports.setLayerAnimationTimeConfigUpdater = setLayerAnimationTimeConfigUpdater;
exports.setMapInfoUpdater = exports.setLayerAnimationTimeUpdater = void 0;
exports.setPolygonFilterLayerUpdater = setPolygonFilterLayerUpdater;
exports.setSelectedFeatureUpdater = void 0;
exports.setTimeFilterTimelineModeUpdater = setTimeFilterTimelineModeUpdater;
exports.showDatasetTableUpdater = void 0;
exports.sortTableColumnUpdater = sortTableColumnUpdater;
exports.syncTimeFilterWithLayerTimelineUpdater = syncTimeFilterWithLayerTimelineUpdater;
exports.toggleEditorVisibilityUpdater = toggleEditorVisibilityUpdater;
exports.toggleSplitMapUpdater = exports.toggleLayerForMapUpdater = exports.toggleLayerAnimationUpdater = exports.toggleLayerAnimationControlUpdater = exports.toggleFilterFeatureUpdater = exports.toggleFilterAnimationUpdater = void 0;
exports.updateAllLayerDomainData = updateAllLayerDomainData;
exports.updateAnimationDomain = updateAnimationDomain;
exports.updateDatasetPropsUpdater = updateDatasetPropsUpdater;
exports.updateEffectUpdater = void 0;
exports.updateFileLoadingProgressUpdater = updateFileLoadingProgressUpdater;
exports.updateOverlayBlendingUpdater = exports.updateLayerBlendingUpdater = exports.updateLayerAnimationSpeedUpdater = exports.updateFilterAnimationSpeedUpdater = void 0;
exports.updateStateOnLayerVisibilityChange = updateStateOnLayerVisibilityChange;
exports.updateStateWithLayerAndData = updateStateWithLayerAndData;
exports.updateVisDataUpdater = exports.updateTableColorUpdater = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _bbox = _interopRequireDefault(require("@turf/bbox"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _window = require("global/window");
var _lodash = _interopRequireDefault(require("lodash.clonedeep"));
var _lodash2 = _interopRequireDefault(require("lodash.get"));
var _lodash3 = _interopRequireDefault(require("lodash.isequal"));
var _lodash4 = _interopRequireDefault(require("lodash.pick"));
var _lodash5 = _interopRequireDefault(require("lodash.uniq"));
var _lodash6 = _interopRequireDefault(require("lodash.xor"));
var _tasks = _interopRequireWildcard(require("react-palm/tasks"));
var _tasks2 = require("@kepler.gl/tasks");
var _actions = require("@kepler.gl/actions");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _layers = require("@kepler.gl/layers");
var _composerHelpers = require("./composer-helpers");
var _mergerHandler = require("./merger-handler");
var _visStateMerger = require("./vis-state-merger");
var _schemas = _interopRequireDefault(require("@kepler.gl/schemas"));
var _table = require("@kepler.gl/table");
var _interactionUtils = require("./interaction-utils");
var _layerUtils = require("./layer-utils");
var _effects = require("@kepler.gl/effects");
var _dataUtils = require("./data-utils");
var _excluded = ["dataId"],
  _excluded2 = ["info"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// Tasks
// Actions
// Utils
// Mergers
// react-palm
// disable capture exception for react-palm call to withTask
(0, _tasks.disableStackCapturing)();

/**
 * Updaters for `visState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.
 * Read more about [Using updaters](../advanced-usage/using-updaters.md)
 *
 * @public
 * @example
 *
 * import keplerGlReducer, {visStateUpdaters} from 'kepler.gl/reducers';
 * // Root Reducer
 * const reducers = combineReducers({
 *  keplerGl: keplerGlReducer,
 *  app: appReducer
 * });
 *
 * const composedReducer = (state, action) => {
 *  switch (action.type) {
 *    case 'CLICK_BUTTON':
 *      return {
 *        ...state,
 *        keplerGl: {
 *          ...state.keplerGl,
 *          foo: {
 *             ...state.keplerGl.foo,
 *             visState: visStateUpdaters.enlargeFilterUpdater(
 *               state.keplerGl.foo.visState,
 *               {idx: 0}
 *             )
 *          }
 *        }
 *      };
 *  }
 *  return reducers(state, action);
 * };
 *
 * export default composedReducer;
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
// @ts-ignore
var visStateUpdaters = null;
/* eslint-enable @typescript-eslint/no-unused-vars */

var defaultInteractionConfig = exports.defaultInteractionConfig = {
  tooltip: {
    id: 'tooltip',
    label: 'interactions.tooltip',
    enabled: true,
    config: {
      fieldsToShow: {},
      compareMode: false,
      compareType: _constants.COMPARE_TYPES.ABSOLUTE
    }
  },
  geocoder: {
    id: 'geocoder',
    label: 'interactions.geocoder',
    enabled: false,
    position: null
  },
  brush: {
    id: 'brush',
    label: 'interactions.brush',
    enabled: false,
    config: {
      // size is in km
      size: 0.5
    }
  },
  coordinate: {
    id: 'coordinate',
    label: 'interactions.coordinate',
    enabled: false,
    position: null
  }
};
var DEFAULT_ANIMATION_CONFIG = exports.DEFAULT_ANIMATION_CONFIG = {
  domain: null,
  currentTime: null,
  speed: 1,
  isAnimating: false,
  timeSteps: null,
  timeFormat: null,
  timezone: null,
  defaultTimeFormat: null,
  hideControl: false,
  duration: null
};
var DEFAULT_EDITOR = exports.DEFAULT_EDITOR = {
  mode: _constants.EDITOR_MODES.DRAW_POLYGON,
  features: [],
  selectedFeature: null,
  visible: true
};

/**
 * Default initial `visState`
 * @memberof visStateUpdaters
 * @constant
 * @public
 */
var INITIAL_VIS_STATE = exports.INITIAL_VIS_STATE = {
  // map info
  mapInfo: {
    title: '',
    description: ''
  },
  // layers
  layers: [],
  layerData: [],
  layerToBeMerged: [],
  layerOrder: [],
  // filters
  filters: [],
  filterToBeMerged: [],
  // a collection of multiple dataset
  datasets: {},
  editingDataset: undefined,
  // effects
  effects: [],
  effectOrder: [],
  interactionConfig: defaultInteractionConfig,
  interactionToBeMerged: {},
  layerBlending: 'normal',
  overlayBlending: 'normal',
  hoverInfo: undefined,
  clicked: undefined,
  mousePos: {},
  maxDefaultTooltips: _constants.MAX_DEFAULT_TOOLTIPS,
  // this is used when user split maps
  splitMaps: [
    // this will contain a list of objects to
    // describe the state of layer availability and visibility for each map
    // [
    //   {
    //      layers: {layer_id: true | false}
    //   }
    // ]
  ],
  splitMapsToBeMerged: [],
  isMergingDatasets: {},
  // defaults layer classes
  layerClasses: _layers.LayerClasses,
  // default animation
  // time in unix timestamp (milliseconds) (the number of seconds since the Unix Epoch)
  animationConfig: DEFAULT_ANIMATION_CONFIG,
  editor: DEFAULT_EDITOR,
  fileLoading: false,
  fileLoadingProgress: {},
  loaders: [],
  loadOptions: {},
  // visStateMergers
  mergers: _visStateMerger.VIS_STATE_MERGERS,
  // kepler schemas
  schema: _schemas["default"]
};
/**
 * Update state with updated layer and layerData
 *
 */
function updateStateWithLayerAndData(state, _ref) {
  var layerData = _ref.layerData,
    layer = _ref.layer,
    idx = _ref.idx;
  return _objectSpread(_objectSpread({}, state), {}, {
    layers: state.layers.map(function (lyr, i) {
      return i === idx ? layer : lyr;
    }),
    layerData: layerData ? state.layerData.map(function (d, i) {
      return i === idx ? layerData : d;
    }) : state.layerData
  });
}
function updateStateOnLayerVisibilityChange(state, layer) {
  var newState = state;
  if (state.splitMaps.length) {
    newState = _objectSpread(_objectSpread({}, state), {}, {
      splitMaps: layer.config.isVisible ? (0, _utils.addNewLayersToSplitMap)(state.splitMaps, layer) : (0, _utils.removeLayerFromSplitMaps)(state.splitMaps, layer)
    });
  }
  if (layer.config.animation.enabled) {
    newState = updateAnimationDomain(newState);
  }
  return newState;
}

/**
 * Compares two objects (or arrays) and returns a new object with only the
 * properties that have changed between the two objects.
 */
function pickChangedProps(prev, next) {
  var changedProps = {};
  var pickPropsOf = function pickPropsOf(obj) {
    Object.keys(obj).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(changedProps, key) && !(0, _lodash3["default"])(prev[key], next[key])) {
        changedProps[key] = next[key];
      }
    });
  };
  pickPropsOf(prev);
  pickPropsOf(next);
  return changedProps;
}
var VISUAL_CHANNEL_PROP_TYPES = ['field', 'scale', 'domain', 'aggregation'];

/**
 * Apply layer config
 * @memberof visStateUpdaters
 * @returns nextState
 */
// eslint-disable-next-line complexity, max-statements
function applyLayerConfigUpdater(state, action) {
  var _serializeLayer;
  var oldLayerId = action.oldLayerId,
    newLayerConfig = action.newLayerConfig,
    layerIndex = action.layerIndex;
  var newParsedLayer =
  // will move visualChannels to the config prop
  (0, _visStateMerger.parseLayerConfig)(state.schema, newLayerConfig);
  var oldLayer = state.layers.find(function (l) {
    return l.id === oldLayerId;
  });
  if (!oldLayer || !newParsedLayer) {
    return state;
  }
  if (layerIndex !== null && layerIndex !== undefined && state.layers[layerIndex] !== oldLayer) {
    // layerIndex is provided, but it doesn't match the oldLayer
    return state;
  }
  var dataset = state.datasets[newParsedLayer.config.dataId];
  if (!dataset) {
    return state;
  }
  // Make sure the layer is valid and convert it to Layer
  var newLayer = (0, _visStateMerger.validateLayerWithData)(dataset, newParsedLayer, state.layerClasses);
  if (!newLayer) {
    return state;
  }
  var nextState = state;
  if (newLayer.type && newLayer.type !== oldLayer.type) {
    var oldLayerIndex = state.layers.findIndex(function (l) {
      return l.id === oldLayerId;
    });
    if (oldLayerIndex >= 0) {
      nextState = layerTypeChangeUpdater(nextState, (0, _actions.layerTypeChange)(oldLayer, newLayer.type));
      // layerTypeChangeUpdater changes the id of the layer, so we need to obtain the new id
      // but first make sure that the layer was not removed
      if (nextState.layers.length === state.layers.length) {
        var newLayerId = nextState.layers[oldLayerIndex].id;
        nextState = applyLayerConfigUpdater(nextState, (0, _actions.applyLayerConfig)(newLayerId, _objectSpread(_objectSpread({}, newLayerConfig), {}, {
          id: newLayerId
        })));
      }
    }
    return nextState;
  }

  // serializeLayer() might return null if the old layer is not valid,
  // we should still apply the changes in that case
  var serializedOldLayer = (_serializeLayer = (0, _visStateMerger.serializeLayer)(oldLayer, state.schema)) !== null && _serializeLayer !== void 0 ? _serializeLayer : {
    config: {}
  };
  var serializedNewLayer = (0, _visStateMerger.serializeLayer)(newLayer, state.schema);
  if (!serializedNewLayer) {
    return state;
  }
  if (!(0, _lodash3["default"])(serializedOldLayer, serializedNewLayer)) {
    var changed = pickChangedProps(serializedOldLayer.config, serializedNewLayer.config);
    if ('visConfig' in changed) {
      if (changed.visConfig) {
        nextState = layerVisConfigChangeUpdater(nextState, (0, _actions.layerVisConfigChange)(oldLayer, changed.visConfig));
      }
      delete changed.visConfig;
    }
    Object.keys(oldLayer.visualChannels).forEach(function (channelName) {
      var channel = oldLayer.visualChannels[channelName];
      var channelPropNames = VISUAL_CHANNEL_PROP_TYPES.map(function (prop) {
        return channel[prop];
      });
      if (channelPropNames.some(function (prop) {
        return prop in changed;
      })) {
        nextState = layerVisualChannelChangeUpdater(nextState, (0, _actions.layerVisualChannelConfigChange)(oldLayer, (0, _lodash4["default"])(newLayer.config, channelPropNames), channelName));
        var _iterator = _createForOfIteratorHelper(channelPropNames),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var prop = _step.value;
            delete changed[prop];
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    });
    if (Object.keys(changed).length > 0) {
      nextState = layerConfigChangeUpdater(nextState, (0, _actions.layerConfigChange)(oldLayer, (0, _lodash4["default"])(newLayer.config, Object.keys(changed))));
    }
  }
  return nextState;
}
function updatelayerVisibilty(state, newLayer, isVisible) {
  var newState = updateStateOnLayerVisibilityChange(state, newLayer);
  var filterIndex = filterSyncedWithTimeline(state);
  if ((0, _utils.isLayerAnimatable)(newLayer) && filterIndex !== -1) {
    // if layer is going to be visible we sync with filter otherwise we need to check whether other animatable layers exists and are visible
    newState = syncTimeFilterWithLayerTimelineUpdater(newState, {
      idx: filterIndex,
      enable: isVisible ? isVisible : (0, _utils.getAnimatableVisibleLayers)(state.layers).length > 0
    });
  }
  return newState;
}

/**
 * Update layer base config: dataId, label, column, isVisible
 * @memberof visStateUpdaters
 * @returns nextState
 */
// eslint-disable-next-line complexity
function layerConfigChangeUpdater(state, action) {
  var oldLayer = action.oldLayer;
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldLayer.id;
  });
  var props = Object.keys(action.newConfig);
  if (typeof action.newConfig.dataId === 'string' && action.newConfig.dataId !== oldLayer.config.dataId) {
    var _action$newConfig = action.newConfig,
      dataId = _action$newConfig.dataId,
      restConfig = (0, _objectWithoutProperties2["default"])(_action$newConfig, _excluded);
    var stateWithDataId = layerDataIdChangeUpdater(state, {
      oldLayer: oldLayer,
      newConfig: {
        dataId: dataId
      }
    });
    var nextLayer = stateWithDataId.layers.find(function (l) {
      return l.id === oldLayer.id;
    });
    return nextLayer && Object.keys(restConfig).length ? layerConfigChangeUpdater(stateWithDataId, {
      oldLayer: nextLayer,
      newConfig: restConfig
    }) : stateWithDataId;
  }
  var newLayer = oldLayer.updateLayerConfig(action.newConfig);
  var layerData;
  if (newLayer.shouldCalculateLayerData(props)) {
    var oldLayerData = state.layerData[idx];
    var updateLayerDataResult = (0, _layerUtils.calculateLayerData)(newLayer, state, oldLayerData);
    newLayer = updateLayerDataResult.layer;
    layerData = updateLayerDataResult.layerData;
  }
  var newState = state;
  if ('isVisible' in action.newConfig) {
    newState = updatelayerVisibilty(newState, newLayer, action.newConfig.isVisible);
  }
  if ('columns' in action.newConfig && newLayer.config.animation.enabled) {
    // TODO: Shan, make the animation config function more robust
    newState = updateAnimationDomain(newState);
  }
  return updateStateWithLayerAndData(newState, {
    layer: newLayer,
    layerData: layerData,
    idx: idx
  });
}
function layerAnimationChangeUpdater(state, action) {
  var oldLayer = action.oldLayer,
    prop = action.prop,
    value = action.value;
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldLayer.id;
  });
  var newLayer = oldLayer.updateLayerConfig({
    animation: _objectSpread(_objectSpread({}, oldLayer.config.animation), {}, (0, _defineProperty2["default"])({}, prop, value))
  });
  var _calculateLayerData = (0, _layerUtils.calculateLayerData)(newLayer, state, state.layerData[idx]),
    layerData = _calculateLayerData.layerData,
    layer = _calculateLayerData.layer;
  return updateStateWithLayerAndData(state, {
    layerData: layerData,
    layer: layer,
    idx: idx
  });
}

/**
 * Update layerId, isVisible, splitMapId
 * handles two cases:
 * 1) toggle the visibility of local SplitMap layer (visState.splitMap.layers)
 * 2) toggle the visibility of global layer (visState.layers)

 * @memberof visStateUpdaters
 * @returns nextState
 */
function layerToggleVisibilityUpdater(state, action) {
  var layerId = action.layerId,
    isVisible = action.isVisible,
    splitMapId = action.splitMapId;
  var layer = state.layers.find(function (d) {
    return d.id === layerId;
  });
  if (!layer) {
    return state;
  }
  var newState = state;
  if (splitMapId) {
    // [case 1]: toggle local layer visibility for each SplitMap
    var mapIndex = newState.splitMaps.findIndex(function (sm) {
      return sm.id === splitMapId;
    });
    if (isVisible) {
      // 1) if the layer is invisible globally
      // -> set global visibility to true
      newState = layerConfigChangeUpdater(newState, (0, _actions.layerConfigChange)(layer, {
        isVisible: true
      }));

      // -> set local visibility to true and the local visibilities of all other SplitMaps to false
      return _objectSpread(_objectSpread({}, newState), {}, {
        splitMaps: newState.splitMaps.map(function (sm) {
          return sm.id !== splitMapId ? _objectSpread(_objectSpread({}, sm), {}, {
            layers: _objectSpread(_objectSpread({}, sm.layers), {}, (0, _defineProperty2["default"])({}, layerId, false))
          }) : _objectSpread(_objectSpread({}, sm), {}, {
            layers: _objectSpread(_objectSpread({}, sm.layers), {}, (0, _defineProperty2["default"])({}, layerId, true))
          });
        })
      });
    }
    // 2) else when the layer is visible globally
    return toggleLayerForMapUpdater(newState, (0, _actions.toggleLayerForMap)(mapIndex, layerId));
  } else {
    // [case 2]: toggle global layer visibility
    var newLayer = layer.updateLayerConfig({
      isVisible: isVisible
    });
    var idx = newState.layers.findIndex(function (l) {
      return l.id === layerId;
    });
    newState = updatelayerVisibilty(newState, newLayer, isVisible);
    return updateStateWithLayerAndData(newState, {
      layer: newLayer,
      idx: idx
    });
  }
}

/**
 *
 * @param state
 * @returns index of the filter synced to timeline or -1
 */
function filterSyncedWithTimeline(state) {
  return state.filters.findIndex(function (f) {
    return f.syncedWithLayerTimeline;
  });
}

/**
 * Updates isValid flag of a layer.
 * Updates isVisible based on the value of isValid.
 * Triggers update of data for the layer in order to get errors again during next update iteration.
 * @memberof visStateUpdaters
 * @returns nextState
 */
function layerSetIsValidUpdater(state, action) {
  var oldLayer = action.oldLayer,
    isValid = action.isValid;
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldLayer.id;
  });
  var layerToUpdate = state.layers[idx];
  if (layerToUpdate) {
    var newLayer;
    var newData = null;
    if (isValid) {
      // Trigger data update in order to show errors again if present.
      var _calculateLayerData2 = (0, _layerUtils.calculateLayerData)(layerToUpdate, state, undefined),
        layer = _calculateLayerData2.layer,
        layerData = _calculateLayerData2.layerData;
      newLayer = layer;
      newData = layerData;
    } else {
      newLayer = layerToUpdate.updateLayerConfig({
        isVisible: false
      });
      newLayer.isValid = false;
    }
    return updateStateWithLayerAndData(state, {
      idx: idx,
      layer: newLayer,
      layerData: newData
    });
  }
  return state;
}
function addOrRemoveTextLabels(newFields, textLabel) {
  var defaultTextLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.DEFAULT_TEXT_LABEL;
  var newTextLabel = textLabel.slice();
  var currentFields = textLabel.map(function (tl) {
    return tl.field && tl.field.name;
  }).filter(function (d) {
    return d;
  });
  var addFields = newFields.filter(function (f) {
    return !currentFields.includes(f.name);
  });
  var deleteFields = currentFields.filter(function (f) {
    return !newFields.find(function (fd) {
      return fd.name === f;
    });
  });

  // delete
  newTextLabel = newTextLabel.filter(function (tl) {
    return tl.field && !deleteFields.includes(tl.field.name);
  });
  newTextLabel = !newTextLabel.length ? [defaultTextLabel] : newTextLabel;

  // add
  newTextLabel = [].concat((0, _toConsumableArray2["default"])(newTextLabel.filter(function (tl) {
    return tl.field;
  })), (0, _toConsumableArray2["default"])(addFields.map(function (af) {
    return _objectSpread(_objectSpread({}, defaultTextLabel), {}, {
      field: af
    });
  })));
  return newTextLabel;
}
function updateTextLabelPropAndValue(idx, prop, value, textLabel) {
  if (!Object.prototype.hasOwnProperty.call(textLabel[idx], prop)) {
    return textLabel;
  }
  var newTextLabel = textLabel.slice();
  if (prop === 'field' && value === null && textLabel.length > 1) {
    // remove label when field value is set to null
    newTextLabel.splice(idx, 1);
  } else if (prop) {
    newTextLabel = textLabel.map(function (tl, i) {
      return i === idx ? _objectSpread(_objectSpread({}, tl), {}, (0, _defineProperty2["default"])({}, prop, value)) : tl;
    });
  }
  return newTextLabel;
}

/**
 * Update layer base config: dataId, label, column, isVisible
 * @memberof visStateUpdaters
 * @returns nextState
 */
function layerTextLabelChangeUpdater(state, action) {
  var _oldLayer$getDefaultL, _oldLayer$getDefaultL2;
  var oldLayer = action.oldLayer,
    idx = action.idx,
    prop = action.prop,
    value = action.value;
  var textLabel = oldLayer.config.textLabel;

  // when adding a new empty text label,
  // rely on the layer's default config, or use the constant DEFAULT_TEXT_LABEL
  var defaultTextLabel = (_oldLayer$getDefaultL = (_oldLayer$getDefaultL2 = oldLayer.getDefaultLayerConfig({
    dataId: ''
  })) === null || _oldLayer$getDefaultL2 === void 0 || (_oldLayer$getDefaultL2 = _oldLayer$getDefaultL2.textLabel) === null || _oldLayer$getDefaultL2 === void 0 ? void 0 : _oldLayer$getDefaultL2[0]) !== null && _oldLayer$getDefaultL !== void 0 ? _oldLayer$getDefaultL : _constants.DEFAULT_TEXT_LABEL;
  var newTextLabel = textLabel.slice();
  if (!textLabel[idx] && idx === textLabel.length) {
    // if idx is set to length, add empty text label
    newTextLabel = [].concat((0, _toConsumableArray2["default"])(textLabel), [defaultTextLabel]);
  }
  if (idx === 'all' && prop === 'fields') {
    newTextLabel = addOrRemoveTextLabels(value, textLabel, defaultTextLabel);
  } else {
    newTextLabel = updateTextLabelPropAndValue(idx, prop, value, newTextLabel);
  }
  // update text label prop and value
  return layerConfigChangeUpdater(state, {
    oldLayer: oldLayer,
    newConfig: {
      textLabel: newTextLabel
    }
  });
}
function validateExistingLayerWithData(dataset, layerClasses, layer, schema) {
  var loadedLayer = (0, _visStateMerger.serializeLayer)(layer, schema);
  return loadedLayer ? (0, _visStateMerger.validateLayerWithData)(dataset, loadedLayer, layerClasses, {
    allowEmptyColumn: true
  }) : null;
}

/**
 * Update layer config dataId
 * @memberof visStateUpdaters
 * @returns nextState
 */
function layerDataIdChangeUpdater(state, action) {
  var oldLayer = action.oldLayer,
    newConfig = action.newConfig;
  var dataId = newConfig.dataId;
  if (!oldLayer || !state.datasets[dataId]) {
    return state;
  }
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldLayer.id;
  });
  var newLayer = oldLayer.updateLayerConfig({
    dataId: dataId
  });

  // this may happen when a layer is new (type: null and no columns) but it's not ready to be saved
  if (newLayer.isValidToSave()) {
    var validated = validateExistingLayerWithData(state.datasets[dataId], state.layerClasses, newLayer, state.schema);
    // if cant validate it with data create a new one
    if (!validated) {
      var oldLayerType = oldLayer.type;
      if (oldLayerType) {
        newLayer = new state.layerClasses[oldLayerType]({
          dataId: dataId,
          id: oldLayer.id
        });
      }
    } else {
      newLayer = validated;
    }
  }
  newLayer = newLayer.updateLayerConfig({
    isVisible: oldLayer.config.isVisible,
    isConfigActive: true
  });
  newLayer.updateLayerDomain(state.datasets);
  var _calculateLayerData3 = (0, _layerUtils.calculateLayerData)(newLayer, state, undefined),
    layerData = _calculateLayerData3.layerData,
    layer = _calculateLayerData3.layer;
  return updateStateWithLayerAndData(state, {
    layerData: layerData,
    layer: layer,
    idx: idx
  });
}
function setInitialLayerConfig(layer, datasets, layerClasses) {
  var newLayer = layer;
  if (!Object.keys(datasets).length) {
    // no data is loaded
    return layer;
  }
  if (!layer.config.dataId) {
    // set layer dataId
    newLayer = layer.updateLayerConfig({
      dataId: Object.keys(datasets)[0]
    });
  }
  var dataset = datasets[newLayer.config.dataId];
  if (!dataset) {
    return layer;
  }

  // find defaut layer props
  var result = typeof layerClasses[newLayer.type].findDefaultLayerProps === 'function' ? layerClasses[newLayer.type].findDefaultLayerProps(dataset, []) : {
    props: []
  };

  // an array of possible props, use 1st one
  var props = Array.isArray(result) ? result : result.props || [];
  if (props.length) {
    newLayer = new layerClasses[layer.type](_objectSpread(_objectSpread({}, props[0]), {}, {
      label: newLayer.config.label,
      dataId: newLayer.config.dataId,
      isConfigActive: newLayer.config.isConfigActive
    }));
  }
  return typeof newLayer.setInitialLayerConfig === 'function' ? newLayer.setInitialLayerConfig(dataset) : newLayer;
}
/**
 * Update layer type. Previews layer config will be copied if applicable.
 * @memberof visStateUpdaters
 * @public
 */
function layerTypeChangeUpdater(state, action) {
  var oldLayer = action.oldLayer,
    newType = action.newType;
  if (!oldLayer) {
    return state;
  }
  var oldId = oldLayer.id;
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldId;
  });
  if (!state.layerClasses[newType]) {
    _window.console.error("".concat(newType, " is not a valid layer type"));
    return state;
  }
  var newLayer = new state.layerClasses[newType]({
    // keep old layer lable and isConfigActive
    label: oldLayer.config.label,
    isConfigActive: oldLayer.config.isConfigActive,
    dataId: oldLayer.config.dataId
  });
  if (!oldLayer.type) {
    // if setting layer type on an empty layer
    newLayer = setInitialLayerConfig(newLayer, state.datasets, state.layerClasses);
  } else {
    // get a mint layer, with new id and type
    // because deck.gl uses id to match between new and old layer.
    // If type has changed but id is the same, it will break

    var defaultLayerProps = typeof state.layerClasses[newType].findDefaultLayerProps === 'function' ? state.layerClasses[newType].findDefaultLayerProps(state.datasets[newLayer.config.dataId]) : null;
    newLayer.assignConfigToLayer(oldLayer.config, oldLayer.visConfigSettings, state.datasets, defaultLayerProps);
    newLayer.updateLayerDomain(state.datasets);
  }
  var clicked = state.clicked,
    hoverInfo = state.hoverInfo;
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    clicked: oldLayer.isLayerHovered(clicked) ? undefined : clicked,
    hoverInfo: oldLayer.isLayerHovered(hoverInfo) ? undefined : hoverInfo
  });
  var _calculateLayerData4 = (0, _layerUtils.calculateLayerData)(newLayer, newState),
    layerData = _calculateLayerData4.layerData,
    layer = _calculateLayerData4.layer;
  newState = updateStateWithLayerAndData(newState, {
    layerData: layerData,
    layer: layer,
    idx: idx
  });
  if (layer.config.animation.enabled || oldLayer.config.animation.enabled) {
    newState = updateAnimationDomain(newState);
  }

  // update splitMap layer id
  if (state.splitMaps.length) {
    newState = _objectSpread(_objectSpread({}, newState), {}, {
      splitMaps: newState.splitMaps.map(function (settings) {
        var _settings$layers = settings.layers,
          oldLayerMap = _settings$layers[oldId],
          otherLayers = (0, _objectWithoutProperties2["default"])(_settings$layers, [oldId].map(_toPropertyKey));
        return oldId in settings.layers ? _objectSpread(_objectSpread({}, settings), {}, {
          layers: _objectSpread(_objectSpread({}, otherLayers), {}, (0, _defineProperty2["default"])({}, layer.id, oldLayerMap))
        }) : settings;
      })
    });
  }

  // update layerOrder with new id
  newState = _objectSpread(_objectSpread({}, newState), {}, {
    layerOrder: newState.layerOrder.map(function (layerId) {
      return layerId === oldLayer.id ? newLayer.id : layerId;
    })
  });
  return newState;
}

/**
 * Update layer visual channel
 * @memberof visStateUpdaters
 * @returns {Object} nextState
 * @public
 */
function layerVisualChannelChangeUpdater(state, action) {
  var oldLayer = action.oldLayer,
    newConfig = action.newConfig,
    newVisConfig = action.newVisConfig,
    channel = action.channel;
  if (!oldLayer.config.dataId) {
    return state;
  }
  var dataset = state.datasets[oldLayer.config.dataId];
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldLayer.id;
  });
  var newLayer = oldLayer.updateLayerConfig(newConfig);
  if (newVisConfig) newLayer = newLayer.updateLayerVisConfig(newVisConfig);
  newLayer.updateLayerVisualChannel(dataset, channel);

  // calling update animation domain first to merge all layer animation domain
  var updatedState = updateAnimationDomain(state);
  var visualChannel = oldLayer.visualChannels[channel];
  if ((visualChannel === null || visualChannel === void 0 ? void 0 : visualChannel.channelScaleType) === _constants.CHANNEL_SCALES.color && newConfig[visualChannel.field]) {
    // if color field changed, set customBreaks to false
    newLayer.updateLayerColorUI(visualChannel.range, {
      colorRangeConfig: _objectSpread(_objectSpread({}, newLayer.config.colorUI[visualChannel.range].colorRangeConfig), {}, {
        customBreaks: false
      })
    });
    updatedState = _objectSpread(_objectSpread({}, updatedState), {}, {
      layers: updatedState.layers.map(function (l) {
        return l.id === oldLayer.id ? newLayer : l;
      })
    });
  }
  var oldLayerData = updatedState.layerData[idx];
  var _calculateLayerData5 = (0, _layerUtils.calculateLayerData)(newLayer, updatedState, oldLayerData),
    layerData = _calculateLayerData5.layerData,
    layer = _calculateLayerData5.layer;
  if ((visualChannel === null || visualChannel === void 0 ? void 0 : visualChannel.channelScaleType) === _constants.CHANNEL_SCALES.color && newConfig[visualChannel === null || visualChannel === void 0 ? void 0 : visualChannel.scale] === _constants.SCALE_TYPES.customOrdinal && !newVisConfig) {
    // when switching to customOrdinal scale, create a customPalette in colorUI with updated colorDomain
    var customPalette = (0, _utils.initCustomPaletteByCustomScale)({
      scale: _constants.SCALE_TYPES.customOrdinal,
      field: layer.config[visualChannel.field],
      ordinalDomain: layer.config[layer.visualChannels[channel].domain],
      range: layer.config.visConfig[visualChannel.range],
      colorBreaks: null
    });
    // update colorRange with new customPalette
    layer.updateLayerColorUI(visualChannel.range, {
      showColorChart: true,
      colorRangeConfig: _objectSpread(_objectSpread({}, layer.config.colorUI[visualChannel.range].colorRangeConfig), {}, {
        customBreaks: true
      }),
      customPalette: customPalette
    });
  }
  return updateStateWithLayerAndData(updatedState, {
    layerData: layerData,
    layer: layer,
    idx: idx
  });
}

/**
 * Update layer `visConfig`
 * @memberof visStateUpdaters
 * @public
 */
function layerVisConfigChangeUpdater(state, action) {
  var oldLayer = action.oldLayer;
  var idx = state.layers.findIndex(function (l) {
    return l.id === oldLayer.id;
  });
  var props = Object.keys(action.newVisConfig);
  var newVisConfig = _objectSpread(_objectSpread({}, oldLayer.config.visConfig), action.newVisConfig);
  var newLayer = oldLayer.updateLayerConfig({
    visConfig: newVisConfig
  });
  if (newLayer.shouldCalculateLayerData(props)) {
    var oldLayerData = state.layerData[idx];
    var _calculateLayerData6 = (0, _layerUtils.calculateLayerData)(newLayer, state, oldLayerData),
      layerData = _calculateLayerData6.layerData,
      layer = _calculateLayerData6.layer;
    return updateStateWithLayerAndData(state, {
      layerData: layerData,
      layer: layer,
      idx: idx
    });
  }
  return updateStateWithLayerAndData(state, {
    layer: newLayer,
    idx: idx
  });
}

/**
 * Reset animation config current time to a specified value
 * @memberof visStateUpdaters
 * @public
 *
 */
var setLayerAnimationTimeUpdater = exports.setLayerAnimationTimeUpdater = function setLayerAnimationTimeUpdater(state, _ref2) {
  var value = _ref2.value;
  var currentTime = Array.isArray(value) ? value[0] : value;
  var nextState = _objectSpread(_objectSpread({}, state), {}, {
    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {
      currentTime: currentTime
    })
  });
  // update animation config for each layer
  return state.layers.reduce(function (accu, l) {
    if (l.config.animation.enabled && l.type !== 'trip') {
      return layerAnimationChangeUpdater(accu, {
        oldLayer: l,
        prop: 'currentTime',
        currentTime: currentTime
      });
    }
    return accu;
  }, nextState);
};

/**
 * Update filter property
 * @memberof visStateUpdaters
 * @public
 */
function setFilterAnimationTimeUpdater(state, action) {
  return setFilterUpdater(state, action);
}

/**
 * Update filter animation window
 * @memberof visStateUpdaters
 * @public
 */
function setFilterAnimationWindowUpdater(state, _ref3) {
  var id = _ref3.id,
    animationWindow = _ref3.animationWindow;
  var filter = state.filters.find(function (f) {
    return f.id === id;
  });
  if (!filter) {
    return state;
  }
  var newFilter = _objectSpread(_objectSpread({}, filter), {}, {
    animationWindow: animationWindow
  });
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    filters: (0, _composerHelpers.swap_)(newFilter)(state.filters)
  });
  var newSyncTimelineMode = getSyncAnimationMode(newFilter);
  return setTimeFilterTimelineModeUpdater(newState, {
    id: id,
    mode: newSyncTimelineMode
  });
}
function applyFilterConfigUpdater(state, action) {
  var _serializeFilter;
  var filterId = action.filterId,
    newFilter = action.newFilter;
  var oldFilter = state.filters.find(function (f) {
    return f.id === filterId;
  });
  if (!oldFilter) {
    return state;
  }

  // Serialize the filters to only compare the saved properties
  var serializedOldFilter = (_serializeFilter = (0, _visStateMerger.serializeFilter)(oldFilter, state.schema)) !== null && _serializeFilter !== void 0 ? _serializeFilter : {
    config: {}
  };
  var serializedNewFilter = (0, _visStateMerger.serializeFilter)(newFilter, state.schema);
  if (!serializedNewFilter || (0, _lodash3["default"])(serializedOldFilter, serializedNewFilter)) {
    return state;
  }

  // If there are any changes to the filter, apply them
  var changed = pickChangedProps(serializedOldFilter, serializedNewFilter);
  delete changed['id']; // id should not be changed

  var filterIndex = state.filters.findIndex(function (f) {
    return f.id === filterId;
  });
  if (filterIndex < 0) {
    return state;
  }
  return setFilterUpdater(state, (0, _actions.setFilter)(filterIndex, Object.keys(changed), Object.values(changed)));
}

/**
 * Update filter property
 * @memberof visStateUpdaters
 * @public
 */
function setFilterUpdater(state, action) {
  var idx = action.idx,
    _action$valueIndex = action.valueIndex,
    valueIndex = _action$valueIndex === void 0 ? 0 : _action$valueIndex;
  var oldFilter = state.filters[idx];
  if (!oldFilter) {
    _window.console.error("filters.".concat(idx, " is undefined"));
    return state;
  }
  if (Array.isArray(action.prop) && (!Array.isArray(action.value) || action.prop.length !== action.value.length)) {
    _window.console.error('Expecting value to be an array of the same length, since prop is an array');
    return state;
  }
  // convert prop and value to array
  var props = (0, _commonUtils.toArray)(action.prop);
  var values = Array.isArray(action.prop) ? (0, _commonUtils.toArray)(action.value) : [action.value];
  var newFilter = oldFilter;
  var newState = state;
  var datasetIdsToFilter = [];
  var _loop = function _loop() {
    var prop = props[i];
    var value = values[i];
    // We currently do not support passing in name as an array into _updateFilterProp, so we call it multiple times with each name
    // See the comment in there as to what should be addressed
    var res;
    if (prop === 'name' && Array.isArray(value)) {
      // eslint-disable-next-line no-loop-func
      res = value.reduce(function (accu, v) {
        return _updateFilterProp(accu, newFilter, prop, v, valueIndex);
      }, newState);
    } else {
      res = _updateFilterProp(newState, newFilter, prop, value, valueIndex);
    }
    newFilter = res.filter;
    newState = res.state;
    datasetIdsToFilter = datasetIdsToFilter.concat(res.datasetIdsToFilter);
  };
  for (var i = 0; i < props.length; i++) {
    _loop();
  }
  var enlargedFilter = state.filters.find(function (f) {
    return f.view === _constants.FILTER_VIEW_TYPES.enlarged;
  });
  if (enlargedFilter && enlargedFilter.id !== newFilter.id) {
    // there should be only one enlarged filter
    newFilter.view = _constants.FILTER_VIEW_TYPES.side;
  }

  // save new filters to newState
  newState = (0, _utils.set)(['filters', idx], newFilter, newState);

  // filter data
  var filteredDatasets = (0, _utils.applyFiltersToDatasets)((0, _lodash5["default"])(datasetIdsToFilter), newState.datasets, newState.filters, newState.layers);
  newState = (0, _utils.set)(['datasets'], filteredDatasets, newState);

  // need to update filterPlot after filter Dataset for plot to update on filtered result
  var filterWithPLot = (0, _utils.updateFilterPlot)(newState.datasets, newState.filters[idx]);
  newState = (0, _utils.set)(['filters', idx], filterWithPLot, newState);

  // dataId is an array
  // pass only the dataset we need to update
  newState = updateAllLayerDomainData(newState, datasetIdsToFilter, newFilter);

  // If time range filter value was updated, adjust animation config
  if (newFilter.type === _constants.FILTER_TYPES.timeRange && props.includes('value')) {
    newState = adjustAnimationConfigWithFilter(newState, action.idx);
  }
  return newState;
}
function _updateFilterDataIdAtValueIndex(filter, valueIndex, value, datasets) {
  var newFilter = filter;
  if (filter.dataId[valueIndex]) {
    // if dataId already exist
    newFilter = _removeFilterDataIdAtValueIndex(filter, valueIndex, datasets);
  }
  if (value) {
    var nextValue = newFilter.dataId.slice();
    nextValue[valueIndex] = value;
    newFilter = (0, _utils.set)(['dataId'], nextValue, newFilter);
  }
  return newFilter;
}
function _removeFilterDataIdAtValueIndex(filter, valueIndex, datasets) {
  var dataId = filter.dataId[valueIndex];
  if (filter.dataId.length === 1 && valueIndex === 0) {
    // if remove the only dataId, create an empty filter instead;
    return (0, _utils.getDefaultFilter)({
      id: filter.id
    });
  }
  if (dataId) {
    filter = (0, _utils.removeFilterPlot)(filter, dataId);
  }
  for (var _i = 0, _arr = ['dataId', 'name', 'fieldIdx', 'gpuChannel']; _i < _arr.length; _i++) {
    var prop = _arr[_i];
    if (Array.isArray(filter[prop])) {
      var nextVal = filter[prop].slice();
      nextVal.splice(valueIndex, 1);
      filter = (0, _utils.set)([prop], nextVal, filter);
    }
  }

  // mergeFieldDomain for the remaining fields
  var domainSteps = (0, _utils.mergeFilterDomain)(filter, datasets);
  var nextFilter = _objectSpread(_objectSpread({}, filter), domainSteps ? {
    domain: domainSteps === null || domainSteps === void 0 ? void 0 : domainSteps.domain,
    step: domainSteps === null || domainSteps === void 0 ? void 0 : domainSteps.step
  } : {});
  var nextValue = (0, _utils.adjustValueToFilterDomain)(nextFilter.value, nextFilter);
  return _objectSpread(_objectSpread({}, nextFilter), {}, {
    value: nextValue
  });
}

/** *
 * Updates a single property of a filter
 */
function _updateFilterProp(state, filter, prop, value, valueIndex, datasetIds) {
  var datasetIdsToFilter = [];
  switch (prop) {
    // TODO: Next PR for UI if we update filterDataId, we need to consider two cases:
    // 1. dataId is empty: create a default filter
    // 2. Add a new dataset id
    case _utils.FILTER_UPDATER_PROPS.dataId:
      {
        var oldDataId = (0, _toConsumableArray2["default"])(filter.dataId);
        filter = _updateFilterDataIdAtValueIndex(filter, valueIndex, value, state.datasets);
        datasetIdsToFilter = (0, _lodash5["default"])([].concat((0, _toConsumableArray2["default"])(oldDataId), (0, _toConsumableArray2["default"])(filter.dataId)));
        break;
      }
    case _utils.FILTER_UPDATER_PROPS.name:
      {
        // we are supporting the current functionality
        // TODO: Next PR for UI filter name will only update filter name but it won't have side effects
        // we are gonna use pair of datasets and fieldIdx to update the filter
        var datasetId = filter.dataId[valueIndex];
        var _applyFilterFieldName = (0, _utils.applyFilterFieldName)(filter, state.datasets, datasetId, value, valueIndex, {
            mergeDomain: valueIndex > 0
          }),
          updatedFilter = _applyFilterFieldName.filter,
          newDataset = _applyFilterFieldName.dataset;
        if (updatedFilter) {
          filter = updatedFilter;
          if (filter.gpu) {
            filter = (0, _table.setFilterGpuMode)(filter, state.filters);
            filter = (0, _table.assignGpuChannel)(filter, state.filters);
          }
          state = (0, _utils.set)(['datasets', datasetId], newDataset, state);
          // remove filter Plot at datasetId, so it will be recalculated
          filter = (0, _utils.removeFilterPlot)(filter, datasetId);
          datasetIdsToFilter = updatedFilter.dataId;
        }
        // only filter the current dataset
        break;
      }
    case _utils.FILTER_UPDATER_PROPS.layerId:
      {
        // We need to update only datasetId/s if we have added/removed layers
        // - check for layerId changes (XOR works because of string values)
        // if no differences between layerIds, don't do any filtering
        // @ts-ignore
        var layerIdDifference = (0, _lodash6["default"])(value, filter.layerId);
        var layerDataIds = (0, _lodash5["default"])(layerIdDifference.map(function (lid) {
          return (0, _lodash2["default"])(state.layers.find(function (l) {
            return l.id === lid;
          }), ['config', 'dataId']);
        }).filter(function (d) {
          return d;
        }));

        // only filter datasetsIds
        datasetIdsToFilter = layerDataIds;

        // Update newFilter dataIds
        var newDataIds = (0, _lodash5["default"])(value === null || value === void 0 ? void 0 : value.map(function (lid) {
          return (0, _lodash2["default"])(state.layers.find(function (l) {
            return l.id === lid;
          }), ['config', 'dataId']);
        }).filter(function (d) {
          return d;
        }));
        filter = _objectSpread(_objectSpread({}, filter), {}, {
          layerId: value,
          dataId: newDataIds
        });
        break;
      }
    default:
      filter = (0, _utils.set)([prop], value, filter);
      datasetIdsToFilter = (0, _toConsumableArray2["default"])(filter.dataId);
      break;
  }
  return {
    filter: filter,
    datasetIds: datasetIds,
    datasetIdsToFilter: datasetIdsToFilter,
    state: state
  };
}
/* eslint-enable max-statements */

/**
 * Set the property of a filter plot
 * @memberof visStateUpdaters
 * @public
 */
var setFilterPlotUpdater = exports.setFilterPlotUpdater = function setFilterPlotUpdater(state, _ref4) {
  var idx = _ref4.idx,
    newProp = _ref4.newProp;
  if (!state.filters[idx]) {
    _window.console.error("filters[".concat(idx, "] is undefined"));
    return state;
  }
  var newFilter = state.filters[idx];
  for (var prop in newProp) {
    if (prop === 'plotType') {
      newFilter = (0, _composerHelpers.pick_)('plotType')((0, _composerHelpers.merge_)(newProp.plotType))(newFilter);
    } else if (prop === 'yAxis') {
      var chartType = newProp.yAxis ? _constants.PLOT_TYPES.lineChart : _constants.PLOT_TYPES.histogram;
      newFilter = (0, _composerHelpers.pick_)('plotType')((0, _composerHelpers.merge_)({
        type: chartType
      }))((0, _composerHelpers.merge_)(newProp)(newFilter));
    }
  }
  newFilter = (0, _utils.updateFilterPlot)(state.datasets, newFilter);
  return _objectSpread(_objectSpread({}, state), {}, {
    filters: state.filters.map(function (f, i) {
      return i === idx ? newFilter : f;
    })
  });
};

/**
 * Add a new filter
 * @memberof visStateUpdaters
 * @public
 */
var addFilterUpdater = exports.addFilterUpdater = function addFilterUpdater(state, action) {
  return !action.dataId ? state : _objectSpread(_objectSpread({}, state), {}, {
    filters: [].concat((0, _toConsumableArray2["default"])(state.filters), [(0, _utils.getDefaultFilter)({
      dataId: action.dataId,
      id: action.id
    })])
  });
};

/**
 * Create or update a filter
 * @memberof visStateUpdaters
 * @public
 */
var createOrUpdateFilterUpdater = exports.createOrUpdateFilterUpdater = function createOrUpdateFilterUpdater(state, action) {
  var id = action.id,
    dataId = action.dataId,
    field = action.field,
    value = action.value;
  var newState = state;
  var originalIndex = newState.filters.findIndex(function (f) {
    return f.id === id;
  });
  var filterIndex = originalIndex;
  if (!id && !dataId) {
    return newState;
  }
  if (originalIndex < 0 && dataId) {
    newState = addFilterUpdater(newState, {
      dataId: dataId
    });
    if (newState.filters.length !== state.filters.length + 1) {
      // No new filter was added
      return state;
    }
    // Here we are assuming that the filter was added at the end
    filterIndex = newState.filters.length - 1;
    newState.filters[filterIndex] = _objectSpread(_objectSpread({}, newState.filters[filterIndex]), id ? {
      id: id
    } : null);
  }

  // No need to update this if it's a newly created filter
  // First we make sure all the dataIds that fields refer to are updated
  if (originalIndex >= 0 && dataId) {
    // If the dataId is an array, we need to update each one individually as they need a correct valueIndex passed
    newState = (Array.isArray(dataId) ? dataId : [dataId]).reduce(function (accu, d, index) {
      return setFilterUpdater(accu, {
        idx: filterIndex,
        prop: 'dataId',
        value: d,
        valueIndex: index
      });
    }, newState);
  }
  // Then we update the fields
  if (field) {
    // If the field is an array, we need to update each field individually as they need a correct valueIndex passed
    newState = (Array.isArray(field) ? field : [field]).reduce(function (accu, f, index) {
      return setFilterUpdater(accu, {
        idx: filterIndex,
        prop: 'name',
        value: f,
        valueIndex: index
      });
    }, newState);
  }
  // Then we update the value separately
  if (value !== null && typeof value !== 'undefined') {
    newState = setFilterUpdater(newState, {
      idx: filterIndex,
      prop: 'value',
      value: value
    });
  }
  return newState;
};

/**
 * Set layer color palette ui state
 * @memberof visStateUpdaters
 */
var layerColorUIChangeUpdater = exports.layerColorUIChangeUpdater = function layerColorUIChangeUpdater(state, _ref5) {
  var oldLayer = _ref5.oldLayer,
    prop = _ref5.prop,
    newConfig = _ref5.newConfig;
  var oldVixConfig = oldLayer.config.visConfig[prop];
  var newLayer = oldLayer.updateLayerColorUI(prop, newConfig);
  var newVisConfig = newLayer.config.visConfig[prop];
  if (oldVixConfig !== newVisConfig) {
    return layerVisConfigChangeUpdater(state, {
      oldLayer: oldLayer,
      newVisConfig: (0, _defineProperty2["default"])({}, prop, newVisConfig)
    });
  }
  return _objectSpread(_objectSpread({}, state), {}, {
    layers: state.layers.map(function (l) {
      return l.id === oldLayer.id ? newLayer : l;
    })
  });
};

/**
 * Start and end filter animation
 * @memberof visStateUpdaters
 * @public
 */
var toggleFilterAnimationUpdater = exports.toggleFilterAnimationUpdater = function toggleFilterAnimationUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    filters: state.filters.map(function (f, i) {
      return i === action.idx ? _objectSpread(_objectSpread({}, f), {}, {
        isAnimating: !f.isAnimating
      }) : f;
    })
  });
};
function isFilterAnimationConfig(config) {
  return 'dataId' in config && 'animationWindow' in config;
}
function setAnimationConfigUpdater(state, action) {
  var config = action.config;
  if (isFilterAnimationConfig(config)) {
    // Find filter used for animation
    // Assuming there's only one filter used for animation, see setFilterViewUpdater
    var filter = state.filters.find(function (f) {
      return !(0, _utils.isSideFilter)(f);
    });
    if (!filter) {
      return state;
    }
    var newFilter = _objectSpread(_objectSpread({}, filter), config);
    return applyFilterConfigUpdater(state, (0, _actions.applyFilterConfig)(filter.id, newFilter));
  } else {
    return _objectSpread(_objectSpread({}, state), {}, {
      animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), config)
    });
  }
}

/**
 * @memberof visStateUpdaters
 * @public
 */
var toggleLayerAnimationUpdater = exports.toggleLayerAnimationUpdater = function toggleLayerAnimationUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {
      isAnimating: !state.animationConfig.isAnimating
    })
  });
};

/**
 * Hide and show layer animation control
 * @memberof visStateUpdaters
 * @public
 */
var toggleLayerAnimationControlUpdater = exports.toggleLayerAnimationControlUpdater = function toggleLayerAnimationControlUpdater(state) {
  return _objectSpread(_objectSpread({}, state), {}, {
    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {
      hideControl: !state.animationConfig.hideControl
    })
  });
};

/**
 * Change filter animation speed
 * @memberof visStateUpdaters
 * @public
 */
var updateFilterAnimationSpeedUpdater = exports.updateFilterAnimationSpeedUpdater = function updateFilterAnimationSpeedUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    filters: state.filters.map(function (f, i) {
      return i === action.idx ? _objectSpread(_objectSpread({}, f), {}, {
        speed: action.speed
      }) : f;
    })
  });
};

/**
 * Update animation speed with the vertical speed slider
 * @memberof visStateUpdaters
 * @public
 *
 */
var updateLayerAnimationSpeedUpdater = exports.updateLayerAnimationSpeedUpdater = function updateLayerAnimationSpeedUpdater(state, _ref6) {
  var speed = _ref6.speed;
  return _objectSpread(_objectSpread({}, state), {}, {
    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {
      speed: speed
    })
  });
};

/**
 * Show larger time filter at bottom for time playback (apply to time filter only)
 * @memberof visStateUpdaters
 * @public
 */
var setFilterViewUpdater = exports.setFilterViewUpdater = function setFilterViewUpdater(state, action) {
  var view = action.view,
    idx = action.idx;
  var shouldResetOtherFiltersView = view === _constants.FILTER_VIEW_TYPES.enlarged;
  return _objectSpread(_objectSpread({}, state), {}, {
    filters: state.filters.map(function (f, i) {
      return i === idx ? _objectSpread(_objectSpread({}, f), {}, {
        view: view
      }) : shouldResetOtherFiltersView ? _objectSpread(_objectSpread({}, f), {}, {
        view: _constants.FILTER_VIEW_TYPES.side
      }) : f;
    })
  });
};

/**
 * Toggles filter feature visibility
 * @memberof visStateUpdaters
 */
var toggleFilterFeatureUpdater = exports.toggleFilterFeatureUpdater = function toggleFilterFeatureUpdater(state, action) {
  var filter = state.filters[action.idx];
  var isVisible = (0, _lodash2["default"])(filter, ['value', 'properties', 'isVisible']);
  var newState = setFilterUpdater(state, {
    idx: action.idx,
    prop: 'enabled',
    value: !isVisible
  });
  newState = setFilterUpdater(newState, {
    idx: action.idx,
    prop: 'value',
    value: (0, _utils.featureToFilterValue)(filter.value, filter.id, {
      isVisible: !isVisible
    })
  });
  return newState;
};

/**
 * Remove a filter
 * @memberof visStateUpdaters
 * @public
 */
var removeFilterUpdater = exports.removeFilterUpdater = function removeFilterUpdater(state, action) {
  var idx = action.idx;
  var _state$filters$idx = state.filters[idx],
    dataId = _state$filters$idx.dataId,
    id = _state$filters$idx.id;
  var newFilters = [].concat((0, _toConsumableArray2["default"])(state.filters.slice(0, idx)), (0, _toConsumableArray2["default"])(state.filters.slice(idx + 1, state.filters.length)));
  var filteredDatasets = (0, _utils.applyFiltersToDatasets)(dataId, state.datasets, newFilters, state.layers);
  var newEditor = (0, _utils.getFilterIdInFeature)(state.editor.selectedFeature) === id ? _objectSpread(_objectSpread({}, state.editor), {}, {
    selectedFeature: null
  }) : state.editor;
  var newState = (0, _utils.set)(['filters'], newFilters, state);
  newState = (0, _utils.set)(['datasets'], filteredDatasets, newState);
  newState = (0, _utils.set)(['editor'], newEditor, newState);
  return updateAllLayerDomainData(newState, dataId, undefined);
};

/**
 * Add a new layer
 * @memberof visStateUpdaters
 * @public
 */
var addLayerUpdater = exports.addLayerUpdater = function addLayerUpdater(state, action) {
  var newLayer;
  var newLayerData;
  if (action.config) {
    newLayer = (0, _visStateMerger.createLayerFromConfig)(state, action.config);
    if (!newLayer) {
      _window.console.warn('Failed to create layer from config, it usually means the config is not be in correct format', action.config);
      return state;
    }
    var result = (0, _layerUtils.calculateLayerData)(newLayer, state);
    newLayer = result.layer;
    newLayerData = result.layerData;
  } else {
    var _action$datasetId;
    // create an empty layer with a specific dataset or a default one
    var defaultDataset = (_action$datasetId = action.datasetId) !== null && _action$datasetId !== void 0 ? _action$datasetId : Object.keys(state.datasets)[0];
    newLayer = new _layers.Layer({
      isVisible: true,
      isConfigActive: true,
      dataId: defaultDataset
    });
    newLayerData = {};
  }
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    layers: [].concat((0, _toConsumableArray2["default"])(state.layers), [newLayer]),
    layerData: [].concat((0, _toConsumableArray2["default"])(state.layerData), [newLayerData]),
    // add new layer at the top
    layerOrder: [newLayer.id].concat((0, _toConsumableArray2["default"])(state.layerOrder)),
    splitMaps: (0, _utils.addNewLayersToSplitMap)(state.splitMaps, newLayer)
  });
  if (newLayer.config.animation.enabled) {
    newState = updateAnimationDomain(newState);
  }
  return newState;
};

/**
 * remove layer
 * @memberof visStateUpdaters
 * @public
 */
function removeLayerUpdater(state, _ref7) {
  var id = _ref7.id;
  var idx = Number.isFinite(id) ?
  // support older API, remove layer by idx
  Number(id) : state.layers.findIndex(function (l) {
    return l.id === id;
  });
  if (idx < 0 || idx >= state.layers.length) {
    // invalid index
    _window.console.warn("can not remove layer with invalid id|idx ".concat(id));
    return state;
  }
  var layers = state.layers,
    layerData = state.layerData,
    layerOrder = state.layerOrder,
    clicked = state.clicked,
    hoverInfo = state.hoverInfo;
  var layerToRemove = layers[idx];
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    layers: (0, _composerHelpers.filterOutById)(layerToRemove.id)(layers),
    layerData: (0, _composerHelpers.removeElementAtIndex)(idx)(layerData),
    layerOrder: layerOrder.filter(function (layerId) {
      return layerId !== layerToRemove.id;
    }),
    clicked: layerToRemove.isLayerHovered(clicked) ? undefined : clicked,
    hoverInfo: layerToRemove.isLayerHovered(hoverInfo) ? undefined : hoverInfo,
    splitMaps: (0, _utils.removeLayerFromSplitMaps)(state.splitMaps, layerToRemove)
    // TODO: update filters, create helper to remove layer form filter (remove layerid and dataid) if mapped
  });
  return updateAnimationDomain(newState);
}

/**
 * Reorder layer
 * @memberof visStateUpdaters
 * @public
 */
var reorderLayerUpdater = exports.reorderLayerUpdater = function reorderLayerUpdater(state, _ref8) {
  var order = _ref8.order;
  return _objectSpread(_objectSpread({}, state), {}, {
    layerOrder: order
  });
};

/**
 * duplicate layer
 * @memberof visStateUpdaters
 * @public
 */
var duplicateLayerUpdater = exports.duplicateLayerUpdater = function duplicateLayerUpdater(state, _ref9) {
  var id = _ref9.id;
  var idx = Number.isFinite(id) ?
  // support older API, remove layer by idx
  Number(id) : state.layers.findIndex(function (l) {
    return l.id === id;
  });
  if (idx < 0 || !state.layers[idx]) {
    _window.console.warn("layer ".concat(idx, " not found in layerOrder"));
    return state;
  }
  var layers = state.layers;
  var original = layers[idx];
  var originalLayerOrderIdx = state.layerOrder.findIndex(function (lid) {
    return lid === original.id;
  });
  var newLabel = "Copy of ".concat(original.config.label);
  var postfix = 0;
  // eslint-disable-next-line no-loop-func
  while (layers.find(function (l) {
    return l.config.label === newLabel;
  })) {
    newLabel = "Copy of ".concat(original.config.label, " ").concat(++postfix);
  }

  // collect layer config from original
  var loadedLayer = (0, _visStateMerger.serializeLayer)(original, state.schema);

  // assign new id and label to copied layer
  if (!(loadedLayer !== null && loadedLayer !== void 0 && loadedLayer.config)) {
    return state;
  }
  loadedLayer.config.label = newLabel;
  loadedLayer.id = (0, _commonUtils.generateHashId)(_layers.LAYER_ID_LENGTH);

  // add layer to state
  var nextState = addLayerUpdater(state, {
    config: loadedLayer
  });
  // retrieve newly created layer
  var newLayer = nextState.layers[nextState.layers.length - 1];
  // update layer order with newLyaer.id
  var newLayerOrder = (0, _utils.arrayInsert)(nextState.layerOrder.slice(1, nextState.layerOrder.length), originalLayerOrderIdx, newLayer.id);
  nextState = reorderLayerUpdater(nextState, {
    order: newLayerOrder
  });
  return updateAnimationDomain(nextState);
};

/**
 * Add a new effect
 * @memberof visStateUpdaters
 * @public
 */
var addEffectUpdater = exports.addEffectUpdater = function addEffectUpdater(state, action) {
  var _action$config;
  if (((_action$config = action.config) === null || _action$config === void 0 ? void 0 : _action$config.type) === _constants.LIGHT_AND_SHADOW_EFFECT.type && state.effects.some(function (effect) {
    return effect.type === _constants.LIGHT_AND_SHADOW_EFFECT.type;
  })) {
    _window.console.warn("Can't add more than one ".concat(_constants.LIGHT_AND_SHADOW_EFFECT.name, " effect"));
    return state;
  }
  var newEffect = (0, _effects.createEffect)(action.config);

  // collapse configurators for other effects
  state.effects.forEach(function (effect) {
    return effect.setProps({
      isConfigActive: false
    });
  });
  var effects = [].concat((0, _toConsumableArray2["default"])(state.effects), [newEffect]);
  var effectOrder = (0, _utils.fixEffectOrder)(effects, [newEffect.id].concat((0, _toConsumableArray2["default"])(state.effectOrder)));
  return _objectSpread(_objectSpread({}, state), {}, {
    effects: effects,
    effectOrder: effectOrder
  });
};

/**
 * remove effect
 * @memberof visStateUpdaters
 * @public
 */
var removeEffectUpdater = exports.removeEffectUpdater = function removeEffectUpdater(state, _ref10) {
  var id = _ref10.id;
  var idx = state.effects.findIndex(function (l) {
    return l.id === id;
  });
  if (idx < 0 || idx >= state.effects.length) {
    _window.console.warn("can not remove effect with invalid id ".concat(id));
    return state;
  }
  var effects = state.effects,
    effectOrder = state.effectOrder;
  var effectToRemove = effects[idx];
  return _objectSpread(_objectSpread({}, state), {}, {
    // @ts-expect-error fixed in ts
    effects: (0, _composerHelpers.filterOutById)(effectToRemove.id)(effects),
    effectOrder: effectOrder.filter(function (effectId) {
      return effectId !== effectToRemove.id;
    })
  });
};

/**
 * Reorder effect
 * @memberof visStateUpdaters
 * @public
 */
var reorderEffectUpdater = exports.reorderEffectUpdater = function reorderEffectUpdater(state, _ref11) {
  var order = _ref11.order;
  return _objectSpread(_objectSpread({}, state), {}, {
    effectOrder: (0, _utils.fixEffectOrder)(state.effects, (0, _toConsumableArray2["default"])(order))
  });
};

/**
 * Update effect
 * @memberof visStateUpdaters
 * @public
 */
var updateEffectUpdater = exports.updateEffectUpdater = function updateEffectUpdater(state, _ref12) {
  var id = _ref12.id,
    props = _ref12.props;
  var idx = state.effects.findIndex(function (l) {
    return l.id === id;
  });
  if (idx < 0 || idx >= state.effects.length) {
    _window.console.warn("can not update effect with invalid id ".concat(id));
    return state;
  }
  var effectOrder = state.effectOrder;
  if (props.id !== undefined && props.id !== id) {
    var idx2 = state.effects.findIndex(function (l) {
      return l.id === props.id;
    });
    if (idx2 >= 0) {
      _window.console.warn("can not update effect with existing effect id ".concat(id));
      return state;
    }
    effectOrder = effectOrder.map(function (effectOrderId) {
      return effectOrderId === id ? props.id : effectOrderId;
    });
  }
  var newEffects = (0, _toConsumableArray2["default"])(state.effects);
  newEffects[idx].setProps(props);
  return _objectSpread(_objectSpread({}, state), {}, {
    effects: newEffects,
    effectOrder: effectOrder
  });
};

/**
 * Remove a dataset and all layers, filters, tooltip configs that based on it
 * @memberof visStateUpdaters
 * @public
 */
function removeDatasetUpdater(state, action) {
  // extract dataset key
  var datasetKey = action.dataId;
  var datasets = state.datasets;

  // check if dataset is present
  if (!datasets[datasetKey]) {
    return state;
  }
  var layers = state.layers,
    _state$datasets = state.datasets,
    dataset = _state$datasets[datasetKey],
    newDatasets = (0, _objectWithoutProperties2["default"])(_state$datasets, [datasetKey].map(_toPropertyKey));
  var layersToRemove = layers.filter(function (l) {
    return l.config.dataId === datasetKey;
  }).map(function (l) {
    return l.id;
  });

  // remove layers and datasets
  var newState = layersToRemove.reduce(function (accu, id) {
    return removeLayerUpdater(accu, {
      id: id
    });
  }, _objectSpread(_objectSpread({}, state), {}, {
    datasets: newDatasets
  }));

  // update filters
  var filters = [];
  var _iterator2 = _createForOfIteratorHelper(newState.filters),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var filter = _step2.value;
      var valueIndex = filter.dataId.indexOf(datasetKey);
      if (valueIndex >= 0 && filter.dataId.length > 1) {
        // only remove one synced dataset from the filter
        filters.push(_removeFilterDataIdAtValueIndex(filter, valueIndex, datasets));
      } else if (valueIndex < 0) {
        // leave the filter as is
        filters.push(filter);
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  newState = _objectSpread(_objectSpread({}, newState), {}, {
    filters: filters
  });
  return removeDatasetFromInteractionConfig(newState, {
    dataId: datasetKey
  });
}
function removeDatasetFromInteractionConfig(state, _ref13) {
  var dataId = _ref13.dataId;
  var interactionConfig = state.interactionConfig;
  var _interactionConfig = interactionConfig,
    tooltip = _interactionConfig.tooltip;
  if (tooltip) {
    var config = tooltip.config;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var _config$fieldsToShow = config.fieldsToShow,
      fields = _config$fieldsToShow[dataId],
      fieldsToShow = (0, _objectWithoutProperties2["default"])(_config$fieldsToShow, [dataId].map(_toPropertyKey));
    interactionConfig = _objectSpread(_objectSpread({}, interactionConfig), {}, {
      tooltip: _objectSpread(_objectSpread({}, tooltip), {}, {
        config: _objectSpread(_objectSpread({}, config), {}, {
          fieldsToShow: fieldsToShow
        })
      })
    });
  }
  return _objectSpread(_objectSpread({}, state), {}, {
    interactionConfig: interactionConfig
  });
}
/**
 * update layer blending mode
 * @memberof visStateUpdaters
 * @public
 */
var updateLayerBlendingUpdater = exports.updateLayerBlendingUpdater = function updateLayerBlendingUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    layerBlending: action.mode
  });
};

/**
 * update overlay blending mode
 * @memberof visStateUpdaters
 * @public
 */
var updateOverlayBlendingUpdater = exports.updateOverlayBlendingUpdater = function updateOverlayBlendingUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    overlayBlending: action.mode
  });
};

/**
 * Display dataset table in a modal
 * @memberof visStateUpdaters
 * @public
 */
var showDatasetTableUpdater = exports.showDatasetTableUpdater = function showDatasetTableUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    editingDataset: action.dataId
  });
};

/**
 * Add custom color for datasets and layers
 * @memberof visStateUpdaters
 * @public
 */
var updateTableColorUpdater = exports.updateTableColorUpdater = function updateTableColorUpdater(state, action) {
  return updateDatasetPropsUpdater(state, {
    dataId: action.dataId,
    props: {
      color: action.newColor
    }
  });
};

/**
 * reset visState to initial State
 * @memberof visStateUpdaters
 * @public
 */
var resetMapConfigUpdater = exports.resetMapConfigUpdater = function resetMapConfigUpdater(state) {
  return _objectSpread(_objectSpread(_objectSpread({}, INITIAL_VIS_STATE), state.initialState), {}, {
    initialState: state.initialState
  });
};

/**
 * Propagate `visState` reducer with a new configuration. Current config will be override.
 * @memberof visStateUpdaters
 * @public
 */
var receiveMapConfigUpdater = exports.receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref14) {
  var _ref14$payload = _ref14.payload,
    _ref14$payload$config = _ref14$payload.config,
    config = _ref14$payload$config === void 0 ? {} : _ref14$payload$config,
    _ref14$payload$option = _ref14$payload.options,
    options = _ref14$payload$option === void 0 ? {} : _ref14$payload$option;
  if (!config.visState) {
    return state;
  }
  var keepExistingConfig = options.keepExistingConfig;

  // reset config if keepExistingConfig is falsy
  var mergedState = !keepExistingConfig ? resetMapConfigUpdater(state) : state;
  var _iterator3 = _createForOfIteratorHelper(state.mergers),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var merger = _step3.value;
      if ((0, _mergerHandler.isValidMerger)(merger) && (0, _mergerHandler.hasPropsToMerge)(config.visState, merger.prop)) {
        mergedState = merger.merge(mergedState, (0, _mergerHandler.getPropValueToMerger)(config.visState, merger.prop, merger.toMergeProp),
        // fromConfig
        true);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return mergedState;
};

/**
 * Trigger layer hover event with hovered object
 * @memberof visStateUpdaters
 * @public
 */
var layerHoverUpdater = exports.layerHoverUpdater = function layerHoverUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    hoverInfo: _objectSpread(_objectSpread({}, action.info), Number.isFinite(action.mapIndex) ? {
      mapIndex: action.mapIndex
    } : {})
  });
};

/* eslint-enable max-statements */

/**
 * Update `interactionConfig`
 * @memberof visStateUpdaters
 * @public
 */
function interactionConfigChangeUpdater(state, action) {
  var config = action.config;
  var interactionConfig = _objectSpread(_objectSpread({}, state.interactionConfig), (0, _defineProperty2["default"])({}, config.id, config));

  // Don't enable tooltip and brush at the same time
  // but coordinates can be shown at all time
  var contradict = ['brush', 'tooltip'];
  if (contradict.includes(config.id) && config.enabled && !state.interactionConfig[config.id].enabled) {
    // only enable one interaction at a time
    contradict.forEach(function (k) {
      if (k !== config.id) {
        interactionConfig[k] = _objectSpread(_objectSpread({}, interactionConfig[k]), {}, {
          enabled: false
        });
      }
    });
  }
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    interactionConfig: interactionConfig
  });
  if (config.id === 'geocoder' && !config.enabled) {
    return removeDatasetUpdater(newState, {
      dataId: 'geocoder_dataset'
    });
  }
  return newState;
}

/**
 * Trigger layer click event with clicked object
 * @memberof visStateUpdaters
 * @public
 */
var layerClickUpdater = exports.layerClickUpdater = function layerClickUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    mousePos: state.interactionConfig.coordinate.enabled ? _objectSpread(_objectSpread({}, state.mousePos), {}, {
      pinned: state.mousePos.pinned ? null : (0, _lodash["default"])(state.mousePos)
    }) : state.mousePos,
    clicked: action.info && action.info.picked ? action.info : null
  });
};

/**
 * Trigger map click event, unselect clicked object
 * @memberof visStateUpdaters
 * @public
 */
var mapClickUpdater = exports.mapClickUpdater = function mapClickUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    clicked: null
  });
};

/**
 * Trigger map move event
 * @memberof visStateUpdaters
 * @public
 */
var mouseMoveUpdater = exports.mouseMoveUpdater = function mouseMoveUpdater(state, _ref15) {
  var evt = _ref15.evt;
  if (Object.values(state.interactionConfig).some(function (config) {
    return config.enabled;
  })) {
    return _objectSpread(_objectSpread({}, state), {}, {
      mousePos: _objectSpread(_objectSpread(_objectSpread({}, state.mousePos), Array.isArray(evt.point) ? {
        mousePosition: (0, _toConsumableArray2["default"])(evt.point)
      } : {}), Array.isArray(evt.lngLat) ? {
        coordinate: (0, _toConsumableArray2["default"])(evt.lngLat)
      } : {})
    });
  }
  return state;
};
/**
 * Toggle visibility of a layer for a split map
 * @memberof visStateUpdaters
 * @public
 */
var toggleSplitMapUpdater = exports.toggleSplitMapUpdater = function toggleSplitMapUpdater(state, action) {
  return state.splitMaps && state.splitMaps.length === 0 ? _objectSpread(_objectSpread({}, state), {}, {
    // maybe we should use an array to store state for a single map as well
    // if current maps length is equal to 0 it means that we are about to split the view
    splitMaps: (0, _utils.computeSplitMapLayers)(state.layers, {
      duplicate: false
    })
  }) : closeSpecificMapAtIndex(state, action);
};

/**
 * Toggle visibility of a layer in a split map
 * @memberof visStateUpdaters
 * @public
 */
var toggleLayerForMapUpdater = exports.toggleLayerForMapUpdater = function toggleLayerForMapUpdater(state, _ref16) {
  var mapIndex = _ref16.mapIndex,
    layerId = _ref16.layerId;
  var splitMaps = state.splitMaps;
  return _objectSpread(_objectSpread({}, state), {}, {
    splitMaps: splitMaps.map(function (sm, i) {
      return i === mapIndex ? _objectSpread(_objectSpread({}, splitMaps[i]), {}, {
        layers: _objectSpread(_objectSpread({}, splitMaps[i].layers), {}, (0, _defineProperty2["default"])({}, layerId, !splitMaps[i].layers[layerId]))
      }) : sm;
    })
  });
};

/**
 * Add new dataset to `visState`, with option to load a map config along with the datasets
 * @memberof visStateUpdaters
 * @public
 */
// eslint-disable-next-line complexity
var updateVisDataUpdater = exports.updateVisDataUpdater = function updateVisDataUpdater(state, action) {
  // datasets can be a single data entries or an array of multiple data entries
  var config = action.config,
    options = action.options;

  // apply config if passed from action
  // TODO: we don't handle async mergers here yet
  var previousState = config ? receiveMapConfigUpdater(state, {
    payload: {
      config: config,
      options: options
    }
  }) : state;

  // indicate that something is in progress
  var setIsLoadingTask = (0, _tasks2.ACTION_TASK)().map(function () {
    return (0, _actions.setLoadingIndicator)({
      change: 1
    });
  });
  var updatedState = (0, _tasks.withTask)(previousState, setIsLoadingTask);
  var datasets = (0, _commonUtils.toArray)(action.datasets);
  var createDatasetTasks = [];
  var notificationTasks = [];
  datasets.forEach(function (_ref17, datasetIndex) {
    var _ref17$info = _ref17.info,
      info = _ref17$info === void 0 ? {} : _ref17$info,
      rest = (0, _objectWithoutProperties2["default"])(_ref17, _excluded2);
    var task = (0, _table.createNewDataEntry)(_objectSpread({
      info: info
    }, rest), state.datasets);
    if (task) {
      createDatasetTasks.push(task);
    } else {
      notificationTasks.push((0, _tasks2.ACTION_TASK)().map(function () {
        return (0, _actions.addNotification)((0, _utils.errorNotification)({
          message: "Failed to create a new dataset due to data verification errors",
          id: "dataset-failed-".concat(datasetIndex)
        }));
      }));
    }
  });
  var datasetsAllSettledTask = createDatasetTasks.length ? _tasks["default"].allSettled(createDatasetTasks).map(function (results) {
    return (0, _actions.createNewDatasetSuccess)({
      results: results,
      addToMapOptions: options
    });
  }) : null;
  return (0, _tasks.withTask)(updatedState, [].concat((0, _toConsumableArray2["default"])(datasetsAllSettledTask ? [datasetsAllSettledTask] : []), notificationTasks));
};
var createNewDatasetSuccessUpdater = exports.createNewDatasetSuccessUpdater = function createNewDatasetSuccessUpdater(state, action) {
  // console.log('createNewDatasetSuccessUpdater', action.payload);
  var _action$payload = action.payload,
    results = _action$payload.results,
    addToMapOptions = _action$payload.addToMapOptions;
  var newDataEntries = results.reduce(function (accu, result) {
    if (result.status === 'fulfilled') {
      var dataset = result.value;
      return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, dataset.id, dataset));
    } else {
      // handle create dataset error
      console.error('createNewDatasetSuccessUpdater: failed', result.reason || result.value);
      return accu;
    }
  }, {});
  // save new dataset entry to state
  var mergedState = _objectSpread(_objectSpread({}, state), {}, {
    datasets: (0, _visStateMerger.mergeDatasetsByOrder)(state, newDataEntries)
  });

  // merge state with config to be merged
  var layerMergers = state.mergers.filter(function (m) {
    return m.waitForLayerData;
  });
  var datasetMergers = state.mergers.filter(function (m) {
    return !layerMergers.includes(m);
  });
  var newDataIds = Object.keys(newDataEntries);
  var postMergerPayload = {
    newDataIds: newDataIds,
    options: addToMapOptions,
    layerMergers: layerMergers
  };
  var updatedState = applyMergersUpdater(mergedState, {
    mergers: datasetMergers,
    postMergerPayload: postMergerPayload
  });

  // resolve active loading initiated by updateVisDataUpdater
  var setIsLoadingTask = (0, _tasks2.ACTION_TASK)().map(function () {
    return (0, _actions.setLoadingIndicator)({
      change: -1
    });
  });
  return (0, _tasks.withTask)(updatedState, setIsLoadingTask);
};

/**
 * Add new dataset to `visState`, with option to load a map config along with the datasets
 */
function applyMergersUpdater(state, action) {
  var mergers = action.mergers,
    postMergerPayload = action.postMergerPayload;

  // merge state with config to be merged
  var mergeStateResult = (0, _mergerHandler.mergeStateFromMergers)(state, _objectSpread(_objectSpread({}, INITIAL_VIS_STATE), state.initialState), mergers,
  // newDataIds,
  postMergerPayload);

  // if all merged, kickup post merge process
  // if not wait
  return mergeStateResult.allMerged ? postMergeUpdater(mergeStateResult.mergedState, postMergerPayload) : mergeStateResult.mergedState;
}

/**
 * Add new dataset to `visState`, with option to load a map config along with the datasets
 */
function postMergeUpdater(mergedState, postMergerPayload) {
  var newDataIds = postMergerPayload.newDataIds,
    options = postMergerPayload.options,
    layerMergers = postMergerPayload.layerMergers;
  var newFilters = mergedState.filters.filter(function (f) {
    return f.dataId.find(function (fDataId) {
      return newDataIds.includes(fDataId);
    });
  });
  var datasetFiltered = (0, _lodash5["default"])(newFilters.reduce(function (accu, f) {
    return [].concat((0, _toConsumableArray2["default"])(accu), (0, _toConsumableArray2["default"])(f.dataId));
  }, []));
  var dataEmpty = newDataIds.length < 1;
  var newLayers = !dataEmpty ? mergedState.layers.filter(function (l) {
    return l.config.dataId && newDataIds.includes(l.config.dataId);
  }) : [];
  var newDataEntries = newDataIds.reduce(function (accu, id) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, id, mergedState.datasets[id]));
  }, {});
  if (!newLayers.length && (options || {}).autoCreateLayers !== false) {
    // no layer merged, find defaults
    var result = addDefaultLayers(mergedState, newDataEntries);
    mergedState = result.state;
    newLayers = result.newLayers;
  }
  if (mergedState.splitMaps.length) {
    // if map is split, add new layers to splitMaps
    newLayers = mergedState.layers.filter(function (l) {
      return l.config.dataId && newDataIds.includes(l.config.dataId);
    });
    mergedState = _objectSpread(_objectSpread({}, mergedState), {}, {
      splitMaps: (0, _utils.addNewLayersToSplitMap)(mergedState.splitMaps, newLayers)
    });
  }

  // if no tooltips merged add default tooltips
  newDataIds.forEach(function (dataId) {
    var tooltipFields = mergedState.interactionConfig.tooltip.config.fieldsToShow[dataId];
    // loading dataset: autoCreateTooltips is false and we don't want to run addDefaultTooltips when tooltipFields is empty
    if ((options === null || options === void 0 ? void 0 : options.autoCreateTooltips) !== false && (!Array.isArray(tooltipFields) || !tooltipFields.length)) {
      // adding dataset: autoCreateTooltips is true
      mergedState = addDefaultTooltips(mergedState, newDataEntries[dataId]);
    }
  });
  var updatedDatasets = dataEmpty ? Object.keys(mergedState.datasets) : (0, _lodash5["default"])(Object.keys(newDataEntries).concat(datasetFiltered));
  var updatedState = updateAllLayerDomainData(mergedState, updatedDatasets, undefined);

  // register layer animation domain,
  // need to be called after layer data is calculated
  updatedState = updateAnimationDomain(updatedState);

  // try to process layerMergers after dataset+datasetMergers
  updatedState = layerMergers && layerMergers.length > 0 ? applyMergersUpdater(updatedState, {
    mergers: layerMergers,
    postMergerPayload: _objectSpread(_objectSpread({}, postMergerPayload), {}, {
      layerMergers: []
    })
  }) : updatedState;

  // center the map once the dataset is created
  if (newLayers.length && (options || {}).centerMap) {
    var bounds = (0, _dataUtils.findMapBounds)(newLayers);
    if (bounds) {
      var fitBoundsTask = (0, _tasks2.ACTION_TASK)().map(function () {
        return (0, _actions.fitBounds)(bounds);
      });
      updatedState = (0, _tasks.withTask)(updatedState, fitBoundsTask);
    }
  }
  return updatedState;
}

/**
 * Rename an existing dataset in `visState`
 * @memberof visStateUpdaters
 * @public
 */
function renameDatasetUpdater(state, action) {
  return updateDatasetPropsUpdater(state, {
    dataId: action.dataId,
    props: {
      label: action.label
    }
  });
}
var ALLOWED_UPDATE_DATASET_PROPS = ['label', 'color', 'metadata'];

/**
 * Validates properties before updating the dataset.
 * Makes sure each property is in the allowed list
 * Makes sure color value is RGB
 * Performs deep merge when updating metadata
 */
var validateDatasetUpdateProps = function validateDatasetUpdateProps(props, dataset) {
  var validatedProps = Object.entries(props).reduce(function (acc, entry) {
    var _entry = (0, _slicedToArray2["default"])(entry, 2),
      key = _entry[0],
      value = _entry[1];
    // is it allowed ?
    if (!ALLOWED_UPDATE_DATASET_PROPS.includes(key)) {
      return acc;
    }

    // if we are adding a color but it is not RGB we don't accept the value
    // in the future as we add more props we should change this if into a switch
    if (key === 'color' && !(0, _utils.isRgbColor)(value)) {
      return acc;
    }

    // do we need deep merge ?
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, key, (0, _utils.isPlainObject)(value) ? (0, _deepmerge["default"])(dataset[key] || {}, value) : value));
  }, {});
  return validatedProps;
};

/**
 * Update Dataset props (label, color, meta). Do not use to update data or any related properties
 * @memberof visStateUpdaters
 * @public
 */
function updateDatasetPropsUpdater(state, action) {
  var dataId = action.dataId,
    props = action.props;
  var datasets = state.datasets;
  var existing = datasets[dataId];
  if (existing) {
    var validatedProps = validateDatasetUpdateProps(props, existing);
    //  validate props: just color for now
    //  we only allow label, color and meta to be updated
    // const newTable = copyTableAndUpdate(existing, validatedProps);
    return _objectSpread(_objectSpread({}, state), {}, {
      datasets: _objectSpread(_objectSpread({}, datasets), {}, (0, _defineProperty2["default"])({}, dataId, (0, _table.copyTableAndUpdate)(existing, validatedProps)))
    });
  }
  return state;
}

/**
 * When a user clicks on the specific map closing icon
 * the application will close the selected map
 * and will merge the remaining one with the global state
 * TODO: i think in the future this action should be called merge map layers with global settings
 * @param {Object} state `visState`
 * @param {Object} action action
 * @returns {Object} nextState
 */
function closeSpecificMapAtIndex(state, action) {
  var _state$splitMaps$inde;
  // retrieve layers meta data from the remaining map that we need to keep
  var indexToRetrieve = 1 - action.payload;
  var mapLayers = (_state$splitMaps$inde = state.splitMaps[indexToRetrieve]) === null || _state$splitMaps$inde === void 0 ? void 0 : _state$splitMaps$inde.layers;
  var layers = state.layers;

  // update layer visibility
  var newLayers = layers.map(function (layer) {
    return mapLayers && !mapLayers[layer.id] && layer.config.isVisible ? layer.updateLayerConfig({
      // if layer.id is not in mapLayers, it should be inVisible
      isVisible: false
    }) : layer;
  });

  // delete map
  return _objectSpread(_objectSpread({}, state), {}, {
    layers: newLayers,
    splitMaps: []
  });
}

/**
 * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed
 * @memberof visStateUpdaters
 * @public
 */
var loadFilesUpdater = exports.loadFilesUpdater = function loadFilesUpdater(state, action) {
  var files = action.files,
    _action$onFinish = action.onFinish,
    onFinish = _action$onFinish === void 0 ? _actions.loadFilesSuccess : _action$onFinish;
  if (!files.length) {
    return state;
  }
  var fileLoadingProgress = Array.from(files).reduce(function (accu, f, i) {
    return (0, _composerHelpers.merge_)(initialFileLoadingProgress(f, i))(accu);
  }, {});
  var fileLoading = {
    fileCache: [],
    filesToLoad: files,
    onFinish: onFinish
  };
  var nextState = (0, _composerHelpers.merge_)({
    fileLoadingProgress: fileLoadingProgress,
    fileLoading: fileLoading
  })(state);
  return loadNextFileUpdater(nextState);
};

/**
 * Sucessfully loaded one file, move on to the next one
 * @memberof visStateUpdaters
 * @public
 */
function loadFileStepSuccessUpdater(state, action) {
  if (!state.fileLoading) {
    return state;
  }
  var fileName = action.fileName,
    fileCache = action.fileCache;
  var _state$fileLoading = state.fileLoading,
    filesToLoad = _state$fileLoading.filesToLoad,
    onFinish = _state$fileLoading.onFinish;
  var stateWithProgress = updateFileLoadingProgressUpdater(state, {
    fileName: fileName,
    progress: {
      percent: 1,
      message: 'Done'
    }
  });

  // save processed file to fileCache
  var stateWithCache = (0, _composerHelpers.pick_)('fileLoading')((0, _composerHelpers.merge_)({
    fileCache: fileCache
  }))(stateWithProgress);
  return (0, _tasks.withTask)(stateWithCache, (0, _tasks2.DELAY_TASK)(200).map(filesToLoad.length ? _actions.loadNextFile : function () {
    return onFinish(fileCache);
  }));
}

// withTask<T>(state: T, task: any): T

/**
 *
 * @memberof visStateUpdaters
 * @public
 */
function loadNextFileUpdater(state) {
  if (!state.fileLoading) {
    return state;
  }
  var filesToLoad = state.fileLoading.filesToLoad;
  var _filesToLoad = (0, _toArray2["default"])(filesToLoad),
    file = _filesToLoad[0],
    remainingFilesToLoad = _filesToLoad.slice(1);

  // save filesToLoad to state
  var nextState = (0, _composerHelpers.pick_)('fileLoading')((0, _composerHelpers.merge_)({
    filesToLoad: remainingFilesToLoad
  }))(state);
  var stateWithProgress = updateFileLoadingProgressUpdater(nextState, {
    fileName: file.name,
    progress: {
      percent: 0,
      message: 'loading...'
    }
  });
  var loaders = state.loaders,
    loadOptions = state.loadOptions;
  return (0, _tasks.withTask)(stateWithProgress, makeLoadFileTask(file, nextState.fileLoading && nextState.fileLoading.fileCache, loaders, loadOptions));
}
function makeLoadFileTask(file, fileCache) {
  var loaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var loadOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return (0, _tasks2.LOAD_FILE_TASK)({
    file: file,
    fileCache: fileCache,
    loaders: loaders,
    loadOptions: loadOptions
  }).bimap(
  // prettier ignore
  // success
  function (gen) {
    return (0, _actions.nextFileBatch)({
      gen: gen,
      fileName: file.name,
      onFinish: function onFinish(result) {
        return (0, _actions.processFileContent)({
          content: result,
          fileCache: fileCache
        });
      }
    });
  },
  // error
  function (err) {
    return (0, _actions.loadFilesErr)(file.name, err);
  });
}

/**
 *
 * @memberof visStateUpdaters
 * @public
 */
function processFileContentUpdater(state, action) {
  var _action$payload2 = action.payload,
    content = _action$payload2.content,
    fileCache = _action$payload2.fileCache;
  var stateWithProgress = updateFileLoadingProgressUpdater(state, {
    fileName: content.fileName,
    progress: {
      percent: 1,
      message: 'processing...'
    }
  });
  return (0, _tasks.withTask)(stateWithProgress, (0, _tasks2.PROCESS_FILE_DATA)({
    content: content,
    fileCache: fileCache
  }).bimap(function (result) {
    return (0, _actions.loadFileStepSuccess)({
      fileName: content.fileName,
      fileCache: result
    });
  }, function (err) {
    return (0, _actions.loadFilesErr)(content.fileName, err);
  }));
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function parseProgress() {
  var prevProgress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var progress = arguments.length > 1 ? arguments[1] : undefined;
  // This happens when receiving query metadata or other cases we don't
  // have an update for the user.
  if (!progress || !progress.percent) {
    return {};
  }
  return {
    percent: progress.percent
  };
}

/**
 * gets called with payload = AsyncGenerator<???>
 * @memberof visStateUpdaters
 * @public
 */
var nextFileBatchUpdater = exports.nextFileBatchUpdater = function nextFileBatchUpdater(state, _ref18) {
  var _accumulated$data;
  var _ref18$payload = _ref18.payload,
    gen = _ref18$payload.gen,
    fileName = _ref18$payload.fileName,
    progress = _ref18$payload.progress,
    accumulated = _ref18$payload.accumulated,
    onFinish = _ref18$payload.onFinish;
  var stateWithProgress = updateFileLoadingProgressUpdater(state, {
    fileName: fileName,
    progress: parseProgress(state.fileLoadingProgress[fileName], progress)
  });
  return (0, _tasks.withTask)(stateWithProgress, [].concat((0, _toConsumableArray2["default"])((0, _utils.getApplicationConfig)().useArrowProgressiveLoading && fileName.endsWith('arrow') && (accumulated === null || accumulated === void 0 || (_accumulated$data = accumulated.data) === null || _accumulated$data === void 0 ? void 0 : _accumulated$data.length) > 0 ? [(0, _tasks2.PROCESS_FILE_DATA)({
    content: accumulated,
    fileCache: []
  }).bimap(function (result) {
    return (0, _actions.loadFilesSuccess)(result);
  }, function (err) {
    return (0, _actions.loadFilesErr)(fileName, err);
  })] : []), [(0, _tasks2.UNWRAP_TASK)(gen.next()).bimap(function (_ref19) {
    var value = _ref19.value,
      done = _ref19.done;
    return done ? onFinish(accumulated) : (0, _actions.nextFileBatch)({
      gen: gen,
      fileName: fileName,
      progress: value.progress,
      accumulated: value,
      onFinish: onFinish
    });
  }, function (err) {
    return (0, _actions.loadFilesErr)(fileName, err);
  })]));
};

/**
 * Trigger loading file error
 * @memberof visStateUpdaters
 * @public
 */
var loadFilesErrUpdater = exports.loadFilesErrUpdater = function loadFilesErrUpdater(state, _ref20) {
  var error = _ref20.error,
    fileName = _ref20.fileName;
  // update ui with error message
  _window.console.warn(error);
  if (!state.fileLoading) {
    return state;
  }
  var _state$fileLoading2 = state.fileLoading,
    filesToLoad = _state$fileLoading2.filesToLoad,
    onFinish = _state$fileLoading2.onFinish,
    fileCache = _state$fileLoading2.fileCache;
  var nextState = updateFileLoadingProgressUpdater(state, {
    fileName: fileName,
    progress: {
      error: error
    }
  });

  // kick off next file or finish
  return (0, _tasks.withTask)(nextState, (0, _tasks2.DELAY_TASK)(200).map(filesToLoad.length ? _actions.loadNextFile : function () {
    return onFinish(fileCache);
  }));
};

/**
 * When select dataset for export, apply cpu filter to selected dataset
 * @memberof visStateUpdaters
 * @public
 */
var applyCPUFilterUpdater = exports.applyCPUFilterUpdater = function applyCPUFilterUpdater(state, _ref21) {
  var dataId = _ref21.dataId;
  // apply cpuFilter
  var dataIds = (0, _commonUtils.toArray)(dataId);
  return dataIds.reduce(function (accu, id) {
    return (0, _utils.filterDatasetCPU)(accu, id);
  }, state);
};

/**
 * User input to update the info of the map
 * @memberof visStateUpdaters
 * @public
 */
var setMapInfoUpdater = exports.setMapInfoUpdater = function setMapInfoUpdater(state, action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    mapInfo: _objectSpread(_objectSpread({}, state.mapInfo), action.info)
  });
};
/**
 * Helper function to update All layer domain and layer data of state
 */
function addDefaultLayers(state, datasets) {
  var empty = [];
  var defaultLayers = Object.values(datasets).reduce(function (accu, dataset) {
    var foundLayers = (0, _layerUtils.findDefaultLayer)(dataset, state.layerClasses);
    return foundLayers && foundLayers.length ? accu.concat(foundLayers) : accu;
  }, empty);
  return {
    state: _objectSpread(_objectSpread({}, state), {}, {
      layers: [].concat((0, _toConsumableArray2["default"])(state.layers), (0, _toConsumableArray2["default"])(defaultLayers)),
      layerOrder: [].concat((0, _toConsumableArray2["default"])((0, _layerUtils.getLayerOrderFromLayers)(defaultLayers)), (0, _toConsumableArray2["default"])(state.layerOrder))
    }),
    newLayers: defaultLayers
  };
}

/**
 * helper function to find default tooltips
 * @param {Object} state
 * @param {Object} dataset
 * @returns {Object} nextState
 */
function addDefaultTooltips(state, dataset) {
  var tooltipFields = (0, _interactionUtils.findFieldsToShow)(_objectSpread(_objectSpread({}, dataset), {}, {
    maxDefaultTooltips: state.maxDefaultTooltips
  }));
  var merged = _objectSpread(_objectSpread({}, state.interactionConfig.tooltip.config.fieldsToShow), tooltipFields);
  return (0, _utils.set)(['interactionConfig', 'tooltip', 'config', 'fieldsToShow'], merged, state);
}
function initialFileLoadingProgress(file, index) {
  var fileName = file.name || "Untitled File ".concat(index);
  return (0, _defineProperty2["default"])({}, fileName, {
    // percent of current file
    percent: 0,
    message: '',
    fileName: fileName,
    error: null
  });
}
function updateFileLoadingProgressUpdater(state, _ref23) {
  var fileName = _ref23.fileName,
    progress = _ref23.progress;
  // @ts-expect-error
  return (0, _composerHelpers.pick_)('fileLoadingProgress')((0, _composerHelpers.pick_)(fileName)((0, _composerHelpers.merge_)(progress)))(state);
}
/**
 * Helper function to update layer domains for an array of datasets
 */
function updateAllLayerDomainData(state, dataId, updatedFilter) {
  var dataIds = typeof dataId === 'string' ? [dataId] : dataId;
  var newLayers = [];
  var newLayerData = [];
  state.layers.forEach(function (oldLayer, i) {
    if (oldLayer.config.dataId && dataIds.includes(oldLayer.config.dataId)) {
      // No need to recalculate layer domain if filter has fixed domain
      var newLayer = updatedFilter && updatedFilter.fixedDomain ? oldLayer : oldLayer.updateLayerDomain(state.datasets, updatedFilter);
      var _calculateLayerData7 = (0, _layerUtils.calculateLayerData)(newLayer, state, state.layerData[i]),
        layerData = _calculateLayerData7.layerData,
        layer = _calculateLayerData7.layer;
      newLayers.push(layer);
      newLayerData.push(layerData);
    } else {
      newLayers.push(oldLayer);
      newLayerData.push(state.layerData[i]);
    }
  });
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    layers: newLayers,
    layerData: newLayerData
  });
  return newState;
}
function updateAnimationDomain(state) {
  var _state$filters;
  // merge all animatable layer domain and update global config
  var animatableLayers = (0, _utils.getAnimatableVisibleLayers)(state.layers);
  if (!animatableLayers.length) {
    return _objectSpread(_objectSpread({}, state), {}, {
      animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {
        domain: null,
        isAnimating: false,
        timeSteps: null,
        defaultTimeFormat: null
      })
    });
  }
  var layerDomains = animatableLayers.map(function (l) {
    return l.config.animation.domain || [];
  });
  // @ts-ignore
  var mergedDomain = (0, _utils.mergeTimeDomains)(layerDomains);
  var defaultTimeFormat = (0, _utils.getTimeWidgetTitleFormatter)(mergedDomain);

  // merge timeSteps
  var mergedTimeSteps = (0, _lodash5["default"])(animatableLayers.reduce(function (accu, layer) {
    accu.push.apply(accu, (0, _toConsumableArray2["default"])(layer.config.animation.timeSteps || []));
    return accu;
  }, [])).sort();
  mergedTimeSteps = mergedTimeSteps.length ? mergedTimeSteps : null;

  // TODO: better handling of duration calculation
  var duration = mergedTimeSteps ? _constants.BASE_SPEED * (1000 / _constants.FPS) / mergedTimeSteps.length / (state.animationConfig.speed || 1) : null;
  var nextState = _objectSpread(_objectSpread({}, state), {}, {
    animationConfig: _objectSpread(_objectSpread({}, state.animationConfig), {}, {
      domain: mergedDomain,
      defaultTimeFormat: defaultTimeFormat,
      duration: duration,
      timeSteps: mergedTimeSteps
    })
  });

  // reset currentTime based on new domain
  var syncedFilter = (_state$filters = state.filters) === null || _state$filters === void 0 ? void 0 : _state$filters.find(function (f) {
    return f.syncedWithLayerTimeline;
  });

  // if synced filter exist wee need to merge animationConfig and filter domains
  // and validate the current time against the new merged domain
  var newAnimationDomain = syncedFilter ? (0, _utils.mergeTimeDomains)([mergedDomain, syncedFilter.domain]) : mergedDomain;
  var currentTime = (0, _utils.isInRange)(state.animationConfig.currentTime, newAnimationDomain) ? state.animationConfig.currentTime : newAnimationDomain[0];
  if (currentTime !== state.animationConfig.currentTime) {
    // if currentTime changed, need to call animationTimeUpdater to re call formatLayerData
    return setLayerAnimationTimeUpdater(nextState, {
      value: currentTime
    });
  }
  return nextState;
}

/**
 * Update the status of the editor
 * @memberof visStateUpdaters
 */
var setEditorModeUpdater = exports.setEditorModeUpdater = function setEditorModeUpdater(state, _ref24) {
  var mode = _ref24.mode;
  return _objectSpread(_objectSpread({}, state), {}, {
    editor: _objectSpread(_objectSpread({}, state.editor), {}, {
      mode: mode,
      selectedFeature: null
    })
  });
};

// const featureToFilterValue = (feature) => ({...feature, id: feature.id});
/**
 * Update editor features
 * @memberof visStateUpdaters
 */
function setFeaturesUpdater(state, _ref25) {
  var _lastFeature$properti;
  var _ref25$features = _ref25.features,
    features = _ref25$features === void 0 ? [] : _ref25$features;
  var lastFeature = features.length && features[features.length - 1];
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    editor: _objectSpread(_objectSpread({}, state.editor), {}, {
      // only save none filter features to editor
      features: features.filter(function (f) {
        return !(0, _utils.getFilterIdInFeature)(f);
      }),
      mode: lastFeature && (_lastFeature$properti = lastFeature.properties) !== null && _lastFeature$properti !== void 0 && _lastFeature$properti.isClosed ? _constants.EDITOR_MODES.EDIT : state.editor.mode
    })
  });

  // Retrieve existing feature
  var selectedFeature = state.editor.selectedFeature;

  // If no feature is selected we can simply return since no operations
  if (!selectedFeature) {
    return newState;
  }

  // TODO: check if the feature has changed
  var feature = features.find(function (f) {
    return f.id === selectedFeature.id;
  });

  // if feature is part of a filter
  var filterId = feature && (0, _utils.getFilterIdInFeature)(feature);
  if (filterId && feature) {
    // add bbox for polygon filter to speed up filtering
    if (feature.properties) feature.properties.bbox = (0, _bbox["default"])(feature);
    var featureValue = (0, _utils.featureToFilterValue)(feature, filterId);
    var filterIdx = state.filters.findIndex(function (fil) {
      return fil.id === filterId;
    });
    // @ts-ignore
    return setFilterUpdater(newState, {
      idx: filterIdx,
      prop: 'value',
      value: featureValue
    });
  }
  return newState;
}

/**
 * Set the current selected feature
 * @memberof uiStateUpdaters
 */
var setSelectedFeatureUpdater = exports.setSelectedFeatureUpdater = function setSelectedFeatureUpdater(state, _ref26) {
  var feature = _ref26.feature,
    selectionContext = _ref26.selectionContext;
  // add bbox for polygon filter to speed up filtering
  if (feature && feature.properties) feature.properties.bbox = (0, _bbox["default"])(feature);
  return _objectSpread(_objectSpread({}, state), {}, {
    editor: _objectSpread(_objectSpread({}, state.editor), {}, {
      selectedFeature: feature,
      selectionContext: selectionContext
    })
  });
};

/**
 * Delete existing feature from filters
 * @memberof visStateUpdaters
 */
function deleteFeatureUpdater(state, _ref27) {
  var feature = _ref27.feature;
  if (!feature) {
    return state;
  }
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    editor: _objectSpread(_objectSpread({}, state.editor), {}, {
      selectedFeature: null
    })
  });
  if ((0, _utils.getFilterIdInFeature)(feature)) {
    var filterIdx = newState.filters.findIndex(function (f) {
      return f.id === (0, _utils.getFilterIdInFeature)(feature);
    });
    return filterIdx > -1 ? removeFilterUpdater(newState, {
      idx: filterIdx
    }) : newState;
  }

  // modify editor object
  var newEditor = _objectSpread(_objectSpread({}, state.editor), {}, {
    features: state.editor.features.filter(function (f) {
      return f.id !== feature.id;
    }),
    selectedFeature: null
  });
  return _objectSpread(_objectSpread({}, state), {}, {
    editor: newEditor
  });
}

/**
 * Toggle feature as layer filter
 * @memberof visStateUpdaters
 */
function setPolygonFilterLayerUpdater(state, payload) {
  var layer = payload.layer,
    feature = payload.feature;
  var filterId = (0, _utils.getFilterIdInFeature)(feature);

  // let newFilter = null;
  var filterIdx;
  var newLayerId = [layer.id];
  var newState = state;
  // If polygon filter already exists, we need to find out if the current layer is already included
  if (filterId) {
    filterIdx = state.filters.findIndex(function (f) {
      return f.id === filterId;
    });
    if (!state.filters[filterIdx]) {
      // what if filter doesn't exist?... not possible.
      // because features in the editor is passed in from filters and editors.
      // but we will move this feature back to editor just in case
      var noneFilterFeature = _objectSpread(_objectSpread({}, feature), {}, {
        properties: _objectSpread(_objectSpread({}, feature.properties), {}, {
          filterId: null
        })
      });
      return _objectSpread(_objectSpread({}, state), {}, {
        editor: _objectSpread(_objectSpread({}, state.editor), {}, {
          features: [].concat((0, _toConsumableArray2["default"])(state.editor.features), [noneFilterFeature]),
          selectedFeature: noneFilterFeature
        })
      });
    }
    var filter = state.filters[filterIdx];
    var _filter$layerId = filter.layerId,
      layerId = _filter$layerId === void 0 ? [] : _filter$layerId;
    var isLayerIncluded = layerId.includes(layer.id);
    newLayerId = isLayerIncluded ?
    // if layer is included, remove it
    layerId.filter(function (l) {
      return l !== layer.id;
    }) : [].concat((0, _toConsumableArray2["default"])(layerId), [layer.id]);
  } else {
    // if we haven't create the polygon filter, create it
    var newFilter = (0, _utils.generatePolygonFilter)([], feature);
    filterIdx = state.filters.length;

    // add feature, remove feature from eidtor
    newState = _objectSpread(_objectSpread({}, state), {}, {
      filters: [].concat((0, _toConsumableArray2["default"])(state.filters), [newFilter]),
      editor: _objectSpread(_objectSpread({}, state.editor), {}, {
        features: state.editor.features.filter(function (f) {
          return f.id !== feature.id;
        }),
        selectedFeature: newFilter.value
      })
    });
  }
  return setFilterUpdater(newState, {
    idx: filterIdx,
    prop: 'layerId',
    value: newLayerId
  });
}

/**
 * @memberof visStateUpdaters
 * @public
 */
function sortTableColumnUpdater(state, _ref28) {
  var dataId = _ref28.dataId,
    column = _ref28.column,
    mode = _ref28.mode;
  var dataset = state.datasets[dataId];
  if (!dataset) {
    return state;
  }
  var sortMode = mode;
  if (!sortMode) {
    var currentMode = (0, _lodash2["default"])(dataset, ['sortColumn', column]);
    // @ts-ignore - should be fixable in a TS file
    sortMode = currentMode ? Object.keys(_constants.SORT_ORDER).find(function (m) {
      return m !== currentMode;
    }) : _constants.SORT_ORDER.ASCENDING;
  }
  var sorted = (0, _table.sortDatasetByColumn)(dataset, column, sortMode);
  return (0, _utils.set)(['datasets', dataId], sorted, state);
}

/**
 * @memberof visStateUpdaters
 * @public
 */
function pinTableColumnUpdater(state, _ref29) {
  var dataId = _ref29.dataId,
    column = _ref29.column;
  var dataset = state.datasets[dataId];
  if (!dataset) {
    return state;
  }
  var newDataset = (0, _table.pinTableColumns)(dataset, column);
  return (0, _utils.set)(['datasets', dataId], newDataset, state);
}

/**
 * Copy column content as strings
 * @memberof visStateUpdaters
 * @public
 */
function copyTableColumnUpdater(state, _ref30) {
  var dataId = _ref30.dataId,
    column = _ref30.column;
  var dataset = state.datasets[dataId];
  if (!dataset) {
    return state;
  }
  var fieldIdx = dataset.fields.findIndex(function (f) {
    return f.name === column;
  });
  if (fieldIdx < 0) {
    return state;
  }
  var type = dataset.fields[fieldIdx].type;
  var text = dataset.dataContainer.map(function (row) {
    return (0, _utils.parseFieldValue)(row.valueAt(fieldIdx), type);
  }, true).join('\n');
  (0, _copyToClipboard["default"])(text);
  return state;
}

/**
 * Set display format from columns from user selection
 * @memberof visStateUpdaters
 * @public
 */
function setColumnDisplayFormatUpdater(state, _ref31) {
  var dataId = _ref31.dataId,
    formats = _ref31.formats;
  var dataset = state.datasets[dataId];
  if (!dataset) {
    return state;
  }
  var newFields = dataset.fields;
  Object.keys(formats).forEach(function (column) {
    var fieldIdx = dataset.fields.findIndex(function (f) {
      return f.name === column;
    });
    if (fieldIdx >= 0) {
      var displayFormat = formats[column];
      var field = newFields[fieldIdx];
      newFields = (0, _composerHelpers.swap_)((0, _composerHelpers.merge_)({
        displayFormat: displayFormat
      })(field))(newFields);
    }
  });
  var newDataset = (0, _table.copyTableAndUpdate)(dataset, {
    fields: newFields
  });
  var newState = (0, _composerHelpers.pick_)('datasets')((0, _composerHelpers.merge_)((0, _defineProperty2["default"])({}, dataId, newDataset)))(state);

  // update colorField displayFormat
  newState = _objectSpread(_objectSpread({}, newState), {}, {
    layers: newState.layers.map(function (layer) {
      var _layer$config;
      return (_layer$config = layer.config) !== null && _layer$config !== void 0 && (_layer$config = _layer$config.colorField) !== null && _layer$config !== void 0 && _layer$config.name && layer.config.colorField.name in formats ? layer.updateLayerConfig({
        colorField: _objectSpread(_objectSpread({}, layer.config.colorField), {}, {
          displayFormat: formats[layer.config.colorField.name]
        })
      }) : layer;
    })
  });
  return newState;
}

/**
 * Update editor
 */
function toggleEditorVisibilityUpdater(state,
// eslint-disable-next-line @typescript-eslint/no-unused-vars
action) {
  return _objectSpread(_objectSpread({}, state), {}, {
    editor: _objectSpread(_objectSpread({}, state.editor), {}, {
      visible: !state.editor.visible
    })
  });
}
function setFilterAnimationTimeConfigUpdater(state, _ref32) {
  var idx = _ref32.idx,
    config = _ref32.config;
  var oldFilter = state.filters[idx];
  if (!oldFilter) {
    _window.console.error("filters.".concat(idx, " is undefined"));
    return state;
  }
  if (oldFilter.type !== _constants.FILTER_TYPES.timeRange) {
    _window.console.error("setFilterAnimationTimeConfig can only be called to update a time filter. check filter.type === 'timeRange'");
    return state;
  }
  var updates = checkTimeConfigArgs(config);
  return (0, _composerHelpers.pick_)('filters')((0, _composerHelpers.swap_)((0, _composerHelpers.merge_)(updates)(oldFilter)))(state);
}
function checkTimeConfigArgs(config) {
  var allowed = ['timeFormat', 'timezone'];
  return Object.keys(config).reduce(function (accu, prop) {
    if (!allowed.includes(prop)) {
      _window.console.error("setLayerAnimationTimeConfig takes timeFormat and/or timezone as options, found ".concat(prop));
      return accu;
    }

    // here we are NOT checking if timezone or timeFormat input is valid
    accu[prop] = config[prop];
    return accu;
  }, {});
}

/**
 * Update editor
 */
function setLayerAnimationTimeConfigUpdater(state, _ref33) {
  var config = _ref33.config;
  if (!config) {
    return state;
  }
  var updates = checkTimeConfigArgs(config);
  return (0, _composerHelpers.pick_)('animationConfig')((0, _composerHelpers.merge_)(updates))(state);
}

/**
 * Update editor
 */
function layerFilteredItemsChangeUpdater(state, action) {
  var _layer$filteredItemCo;
  var event = action.event,
    layer = action.layer;
  var deckglLayerId = event.id,
    count = event.count;
  if (!layer) {
    _window.console.warn("layerFilteredItems layer doesnt exists");
    return state;
  }
  if (((_layer$filteredItemCo = layer.filteredItemCount) === null || _layer$filteredItemCo === void 0 ? void 0 : _layer$filteredItemCo[deckglLayerId]) === count) {
    return state;
  }
  layer.filteredItemCount = _objectSpread(_objectSpread({}, layer.filteredItemCount), {}, (0, _defineProperty2["default"])({}, deckglLayerId, count));
  return _objectSpread(_objectSpread({}, state), {}, {
    layers: (0, _composerHelpers.swap_)(layer)(state.layers)
  });
}

// eslint-disable-next-line max-statements
function syncTimeFilterWithLayerTimelineUpdater(state, action) {
  var _newState$animationCo, _newState$animationCo2;
  var filterIdx = action.idx,
    _action$enable = action.enable,
    enable = _action$enable === void 0 ? false : _action$enable;
  var filter = state.filters[filterIdx];
  var newState = state;
  var newFilter = filter;

  // if we enable sync we are going to merge filter and animationConfig domains and store into filter.domain
  if (enable) {
    var animatableLayers = (0, _utils.getAnimatableVisibleLayers)(newState.layers);
    // if no animatableLayers are present we simply return
    if (!animatableLayers.length) {
      return newState;
    }
    var intervalBasedAnimationLayers = (0, _utils.getIntervalBasedAnimationLayers)(animatableLayers);
    var hasIntervalBasedAnimationLayer = Boolean(intervalBasedAnimationLayers.length);
    var newFilterDomain = (0, _utils.mergeTimeDomains)([filter.domain, newState.animationConfig.domain]);

    // we only update animationWindow if we have interval based animation layers with defined intervals and the current filter animation window is not interval
    if (hasIntervalBasedAnimationLayer) {
      if (filter.animationWindow !== _constants.ANIMATION_WINDOW.interval) {
        newState = setFilterAnimationWindowUpdater(newState, {
          id: filter.id,
          animationWindow: _constants.ANIMATION_WINDOW.interval
        });
      }
      newFilter = newState.filters[filterIdx];

      // adjust time filter interval
      newFilter = adjustTimeFilterInterval(newState, newFilter);

      // replace filter in state with newFilter
      newState = _objectSpread(_objectSpread({}, newState), {}, {
        filters: (0, _composerHelpers.swap_)(newFilter)(newState.filters)
      });
    }
    newFilter = newState.filters[filterIdx];

    // adjust value based on new domain
    var _newFilterValue = (0, _utils.adjustValueToFilterDomain)(newFilter.animationWindow === _constants.ANIMATION_WINDOW.interval ? [newFilterDomain[0], newFilterDomain[0]] : newFilterDomain, _objectSpread(_objectSpread({}, newFilter), {}, {
      domain: newFilterDomain
    }));
    newState = setFilterUpdater(newState, {
      idx: filterIdx,
      prop: 'value',
      value: _newFilterValue
    });
    newFilter = _objectSpread(_objectSpread({}, newState.filters[filterIdx]), {}, {
      syncedWithLayerTimeline: true
    });

    // replace filter in state with newFilter
    newState = _objectSpread(_objectSpread({}, newState), {}, {
      filters: (0, _composerHelpers.swap_)(newFilter)(newState.filters)
    });
    newState = setTimeFilterTimelineModeUpdater(newState, {
      id: newFilter.id,
      mode: getSyncAnimationMode(newFilter)
    });
    newFilter = newState.filters[filterIdx];

    // set the animation config value to match filter value
    return setLayerAnimationTimeUpdater(newState, {
      value: newFilter.value[newFilter.syncTimelineMode]
    });
  }

  // set domain and step
  newFilter = _objectSpread(_objectSpread({}, filter), {}, {
    syncedWithLayerTimeline: false
  });

  // replace filter in state with newFilter
  newState = _objectSpread(_objectSpread({}, newState), {}, {
    filters: (0, _composerHelpers.swap_)(newFilter)(newState.filters)
  });

  // reset sync timeline mode
  newState = setTimeFilterTimelineModeUpdater(newState, {
    id: newFilter.id,
    mode: _constants.SYNC_TIMELINE_MODES.end
  });
  newFilter = newState.filters[filterIdx];

  // reset filter value
  var newFilterValue = (0, _utils.adjustValueToFilterDomain)(newFilter.domain, newFilter);
  newState = setFilterUpdater(newState, {
    idx: filterIdx,
    prop: 'value',
    value: newFilterValue
  });
  newState = setTimeFilterTimelineModeUpdater(newState, {
    id: newFilter.id,
    mode: getSyncAnimationMode(newFilter)
  });

  // reset animation config current time to
  return setLayerAnimationTimeUpdater(newState, {
    value: (_newState$animationCo = (_newState$animationCo2 = newState.animationConfig.domain) === null || _newState$animationCo2 === void 0 ? void 0 : _newState$animationCo2[0]) !== null && _newState$animationCo !== void 0 ? _newState$animationCo : null
  });
}
function setTimeFilterTimelineModeUpdater(state, action) {
  var filterId = action.id,
    syncTimelineMode = action.mode;
  var filterIdx = state.filters.findIndex(function (f) {
    return f.id === filterId;
  });
  if (filterIdx === -1) {
    return state;
  }
  var filter = state.filters[filterIdx];
  if (!validateSyncAnimationMode(filter, syncTimelineMode)) {
    return state;
  }
  var newFilter = _objectSpread(_objectSpread({}, filter), {}, {
    syncTimelineMode: syncTimelineMode
  });
  var newState = _objectSpread(_objectSpread({}, state), {}, {
    filters: (0, _composerHelpers.swap_)(newFilter)(state.filters)
  });
  return adjustAnimationConfigWithFilter(newState, filterIdx);
}
function adjustAnimationConfigWithFilter(state, filterIdx) {
  var filter = state.filters[filterIdx];
  if (filter.syncedWithLayerTimeline) {
    var timelineValue = getTimelineValueFromFilter(filter);
    var value = state.animationConfig.timeSteps ? (0, _utils.snapToMarks)(timelineValue, state.animationConfig.timeSteps) : timelineValue;
    return setLayerAnimationTimeUpdater(state, {
      value: value
    });
  }
  return state;
}
function getTimelineValueFromFilter(filter) {
  return filter.value[filter.syncTimelineMode];
}
function getSyncAnimationMode(filter) {
  if (filter.animationWindow === _constants.ANIMATION_WINDOW.free) {
    var _filter$syncTimelineM;
    return (_filter$syncTimelineM = filter.syncTimelineMode) !== null && _filter$syncTimelineM !== void 0 ? _filter$syncTimelineM : _constants.SYNC_TIMELINE_MODES.end;
  }
  return _constants.SYNC_TIMELINE_MODES.end;
}
function validateSyncAnimationMode(filter, newMode) {
  return !(filter.animationWindow !== _constants.ANIMATION_WINDOW.free && newMode === _constants.SYNC_TIMELINE_MODES.start);
}
function adjustTimeFilterInterval(state, filter) {
  var intervalBasedAnimationLayers = (0, _utils.getIntervalBasedAnimationLayers)(state.layers);
  var interval = null;
  if (intervalBasedAnimationLayers.length > 0) {
    // @ts-ignore
    var intervalIndex = intervalBasedAnimationLayers.reduce(function (currentIndex, l) {
      if (l.meta.targetTimeInterval) {
        var newIndex = _utils.TIME_INTERVALS_ORDERED.findIndex(function (i) {
          return i === l.meta.targetTimeInterval;
        });
        return newIndex > -1 && newIndex < currentIndex ? newIndex : currentIndex;
      }
    }, _utils.TIME_INTERVALS_ORDERED.length - 1);
    // @ts-ignore
    var hexTileInterval = _utils.TIME_INTERVALS_ORDERED[intervalIndex];
    interval = _utils.LayerToFilterTimeInterval[hexTileInterval];
  }
  if (!interval) {
    return filter;
  }

  // adjust filter
  var timeFormat = (0, _utils.getDefaultTimeFormat)(interval);
  var updatedPlotType = _objectSpread(_objectSpread({}, filter.plotType), {}, {
    interval: interval,
    timeFormat: timeFormat
  });
  var newFilter = (0, _utils.updateTimeFilterPlotType)(filter, updatedPlotType, state.datasets);
  return (0, _utils.adjustValueToAnimationWindow)(state, newFilter);
}

// Find dataId from a saved visState property:
// layers, filters, interactions, layerBlending, overlayBlending, splitMaps, animationConfig, editor
// replace it with another dataId
function defaultReplaceParentDatasetIds(value, dataId, dataIdToReplace) {
  var _value$config, _value$config2;
  if (Array.isArray(value)) {
    // for layers, filters, call defaultReplaceParentDatasetIds on each item in array
    var replaced = value.map(function (v) {
      return defaultReplaceParentDatasetIds(v, dataId, dataIdToReplace);
    }).filter(function (d) {
      return d;
    });
    return replaced.length ? replaced : null;
  }
  if (typeof value.dataId === 'string' && value.dataId === dataId) {
    // others
    return _objectSpread(_objectSpread({}, value), {}, {
      dataId: dataIdToReplace
    });
  } else if (Array.isArray(value.dataId) && value.dataId.includes(dataId)) {
    // filter
    return _objectSpread(_objectSpread({}, value), {}, {
      dataId: value.dataId.map(function (d) {
        return d === dataId ? dataIdToReplace : d;
      })
    });
  } else if ((_value$config = value.config) !== null && _value$config !== void 0 && _value$config.dataId && ((_value$config2 = value.config) === null || _value$config2 === void 0 ? void 0 : _value$config2.dataId) === dataId) {
    // layer
    return _objectSpread(_objectSpread({}, value), {}, {
      config: _objectSpread(_objectSpread({}, value.config), {}, {
        dataId: dataIdToReplace
      })
    });
  } else if ((0, _utils.isObject)(value) && Object.prototype.hasOwnProperty.call(value, dataId)) {
    // for value saved as {[dataId]: {...}}
    return (0, _defineProperty2["default"])({}, dataIdToReplace, value[dataId]);
  }
  return null;
}

// Find datasetIds derived a saved visState Property;
function findChildDatasetIds(value) {
  var _value$newDataset;
  if (Array.isArray(value)) {
    // for layers, filters, call defaultReplaceParentDatasetIds on each item in array
    var childDataIds = value.map(findChildDatasetIds).filter(function (d) {
      return d;
    });
    return childDataIds.length ? childDataIds : null;
  }

  // child data id usually stores in the derived dataset info
  return (value === null || value === void 0 || (_value$newDataset = value.newDataset) === null || _value$newDataset === void 0 ? void 0 : _value$newDataset.info.id) || null;
}

// moved unmerged layers, filters, interactions
function moveValueToBeMerged(state, propValues, _ref35) {
  var prop = _ref35.prop,
    toMergeProp = _ref35.toMergeProp,
    saveUnmerged = _ref35.saveUnmerged;
  // remove prop value from state
  // TODO: should we add remove updater to merger as well?
  if (!propValues) {
    return state;
  }
  var stateRemoved = prop === 'layers' ? propValues.reduce(function (accu, propValue) {
    return removeLayerUpdater(accu, {
      id: propValue.id
    });
  }, state) : Array.isArray(state[prop]) ? _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2["default"])({}, prop, state[prop].filter(function (p) {
    return !propValues.find(function (propValue) {
      return p.id === propValue.id;
    });
  }))) :
  // if not array, we won't remove it, remove dataset should handle it
  state;

  // move to stateToBeMerged
  var toBeMerged = (0, _defineProperty2["default"])({}, toMergeProp, saveUnmerged ?
  // call merge saveUnmerged method
  saveUnmerged(stateRemoved, propValues) :
  // if toMergeProp is araay, append to it
  Array.isArray(stateRemoved[toMergeProp]) ? [].concat((0, _toConsumableArray2["default"])(stateRemoved[toMergeProp]), (0, _toConsumableArray2["default"])(propValues)) :
  // save propValues to toMerge
  (0, _utils.isObject)(stateRemoved[toMergeProp]) ? _objectSpread(_objectSpread({}, stateRemoved[toMergeProp]), propValues) : stateRemoved[toMergeProp]);
  return _objectSpread(_objectSpread({}, stateRemoved), toBeMerged);
}
function replaceDatasetAndDeps(state, dataId, dataIdToUse) {
  return (0, _composerHelpers.compose_)([(0, _composerHelpers.apply_)(replaceDatasetDepsInState, {
    dataId: dataId,
    dataIdToUse: dataIdToUse
  }), (0, _composerHelpers.apply_)(removeDatasetUpdater, {
    dataId: dataId
  })])(state);
}
function prepareStateForDatasetReplace(state, dataId, dataIdToUse) {
  var _nextState$layerToBeM;
  var serializedState = (0, _visStateMerger.serializeVisState)(state, state.schema);
  var nextState = replaceDatasetAndDeps(state, dataId, dataIdToUse);
  // make a copy of layerOrder, because layer id will be removed from it by calling removeLayerUpdater
  var preserveLayerOrder = (0, _toConsumableArray2["default"])(state.layerOrder);

  // preserve dataset order
  nextState.preserveDatasetOrder = Object.keys(state.datasets).map(function (d) {
    return d === dataId ? dataIdToUse : d;
  });

  // preserveLayerOrder
  if ((_nextState$layerToBeM = nextState.layerToBeMerged) !== null && _nextState$layerToBeM !== void 0 && _nextState$layerToBeM.length) {
    var _serializedState$spli;
    // copy split maps to be merged, because it will be reset in remove layer
    nextState.splitMapsToBeMerged = (_serializedState$spli = serializedState === null || serializedState === void 0 ? void 0 : serializedState.splitMaps) !== null && _serializedState$spli !== void 0 ? _serializedState$spli : [];
    nextState.layerOrder = (0, _toConsumableArray2["default"])(preserveLayerOrder);
  }
  return nextState;
}
function replaceDatasetDepsInState(state, _ref36) {
  var dataId = _ref36.dataId,
    dataIdToUse = _ref36.dataIdToUse;
  var serializedState = (0, _visStateMerger.serializeVisState)(state, state.schema);
  var nextState = state.mergers.reduce(function (accuState, _ref37) {
    var prop = _ref37.prop,
      toMergeProp = _ref37.toMergeProp,
      replaceParentDatasetIds = _ref37.replaceParentDatasetIds,
      getChildDatasetIds = _ref37.getChildDatasetIds,
      saveUnmerged = _ref37.saveUnmerged,
      preserveOrder = _ref37.preserveOrder;
    // get dataset ids that are depends on this dataset
    var props = (0, _commonUtils.toArray)(prop);
    var toMergeProps = (0, _commonUtils.toArray)(toMergeProp);
    var savedProps = serializedState ? props.map(function (p) {
      return serializedState[p];
    }) : [];
    var replacedState = accuState;
    savedProps.forEach(function (propValue, i) {
      var _replacedState$merger;
      var mergerOptions = {
        prop: props[i],
        toMergeProp: toMergeProps[i],
        getChildDatasetIds: getChildDatasetIds,
        saveUnmerged: saveUnmerged
      };
      var replacedItem = (replaceParentDatasetIds === null || replaceParentDatasetIds === void 0 ? void 0 : replaceParentDatasetIds(propValue, dataId, dataIdToUse)) || defaultReplaceParentDatasetIds(propValue, dataId, dataIdToUse);
      replacedState = replacedItem ? replacePropValueInState(replacedState, replacedItem, mergerOptions) : replacedState;
      if (mergerOptions.toMergeProp !== undefined && (_replacedState$merger = replacedState[mergerOptions.toMergeProp]) !== null && _replacedState$merger !== void 0 && _replacedState$merger.length && preserveOrder) {
        replacedState[preserveOrder] = propValue.map(function (item) {
          return item.id;
        });
      }
    });
    return replacedState;
  }, state);
  return nextState;
}
function replacePropValueInState(state, replacedItem, _ref38) {
  var prop = _ref38.prop,
    toMergeProp = _ref38.toMergeProp,
    getChildDatasetIds = _ref38.getChildDatasetIds,
    saveUnmerged = _ref38.saveUnmerged;
  // prop is depends on the dataset to be replaced
  // remove prop from state, and move it to toBeMerged
  var nextState = moveValueToBeMerged(state, replacedItem, {
    prop: prop,
    toMergeProp: toMergeProp,
    saveUnmerged: saveUnmerged
  });
  var childDataIds = (getChildDatasetIds === null || getChildDatasetIds === void 0 ? void 0 : getChildDatasetIds(replacedItem)) || findChildDatasetIds(replacedItem);
  if (childDataIds) {
    nextState = (0, _commonUtils.toArray)(childDataIds).reduce(function (accu, childDataId) {
      // shouldn't need to change child dataset id,
      // but still need to move out of state and merge back in
      return replaceDatasetAndDeps(accu, childDataId, childDataId);
    }, nextState);
  }
  return nextState;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,