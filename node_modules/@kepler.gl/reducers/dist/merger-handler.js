"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPropValueToMerger = getPropValueToMerger;
exports.hasPropsToMerge = hasPropsToMerge;
exports.isValidMerger = isValidMerger;
exports.mergeStateFromMergers = mergeStateFromMergers;
exports.resetStateToMergeProps = resetStateToMergeProps;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _tasks = require("react-palm/tasks");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function isValidMerger(merger) {
  return (0, _utils.isObject)(merger) && typeof merger.merge === 'function' && (typeof merger.prop === 'string' || Array.isArray(merger.prop));
}

/**
 * Call state updater, return the tasks created by the state update with withTask()
 */
function callFunctionGetTask(fn) {
  var before = (0, _tasks.getGlobalTaskQueue)();
  var ret = fn();
  var after = (0, _tasks.getGlobalTaskQueue)();
  var diff = after.filter(function (t) {
    return !before.includes(t);
  });
  return [ret, diff];
}
function mergeStateFromMergers(state, initialState, mergers, postMergerPayload) {
  // const newDataIds = Object.keys(postMergerPayload.newDataEntries);
  var mergedState = state;
  // merge state with config to be merged
  var mergerQueue = (0, _toConsumableArray2["default"])(mergers);
  var _loop = function _loop() {
      var merger = mergerQueue.shift();
      if (merger && isValidMerger(merger) && merger.toMergeProp && hasPropsToMerge(state, merger.toMergeProp)) {
        // put the rest of mergers and payload for postMergeUpdater in mergerActionPayload
        // and pass it to current merger, which (if async) knows to continue merging
        var mergerActionPayload = {
          mergers: mergerQueue,
          postMergerPayload: postMergerPayload
        };
        // reset toMerge
        var toMerge = getPropValueToMerger(mergedState, merger.toMergeProp, merger.toMergeProp);
        mergedState = resetStateToMergeProps(mergedState, initialState, merger.toMergeProp);
        // call merger
        // eslint-disable-next-line no-loop-func
        var mergeFunc = function mergeFunc() {
          return merger.merge(mergedState, toMerge, false, mergerActionPayload);
        };
        var _callFunctionGetTask = callFunctionGetTask(mergeFunc),
          _callFunctionGetTask2 = (0, _slicedToArray2["default"])(_callFunctionGetTask, 2),
          updatedState = _callFunctionGetTask2[0],
          newTasks = _callFunctionGetTask2[1];
        mergedState = updatedState;

        // check if asyncTask was created (time consuming tasks)
        if (newTasks.length && merger.waitToFinish) {
          // skip rest, the async merger will call applyMergerUpdater() to continue
          return {
            v: {
              mergedState: mergedState,
              allMerged: false
            }
          };
        }
      }
    },
    _ret;
  while (mergerQueue.length) {
    _ret = _loop();
    if (_ret) return _ret.v;
  }

  // we merged all mergers in the queue, and we can call post merger now
  return {
    mergedState: mergedState,
    allMerged: true
  };
}
function hasPropsToMerge(state, mergerProps) {
  return Array.isArray(mergerProps) ? Boolean(mergerProps.some(function (p) {
    return Object.prototype.hasOwnProperty.call(state, p);
  })) : typeof mergerProps === 'string' && Object.prototype.hasOwnProperty.call(state, mergerProps);
}
function getPropValueToMerger(state, mergerProps, toMergeProps) {
  return Array.isArray(mergerProps) && Array.isArray(toMergeProps) ? mergerProps.reduce(function (accu, p, i) {
    if (!toMergeProps) return accu;
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, toMergeProps[i], state[p]));
  }, {}) : state[mergerProps];
}
function resetStateToMergeProps(state, initialState, mergerProps) {
  return (0, _commonUtils.toArray)(mergerProps).reduce(function (accu, prop) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, prop, initialState[prop]));
  }, state);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,