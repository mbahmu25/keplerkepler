// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import { BlobFile } from '@loaders.gl/loader-utils';
import { parseParquetFile, parseParquetFileInBatches } from "./lib/parsers/parse-parquet.js";
import { parseGeoParquetFile, parseGeoParquetFileInBatches } from "./lib/parsers/parse-geoparquet.js";
import { parseParquetFileInColumns, parseParquetFileInColumnarBatches } from "./lib/parsers/parse-parquet-to-columns.js";
// Note: The Buffer polyfill is quite fragile
// For some reason, just exporting directly fails with some bundlers
// export {Buffer} from './polyfills/buffer/install-buffer-polyfill';
import { Buffer } from "./polyfills/buffer/install-buffer-polyfill.js";
export { Buffer };
// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION = typeof "4.3.3" !== 'undefined' ? "4.3.3" : 'latest';
/**
 * ParquetJS table loader
 */
export const ParquetWorkerLoader = {
    dataType: null,
    batchType: null,
    name: 'Apache Parquet',
    id: 'parquet',
    module: 'parquet',
    version: VERSION,
    worker: false,
    category: 'table',
    extensions: ['parquet'],
    mimeTypes: ['application/octet-stream'],
    binary: true,
    tests: ['PAR1', 'PARE'],
    options: {
        parquet: {
            shape: 'object-row-table',
            columnList: [],
            geoparquet: true,
            url: undefined,
            preserveBinary: false
        }
    }
};
/** ParquetJS table loader */
export const ParquetLoader = {
    ...ParquetWorkerLoader,
    dataType: null,
    batchType: null,
    parse: (arrayBuffer, options) => parseParquetFile(new BlobFile(arrayBuffer), options),
    parseFile: parseParquetFile,
    parseFileInBatches: parseParquetFileInBatches
};
// Defeat tree shaking
// @ts-ignore
ParquetLoader.Buffer = Buffer;
export const GeoParquetWorkerLoader = {
    dataType: null,
    batchType: null,
    name: 'Apache Parquet',
    id: 'parquet',
    module: 'parquet',
    version: VERSION,
    worker: true,
    category: 'table',
    extensions: ['parquet'],
    mimeTypes: ['application/octet-stream'],
    binary: true,
    tests: ['PAR1', 'PARE'],
    options: {
        parquet: {
            shape: 'geojson-table',
            columnList: [],
            geoparquet: true,
            url: undefined,
            preserveBinary: false
        }
    }
};
/** ParquetJS table loader */
export const GeoParquetLoader = {
    ...GeoParquetWorkerLoader,
    parse(arrayBuffer, options) {
        return parseGeoParquetFile(new BlobFile(arrayBuffer), options);
    },
    parseFile: parseGeoParquetFile,
    parseFileInBatches: parseGeoParquetFileInBatches
};
/** @deprecated Test to see if we can improve perf of parquetjs loader */
export const ParquetColumnarWorkerLoader = {
    dataType: null,
    batchType: null,
    name: 'Apache Parquet',
    id: 'parquet',
    module: 'parquet',
    version: VERSION,
    worker: true,
    category: 'table',
    extensions: ['parquet'],
    mimeTypes: ['application/octet-stream'],
    binary: true,
    tests: ['PAR1', 'PARE'],
    options: ParquetLoader.options
};
/** @deprecated Test to see if we can improve perf of parquetjs loader */
export const ParquetColumnarLoader = {
    ...ParquetColumnarWorkerLoader,
    parse(arrayBuffer, options) {
        return parseParquetFileInColumns(new BlobFile(arrayBuffer), options);
    },
    parseFile: parseParquetFileInColumns,
    parseFileInBatches: parseParquetFileInColumnarBatches
};
