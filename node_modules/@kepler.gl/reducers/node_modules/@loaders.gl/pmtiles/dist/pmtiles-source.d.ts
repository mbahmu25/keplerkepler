import type { Schema } from '@loaders.gl/schema';
import type { VectorTileSource, GetTileParameters, GetTileDataParameters, ImageTileSource, ImageType } from '@loaders.gl/loader-utils';
import { DataSource, DataSourceProps } from '@loaders.gl/loader-utils';
import { ImageLoaderOptions } from '@loaders.gl/images';
import { MVTLoaderOptions, TileJSONLoaderOptions } from '@loaders.gl/mvt';
import * as pmtiles from 'pmtiles';
import type { PMTilesMetadata } from "./lib/parse-pmtiles.js";
/**
 * Creates vector tile data sources for PMTiles urls or blobs
 */
export declare const PMTilesSource: {
    readonly name: "PMTiles";
    readonly id: "pmtiles";
    readonly module: "pmtiles";
    readonly version: "1.0.0";
    readonly extensions: ["pmtiles"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly options: {
        readonly url: never;
        readonly pmtiles: {};
    };
    readonly type: "pmtiles";
    readonly fromUrl: true;
    readonly fromBlob: true;
    readonly testURL: (url: string) => boolean;
    readonly createDataSource: (url: string | Blob, props: PMTilesTileSourceProps) => PMTilesTileSource;
};
export type PMTilesTileSourceProps = DataSourceProps & {
    attributions?: string[];
    pmtiles?: {
        loadOptions?: TileJSONLoaderOptions & MVTLoaderOptions & ImageLoaderOptions;
    };
};
/**
 * A PMTiles data source
 * @note Can be either a raster or vector tile source depending on the contents of the PMTiles file.
 */
export declare class PMTilesTileSource extends DataSource implements ImageTileSource, VectorTileSource {
    data: string | Blob;
    props: PMTilesTileSourceProps;
    mimeType: string | null;
    pmtiles: pmtiles.PMTiles;
    metadata: Promise<PMTilesMetadata>;
    constructor(data: string | Blob, props: PMTilesTileSourceProps);
    getSchema(): Promise<Schema>;
    getMetadata(): Promise<PMTilesMetadata>;
    getTile(tileParams: GetTileParameters): Promise<ArrayBuffer | null>;
    getTileData(tileParams: GetTileDataParameters): Promise<any>;
    getImageTile(tileParams: GetTileParameters): Promise<ImageType | null>;
    getVectorTile(tileParams: GetTileParameters): Promise<unknown | null>;
}
//# sourceMappingURL=pmtiles-source.d.ts.map