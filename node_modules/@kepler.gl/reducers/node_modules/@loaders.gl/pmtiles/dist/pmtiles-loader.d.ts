import type { LoaderOptions, ReadableFile } from '@loaders.gl/loader-utils';
import { VectorSourceInfo, ImageSourceInfo } from "./source-info.js";
import { PMTilesTileSourceProps } from "./pmtiles-source.js";
export type PMTilesLoaderOptions = LoaderOptions & {
    pmtiles?: PMTilesTileSourceProps['pmtiles'];
};
/**
 * Loader for PMTiles metadata
 * @note This loader is intended to allow PMTiles to be treated like other file types in top-level loading logic.
 * @note For actual access to the tile data, use the PMTilesSource class.
 */
export declare const PMTilesLoader: {
    readonly name: "PMTiles";
    readonly id: "pmtiles";
    readonly module: "pmtiles";
    readonly version: any;
    readonly extensions: ["pmtiles"];
    readonly mimeTypes: ["application/octet-stream"];
    readonly tests: ["PMTiles"];
    readonly options: {
        readonly pmtiles: {};
    };
    readonly parse: (arrayBuffer: ArrayBuffer, options?: PMTilesLoaderOptions) => Promise<VectorSourceInfo | ImageSourceInfo>;
    readonly parseFile: typeof parseFileAsPMTiles;
};
declare function parseFileAsPMTiles(file: ReadableFile, options?: PMTilesLoaderOptions): Promise<VectorSourceInfo | ImageSourceInfo>;
export {};
//# sourceMappingURL=pmtiles-loader.d.ts.map