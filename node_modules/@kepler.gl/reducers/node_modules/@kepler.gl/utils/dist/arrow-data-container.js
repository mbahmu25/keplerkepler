"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrowDataContainer = void 0;
exports.arrowDataTypeToAnalyzerDataType = arrowDataTypeToAnalyzerDataType;
exports.arrowDataTypeToFieldType = arrowDataTypeToFieldType;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var arrow = _interopRequireWildcard(require("apache-arrow"));
var _window = require("global/window");
var _typeAnalyzer = require("type-analyzer");
var _constants = require("@kepler.gl/constants");
var _dataRow = require("./data-row");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
var _marked = /*#__PURE__*/_regenerator["default"].mark(rowsIterator),
  _marked2 = /*#__PURE__*/_regenerator["default"].mark(columnIterator); // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * @param dataContainer
 * @param sharedRow
 */
function rowsIterator(dataContainer, sharedRow) {
  var numRows, rowIndex;
  return _regenerator["default"].wrap(function rowsIterator$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        numRows = dataContainer.numRows();
        rowIndex = 0;
      case 2:
        if (!(rowIndex < numRows)) {
          _context.next = 8;
          break;
        }
        _context.next = 5;
        return dataContainer.row(rowIndex, sharedRow);
      case 5:
        ++rowIndex;
        _context.next = 2;
        break;
      case 8:
      case "end":
        return _context.stop();
    }
  }, _marked);
}

/**
 * @param dataContainer
 * @param columnIndex
 */
function columnIterator(dataContainer, columnIndex) {
  var numRows, rowIndex;
  return _regenerator["default"].wrap(function columnIterator$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        numRows = dataContainer.numRows();
        rowIndex = 0;
      case 2:
        if (!(rowIndex < numRows)) {
          _context2.next = 8;
          break;
        }
        _context2.next = 5;
        return dataContainer.valueAt(rowIndex, columnIndex);
      case 5:
        ++rowIndex;
        _context2.next = 2;
        break;
      case 8:
      case "end":
        return _context2.stop();
    }
  }, _marked2);
}

/**
 * A data container where all data is stored in raw Arrow table
 */
var ArrowDataContainer = exports.ArrowDataContainer = /*#__PURE__*/function () {
  function ArrowDataContainer(data) {
    (0, _classCallCheck2["default"])(this, ArrowDataContainer);
    (0, _defineProperty2["default"])(this, "_cols", void 0);
    (0, _defineProperty2["default"])(this, "_numColumns", void 0);
    (0, _defineProperty2["default"])(this, "_numRows", void 0);
    (0, _defineProperty2["default"])(this, "_fields", void 0);
    (0, _defineProperty2["default"])(this, "_numChunks", void 0);
    // cache column data to make valueAt() faster
    // _colData: any[][];
    /** An arrow table recreated from vectors */
    (0, _defineProperty2["default"])(this, "_arrowTable", void 0);
    if (!data.cols) {
      throw Error('ArrowDataContainer: no columns provided');
    }
    if (!Array.isArray(data.cols)) {
      throw Error("ArrowDataContainer: columns object isn't an array");
    }
    this._cols = data.cols;
    this._numColumns = data.cols.length;
    this._numRows = data.cols[0].length;
    this._fields = data.fields || [];
    this._numChunks = data.cols[0].data.length;
    // this._colData = data.cols.map(c => c.toArray());

    this._arrowTable = this._createTable();
  }

  /**
   * Restores internal Arrow table from vectors.
   * TODO: consider using original arrow table, as it could contain extra metadata, not passed to the fields.
   */
  return (0, _createClass2["default"])(ArrowDataContainer, [{
    key: "_createTable",
    value: function _createTable() {
      var _this = this;
      var creaOpts = {};
      this._fields.map(function (field, index) {
        creaOpts[field.name] = _this._cols[index];
      });
      return new arrow.Table(creaOpts);
    }
  }, {
    key: "getTable",
    value: function getTable() {
      return this._arrowTable;
    }
  }, {
    key: "update",
    value: function update(updateData) {
      this._cols = updateData;
      this._numColumns = this._cols.length;
      this._numRows = this._cols[0].length;
      this._numChunks = this._cols[0].data.length;
      this._arrowTable = this._createTable();

      // cache column data to make valueAt() faster
      // this._colData = this._cols.map(c => c.toArray());
    }
  }, {
    key: "numChunks",
    value: function numChunks() {
      return this._numChunks;
    }
  }, {
    key: "numRows",
    value: function numRows() {
      return this._numRows;
    }
  }, {
    key: "numColumns",
    value: function numColumns() {
      return this._numColumns;
    }
  }, {
    key: "valueAt",
    value: function valueAt(rowIndex, columnIndex) {
      // return this._colData[columnIndex][rowIndex];
      return this._cols[columnIndex].get(rowIndex);
    }
  }, {
    key: "row",
    value: function row(rowIndex, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      if (tSharedRow) {
        tSharedRow.setSource(this, rowIndex);
        return tSharedRow;
      }
      return new _dataRow.DataRow(this, rowIndex);
    }
  }, {
    key: "rowAsArray",
    value: function rowAsArray(rowIndex) {
      // return this._colData.map(col => col[rowIndex]);
      return this._cols.map(function (col) {
        return col.get(rowIndex);
      });
    }
  }, {
    key: "rows",
    value: function rows(sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      return rowsIterator(this, tSharedRow);
    }
  }, {
    key: "column",
    value: function column(columnIndex) {
      return columnIterator(this, columnIndex);
    }
  }, {
    key: "getColumn",
    value: function getColumn(columnIndex) {
      return this._cols[columnIndex];
    }
  }, {
    key: "getField",
    value: function getField(columnIndex) {
      return this._fields[columnIndex];
    }
  }, {
    key: "flattenData",
    value: function flattenData() {
      var data = [];
      for (var i = 0; i < this._numRows; ++i) {
        data.push(this.rowAsArray(i));
      }
      return data;
    }
  }, {
    key: "getPlainIndex",
    value: function getPlainIndex() {
      return (0, _toConsumableArray2["default"])(Array(this._numRows).keys());
    }
  }, {
    key: "map",
    value: function map(func, sharedRow) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      var _options$start = options.start,
        start = _options$start === void 0 ? 0 : _options$start,
        _options$end = options.end,
        end = _options$end === void 0 ? this.numRows() : _options$end;
      var endRow = Math.min(this.numRows(), end);
      var out = [];
      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        out.push(func(row, rowIndex));
      }
      return out;
    }
  }, {
    key: "mapIndex",
    value: function mapIndex(func) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$start2 = options.start,
        start = _options$start2 === void 0 ? 0 : _options$start2,
        _options$end2 = options.end,
        end = _options$end2 === void 0 ? this.numRows() : _options$end2;
      var endRow = Math.min(this.numRows(), end);
      var out = [];
      for (var rowIndex = start; rowIndex < endRow; ++rowIndex) {
        out.push(func({
          index: rowIndex
        }, this));
      }
      return out;
    }
  }, {
    key: "find",
    value: function find(func, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      for (var rowIndex = 0; rowIndex < this._numRows; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        if (func(row, rowIndex)) {
          return row;
        }
      }
      return undefined;
    }
  }, {
    key: "reduce",
    value: function reduce(func, initialValue, sharedRow) {
      var tSharedRow = _dataRow.DataRow.createSharedRow(sharedRow);
      for (var rowIndex = 0; rowIndex < this._numRows; ++rowIndex) {
        var row = this.row(rowIndex, tSharedRow);
        initialValue = func(initialValue, row, rowIndex);
      }
      return initialValue;
    }
  }]);
}();
/**
 * Convert arrow data type to kepler.gl field types
 *
 * @param arrowType the arrow data type
 * @returns corresponding type in `ALL_FIELD_TYPES`
 */
function arrowDataTypeToFieldType(arrowType) {
  // Note: this function doesn't return ALL_FIELD_TYPES.geojson or ALL_FIELD_TYPES.array, which
  // should be further detected by caller
  if (arrow.DataType.isDate(arrowType)) {
    return _constants.ALL_FIELD_TYPES.date;
  } else if (arrow.DataType.isTimestamp(arrowType) || arrow.DataType.isTime(arrowType)) {
    return _constants.ALL_FIELD_TYPES.timestamp;
  } else if (arrow.DataType.isFloat(arrowType)) {
    return _constants.ALL_FIELD_TYPES.real;
  } else if (arrow.DataType.isInt(arrowType)) {
    return _constants.ALL_FIELD_TYPES.integer;
  } else if (arrow.DataType.isBool(arrowType)) {
    return _constants.ALL_FIELD_TYPES["boolean"];
  } else if (arrow.DataType.isUtf8(arrowType) || arrow.DataType.isNull(arrowType)) {
    return _constants.ALL_FIELD_TYPES.string;
  } else if (arrow.DataType.isBinary(arrowType) || arrow.DataType.isDictionary(arrowType) || arrow.DataType.isFixedSizeBinary(arrowType) || arrow.DataType.isFixedSizeList(arrowType) || arrow.DataType.isList(arrowType) || arrow.DataType.isMap(arrowType) || arrow.DataType.isStruct(arrowType)) {
    return _constants.ALL_FIELD_TYPES.object;
  }
  _window.console.warn("Unsupported arrow type: ".concat(arrowType));
  return _constants.ALL_FIELD_TYPES.string;
}

/**
 * Convert arrow data type to analyzer type
 *
 * @param arrowType the arrow data type
 * @returns corresponding type in `AnalyzerDATA_TYPES`
 */
function arrowDataTypeToAnalyzerDataType(arrowType) {
  if (arrow.DataType.isDate(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.DATE;
  } else if (arrow.DataType.isTimestamp(arrowType) || arrow.DataType.isTime(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.DATETIME;
  } else if (arrow.DataType.isFloat(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.FLOAT;
  } else if (arrow.DataType.isInt(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.INT;
  } else if (arrow.DataType.isBool(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.BOOLEAN;
  } else if (arrow.DataType.isUtf8(arrowType) || arrow.DataType.isNull(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.STRING;
  } else if (arrow.DataType.isBinary(arrowType) || arrow.DataType.isDictionary(arrowType) || arrow.DataType.isFixedSizeBinary(arrowType) || arrow.DataType.isFixedSizeList(arrowType) || arrow.DataType.isList(arrowType) || arrow.DataType.isMap(arrowType) || arrow.DataType.isStruct(arrowType)) {
    return _typeAnalyzer.DATA_TYPES.OBJECT;
  }
  _window.console.warn("Unsupported arrow type: ".concat(arrowType));
  return _typeAnalyzer.DATA_TYPES.STRING;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,