"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filesToDataPayload = filesToDataPayload;
exports.isArrowData = isArrowData;
exports.isArrowTable = isArrowTable;
exports.isFeature = isFeature;
exports.isFeatureCollection = isFeatureCollection;
exports.isGeoJson = isGeoJson;
exports.isKeplerGlMap = isKeplerGlMap;
exports.isRowObject = isRowObject;
exports.makeProgressIterator = makeProgressIterator;
exports.processFileData = processFileData;
exports.readBatch = readBatch;
exports.readFileInBatches = readFileInBatches;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));
var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));
var arrow = _interopRequireWildcard(require("apache-arrow"));
var _core = require("@loaders.gl/core");
var _json = require("@loaders.gl/json");
var _csv = require("@loaders.gl/csv");
var _arrow = require("@loaders.gl/arrow");
var _parquet = require("@loaders.gl/parquet");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
var _constants = require("@kepler.gl/constants");
var _table = require("@kepler.gl/table");
var _dataProcessor = require("./data-processor");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _asyncIterator(r) { var n, t, o, e = 2; for ("undefined" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = "@@asyncIterator", o = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, "return": function _return(r) { var n = this.s["return"]; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, "throw": function _throw(r) { var n = this.s["return"]; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var BATCH_TYPE = {
  METADATA: 'metadata',
  PARTIAL_RESULT: 'partial-result',
  FINAL_RESULT: 'final-result'
};
var CSV_LOADER_OPTIONS = {
  shape: 'object-row-table',
  dynamicTyping: false // not working for now
};
var ARROW_LOADER_OPTIONS = {
  shape: 'arrow-table',
  batchDebounceMs: 10 // time to delay between batches, for incremental loading
};
var PARQUET_LOADER_OPTIONS = {
  shape: 'arrow-table'
};
var JSON_LOADER_OPTIONS = {
  shape: 'object-row-table',
  // instruct loaders.gl on what json paths to stream
  jsonpaths: ['$',
  // JSON Row array
  '$.features',
  // GeoJSON
  '$.datasets' // KeplerGL JSON
  ]
};
/**
 * check if table is an ArrowTable object
 * @param table - object to check
 * @returns {boolean} - true if table is an ArrowTable object type guarded
 */
function isArrowTable(table) {
  return Boolean(table instanceof arrow.Table);
}

/**
 * check if data is an ArrowData object, which is an array of RecordBatch
 * @param data - object to check
 * @returns {boolean} - true if data is an ArrowData object type guarded
 */
function isArrowData(data) {
  return Array.isArray(data) && Boolean(data.length && data[0].data && data[0].schema);
}
function isGeoJson(json) {
  // json can be feature collection
  // or single feature
  return (0, _utils.isPlainObject)(json) && (isFeature(json) || isFeatureCollection(json));
}
function isFeature(json) {
  return (0, _utils.isPlainObject)(json) && json.type === 'Feature' && Boolean(json.geometry);
}
function isFeatureCollection(json) {
  return (0, _utils.isPlainObject)(json) && json.type === 'FeatureCollection' && Boolean(json.features);
}
function isRowObject(json) {
  return Array.isArray(json) && (0, _utils.isPlainObject)(json[0]);
}
function isKeplerGlMap(json) {
  return Boolean((0, _utils.isPlainObject)(json) && json.datasets && json.config && json.info && (0, _utils.isPlainObject)(json.info) && json.info.app === 'kepler.gl');
}
function makeProgressIterator(_x, _x2) {
  return _makeProgressIterator.apply(this, arguments);
} // eslint-disable-next-line complexity
function _makeProgressIterator() {
  _makeProgressIterator = (0, _wrapAsyncGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(asyncIterator, info) {
    var rowCount, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch, rowCountInBatch, percent, progress;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          rowCount = 0;
          _iteratorAbruptCompletion = false;
          _didIteratorError = false;
          _context.prev = 3;
          _iterator = _asyncIterator(asyncIterator);
        case 5:
          _context.next = 7;
          return (0, _awaitAsyncGenerator2["default"])(_iterator.next());
        case 7:
          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {
            _context.next = 18;
            break;
          }
          batch = _step.value;
          // the length could be stored in `batch.length` for arrow batch
          rowCountInBatch = batch.data && (batch.data.length || batch.length) || 0;
          rowCount += rowCountInBatch;
          percent = Number.isFinite(batch.bytesUsed) ? batch.bytesUsed / info.size : null; // Update progress object
          progress = _objectSpread({
            rowCount: rowCount,
            rowCountInBatch: rowCountInBatch
          }, Number.isFinite(percent) ? {
            percent: percent
          } : {});
          _context.next = 15;
          return _objectSpread(_objectSpread({}, batch), {}, {
            progress: progress
          });
        case 15:
          _iteratorAbruptCompletion = false;
          _context.next = 5;
          break;
        case 18:
          _context.next = 24;
          break;
        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](3);
          _didIteratorError = true;
          _iteratorError = _context.t0;
        case 24:
          _context.prev = 24;
          _context.prev = 25;
          if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
            _context.next = 29;
            break;
          }
          _context.next = 29;
          return (0, _awaitAsyncGenerator2["default"])(_iterator["return"]());
        case 29:
          _context.prev = 29;
          if (!_didIteratorError) {
            _context.next = 32;
            break;
          }
          throw _iteratorError;
        case 32:
          return _context.finish(29);
        case 33:
          return _context.finish(24);
        case 34:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[3, 20, 24, 34], [25,, 29, 33]]);
  }));
  return _makeProgressIterator.apply(this, arguments);
}
function readBatch(_x3, _x4) {
  return _readBatch.apply(this, arguments);
}
function _readBatch() {
  _readBatch = (0, _wrapAsyncGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(asyncIterator, fileName) {
    var result, batches, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, batch, streamingPath, batchData, i;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          result = null;
          batches = [];
          _iteratorAbruptCompletion2 = false;
          _didIteratorError2 = false;
          _context2.prev = 4;
          _iterator2 = _asyncIterator(asyncIterator);
        case 6:
          _context2.next = 8;
          return (0, _awaitAsyncGenerator2["default"])(_iterator2.next());
        case 8:
          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {
            _context2.next = 16;
            break;
          }
          batch = _step2.value;
          // Last batch will have this special type and will provide all the root
          // properties of the parsed document.
          // Only json parse will have `FINAL_RESULT`
          if (batch.batchType === BATCH_TYPE.FINAL_RESULT) {
            if (batch.container) {
              result = _objectSpread({}, batch.container);
            }
            // Set the streamed data correctly is Batch json path is set
            // and the path streamed is not the top level object (jsonpath = '$')
            if (batch.jsonpath && batch.jsonpath.length > 1) {
              streamingPath = new _json._JSONPath(batch.jsonpath);
              streamingPath.setFieldAtPath(result, batches);
            } else if (batch.jsonpath && batch.jsonpath.length === 1) {
              // The streamed object is a ROW JSON-batch (jsonpath = '$')
              // row objects
              result = batches;
            }
          } else {
            batchData = isArrowTable(batch.data) ? batch.data.batches : batch.data;
            for (i = 0; i < (batchData === null || batchData === void 0 ? void 0 : batchData.length); i++) {
              batches.push(batchData[i]);
            }
          }
          _context2.next = 13;
          return _objectSpread(_objectSpread(_objectSpread({}, batch), batch.schema ? {
            headers: Object.keys(batch.schema)
          } : {}), {}, {
            fileName: fileName,
            // if dataset is CSV, data is set to the raw batches
            data: result ? result : batches
          });
        case 13:
          _iteratorAbruptCompletion2 = false;
          _context2.next = 6;
          break;
        case 16:
          _context2.next = 22;
          break;
        case 18:
          _context2.prev = 18;
          _context2.t0 = _context2["catch"](4);
          _didIteratorError2 = true;
          _iteratorError2 = _context2.t0;
        case 22:
          _context2.prev = 22;
          _context2.prev = 23;
          if (!(_iteratorAbruptCompletion2 && _iterator2["return"] != null)) {
            _context2.next = 27;
            break;
          }
          _context2.next = 27;
          return (0, _awaitAsyncGenerator2["default"])(_iterator2["return"]());
        case 27:
          _context2.prev = 27;
          if (!_didIteratorError2) {
            _context2.next = 30;
            break;
          }
          throw _iteratorError2;
        case 30:
          return _context2.finish(27);
        case 31:
          return _context2.finish(22);
        case 32:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[4, 18, 22, 32], [23,, 27, 31]]);
  }));
  return _readBatch.apply(this, arguments);
}
function readFileInBatches(_x5) {
  return _readFileInBatches.apply(this, arguments);
}
function _readFileInBatches() {
  _readFileInBatches = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(_ref) {
    var file, _ref$loaders, loaders, _ref$loadOptions, loadOptions, batchIterator, progressIterator;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          file = _ref.file, _ref$loaders = _ref.loaders, loaders = _ref$loaders === void 0 ? [] : _ref$loaders, _ref$loadOptions = _ref.loadOptions, loadOptions = _ref$loadOptions === void 0 ? {} : _ref$loadOptions;
          loaders = [_json.JSONLoader, _csv.CSVLoader, _arrow.GeoArrowLoader, _parquet.ParquetWasmLoader].concat((0, _toConsumableArray2["default"])(loaders));
          loadOptions = _objectSpread({
            csv: CSV_LOADER_OPTIONS,
            arrow: ARROW_LOADER_OPTIONS,
            json: JSON_LOADER_OPTIONS,
            parquet: PARQUET_LOADER_OPTIONS,
            metadata: true
          }, loadOptions);
          _context3.next = 5;
          return (0, _core.parseInBatches)(file, loaders, loadOptions);
        case 5:
          batchIterator = _context3.sent;
          progressIterator = makeProgressIterator(batchIterator, {
            size: file.size
          });
          return _context3.abrupt("return", readBatch(progressIterator, file.name));
        case 8:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _readFileInBatches.apply(this, arguments);
}
function processFileData(_x6) {
  return _processFileData.apply(this, arguments);
}
function _processFileData() {
  _processFileData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(_ref2) {
    var _getApplicationConfig;
    var content, fileCache, fileName, data, format, processor, id, table, processorResult, result;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          content = _ref2.content, fileCache = _ref2.fileCache;
          fileName = content.fileName, data = content.data;
          console.log('Processing file', fileName);
          // generate unique id with length of 4 using fileName string
          id = (0, _utils.generateHashIdFromString)(fileName); // decide on which table class to use based on application config
          table = (_getApplicationConfig = (0, _utils.getApplicationConfig)().table) !== null && _getApplicationConfig !== void 0 ? _getApplicationConfig : _table.KeplerTable;
          if (typeof table.getFileProcessor === 'function') {
            // use custom processors from table class
            processorResult = table.getFileProcessor(data);
            format = processorResult.format;
            processor = processorResult.processor;
          } else {
            // use default processors
            if (isArrowData(data)) {
              format = _constants.DATASET_FORMATS.arrow;
              processor = _dataProcessor.processArrowBatches;
            } else if (isKeplerGlMap(data)) {
              format = _constants.DATASET_FORMATS.keplergl;
              processor = _dataProcessor.processKeplerglJSON;
            } else if (isRowObject(data)) {
              // csv file goes here
              format = _constants.DATASET_FORMATS.row;
              processor = _dataProcessor.processRowObject;
            } else if (isGeoJson(data)) {
              format = _constants.DATASET_FORMATS.geojson;
              processor = _dataProcessor.processGeojson;
            }
          }
          if (!(format && processor)) {
            _context4.next = 19;
            break;
          }
          _context4.prev = 7;
          _context4.next = 10;
          return processor(data);
        case 10:
          result = _context4.sent;
          _context4.next = 16;
          break;
        case 13:
          _context4.prev = 13;
          _context4.t0 = _context4["catch"](7);
          throw new Error("Can not process uploaded file, ".concat((0, _utils.getError)(_context4.t0)));
        case 16:
          return _context4.abrupt("return", [].concat((0, _toConsumableArray2["default"])(fileCache), [{
            data: result,
            info: {
              id: id,
              label: content.fileName,
              format: format
            }
          }]));
        case 19:
          throw new Error('Can not process uploaded file, unknown file format');
        case 20:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[7, 13]]);
  }));
  return _processFileData.apply(this, arguments);
}
function filesToDataPayload(fileCache) {
  // seperate out files which could be a single datasets. or a keplergl map json
  var collection = fileCache.reduce(function (accu, file) {
    var data = file.data,
      info = file.info;
    if ((info === null || info === void 0 ? void 0 : info.format) === _constants.DATASET_FORMATS.keplergl) {
      // if file contains a single kepler map dataset & config
      accu.keplerMaps.push(_objectSpread(_objectSpread({}, data), {}, {
        options: {
          centerMap: !(data.config && data.config.mapState)
        }
      }));
    } else if (_constants.DATASET_FORMATS[info === null || info === void 0 ? void 0 : info.format]) {
      // if file contains only data
      var newDataset = {
        data: data,
        info: _objectSpread({
          id: (info === null || info === void 0 ? void 0 : info.id) || (0, _commonUtils.generateHashId)(4)
        }, info || {})
      };
      accu.datasets.push(newDataset);
    }
    return accu;
  }, {
    datasets: [],
    keplerMaps: []
  });

  // add kepler map first with config
  // add datasets later in one add data call
  return collection.keplerMaps.concat({
    datasets: collection.datasets
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,