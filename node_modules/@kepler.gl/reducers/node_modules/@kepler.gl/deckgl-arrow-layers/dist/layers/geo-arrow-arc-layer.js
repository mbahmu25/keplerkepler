"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeoArrowArcLayer = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _typed = require("@deck.gl/core/typed");
var _typed2 = require("@deck.gl/layers/typed");
var _geoarrowJs = _interopRequireWildcard(require("@geoarrow/geoarrow-js"));
var ga = _geoarrowJs;
var _utils = require("../utils/utils");
var _picking = require("../utils/picking");
var _validate = require("../utils/validate");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// deck.gl-community
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** All properties supported by GeoArrowArcLayer */

/** Properties added by GeoArrowArcLayer */

// Remove data from the upstream default props
var _ArcLayer$defaultProp = _typed2.ArcLayer.defaultProps,
  _data = _ArcLayer$defaultProp.data,
  _getSourcePosition = _ArcLayer$defaultProp.getSourcePosition,
  _getTargetPosition = _ArcLayer$defaultProp.getTargetPosition,
  _defaultProps = (0, _objectWithoutProperties2["default"])(_ArcLayer$defaultProp, ["data", "getSourcePosition", "getTargetPosition"]);

// Default props added by us
var ourDefaultProps = {
  _validate: true
};

// @ts-expect-error
var defaultProps = _objectSpread(_objectSpread({}, _defaultProps), ourDefaultProps);
var GeoArrowArcLayer = exports.GeoArrowArcLayer = /*#__PURE__*/function (_CompositeLayer) {
  function GeoArrowArcLayer() {
    (0, _classCallCheck2["default"])(this, GeoArrowArcLayer);
    return _callSuper(this, GeoArrowArcLayer, arguments);
  }
  (0, _inherits2["default"])(GeoArrowArcLayer, _CompositeLayer);
  return (0, _createClass2["default"])(GeoArrowArcLayer, [{
    key: "getPickingInfo",
    value: function getPickingInfo(params) {
      return (0, _picking.getPickingInfo)(params, this.props.data);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      return this._renderLayersPoint();
    }
  }, {
    key: "_renderLayersPoint",
    value: function _renderLayersPoint() {
      var _this$props = this.props,
        table = _this$props.data,
        sourcePosition = _this$props.getSourcePosition,
        targetPosition = _this$props.getTargetPosition;
      if (this.props._validate) {
        (0, _validate.validateAccessors)(this.props, table);

        // Note: below we iterate over table batches anyways, so this layer won't
        // work as-is if data/table is null
        (0, _typed.assert)(ga.vector.isPointVector(sourcePosition));
        (0, _typed.assert)(ga.vector.isPointVector(targetPosition));
      }

      // Exclude manually-set accessors
      var _extractAccessorsFrom = (0, _utils.extractAccessorsFromProps)(this.props, ['getSourcePosition', 'getTargetPosition']),
        _extractAccessorsFrom2 = (0, _slicedToArray2["default"])(_extractAccessorsFrom, 2),
        accessors = _extractAccessorsFrom2[0],
        otherProps = _extractAccessorsFrom2[1];
      var tableOffsets = (0, _picking.computeChunkOffsets)(table.data);
      var layers = [];
      for (var recordBatchIdx = 0; recordBatchIdx < table.batches.length; recordBatchIdx++) {
        var sourceData = sourcePosition.data[recordBatchIdx];
        var sourceValues = _geoarrowJs.child.getPointChild(sourceData).values;
        var targetData = targetPosition.data[recordBatchIdx];
        var targetValues = _geoarrowJs.child.getPointChild(targetData).values;

        // @ts-expect-error how to properly retrieve batch offset?
        var batchOffset = sourcePosition._offsets[recordBatchIdx];
        var props = _objectSpread(_objectSpread(_objectSpread({}, ourDefaultProps), otherProps), {}, {
          // used for picking purposes
          recordBatchIdx: recordBatchIdx,
          tableOffsets: tableOffsets,
          id: "".concat(this.props.id, "-geoarrow-arc-").concat(recordBatchIdx),
          data: {
            // @ts-expect-error passed through to enable use by function accessors
            data: table.batches[recordBatchIdx],
            length: sourceData.length,
            attributes: {
              getSourcePosition: {
                value: sourceValues,
                size: sourceData.type.listSize
              },
              getTargetPosition: {
                value: targetValues,
                size: targetData.type.listSize
              }
            }
          }
        });
        for (var _i = 0, _Object$entries = Object.entries(accessors); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
            propName = _Object$entries$_i[0],
            propInput = _Object$entries$_i[1];
          (0, _utils.assignAccessor)({
            props: props,
            propName: propName,
            propInput: propInput,
            chunkIdx: recordBatchIdx,
            batchOffset: batchOffset
          });
        }
        var SubLayerClass = this.getSubLayerClass('geo-arrow-arc-layer', _typed2.ArcLayer);
        var layer = new SubLayerClass(_objectSpread(_objectSpread({}, this.getSubLayerProps(props)), {}, {
          // preserve binded accessors, as they are overwriten back by pass-through accessors from extensions
          getFiltered: props.getFiltered,
          getFilterValue: props.getFilterValue
        }));
        layers.push(layer);
      }
      return layers;
    }
  }]);
}(_typed.CompositeLayer);
(0, _defineProperty2["default"])(GeoArrowArcLayer, "defaultProps", defaultProps);
(0, _defineProperty2["default"])(GeoArrowArcLayer, "layerName", 'GeoArrowArcLayer');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,