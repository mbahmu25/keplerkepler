"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.neighborRequiredColumns = exports.geoarrowRequiredColumns = exports["default"] = exports.arcVisConfigs = exports.arcRequiredColumns = exports.arcPosAccessor = exports.arcColumnLabels = exports.COLUMN_MODE_POINTS = exports.COLUMN_MODE_NEIGHBORS = exports.COLUMN_MODE_GEOARROW = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _baseLayer = _interopRequireDefault(require("../base-layer"));
var _extensions = require("@deck.gl/extensions");
var _deckglArrowLayers = require("@kepler.gl/deckgl-arrow-layers");
var _deckglLayers = require("@kepler.gl/deckgl-layers");
var _layers = require("@deck.gl/layers");
var _utils = require("@kepler.gl/utils");
var _arcLayerIcon = _interopRequireDefault(require("./arc-layer-icon"));
var _layerUtils = require("../layer-utils");
var _constants = require("@kepler.gl/constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var arcRequiredColumns = exports.arcRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];
var neighborRequiredColumns = exports.neighborRequiredColumns = ['lat', 'lng', 'neighbors'];
var geoarrowRequiredColumns = exports.geoarrowRequiredColumns = ['geoarrow0', 'geoarrow1'];
var arcColumnLabels = exports.arcColumnLabels = {
  lat0: 'arc.lat0',
  lng0: 'arc.lng0',
  lat1: 'arc.lat1',
  lng1: 'arc.lng1',
  neighbors: 'neighbors'
};
var arcVisConfigs = exports.arcVisConfigs = {
  opacity: 'opacity',
  thickness: 'thickness',
  colorRange: 'colorRange',
  sizeRange: 'strokeWidthRange',
  targetColor: 'targetColor'
};
var COLUMN_MODE_POINTS = exports.COLUMN_MODE_POINTS = 'points';
var COLUMN_MODE_NEIGHBORS = exports.COLUMN_MODE_NEIGHBORS = 'neighbors';
var COLUMN_MODE_GEOARROW = exports.COLUMN_MODE_GEOARROW = 'geoarrow';
var SUPPORTED_COLUMN_MODES = [{
  key: COLUMN_MODE_POINTS,
  label: 'Points',
  requiredColumns: arcRequiredColumns
}, {
  key: COLUMN_MODE_NEIGHBORS,
  label: 'Point and Neighbors',
  requiredColumns: neighborRequiredColumns
}, {
  key: COLUMN_MODE_GEOARROW,
  label: 'Geoarrow Points',
  requiredColumns: geoarrowRequiredColumns
}];
var DEFAULT_COLUMN_MODE = COLUMN_MODE_POINTS;
var brushingExtension = new _extensions.BrushingExtension();
var arrowCPUFilterExtension = new _deckglLayers.FilterArrowExtension();
function isH3Field(columns, allFields, key) {
  var field = allFields[columns[key].fieldIdx];
  return (field === null || field === void 0 ? void 0 : field.type) === _constants.ALL_FIELD_TYPES.h3;
}
var arcPosAccessor = exports.arcPosAccessor = function arcPosAccessor(_ref, columnMode) {
  var lat0 = _ref.lat0,
    lng0 = _ref.lng0,
    lat1 = _ref.lat1,
    lng1 = _ref.lng1,
    lat = _ref.lat,
    lng = _ref.lng,
    geoarrow0 = _ref.geoarrow0,
    geoarrow1 = _ref.geoarrow1;
  return function (dc) {
    switch (columnMode) {
      case COLUMN_MODE_GEOARROW:
        return function (d) {
          var start = dc.valueAt(d.index, geoarrow0.fieldIdx);
          var end = dc.valueAt(d.index, geoarrow1.fieldIdx);
          return [start.get(0), start.get(1), 0, end.get(2), end.get(3), 0];
        };
      case COLUMN_MODE_NEIGHBORS:
        return function (d) {
          var startPos = (0, _utils.maybeHexToGeo)(dc, d, lat, lng);
          // only return source point if columnMode is COLUMN_MODE_NEIGHBORS

          return [startPos ? startPos[0] : dc.valueAt(d.index, lng.fieldIdx), startPos ? startPos[1] : dc.valueAt(d.index, lat.fieldIdx), 0];
        };
      default:
        // COLUMN_MODE_POINTS
        return function (d) {
          // lat or lng column could be hex column
          // we assume string value is hex and try to convert it to geo lat lng
          var startPos = (0, _utils.maybeHexToGeo)(dc, d, lat0, lng0);
          var endPos = (0, _utils.maybeHexToGeo)(dc, d, lat1, lng1);
          return [startPos ? startPos[0] : dc.valueAt(d.index, lng0.fieldIdx), startPos ? startPos[1] : dc.valueAt(d.index, lat0.fieldIdx), 0, endPos ? endPos[0] : dc.valueAt(d.index, lng1.fieldIdx), endPos ? endPos[1] : dc.valueAt(d.index, lat1.fieldIdx), 0];
        };
    }
  };
};
var ArcLayer = exports["default"] = /*#__PURE__*/function (_Layer) {
  function ArcLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, ArcLayer);
    _this = _callSuper(this, ArcLayer, [props]);
    (0, _defineProperty2["default"])(_this, "dataContainer", null);
    (0, _defineProperty2["default"])(_this, "geoArrowVector0", undefined);
    (0, _defineProperty2["default"])(_this, "geoArrowVector1", undefined);
    /*
     * CPU filtering an arrow table by values and assembling a partial copy of the raw table is expensive
     * so we will use filteredIndex to create an attribute e.g. filteredIndex [0|1] for GPU filtering
     * in deck.gl layer, see: FilterArrowExtension in @kepler.gl/deckgl-layers.
     * Note that this approach can create visible lags in case of a lot of discarted geometry.
     */
    (0, _defineProperty2["default"])(_this, "filteredIndex", null);
    (0, _defineProperty2["default"])(_this, "filteredIndexTrigger", []);
    _this.registerVisConfig(arcVisConfigs);
    _this.getPositionAccessor = function (dataContainer) {
      return arcPosAccessor(_this.config.columns, _this.config.columnMode)(dataContainer);
    };
    return _this;
  }
  (0, _inherits2["default"])(ArcLayer, _Layer);
  return (0, _createClass2["default"])(ArcLayer, [{
    key: "type",
    get: function get() {
      return 'arc';
    }
  }, {
    key: "isAggregated",
    get: function get() {
      return false;
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _arcLayerIcon["default"];
    }
  }, {
    key: "columnLabels",
    get: function get() {
      return arcColumnLabels;
    }
  }, {
    key: "columnPairs",
    get: function get() {
      return this.defaultLinkColumnPairs;
    }
  }, {
    key: "supportedColumnModes",
    get: function get() {
      return SUPPORTED_COLUMN_MODES;
    }
  }, {
    key: "visualChannels",
    get: function get() {
      return {
        sourceColor: _objectSpread(_objectSpread({}, _superPropGet(ArcLayer, "visualChannels", this, 1).color), {}, {
          property: 'color',
          key: 'sourceColor',
          accessor: 'getSourceColor',
          defaultValue: function defaultValue(config) {
            return config.color;
          }
        }),
        targetColor: _objectSpread(_objectSpread({}, _superPropGet(ArcLayer, "visualChannels", this, 1).color), {}, {
          property: 'targetColor',
          key: 'targetColor',
          accessor: 'getTargetColor',
          defaultValue: function defaultValue(config) {
            return config.visConfig.targetColor || config.color;
          }
        }),
        size: _objectSpread(_objectSpread({}, _superPropGet(ArcLayer, "visualChannels", this, 1).size), {}, {
          accessor: 'getWidth',
          property: 'stroke'
        })
      };
    }
  }, {
    key: "columnValidators",
    get: function get() {
      // if one of the lat or lng column is string type, we allow it
      // will try to pass it as hex
      return {
        lat0: function lat0(column, columns, allFields) {
          return isH3Field(columns, allFields, 'lng0');
        },
        lng0: function lng0(column, columns, allFields) {
          return isH3Field(columns, allFields, 'lat0');
        },
        lat1: function lat1(column, columns, allFields) {
          return isH3Field(columns, allFields, 'lng1');
        },
        lng1: function lng1(column, columns, allFields) {
          return isH3Field(columns, allFields, 'lat1');
        },
        lat: function lat(column, columns, allFields) {
          return isH3Field(columns, allFields, 'lng');
        },
        lng: function lng(column, columns, allFields) {
          return isH3Field(columns, allFields, 'lat');
        }
      };
    }
  }, {
    key: "hasAllColumns",
    value: function hasAllColumns() {
      var columns = this.config.columns;
      if (this.config.columnMode === COLUMN_MODE_GEOARROW) {
        return this.hasColumnValue(columns.geoarrow0) && this.hasColumnValue(columns.geoarrow1);
      }
      if (this.config.columnMode === COLUMN_MODE_POINTS) {
        // TODO - this does not have access to allFields...
        // So we can't do the same validation as for the field errors
        var _hasStart = this.hasColumnValue(columns.lat0) || this.hasColumnValue(columns.lng0);
        var hasEnd = this.hasColumnValue(columns.lat1) || this.hasColumnValue(columns.lng1);
        return _hasStart && hasEnd;
      }
      var hasStart = this.hasColumnValue(columns.lat) || this.hasColumnValue(columns.lng);
      var hasNeibors = this.hasColumnValue(columns.neighbors);
      return hasStart && hasNeibors;
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      var _props$columnMode;
      var defaultLayerConfig = _superPropGet(ArcLayer, "getDefaultLayerConfig", this, 3)([props]);
      return _objectSpread(_objectSpread({}, defaultLayerConfig), {}, {
        columnMode: (_props$columnMode = props === null || props === void 0 ? void 0 : props.columnMode) !== null && _props$columnMode !== void 0 ? _props$columnMode : DEFAULT_COLUMN_MODE
      });
    }
  }, {
    key: "calculateDataAttributeForGeoArrow",
    value: function calculateDataAttributeForGeoArrow(_ref2, getPosition) {
      var dataContainer = _ref2.dataContainer,
        filteredIndex = _ref2.filteredIndex;
      this.filteredIndex = (0, _layerUtils.getFilteredIndex)(dataContainer.numRows(), filteredIndex, this.filteredIndex);
      this.filteredIndexTrigger = filteredIndex;
      if (this.config.columnMode === COLUMN_MODE_GEOARROW) {
        this.geoArrowVector0 = dataContainer.getColumn(this.config.columns.geoarrow0.fieldIdx);
        this.geoArrowVector1 = dataContainer.getColumn(this.config.columns.geoarrow1.fieldIdx);
      } else {
        // generate columns compatible with geoarrow point extension
        // TODO remove excessive intermediate allocations
        this.geoArrowVector0 = (0, _layerUtils.createGeoArrowPointVector)(dataContainer, function (d) {
          return getPosition(d).slice(0, 3);
        });
        this.geoArrowVector1 = (0, _layerUtils.createGeoArrowPointVector)(dataContainer, function (d) {
          return getPosition(d).slice(3, 6);
        });
      }
      return dataContainer.getTable();
    }
  }, {
    key: "calculateDataAttributeForPoints",
    value: function calculateDataAttributeForPoints(_ref3, getPosition) {
      var filteredIndex = _ref3.filteredIndex;
      var data = [];
      for (var i = 0; i < filteredIndex.length; i++) {
        var index = filteredIndex[i];
        var pos = getPosition({
          index: index
        });

        // if doesn't have point lat or lng, do not add the point
        // deck.gl can't handle position = null
        if (pos.every(Number.isFinite)) {
          data.push({
            index: index,
            sourcePosition: [pos[0], pos[1], pos[2]],
            targetPosition: [pos[3], pos[4], pos[5]]
          });
        }
      }
      return data;
    }
  }, {
    key: "calculateDataAttributeForPointNNeighbors",
    value: function calculateDataAttributeForPointNNeighbors(_ref4, getPosition) {
      var _this2 = this;
      var dataContainer = _ref4.dataContainer,
        filteredIndex = _ref4.filteredIndex;
      var data = [];
      var _loop = function _loop() {
        var index = filteredIndex[i];
        var pos = getPosition({
          index: index
        });
        // if doesn't have point lat or lng, do not add the point
        // deck.gl can't handle position = null
        if (pos.every(Number.isFinite)) {
          // push all neibors
          var neighborIdx = _this2.config.columns.neighbors.value ? dataContainer.valueAt(index, _this2.config.columns.neighbors.fieldIdx) : [];
          if (Array.isArray(neighborIdx)) {
            neighborIdx.forEach(function (idx) {
              // TODO prevent row materialization here
              var tPos = dataContainer.rowAsArray(idx) ? getPosition({
                index: idx
              }) : null;
              if (tPos && tPos.every(Number.isFinite)) {
                data.push({
                  index: index,
                  sourcePosition: [pos[0], pos[1], pos[2]],
                  targetPosition: [tPos[0], tPos[1], tPos[2]]
                });
              }
            });
          }
        }
      };
      for (var i = 0; i < filteredIndex.length; i++) {
        _loop();
      }
      return data;
    }
  }, {
    key: "calculateDataAttribute",
    value: function calculateDataAttribute(_ref5, getPosition) {
      var dataContainer = _ref5.dataContainer,
        filteredIndex = _ref5.filteredIndex;
      var columnMode = this.config.columnMode;

      // 1) COLUMN_MODE_GEOARROW - when we have a geoarrow point column
      // 2) COLUMN_MODE_POINTS + ArrowDataContainer > create geoarrow point column on the fly
      if (dataContainer instanceof _utils.ArrowDataContainer && (columnMode === COLUMN_MODE_GEOARROW || columnMode === COLUMN_MODE_POINTS)) {
        return this.calculateDataAttributeForGeoArrow({
          dataContainer: dataContainer,
          filteredIndex: filteredIndex
        }, getPosition);
      }

      // we don't need these in non-Arrow modes atm.
      this.geoArrowVector0 = undefined;
      this.geoArrowVector1 = undefined;
      this.filteredIndex = null;
      if (this.config.columnMode === COLUMN_MODE_POINTS) {
        return this.calculateDataAttributeForPoints({
          dataContainer: dataContainer,
          filteredIndex: filteredIndex
        }, getPosition);
      }
      return this.calculateDataAttributeForPointNNeighbors({
        dataContainer: dataContainer,
        filteredIndex: filteredIndex
      }, getPosition);
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      var _this3 = this;
      if (this.config.dataId === null) {
        return {};
      }
      var _datasets$this$config = datasets[this.config.dataId],
        gpuFilter = _datasets$this$config.gpuFilter,
        dataContainer = _datasets$this$config.dataContainer;
      var _this$updateData = this.updateData(datasets, oldLayerData),
        data = _this$updateData.data;
      var accessors = this.getAttributeAccessors({
        dataContainer: dataContainer
      });
      var isFilteredAccessor = function isFilteredAccessor(data) {
        // for GeoArrow data is a buffer, so use objectInfo
        return _this3.filteredIndex ? _this3.filteredIndex[data.index] : 1;
      };
      return _objectSpread({
        data: data,
        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),
        getFiltered: isFilteredAccessor
      }, accessors);
    }
    /* eslint-enable complexity */
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataset) {
      var dataContainer = dataset.dataContainer;
      this.dataContainer = dataContainer;

      // get bounds from arcs
      var getPosition = this.getPositionAccessor(dataContainer);
      var sBounds = this.getPointsBounds(dataContainer, function (d) {
        var pos = getPosition(d);
        return [pos[0], pos[1]];
      });
      var tBounds = [];
      if (this.config.columnMode === COLUMN_MODE_POINTS) {
        tBounds = this.getPointsBounds(dataContainer, function (d) {
          var pos = getPosition(d);
          return [pos[3], pos[4]];
        });
      } else {
        // when columnMode is neighbors, it reference the same collection of points
        tBounds = sBounds;
      }
      var bounds = tBounds && sBounds ? [Math.min(sBounds[0], tBounds[0]), Math.min(sBounds[1], tBounds[1]), Math.max(sBounds[2], tBounds[2]), Math.max(sBounds[3], tBounds[3])] : sBounds || tBounds;
      this.updateMeta({
        bounds: bounds
      });
    }
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var data = opts.data,
        gpuFilter = opts.gpuFilter,
        objectHovered = opts.objectHovered,
        interactionConfig = opts.interactionConfig,
        dataset = opts.dataset;
      var updateTriggers = _objectSpread({
        getPosition: this.config.columns,
        getFilterValue: gpuFilter.filterValueUpdateTriggers,
        getFiltered: this.filteredIndexTrigger
      }, this.getVisualChannelUpdateTriggers());
      var widthScale = this.config.visConfig.thickness * _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER;
      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var hoveredObject = this.hasHoveredObject(objectHovered);
      var useArrowLayer = Boolean(this.geoArrowVector0);
      var ArcLayerClass = _layers.ArcLayer;
      var experimentalPropOverrides = {};
      if (useArrowLayer) {
        ArcLayerClass = _deckglArrowLayers.GeoArrowArcLayer;
        experimentalPropOverrides = {
          data: dataset.dataContainer.getTable(),
          getSourcePosition: this.geoArrowVector0,
          getTargetPosition: this.geoArrowVector1
        };
      }
      return [
      // @ts-expect-error
      new ArcLayerClass(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), this.getBrushingExtensionProps(interactionConfig, 'source_target')), data), experimentalPropOverrides), {}, {
        widthScale: widthScale,
        updateTriggers: updateTriggers,
        extensions: [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [brushingExtension], (0, _toConsumableArray2["default"])(useArrowLayer ? [arrowCPUFilterExtension] : []))
      }))].concat((0, _toConsumableArray2["default"])(hoveredObject ? [new _layers.ArcLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {
        visible: defaultLayerProps.visible,
        data: [hoveredObject],
        widthScale: widthScale,
        getSourceColor: this.config.highlightColor,
        getTargetColor: this.config.highlightColor,
        getWidth: data.getWidth
      }))] : []));
    }
  }, {
    key: "hasHoveredObject",
    value: function hasHoveredObject(objectInfo) {
      if ((0, _layerUtils.isLayerHoveredFromArrow)(objectInfo, this.id) && objectInfo.index >= 0 && this.dataContainer) {
        // objectInfo.index can point to data of arcs created in neighbor mode, so get index to source data.
        var hoveredObject = _superPropGet(ArcLayer, "hasHoveredObject", this, 3)([objectInfo]);
        return hoveredObject ? {
          index: hoveredObject.index,
          position: this.getPositionAccessor(this.dataContainer)({
            index: hoveredObject.index
          })
        } : null;
      }
      return _superPropGet(ArcLayer, "hasHoveredObject", this, 3)([objectInfo]);
    }
  }, {
    key: "getHoverData",
    value: function getHoverData(object, dataContainer, fields, animationConfig, hoverInfo) {
      // for arrow format, `object` is the Arrow row object Proxy,
      // and index is passed in `hoverInfo`.
      var index = this.geoArrowVector0 ? hoverInfo === null || hoverInfo === void 0 ? void 0 : hoverInfo.index : object.index;
      if (index >= 0) {
        return dataContainer.row(index);
      }
      return null;
    }
  }, {
    key: "getLegendVisualChannels",
    value: function getLegendVisualChannels() {
      var _channels$sourceColor;
      var channels = this.visualChannels;
      if ((_channels$sourceColor = channels.sourceColor) !== null && _channels$sourceColor !== void 0 && _channels$sourceColor.field && this.config[channels.sourceColor.field]) {
        // Remove targetColor to avoid duplicate legend
        channels = _objectSpread({}, channels);
        delete channels.targetColor;
      }
      return channels;
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(_ref6) {
      var _ref6$fieldPairs = _ref6.fieldPairs,
        fieldPairs = _ref6$fieldPairs === void 0 ? [] : _ref6$fieldPairs;
      if (fieldPairs.length < 2) {
        return {
          props: []
        };
      }
      var props = {
        color: (0, _utils.hexToRgb)(_constants.DEFAULT_LAYER_COLOR.tripArc),
        // connect the first two point layer with arc
        // @ts-expect-error separate types for point / neighbor columns
        columns: {
          lat0: fieldPairs[0].pair.lat,
          lng0: fieldPairs[0].pair.lng,
          lat1: fieldPairs[1].pair.lat,
          lng1: fieldPairs[1].pair.lng
        },
        label: "".concat(fieldPairs[0].defaultName, " -> ").concat(fieldPairs[1].defaultName, " arc")
      };
      return {
        props: [props]
      };
    }
  }]);
}(_baseLayer["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,