"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointPosResolver = exports.pointPosAccessor = exports.getValueAggrFunc = exports.getFilterDataFunc = exports["default"] = exports.aggregateRequiredColumns = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _lodash = _interopRequireDefault(require("lodash.memoize"));
var _baseLayer = _interopRequireDefault(require("./base-layer"));
var _utils = require("@kepler.gl/utils");
var _constants = require("@kepler.gl/constants");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var pointPosAccessor = exports.pointPosAccessor = function pointPosAccessor(_ref) {
  var lat = _ref.lat,
    lng = _ref.lng;
  return function (dc) {
    return function (d) {
      return [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx)];
    };
  };
};
var pointPosResolver = exports.pointPosResolver = function pointPosResolver(_ref2) {
  var lat = _ref2.lat,
    lng = _ref2.lng;
  return "".concat(lat.fieldIdx, "-").concat(lng.fieldIdx);
};
var getValueAggrFunc = exports.getValueAggrFunc = function getValueAggrFunc(getPointData) {
  return function (field, aggregation) {
    return function (points) {
      return field ? (0, _utils.aggregate)(points.map(function (p) {
        return field.valueAccessor(getPointData(p));
      }), aggregation) : points.length;
    };
  };
};
var getFilterDataFunc = exports.getFilterDataFunc = function getFilterDataFunc(filterRange, getFilterValue) {
  return function (pt) {
    return getFilterValue(pt).every(function (val, i) {
      return val >= filterRange[i][0] && val <= filterRange[i][1];
    });
  };
};
var getLayerColorRange = function getLayerColorRange(colorRange) {
  return colorRange.colors.map(_utils.hexToRgb);
};
var aggregateRequiredColumns = exports.aggregateRequiredColumns = ['lat', 'lng'];
var AggregationLayer = exports["default"] = /*#__PURE__*/function (_Layer) {
  function AggregationLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, AggregationLayer);
    _this = _callSuper(this, AggregationLayer, [props]);
    (0, _defineProperty2["default"])(_this, "getColorRange", void 0);
    _this.getPositionAccessor = function (dataContainer) {
      return pointPosAccessor(_this.config.columns)(dataContainer);
    };
    _this.getColorRange = (0, _lodash["default"])(getLayerColorRange);

    // Access data of a point from aggregated bins, depends on how BinSorter works
    // Deck.gl's BinSorter puts data in point.source
    _this.getPointData = function (pt) {
      return pt.source;
    };
    _this.gpuFilterGetIndex = function (pt) {
      return _this.getPointData(pt).index;
    };
    _this.gpuFilterGetData = function (dataContainer, data, fieldIndex) {
      return dataContainer.valueAt(data.index, fieldIndex);
    };
    return _this;
  }
  (0, _inherits2["default"])(AggregationLayer, _Layer);
  return (0, _createClass2["default"])(AggregationLayer, [{
    key: "isAggregated",
    get: function get() {
      return true;
    }
  }, {
    key: "requiredLayerColumns",
    get: function get() {
      return aggregateRequiredColumns;
    }
  }, {
    key: "columnPairs",
    get: function get() {
      return this.defaultPointColumnPairs;
    }
  }, {
    key: "noneLayerDataAffectingProps",
    get: function get() {
      return [].concat((0, _toConsumableArray2["default"])(_superPropGet(AggregationLayer, "noneLayerDataAffectingProps", this, 1)), ['enable3d', 'colorRange', 'colorDomain', 'sizeRange', 'sizeScale', 'sizeDomain', 'percentile', 'coverage', 'elevationPercentile', 'elevationScale', 'enableElevationZoomFactor', 'fixedHeight']);
    }
  }, {
    key: "visualChannels",
    get: function get() {
      return {
        color: {
          aggregation: 'colorAggregation',
          channelScaleType: _constants.CHANNEL_SCALES.colorAggr,
          defaultMeasure: 'property.pointCount',
          domain: 'colorDomain',
          field: 'colorField',
          key: 'color',
          property: 'color',
          range: 'colorRange',
          scale: 'colorScale'
        },
        size: {
          aggregation: 'sizeAggregation',
          channelScaleType: _constants.CHANNEL_SCALES.sizeAggr,
          condition: function condition(config) {
            return config.visConfig.enable3d;
          },
          defaultMeasure: 'property.pointCount',
          domain: 'sizeDomain',
          field: 'sizeField',
          key: 'size',
          property: 'height',
          range: 'sizeRange',
          scale: 'sizeScale'
        }
      };
    }

    /**
     * Get the description of a visualChannel config
     * @param key
     * @returns
     */
  }, {
    key: "getVisualChannelDescription",
    value: function getVisualChannelDescription(key) {
      var _this$visConfigSettin;
      var channel = this.visualChannels[key];
      if (!channel) return {
        label: '',
        measure: undefined
      };
      // e.g. label: Color, measure: Average of ETA
      var range = channel.range,
        field = channel.field,
        defaultMeasure = channel.defaultMeasure,
        aggregation = channel.aggregation;
      var fieldConfig = this.config[field];
      var label = (_this$visConfigSettin = this.visConfigSettings[range]) === null || _this$visConfigSettin === void 0 ? void 0 : _this$visConfigSettin.label;
      return {
        label: typeof label === 'function' ? label(this.config) : label || '',
        measure: fieldConfig && aggregation ? "".concat(this.config.visConfig[aggregation], " of ").concat(fieldConfig.displayName || fieldConfig.name) : defaultMeasure
      };
    }
  }, {
    key: "getHoverData",
    value: function getHoverData(object, dataContainer, fields) {
      if (!object) return object;
      var measure = this.config.visConfig.colorAggregation;
      // aggregate all fields for the hovered group
      var aggregatedData = fields.reduce(function (accu, field) {
        accu[field.name] = {
          measure: measure,
          value: (0, _utils.aggregate)(object.points, measure, function (d) {
            return dataContainer.valueAt(d.index, field.fieldIdx);
          })
        };
        return accu;
      }, {});

      // return aggregated object
      return _objectSpread({
        aggregatedData: aggregatedData
      }, object);
    }
  }, {
    key: "getFilteredItemCount",
    value: function getFilteredItemCount() {
      // gpu filter not supported
      return null;
    }

    /**
     * Aggregation layer handles visual channel aggregation inside deck.gl layer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "updateLayerVisualChannel",
    value: function updateLayerVisualChannel(_ref3, channel) {
      var dataContainer = _ref3.dataContainer;
      this.validateVisualChannel(channel);
    }

    /**
     * Validate aggregation type on top of basic layer visual channel validation
     * @param channel
     */
  }, {
    key: "validateVisualChannel",
    value: function validateVisualChannel(channel) {
      // field type decides aggregation type decides scale type
      this.validateFieldType(channel);
      this.validateAggregationType(channel);
      this.validateScale(channel);
    }

    /**
     * Validate aggregation type based on selected field
     */
  }, {
    key: "validateAggregationType",
    value: function validateAggregationType(channel) {
      var visualChannel = this.visualChannels[channel];
      var field = visualChannel.field,
        aggregation = visualChannel.aggregation;
      var aggregationOptions = this.getAggregationOptions(channel);
      if (!aggregation) {
        return;
      }
      if (!aggregationOptions.length) {
        // if field cannot be aggregated, set field to null
        this.updateLayerConfig((0, _defineProperty2["default"])({}, field, null));
      } else if (!aggregationOptions.includes(this.config.visConfig[aggregation])) {
        // current aggregation type is not supported by this field
        // set aggregation to the first supported option
        this.updateLayerVisConfig((0, _defineProperty2["default"])({}, aggregation, aggregationOptions[0]));
      }
    }
  }, {
    key: "getAggregationOptions",
    value: function getAggregationOptions(channel) {
      var visualChannel = this.visualChannels[channel];
      var field = visualChannel.field,
        channelScaleType = visualChannel.channelScaleType;
      return Object.keys(this.config[field] ? _constants.FIELD_OPTS[this.config[field].type].scale[channelScaleType] : _constants.DEFAULT_AGGREGATION[channelScaleType]);
    }

    /**
     * Get scale options based on current field and aggregation type
     * @param channel
     * @returns
     */
  }, {
    key: "getScaleOptions",
    value: function getScaleOptions(channel) {
      var visualChannel = this.visualChannels[channel];
      var field = visualChannel.field,
        aggregation = visualChannel.aggregation,
        channelScaleType = visualChannel.channelScaleType;
      var aggregationType = aggregation ? this.config.visConfig[aggregation] : null;
      if (!aggregationType) {
        return [];
      }
      return this.config[field] ?
      // scale options based on aggregation
      _constants.FIELD_OPTS[this.config[field].type].scale[channelScaleType][aggregationType] :
      // default scale options for point count: aggregationType should be count since
      // LAYER_VIS_CONFIGS.aggregation.defaultValue is AGGREGATION_TYPES.average,
      _constants.DEFAULT_AGGREGATION[channelScaleType][_constants.AGGREGATION_TYPES.count];
    }

    /**
     * Aggregation layer handles visual channel aggregation inside deck.gl layer
     */
  }, {
    key: "updateLayerDomain",
    value: function updateLayerDomain() {
      return this;
    }
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataset, getPosition) {
      var dataContainer = dataset.dataContainer;
      // get bounds from points
      var bounds = this.getPointsBounds(dataContainer, getPosition);
      this.updateMeta({
        bounds: bounds
      });
    }
  }, {
    key: "calculateDataAttribute",
    value: function calculateDataAttribute(_ref4, getPosition) {
      var filteredIndex = _ref4.filteredIndex;
      var data = [];
      for (var i = 0; i < filteredIndex.length; i++) {
        var index = filteredIndex[i];
        var pos = getPosition({
          index: index
        });

        // if doesn't have point lat or lng, do not add the point
        // deck.gl can't handle position = null
        if (pos.every(Number.isFinite)) {
          data.push({
            index: index
          });
        }
      }
      return data;
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      if (this.config.dataId === null) {
        return {};
      }
      var _datasets$this$config = datasets[this.config.dataId],
        gpuFilter = _datasets$this$config.gpuFilter,
        dataContainer = _datasets$this$config.dataContainer;
      var getPosition = this.getPositionAccessor(dataContainer);
      var aggregatePoints = getValueAggrFunc(this.getPointData);
      var getColorValue = aggregatePoints(this.config.colorField, this.config.visConfig.colorAggregation);
      var getElevationValue = aggregatePoints(this.config.sizeField, this.config.visConfig.sizeAggregation);
      var hasFilter = Object.values(gpuFilter.filterRange).some(function (arr) {
        return arr.some(function (v) {
          return v !== 0;
        });
      });
      var getFilterValue = gpuFilter.filterValueAccessor(dataContainer)(this.gpuFilterGetIndex, this.gpuFilterGetData);
      var filterData = hasFilter ? getFilterDataFunc(gpuFilter.filterRange, getFilterValue) : undefined;
      var _this$updateData = this.updateData(datasets, oldLayerData),
        data = _this$updateData.data;
      return _objectSpread(_objectSpread({
        data: data,
        getPosition: getPosition,
        _filterData: filterData
      }, getColorValue ? {
        getColorValue: getColorValue
      } : {}), getElevationValue ? {
        getElevationValue: getElevationValue
      } : {});
    }
  }, {
    key: "getDefaultDeckLayerProps",
    value: function getDefaultDeckLayerProps(opts) {
      var baseProp = _superPropGet(AggregationLayer, "getDefaultDeckLayerProps", this, 3)([opts]);
      return _objectSpread(_objectSpread({}, baseProp), {}, {
        highlightColor: _constants.HIGHLIGH_COLOR_3D,
        // gpu data filtering is not supported in aggregation layer
        extensions: [],
        autoHighlight: this.config.visConfig.enable3d
      });
    }
  }, {
    key: "getDefaultAggregationLayerProp",
    value: function getDefaultAggregationLayerProp(opts) {
      var gpuFilter = opts.gpuFilter,
        mapState = opts.mapState,
        _opts$layerCallbacks = opts.layerCallbacks,
        layerCallbacks = _opts$layerCallbacks === void 0 ? {} : _opts$layerCallbacks;
      var visConfig = this.config.visConfig;
      var eleZoomFactor = this.getElevationZoomFactor(mapState);
      var updateTriggers = {
        getColorValue: {
          colorField: this.config.colorField,
          colorAggregation: this.config.visConfig.colorAggregation
        },
        getElevationValue: {
          sizeField: this.config.sizeField,
          sizeAggregation: this.config.visConfig.sizeAggregation
        },
        _filterData: _objectSpread({
          filterRange: gpuFilter.filterRange
        }, gpuFilter.filterValueUpdateTriggers)
      };
      return _objectSpread(_objectSpread({}, this.getDefaultDeckLayerProps(opts)), {}, {
        coverage: visConfig.coverage,
        // color
        colorRange: this.getColorRange(visConfig.colorRange),
        colorMap: visConfig.colorRange.colorMap,
        colorScaleType: this.config.colorScale,
        upperPercentile: visConfig.percentile[1],
        lowerPercentile: visConfig.percentile[0],
        colorAggregation: visConfig.colorAggregation,
        // elevation
        extruded: visConfig.enable3d,
        elevationScale: visConfig.elevationScale * eleZoomFactor,
        elevationScaleType: this.config.sizeScale,
        elevationRange: visConfig.sizeRange,
        elevationFixed: visConfig.fixedHeight,
        elevationLowerPercentile: visConfig.elevationPercentile[0],
        elevationUpperPercentile: visConfig.elevationPercentile[1],
        // updateTriggers
        updateTriggers: updateTriggers,
        // callbacks
        onSetColorDomain: layerCallbacks.onSetLayerDomain
      });
    }
  }]);
}(_baseLayer["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,