"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointRequiredColumns = exports.pointPosAccessor = exports.pointColResolver = exports.heatmapVisConfigs = exports.geoarrowRequiredColumns = exports.geoarrowPosAccessor = exports["default"] = exports.MAX_ZOOM_LEVEL = exports.COLUMN_MODE_POINTS = exports.COLUMN_MODE_GEOARROW = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _reselect = require("reselect");
var _constants = require("@kepler.gl/constants");
var _mapboxglLayer = _interopRequireDefault(require("../mapboxgl-layer"));
var _heatmapLayerIcon = _interopRequireDefault(require("./heatmap-layer-icon"));
var _utils = require("@kepler.gl/utils");
var _layerUtils = require("../layer-utils");
var _excluded = ["colorField", "colorDomain", "colorScale"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var MAX_ZOOM_LEVEL = exports.MAX_ZOOM_LEVEL = 18;
var pointPosAccessor = exports.pointPosAccessor = function pointPosAccessor(_ref) {
  var lat = _ref.lat,
    lng = _ref.lng;
  return function (dc) {
    return function (d) {
      return [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx)];
    };
  };
};
var geoarrowPosAccessor = exports.geoarrowPosAccessor = function geoarrowPosAccessor(_ref2) {
  var geoarrow = _ref2.geoarrow;
  return function (dc) {
    return function (d) {
      var row = dc.valueAt(d.index, geoarrow.fieldIdx);
      return [row.get(0), row.get(1)];
    };
  };
};
var pointColResolver = exports.pointColResolver = function pointColResolver(_ref3, columnMode) {
  var lat = _ref3.lat,
    lng = _ref3.lng,
    geoarrow = _ref3.geoarrow;
  if (columnMode === COLUMN_MODE_POINTS) {
    return "".concat(lat.fieldIdx, "-").concat(lng.fieldIdx);
  }
  return "geoarrow-".concat(geoarrow.fieldIdx);
};
var heatmapVisConfigs = exports.heatmapVisConfigs = {
  opacity: 'opacity',
  colorRange: 'colorRange',
  radius: 'heatmapRadius'
};
var pointRequiredColumns = exports.pointRequiredColumns = ['lat', 'lng'];
var geoarrowRequiredColumns = exports.geoarrowRequiredColumns = ['geoarrow'];
var COLUMN_MODE_POINTS = exports.COLUMN_MODE_POINTS = 'points';
var COLUMN_MODE_GEOARROW = exports.COLUMN_MODE_GEOARROW = 'geoarrow';
var SUPPORTED_COLUMN_MODES = [{
  key: COLUMN_MODE_POINTS,
  label: 'Points',
  requiredColumns: pointRequiredColumns
}, {
  key: COLUMN_MODE_GEOARROW,
  label: 'Geoarrow Points',
  requiredColumns: geoarrowRequiredColumns
}];
var DEFAULT_COLUMN_MODE = COLUMN_MODE_POINTS;

/**
 *
 * @param colorRange
 * @return [
 *  0, "rgba(33,102,172,0)",
 *  0.2, "rgb(103,169,207)",
 *  0.4, "rgb(209,229,240)",
 *  0.6, "rgb(253,219,199)",
 *  0.8, "rgb(239,138,98)",
 *  1, "rgb(178,24,43)"
 * ]
 */
var heatmapDensity = function heatmapDensity(colorRange) {
  var colors = ['#000000'].concat((0, _toConsumableArray2["default"])(colorRange.colors));
  var colorDensity = [];
  colors.forEach(function (color, index) {
    colorDensity.push(index / colors.length);
    colorDensity.push("rgb(".concat((0, _utils.hexToRgb)(color).join(','), ")"));
  });
  colorDensity[1] = 'rgba(0,0,0,0)';
  return colorDensity;
};
var HeatmapLayer = /*#__PURE__*/function (_MapboxGLLayer) {
  function HeatmapLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, HeatmapLayer);
    _this = _callSuper(this, HeatmapLayer, [props]);
    (0, _defineProperty2["default"])(_this, "columnsSelector", function (config) {
      return pointColResolver(config.columns, config.columnMode);
    });
    (0, _defineProperty2["default"])(_this, "visConfigSelector", function (config) {
      return config.visConfig;
    });
    (0, _defineProperty2["default"])(_this, "weightFieldSelector", function (config) {
      return config.weightField ? config.weightField.name : null;
    });
    (0, _defineProperty2["default"])(_this, "weightDomainSelector", function (config) {
      return config.weightDomain;
    });
    (0, _defineProperty2["default"])(_this, "paintSelector", (0, _reselect.createSelector)(_this.visConfigSelector, _this.weightFieldSelector, _this.weightDomainSelector, function (visConfig, weightField, weightDomain) {
      return {
        'heatmap-weight': weightField ? ['interpolate', ['linear'], ['get', weightField], weightDomain[0], 0, weightDomain[1], 1] : 1,
        'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],
        'heatmap-color': ['interpolate', ['linear'], ['heatmap-density']].concat((0, _toConsumableArray2["default"])(heatmapDensity(visConfig.colorRange))),
        'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, visConfig.radius // radius
        ],
        'heatmap-opacity': visConfig.opacity
      };
    }));
    (0, _defineProperty2["default"])(_this, "computeHeatmapConfiguration", (0, _reselect.createSelector)(_this.sourceSelector, _this.filterSelector, _this.paintSelector, function (source, filter, paint) {
      return _objectSpread({
        type: 'heatmap',
        id: _this.id,
        source: source,
        layout: {
          visibility: 'visible'
        },
        paint: paint
      }, _this.isValidFilter(filter) ? {
        filter: filter
      } : {});
    }));
    _this.registerVisConfig(heatmapVisConfigs);
    _this.getPositionAccessor = function (dataContainer) {
      switch (_this.config.columnMode) {
        case COLUMN_MODE_GEOARROW:
          return geoarrowPosAccessor(_this.config.columns)(dataContainer);
        default:
          // COLUMN_MODE_POINTS
          return pointPosAccessor(_this.config.columns)(dataContainer);
      }
    };
    return _this;
  }
  (0, _inherits2["default"])(HeatmapLayer, _MapboxGLLayer);
  return (0, _createClass2["default"])(HeatmapLayer, [{
    key: "type",
    get: function get() {
      return 'heatmap';
    }
  }, {
    key: "supportedColumnModes",
    get: function get() {
      return SUPPORTED_COLUMN_MODES;
    }
  }, {
    key: "hasAllColumns",
    value: function hasAllColumns() {
      var _this$config = this.config,
        columns = _this$config.columns,
        columnMode = _this$config.columnMode;
      if (columnMode === COLUMN_MODE_GEOARROW) {
        return this.hasColumnValue(columns.geoarrow);
      }
      return _superPropGet(HeatmapLayer, "hasAllColumns", this, 3)([]);
    }
  }, {
    key: "visualChannels",
    get: function get() {
      return {
        // @ts-expect-error
        weight: {
          property: 'weight',
          field: 'weightField',
          scale: 'weightScale',
          domain: 'weightDomain',
          key: 'weight',
          // supportedFieldTypes can be determined by channelScaleType
          // or specified here
          defaultMeasure: 'property.density',
          supportedFieldTypes: [_constants.ALL_FIELD_TYPES.real, _constants.ALL_FIELD_TYPES.integer],
          channelScaleType: _constants.CHANNEL_SCALES.size
        }
      };
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _heatmapLayerIcon["default"];
    }
  }, {
    key: "getVisualChannelDescription",
    value: function getVisualChannelDescription(channel) {
      return channel === 'color' ? {
        label: 'property.color',
        measure: 'property.density'
      } : {
        label: 'property.weight',
        measure: this.config.weightField ? this.config.weightField.name : 'property.density'
      };
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      var _props$columnMode;
      // mapbox heatmap layer color is always based on density
      // no need to set colorField, colorDomain and colorScale

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      var _superPropGet$columnM = _objectSpread(_objectSpread({}, _superPropGet(HeatmapLayer, "getDefaultLayerConfig", this, 3)([props])), {}, {
          columnMode: (_props$columnMode = props === null || props === void 0 ? void 0 : props.columnMode) !== null && _props$columnMode !== void 0 ? _props$columnMode : DEFAULT_COLUMN_MODE,
          weightField: null,
          weightDomain: [0, 1],
          weightScale: 'linear'
        }),
        colorField = _superPropGet$columnM.colorField,
        colorDomain = _superPropGet$columnM.colorDomain,
        colorScale = _superPropGet$columnM.colorScale,
        layerConfig = (0, _objectWithoutProperties2["default"])(_superPropGet$columnM, _excluded);

      // @ts-expect-error
      return layerConfig;
    }
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataset) {
      var dataContainer = dataset.dataContainer;
      var getPosition = this.getPositionAccessor(dataContainer);
      var bounds = this.getPointsBounds(dataContainer, getPosition);
      this.updateMeta({
        bounds: bounds
      });
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      if (this.config.dataId === null) {
        return {};
      }
      var weightField = this.config.weightField;
      var dataContainer = datasets[this.config.dataId].dataContainer;
      var getPosition = this.getPositionAccessor(dataContainer);
      var _this$updateData = this.updateData(datasets, oldLayerData),
        data = _this$updateData.data;

      // @ts-ignore
      var newConfig = this.computeHeatmapConfiguration(this.config, datasets);
      newConfig.id = this.id;
      return {
        columns: this.config.columns,
        config: newConfig,
        data: data,
        weightField: weightField,
        getPosition: getPosition
      };
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(dataset) {
      var altProps = (0, _layerUtils.getGeoArrowPointLayerProps)(dataset);
      return {
        props: [],
        altProps: altProps
      };
    }
  }]);
}(_mapboxglLayer["default"]);
var _default = exports["default"] = HeatmapLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,