"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointVisConfigs = exports.pointRequiredColumns = exports.pointPosAccessor = exports.pointOptionalColumns = exports.geojsonRequiredColumns = exports.geojsonPosAccessor = exports.geoarrowRequiredColumns = exports.geoarrowPosAccessor = exports["default"] = exports.COLUMN_MODE_POINTS = exports.COLUMN_MODE_GEOJSON = exports.COLUMN_MODE_GEOARROW = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extensions = require("@deck.gl/extensions");
var _layers = require("@deck.gl/layers");
var _deckglArrowLayers = require("@kepler.gl/deckgl-arrow-layers");
var _deckglLayers = require("@kepler.gl/deckgl-layers");
var _baseLayer = _interopRequireDefault(require("../base-layer"));
var _utils = require("@kepler.gl/utils");
var _pointLayerIcon = _interopRequireDefault(require("./point-layer-icon"));
var _constants = require("@kepler.gl/constants");
var _layerTextLabel = require("../layer-text-label");
var _layerUtils = require("../layer-utils");
var _geojsonUtils = require("../geojson-layer/geojson-utils");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var pointPosAccessor = exports.pointPosAccessor = function pointPosAccessor(_ref) {
  var lat = _ref.lat,
    lng = _ref.lng,
    altitude = _ref.altitude;
  return function (dc) {
    return function (d) {
      return [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx), altitude && altitude.fieldIdx > -1 ? dc.valueAt(d.index, altitude.fieldIdx) : 0];
    };
  };
};
var geojsonPosAccessor = exports.geojsonPosAccessor = function geojsonPosAccessor(_ref2) {
  var geojson = _ref2.geojson;
  return function (d) {
    return d[geojson.fieldIdx];
  };
};
var geoarrowPosAccessor = exports.geoarrowPosAccessor = function geoarrowPosAccessor(_ref3) {
  var geoarrow = _ref3.geoarrow;
  return function (dataContainer) {
    return function (d) {
      var row = dataContainer.valueAt(d.index, geoarrow.fieldIdx);
      return [row.get(0), row.get(1), 0];
    };
  };
};
var COLUMN_MODE_POINTS = exports.COLUMN_MODE_POINTS = 'points';
var COLUMN_MODE_GEOJSON = exports.COLUMN_MODE_GEOJSON = 'geojson';
var COLUMN_MODE_GEOARROW = exports.COLUMN_MODE_GEOARROW = 'geoarrow';
var pointRequiredColumns = exports.pointRequiredColumns = ['lat', 'lng'];
var pointOptionalColumns = exports.pointOptionalColumns = ['altitude', 'neighbors'];
var geojsonRequiredColumns = exports.geojsonRequiredColumns = ['geojson'];
var geoarrowRequiredColumns = exports.geoarrowRequiredColumns = ['geoarrow'];
var SUPPORTED_COLUMN_MODES = [{
  key: COLUMN_MODE_POINTS,
  label: 'Point Columns',
  requiredColumns: pointRequiredColumns,
  optionalColumns: pointOptionalColumns
}, {
  key: COLUMN_MODE_GEOJSON,
  label: 'GeoJSON Feature',
  requiredColumns: geojsonRequiredColumns,
  verifyField: function verifyField(f) {
    return !(0, _layerUtils.isGeoArrowPointField)(f);
  }
}, {
  key: COLUMN_MODE_GEOARROW,
  label: 'Geoarrow Points',
  requiredColumns: geoarrowRequiredColumns,
  verifyField: function verifyField(f) {
    return (0, _layerUtils.isGeoArrowPointField)(f);
  }
}];
var DEFAULT_COLUMN_MODE = COLUMN_MODE_POINTS;
var brushingExtension = new _extensions.BrushingExtension();
var arrowCPUFilterExtension = new _deckglLayers.FilterArrowExtension();
function pushPointPosition(data, pos, index, neighbors) {
  if (pos.every(Number.isFinite)) {
    data.push(_objectSpread({
      position: pos,
      // index is important for filter
      index: index
    }, neighbors ? {
      neighbors: neighbors
    } : {}));
  }
}
var pointVisConfigs = exports.pointVisConfigs = {
  radius: 'radius',
  fixedRadius: 'fixedRadius',
  opacity: 'opacity',
  outline: 'outline',
  thickness: 'thickness',
  strokeColor: 'strokeColor',
  colorRange: 'colorRange',
  strokeColorRange: 'strokeColorRange',
  radiusRange: 'radiusRange',
  filled: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.filled), {}, {
    type: 'boolean',
    label: 'layer.fillColor',
    defaultValue: true,
    property: 'filled'
  }),
  billboard: 'billboard',
  allowHover: 'allowHover',
  showNeighborOnHover: 'showNeighborOnHover',
  showHighlightColor: 'showHighlightColor'
};
var PointLayer = exports["default"] = /*#__PURE__*/function (_Layer) {
  function PointLayer(props) {
    var _this;
    (0, _classCallCheck2["default"])(this, PointLayer);
    _this = _callSuper(this, PointLayer, [props]);
    (0, _defineProperty2["default"])(_this, "dataToFeature", []);
    (0, _defineProperty2["default"])(_this, "dataContainer", null);
    (0, _defineProperty2["default"])(_this, "geoArrowVector", undefined);
    /*
     * CPU filtering an arrow table by values and assembling a partial copy of the raw table is expensive
     * so we will use filteredIndex to create an attribute e.g. filteredIndex [0|1] for GPU filtering
     * in deck.gl layer, see: FilterArrowExtension in @kepler.gl/deckgl-layers.
     * Note that this approach can create visible lags in case of a lot of discarted geometry.
     */
    (0, _defineProperty2["default"])(_this, "filteredIndex", null);
    (0, _defineProperty2["default"])(_this, "filteredIndexTrigger", []);
    _this.registerVisConfig(pointVisConfigs);
    _this.getPositionAccessor = function (dataContainer) {
      switch (_this.config.columnMode) {
        case COLUMN_MODE_GEOARROW:
          return geoarrowPosAccessor(_this.config.columns)(dataContainer);
        case COLUMN_MODE_GEOJSON:
          return geojsonPosAccessor(_this.config.columns);
        default:
          // COLUMN_MODE_POINTS
          return pointPosAccessor(_this.config.columns)(dataContainer);
      }
    };
    return _this;
  }
  (0, _inherits2["default"])(PointLayer, _Layer);
  return (0, _createClass2["default"])(PointLayer, [{
    key: "type",
    get: function get() {
      return 'point';
    }
  }, {
    key: "isAggregated",
    get: function get() {
      return false;
    }
  }, {
    key: "layerIcon",
    get: function get() {
      return _pointLayerIcon["default"];
    }
  }, {
    key: "optionalColumns",
    get: function get() {
      return pointOptionalColumns;
    }
  }, {
    key: "columnPairs",
    get: function get() {
      return this.defaultPointColumnPairs;
    }
  }, {
    key: "supportedColumnModes",
    get: function get() {
      return SUPPORTED_COLUMN_MODES;
    }
  }, {
    key: "noneLayerDataAffectingProps",
    get: function get() {
      return [].concat((0, _toConsumableArray2["default"])(_superPropGet(PointLayer, "noneLayerDataAffectingProps", this, 1)), ['radius']);
    }
  }, {
    key: "visualChannels",
    get: function get() {
      return {
        color: _objectSpread(_objectSpread({}, _superPropGet(PointLayer, "visualChannels", this, 1).color), {}, {
          accessor: 'getFillColor',
          condition: function condition(config) {
            return config.visConfig.filled;
          },
          defaultValue: function defaultValue(config) {
            return config.color;
          }
        }),
        strokeColor: {
          property: 'strokeColor',
          key: 'strokeColor',
          field: 'strokeColorField',
          scale: 'strokeColorScale',
          domain: 'strokeColorDomain',
          range: 'strokeColorRange',
          channelScaleType: _constants.CHANNEL_SCALES.color,
          accessor: 'getLineColor',
          condition: function condition(config) {
            return config.visConfig.outline;
          },
          defaultValue: function defaultValue(config) {
            return config.visConfig.strokeColor || config.color;
          }
        },
        size: _objectSpread(_objectSpread({}, _superPropGet(PointLayer, "visualChannels", this, 1).size), {}, {
          property: 'radius',
          range: 'radiusRange',
          fixed: 'fixedRadius',
          channelScaleType: 'radius',
          accessor: 'getRadius',
          defaultValue: 1
        })
      };
    }
  }, {
    key: "setInitialLayerConfig",
    value: function setInitialLayerConfig(dataset) {
      if (!dataset.dataContainer.numRows()) {
        return this;
      }
      var defaultColorField = (0, _utils.findDefaultColorField)(dataset);
      if (defaultColorField) {
        this.updateLayerConfig({
          colorField: defaultColorField
        });
        this.updateLayerVisualChannel(dataset, 'color');
      }
      return this;
    }
  }, {
    key: "getDefaultLayerConfig",
    value: function getDefaultLayerConfig(props) {
      var _props$columnMode;
      var defaultLayerConfig = _superPropGet(PointLayer, "getDefaultLayerConfig", this, 3)([props !== null && props !== void 0 ? props : {}]);
      return _objectSpread(_objectSpread({}, defaultLayerConfig), {}, {
        columnMode: (_props$columnMode = props === null || props === void 0 ? void 0 : props.columnMode) !== null && _props$columnMode !== void 0 ? _props$columnMode : DEFAULT_COLUMN_MODE,
        // add stroke color visual channel
        strokeColorField: null,
        strokeColorDomain: [0, 1],
        strokeColorScale: 'quantile',
        colorUI: _objectSpread(_objectSpread({}, defaultLayerConfig.colorUI), {}, {
          strokeColorRange: _constants.DEFAULT_COLOR_UI
        })
      });
    }
  }, {
    key: "calculateDataAttribute",
    value: function calculateDataAttribute(_ref4, getPosition) {
      var _this2 = this;
      var filteredIndex = _ref4.filteredIndex,
        dataContainer = _ref4.dataContainer;
      var columnMode = this.config.columnMode;

      // 1) COLUMN_MODE_GEOARROW - when we have a geoarrow point column
      // 2) COLUMN_MODE_POINTS + ArrowDataContainer > create geoarrow point column on the fly
      if (dataContainer instanceof _utils.ArrowDataContainer && (columnMode === COLUMN_MODE_GEOARROW || columnMode === COLUMN_MODE_POINTS)) {
        this.filteredIndex = (0, _layerUtils.getFilteredIndex)(dataContainer.numRows(), filteredIndex, this.filteredIndex);
        this.filteredIndexTrigger = filteredIndex;
        if (this.config.columnMode === COLUMN_MODE_GEOARROW) {
          this.geoArrowVector = dataContainer.getColumn(this.config.columns.geoarrow.fieldIdx);
        } else {
          // generate a column compatible with geoarrow point
          this.geoArrowVector = (0, _layerUtils.createGeoArrowPointVector)(dataContainer, getPosition);
        }
        return dataContainer.getTable();
      }

      // we don't need these in non-Arrow modes atm.
      this.geoArrowVector = undefined;
      this.filteredIndex = null;
      var data = [];
      var _loop = function _loop() {
        var index = filteredIndex[i];
        var neighbors;
        if (_this2.config.columnMode === COLUMN_MODE_POINTS) {
          var _this2$config$columns;
          if ((_this2$config$columns = _this2.config.columns.neighbors) !== null && _this2$config$columns !== void 0 && _this2$config$columns.value) {
            var fieldIdx = _this2.config.columns.neighbors.fieldIdx;
            neighbors = Array.isArray(dataContainer.valueAt(index, fieldIdx)) ? dataContainer.valueAt(index, fieldIdx) : [];
          }
          var pos = getPosition({
            index: index
          });

          // if doesn't have point lat or lng, do not add the point
          // deck.gl can't handle position = null
          pushPointPosition(data, pos, index, neighbors);
        } else {
          // COLUMN_MODE_GEOJSON mode - point from geojson coordinates
          var coordinates = _this2.dataToFeature[i];
          // if multi points
          if (coordinates && Array.isArray(coordinates[0])) {
            coordinates.forEach(function (coord) {
              pushPointPosition(data, coord, index);
            });
          } else if (coordinates && Number.isFinite(coordinates[0])) {
            pushPointPosition(data, coordinates, index);
          }
        }
      };
      for (var i = 0; i < filteredIndex.length; i++) {
        _loop();
      }
      return data;
    }
  }, {
    key: "formatLayerData",
    value: function formatLayerData(datasets, oldLayerData) {
      var _this3 = this;
      if (this.config.dataId === null) {
        return {};
      }
      var textLabel = this.config.textLabel;
      var _datasets$this$config = datasets[this.config.dataId],
        gpuFilter = _datasets$this$config.gpuFilter,
        dataContainer = _datasets$this$config.dataContainer;
      var _this$updateData = this.updateData(datasets, oldLayerData),
        data = _this$updateData.data,
        triggerChanged = _this$updateData.triggerChanged;
      var getPosition = function getPosition(d) {
        return d.position;
      };

      // get all distinct characters in the text labels
      var textLabels = (0, _layerTextLabel.formatTextLabelData)({
        textLabel: textLabel,
        triggerChanged: triggerChanged,
        oldLayerData: oldLayerData,
        data: data,
        dataContainer: dataContainer,
        filteredIndex: this.filteredIndex
      });
      var accessors = this.getAttributeAccessors({
        dataContainer: dataContainer
      });
      var isFilteredAccessor = function isFilteredAccessor(data) {
        return _this3.filteredIndex ? _this3.filteredIndex[data.index] : 1;
      };
      return _objectSpread({
        data: data,
        getPosition: getPosition,
        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),
        getFiltered: isFilteredAccessor,
        textLabels: textLabels
      }, accessors);
    }
    /* eslint-enable complexity */
  }, {
    key: "updateLayerMeta",
    value: function updateLayerMeta(dataset) {
      var dataContainer = dataset.dataContainer;
      this.dataContainer = dataContainer;
      if (this.config.columnMode === COLUMN_MODE_GEOJSON) {
        var getFeature = this.getPositionAccessor();
        this.dataToFeature = (0, _geojsonUtils.getGeojsonPointDataMaps)(dataContainer, getFeature);
      } else if (this.config.columnMode === COLUMN_MODE_GEOARROW) {
        var boundsFromMetadata = (0, _layerUtils.getBoundsFromArrowMetadata)(this.config.columns.geoarrow, dataContainer);
        if (boundsFromMetadata) {
          this.updateMeta({
            bounds: boundsFromMetadata
          });
        } else {
          var getPosition = this.getPositionAccessor(dataContainer);
          var bounds = this.getPointsBounds(dataContainer, getPosition);
          this.updateMeta({
            bounds: bounds
          });
        }
      } else {
        var _getPosition = this.getPositionAccessor(dataContainer);
        var _bounds = this.getPointsBounds(dataContainer, _getPosition);
        this.updateMeta({
          bounds: _bounds
        });
      }
    }

    // eslint-disable-next-line complexity
  }, {
    key: "renderLayer",
    value: function renderLayer(opts) {
      var _this$config$columns$;
      var data = opts.data,
        gpuFilter = opts.gpuFilter,
        objectHovered = opts.objectHovered,
        mapState = opts.mapState,
        interactionConfig = opts.interactionConfig,
        dataset = opts.dataset;

      // if no field size is defined we need to pass fixed radius = false
      var fixedRadius = this.config.visConfig.fixedRadius && Boolean(this.config.sizeField);
      var radiusScale = this.getRadiusScaleByZoom(mapState, fixedRadius);
      var layerProps = _objectSpread({
        stroked: this.config.visConfig.outline,
        filled: this.config.visConfig.filled,
        lineWidthScale: this.config.visConfig.thickness,
        billboard: this.config.visConfig.billboard,
        radiusScale: radiusScale
      }, this.config.visConfig.fixedRadius ? {} : {
        radiusMaxPixels: 500
      });
      var updateTriggers = _objectSpread({
        getPosition: this.config.columns,
        getFilterValue: gpuFilter.filterValueUpdateTriggers,
        getFiltered: this.filteredIndexTrigger
      }, this.getVisualChannelUpdateTriggers());
      var useArrowLayer = Boolean(this.geoArrowVector);
      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);
      var brushingProps = this.getBrushingExtensionProps(interactionConfig);
      var getPixelOffset = (0, _layerTextLabel.getTextOffsetByRadius)(radiusScale, data.getRadius, mapState);
      var extensions = [].concat((0, _toConsumableArray2["default"])(defaultLayerProps.extensions), [brushingExtension], (0, _toConsumableArray2["default"])(useArrowLayer ? [arrowCPUFilterExtension] : []));
      var sharedProps = _objectSpread({
        getFilterValue: data.getFilterValue,
        extensions: extensions,
        filterRange: defaultLayerProps.filterRange,
        visible: defaultLayerProps.visible
      }, brushingProps);
      var hoveredObject = this.hasHoveredObject(objectHovered);
      var _this$config$visConfi = this.config.visConfig,
        showNeighborOnHover = _this$config$visConfi.showNeighborOnHover,
        allowHover = _this$config$visConfi.allowHover;
      var neighborsData = [];
      if (allowHover && showNeighborOnHover && hoveredObject) {
        // find neighbors
        neighborsData = (0, _layerUtils.getNeighbors)(this.config.columns.neighbors, dataset.dataContainer, hoveredObject.index, this.getPositionAccessor(dataset.dataContainer));
      }
      var ScatterplotLayerClass = _layers.ScatterplotLayer;
      var deckLayerData = data.data;
      var getPosition = data.getPosition;
      if (useArrowLayer) {
        ScatterplotLayerClass = _deckglArrowLayers.GeoArrowScatterplotLayer;
        deckLayerData = dataset.dataContainer.getTable();
        getPosition = this.geoArrowVector;
      }
      return [
      // @ts-expect-error
      new ScatterplotLayerClass(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), brushingProps), layerProps), data), {}, {
        data: deckLayerData,
        getPosition: getPosition,
        parameters: {
          // circles will be flat on the map when the altitude column is not used
          depthTest: ((_this$config$columns$ = this.config.columns.altitude) === null || _this$config$columns$ === void 0 ? void 0 : _this$config$columns$.fieldIdx) > -1
        },
        lineWidthUnits: 'pixels',
        updateTriggers: updateTriggers,
        extensions: extensions,
        opacity: hoveredObject && showNeighborOnHover ? 0.2 : this.config.visConfig.opacity,
        pickable: allowHover,
        autoHighlight: false
      }))].concat((0, _toConsumableArray2["default"])(hoveredObject ? [new _layers.ScatterplotLayer(_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), layerProps), {}, {
        visible: defaultLayerProps.visible,
        data: [].concat((0, _toConsumableArray2["default"])(neighborsData), [hoveredObject]),
        getLineColor: this.config.visConfig.showHighlightColor ? this.config.highlightColor : data.getLineColor,
        getFillColor: this.config.visConfig.showHighlightColor ? this.config.highlightColor : data.getFillColor,
        getRadius: data.getRadius,
        getPosition: data.getPosition
      }))] : []), (0, _toConsumableArray2["default"])(this.renderTextLabelLayer({
        getPosition: getPosition,
        sharedProps: sharedProps,
        getPixelOffset: getPixelOffset,
        updateTriggers: updateTriggers,
        getFiltered: data.getFiltered
      }, this.geoArrowVector ? _objectSpread(_objectSpread({}, opts), {}, {
        data: _objectSpread(_objectSpread({}, opts.data), {}, {
          getPosition: getPosition
        })
      }) : opts)));
    }
  }, {
    key: "hasHoveredObject",
    value: function hasHoveredObject(objectInfo) {
      if ((0, _layerUtils.isLayerHoveredFromArrow)(objectInfo, this.id) && objectInfo.index >= 0 && this.dataContainer) {
        return {
          index: objectInfo.index,
          position: this.getPositionAccessor(this.dataContainer)(objectInfo)
        };
      }
      return _superPropGet(PointLayer, "hasHoveredObject", this, 3)([objectInfo]);
    }
  }, {
    key: "getHoverData",
    value: function getHoverData(object, dataContainer, fields, animationConfig, hoverInfo) {
      // for arrow format, `object` is the Arrow row object Proxy,
      // and index is passed in `hoverInfo`.
      var index = this.geoArrowVector ? hoverInfo === null || hoverInfo === void 0 ? void 0 : hoverInfo.index : object.index;
      if (index >= 0) {
        return dataContainer.row(index);
      }
      return null;
    }
  }], [{
    key: "findDefaultLayerProps",
    value: function findDefaultLayerProps(dataset) {
      var _dataset$fieldPairs = dataset.fieldPairs,
        fieldPairs = _dataset$fieldPairs === void 0 ? [] : _dataset$fieldPairs,
        type = dataset.type;
      var props = [];
      if (type === _constants.DatasetType.VECTOR_TILE) {
        return {
          props: props
        };
      }

      // Make layer for each pair
      fieldPairs.forEach(function (pair) {
        var latField = pair.pair.lat;
        var prop = {
          label: pair.defaultName || 'Point'
        };

        // default layer color for begintrip and dropoff point
        if (latField.value in _constants.DEFAULT_LAYER_COLOR) {
          prop.color = (0, _utils.hexToRgb)(_constants.DEFAULT_LAYER_COLOR[latField.value]);
        }

        // set the first layer to be visible
        if (props.length === 0) {
          prop.isVisible = true;
        }
        // @ts-expect-error logically separate geojson column type?
        prop.columns = (0, _layerUtils.assignPointPairToLayerColumn)(pair, true);
        props.push(prop);
      });
      var altProps = (0, _layerUtils.getGeoArrowPointLayerProps)(dataset);
      return {
        props: props,
        altProps: altProps
      };
    }
  }]);
}(_baseLayer["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,