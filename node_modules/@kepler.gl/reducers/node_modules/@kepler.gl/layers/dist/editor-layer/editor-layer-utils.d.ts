import { PickInfo } from '@deck.gl/core/lib/deck';
import { Editor, Feature, FeatureSelectionContext } from '@kepler.gl/types';
/**
 * Returns true if drawing is active.
 * @param editorMenuActive Indicates whether the editor side menu is active.
 * @param mode Current editing mode.
 * @returs Returns true if drawing is active.
 */
export declare function isDrawingActive(editorMenuActive: boolean, mode: string): boolean;
/**
 * Handles click event for Editor layer.
 * @param info Information about clicked object.
 * @param event Event object.
 * @param params
 * @param params.editorMenuActive
 * @param params.editor
 * @param params.onLayerClick
 * @param params.setSelectedFeature
 * @param params.mapIndex
 * @returns Returns true is the click is handled.
 */
export declare function onClick(info: PickInfo<any>, event: any, { editorMenuActive, editor, setSelectedFeature, onLayerClick, mapIndex }: {
    editorMenuActive: boolean;
    editor: Editor;
    onLayerClick: (data: any, clickEvent: any) => any;
    setSelectedFeature: (feature: Feature | null, selectionContext?: FeatureSelectionContext) => any;
    mapIndex?: number;
}): boolean;
/**
 * Handles hover event for Editor layer.
 * @param info Information about hovered object.
 * @param params
 * @param params.editorMenuActive
 * @param params.editor
 * @param params.hoverInfo
 * @returns Returns true is hover is handled.
 */
export declare function onHover(info: PickInfo<any>, { hoverInfo, editor, editorMenuActive }: {
    editorMenuActive: boolean;
    editor: Editor;
    hoverInfo: any;
}): boolean;
/**
 * Returns tooltip based on interactions with Editor layer.
 * @param info Information about hovered object.
 * @param params
 * @param params.editorMenuActive
 * @param params.editor
 * @param params.theme
 * @raturns Returns a tooltip object compatible with Deck.getTooltip()
 */
export declare function getTooltip(info: PickInfo<any> & {
    viewport: any;
    pixel: any[];
}, { editor, theme, editorMenuActive }: {
    editorMenuActive: boolean;
    editor: Editor;
    theme: any;
}): object | null;
/**
 * Returns cursor type based on interactions with Editor layer.
 * @param params
 * @param params.editorMenuActive
 * @param params.editor
 * @param params.hoverInfo
 * @returns Returns cursor type.
 */
export declare function getCursor({ editorMenuActive, editor, hoverInfo }: {
    editorMenuActive: boolean;
    editor: Editor;
    hoverInfo: any;
}): string | null;
