"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _readOnlyError2 = _interopRequireDefault(require("@babel/runtime/helpers/readOnlyError"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Custom iterator for data in a set of tiles
 */
var TileSetIterator = /*#__PURE__*/function () {
  function TileSetIterator(tiles) {
    (0, _classCallCheck2["default"])(this, TileSetIterator);
    (0, _defineProperty2["default"])(this, "tileIterator", null);
    (0, _defineProperty2["default"])(this, "tileIndex", -1);
    this.tiles = tiles;
  }
  return (0, _createClass2["default"])(TileSetIterator, [{
    key: "nextTile",
    value: function nextTile() {
      if (this.tileIndex < this.tiles.length - 1) {
        this.tileIndex++;
        this.tileIterator = this.tiles[this.tileIndex][Symbol.iterator]();
      } else {
        this.tileIterator = null;
      }
    }
  }, {
    key: "next",
    value: function next() {
      // Startup: Get the iterator for the next tile
      if (this.tileIterator === null) this.nextTile();
      // Finish: We have no more tiles, we're done
      if (this.tileIterator === null) return {
        done: true,
        value: null
      };
      var next = this.tileIterator.next();
      // If we have a value for the current tile, return it
      if (!next.done) {
        return next;
      }

      // Otherwise, go on to the next tile
      this.tileIterator = null;
      return this.next();
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      return this;
    }
  }]);
}();
/**
 * An iterable object that can iterate over all rows
 * in a set of tiles, treat the set as a single iterable
 */
var IterableTileSet = exports["default"] = /*#__PURE__*/function () {
  function IterableTileSet(tiles, getRowCount) {
    (0, _classCallCheck2["default"])(this, IterableTileSet);
    (0, _defineProperty2["default"])(this, "rowCount", 0);
    (0, _defineProperty2["default"])(this, "rowCounts", []);
    this.tiles = tiles;
    var _iterator = _createForOfIteratorHelper(tiles),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _tile = _step.value;
        var count = getRowCount(_tile);
        this.rowCount += count;
        this.rowCounts.push(count);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  /**
   * Iterate over all values in the set
   */
  return (0, _createClass2["default"])(IterableTileSet, [{
    key: Symbol.iterator,
    value: function value() {
      return new TileSetIterator(this.tiles);
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaWxlU2V0SXRlcmF0b3IiLCJ0aWxlcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfZGVmaW5lUHJvcGVydHkyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwibmV4dFRpbGUiLCJ0aWxlSW5kZXgiLCJsZW5ndGgiLCJ0aWxlSXRlcmF0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwiSXRlcmFibGVUaWxlU2V0IiwiZXhwb3J0cyIsImdldFJvd0NvdW50IiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJfc3RlcCIsInMiLCJuIiwidGlsZSIsImNvdW50Iiwicm93Q291bnQiLCJyb3dDb3VudHMiLCJwdXNoIiwiZXJyIiwiZSIsImYiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmVjdG9yLXRpbGUvY29tbW9uLXRpbGUvaXRlcmFibGUtdGlsZS1zZXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLy8gQ29weXJpZ2h0IGNvbnRyaWJ1dG9ycyB0byB0aGUga2VwbGVyLmdsIHByb2plY3RcblxuLyoqXG4gKiBDdXN0b20gaXRlcmF0b3IgZm9yIGRhdGEgaW4gYSBzZXQgb2YgdGlsZXNcbiAqL1xuY2xhc3MgVGlsZVNldEl0ZXJhdG9yPFQgZXh0ZW5kcyBJdGVyYWJsZTxhbnk+PiB7XG4gIHByaXZhdGUgdGlsZUl0ZXJhdG9yOiBJdGVyYXRvcjxUIGV4dGVuZHMgSXRlcmFibGU8aW5mZXIgVj4gPyBWIDogbmV2ZXI+IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgdGlsZUluZGV4ID0gLTE7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0aWxlczogcmVhZG9ubHkgVFtdKSB7fVxuXG4gIG5leHRUaWxlKCkge1xuICAgIGlmICh0aGlzLnRpbGVJbmRleCA8IHRoaXMudGlsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy50aWxlSW5kZXgrKztcbiAgICAgIHRoaXMudGlsZUl0ZXJhdG9yID0gdGhpcy50aWxlc1t0aGlzLnRpbGVJbmRleF1bU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRpbGVJdGVyYXRvciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxUIGV4dGVuZHMgSXRlcmFibGU8aW5mZXIgVj4gPyBWIDogbmV2ZXI+IHtcbiAgICAvLyBTdGFydHVwOiBHZXQgdGhlIGl0ZXJhdG9yIGZvciB0aGUgbmV4dCB0aWxlXG4gICAgaWYgKHRoaXMudGlsZUl0ZXJhdG9yID09PSBudWxsKSB0aGlzLm5leHRUaWxlKCk7XG4gICAgLy8gRmluaXNoOiBXZSBoYXZlIG5vIG1vcmUgdGlsZXMsIHdlJ3JlIGRvbmVcbiAgICBpZiAodGhpcy50aWxlSXRlcmF0b3IgPT09IG51bGwpIHJldHVybiB7ZG9uZTogdHJ1ZSwgdmFsdWU6IG51bGx9O1xuXG4gICAgY29uc3QgbmV4dCA9IHRoaXMudGlsZUl0ZXJhdG9yLm5leHQoKTtcbiAgICAvLyBJZiB3ZSBoYXZlIGEgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHRpbGUsIHJldHVybiBpdFxuICAgIGlmICghbmV4dC5kb25lKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGdvIG9uIHRvIHRoZSBuZXh0IHRpbGVcbiAgICB0aGlzLnRpbGVJdGVyYXRvciA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMubmV4dCgpO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUm93Q291bnRBY2Nlc3NvcjxUPiA9ICh0aWxlOiBUKSA9PiBudW1iZXI7XG5cbi8qKlxuICogQW4gaXRlcmFibGUgb2JqZWN0IHRoYXQgY2FuIGl0ZXJhdGUgb3ZlciBhbGwgcm93c1xuICogaW4gYSBzZXQgb2YgdGlsZXMsIHRyZWF0IHRoZSBzZXQgYXMgYSBzaW5nbGUgaXRlcmFibGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSXRlcmFibGVUaWxlU2V0PFQgZXh0ZW5kcyBJdGVyYWJsZTxhbnk+PiB7XG4gIHJvd0NvdW50ID0gMDtcbiAgcHJpdmF0ZSByb3dDb3VudHM6IG51bWJlcltdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0aWxlczogcmVhZG9ubHkgVFtdLCBnZXRSb3dDb3VudDogUm93Q291bnRBY2Nlc3NvcjxUPikge1xuICAgIGZvciAoY29uc3QgdGlsZSBvZiB0aWxlcykge1xuICAgICAgY29uc3QgY291bnQgPSBnZXRSb3dDb3VudCh0aWxlKTtcbiAgICAgIHRoaXMucm93Q291bnQgKz0gY291bnQ7XG4gICAgICB0aGlzLnJvd0NvdW50cy5wdXNoKGNvdW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB2YWx1ZXMgaW4gdGhlIHNldFxuICAgKi9cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VCBleHRlbmRzIEl0ZXJhYmxlPGluZmVyIFY+ID8gViA6IG5ldmVyPiB7XG4gICAgcmV0dXJuIG5ldyBUaWxlU2V0SXRlcmF0b3I8VD4odGhpcy50aWxlcyk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkEsSUFHTUEsZUFBZTtFQUluQixTQUFBQSxnQkFBNkJDLEtBQW1CLEVBQUU7SUFBQSxJQUFBQyxnQkFBQSxtQkFBQUYsZUFBQTtJQUFBLElBQUFHLGdCQUFBLG1DQUgrQixJQUFJO0lBQUEsSUFBQUEsZ0JBQUEsZ0NBQ2pFLENBQUMsQ0FBQztJQUFBLEtBRU9GLEtBQW1CLEdBQW5CQSxLQUFtQjtFQUFHO0VBQUMsV0FBQUcsYUFBQSxhQUFBSixlQUFBO0lBQUFLLEdBQUE7SUFBQUMsS0FBQSxFQUVwRCxTQUFBQyxRQUFRQSxDQUFBLEVBQUc7TUFDVCxJQUFJ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