import type { DataType, Field, Schema, SchemaMetadata } from '@loaders.gl/schema';
import * as arrow from 'apache-arrow';
/** Convert Apache Arrow Schema (class instance) to a serialized Schema (plain data) */
export declare function convertArrowToSchema(arrowSchema: arrow.Schema): Schema;
/** Convert Apache Arrow Schema (class instance) to a serialized Schema (plain data) */
export declare function convertSchemaToArrow(schema: Schema): arrow.Schema;
/** Convert Apache Arrow Schema (class instance) to a serialized Schema (plain data) */
export declare function serializeArrowSchema(arrowSchema: arrow.Schema): Schema;
/** Convert a serialized Schema (plain data) to an Apache Arrow Schema (class instance) */
export declare function deserializeArrowSchema(schema: Schema): arrow.Schema;
/** Convert Apache Arrow Schema metadata (Map<string, string>) to serialized metadata (Record<string, string> */
export declare function serializeArrowMetadata(arrowMetadata: Map<string, string>): SchemaMetadata;
/** Convert serialized metadata (Record<string, string> to Apache Arrow Schema metadata (Map<string, string>) to */
export declare function deserializeArrowMetadata(metadata?: SchemaMetadata): Map<string, string>;
/** Convert Apache Arrow Field (class instance) to serialized Field (plain data) */
export declare function serializeArrowField(field: arrow.Field): Field;
/** Convert a serialized Field (plain data) to an Apache Arrow Field (class instance)*/
export declare function deserializeArrowField(field: Field): arrow.Field;
/** Converts a serializable loaders.gl data type to hydrated arrow data type */
export declare function serializeArrowType(arrowType: arrow.DataType): DataType;
/** Converts a serializable loaders.gl data type to hydrated arrow data type */
export declare function deserializeArrowType(dataType: DataType): arrow.DataType;
//# sourceMappingURL=convert-arrow-schema.d.ts.map