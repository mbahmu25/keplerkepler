"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = require("./base");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DefaultLayerIcon = /*#__PURE__*/function (_Component) {
  function DefaultLayerIcon() {
    (0, _classCallCheck2["default"])(this, DefaultLayerIcon);
    return _callSuper(this, DefaultLayerIcon, arguments);
  }
  (0, _inherits2["default"])(DefaultLayerIcon, _Component);
  return (0, _createClass2["default"])(DefaultLayerIcon, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_base.Base, this.props, /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "29.4",
        cy: "31.6",
        r: "8.4"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "48.5",
        cy: "15.7",
        r: "6.5"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "11",
        cy: "44.2",
        r: "3"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "50",
        cy: "44.2",
        r: "5"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "34",
        cy: "54.2",
        r: "3"
      }), /*#__PURE__*/_react["default"].createElement("circle", {
        cx: "14",
        cy: "16.2",
        r: "4"
      }));
    }
  }]);
}(_react.Component);
(0, _defineProperty2["default"])(DefaultLayerIcon, "propTypes", {
  height: _propTypes["default"].string,
  colors: _propTypes["default"].arrayOf(_propTypes["default"].string)
});
(0, _defineProperty2["default"])(DefaultLayerIcon, "defaultProps", {
  height: '16px',
  predefinedClassName: 'default-layer-icon'
});
var _default = exports["default"] = DefaultLayerIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9iYXNlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX2NhbGxTdXBlciIsIm8iLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJEZWZhdWx0TGF5ZXJJY29uIiwiX0NvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjazIiLCJhcmd1bWVudHMiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiY3JlYXRlRWxlbWVudCIsIkJhc2UiLCJwcm9wcyIsImN4IiwiY3kiLCJDb21wb25lbnQiLCJfZGVmaW5lUHJvcGVydHkyIiwiaGVpZ2h0IiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiY29sb3JzIiwiYXJyYXlPZiIsInByZWRlZmluZWRDbGFzc05hbWUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvZGVmYXVsdC1sYXllci1pY29uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge0Jhc2V9IGZyb20gJy4vYmFzZSc7XG5cbmNsYXNzIERlZmF1bHRMYXllckljb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGhlaWdodDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xvcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBoZWlnaHQ6ICcxNnB4JyxcbiAgICBwcmVkZWZpbmVkQ2xhc3NOYW1lOiAnZGVmYXVsdC1sYXllci1pY29uJ1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJhc2Ugey4uLnRoaXMucHJvcHN9PlxuICAgICAgICA8Y2lyY2xlIGN4PVwiMjkuNFwiIGN5PVwiMzEuNlwiIHI9XCI4LjRcIiAvPlxuICAgICAgICA8Y2lyY2xlIGN4PVwiNDguNVwiIGN5PVwiMTUuN1wiIHI9XCI2LjVcIiAvPlxuICAgICAgICA8Y2lyY2xlIGN4PVwiMTFcIiBjeT1cIjQ0LjJcIiByPVwiM1wiIC8+XG4gICAgICAgIDxjaXJjbGUgY3g9XCI1MFwiIGN5PVwiNDQuMlwiIHI9XCI1XCIgLz5cbiAgICAgICAgPGNpcmNsZSBjeD1cIjM0XCIgY3k9XCI1NC4yXCIgcj1cIjNcIiAvPlxuICAgICAgICA8Y2lyY2xlIGN4PVwiMTRcIiBjeT1cIjE2LjJcIiByPVwiNFwiIC8+XG4gICAgICA8L0Jhc2U+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0TGF5ZXJJY29uO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMs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