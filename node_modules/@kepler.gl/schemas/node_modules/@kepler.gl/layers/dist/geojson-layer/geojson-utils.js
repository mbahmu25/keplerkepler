"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeatureTypes = exports.COLUMN_MODE_GEOJSON = void 0;
exports.applyFiltersToTableColumns = applyFiltersToTableColumns;
exports.detectTableColumns = detectTableColumns;
exports.featureToDeckGlGeoType = void 0;
exports.fieldIsGeoArrow = fieldIsGeoArrow;
exports.getGeojsonBounds = getGeojsonBounds;
exports.getGeojsonDataMaps = getGeojsonDataMaps;
exports.getGeojsonFeatureTypes = getGeojsonFeatureTypes;
exports.getGeojsonLayerMeta = getGeojsonLayerMeta;
exports.getGeojsonPointDataMaps = getGeojsonPointDataMaps;
exports.groupColumnsAsGeoJson = groupColumnsAsGeoJson;
exports.parseGeoJsonRawFeature = parseGeoJsonRawFeature;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _buffer = require("buffer");
var _geojsonNormalize = _interopRequireDefault(require("@mapbox/geojson-normalize"));
var _bbox = _interopRequireDefault(require("@turf/bbox"));
var _d3Array = require("d3-array");
var _center = _interopRequireDefault(require("@turf/center"));
var _core = require("@loaders.gl/core");
var _wkt = require("@loaders.gl/wkt");
var _gis = require("@loaders.gl/gis");
var _utils = require("@kepler.gl/utils");
var _constants = require("@kepler.gl/constants");
var _layerUtils = require("../layer-utils");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var COLUMN_MODE_GEOJSON = exports.COLUMN_MODE_GEOJSON = 'geojson';

/* eslint-disable */
// TODO: Re-enable eslint when we upgrade to handle enums and type maps
var FeatureTypes = exports.FeatureTypes = /*#__PURE__*/function (FeatureTypes) {
  FeatureTypes["Point"] = "Point";
  FeatureTypes["MultiPoint"] = "MultiPoint";
  FeatureTypes["LineString"] = "LineString";
  FeatureTypes["MultiLineString"] = "MultiLineString";
  FeatureTypes["Polygon"] = "Polygon";
  FeatureTypes["MultiPolygon"] = "MultiPolygon";
  return FeatureTypes;
}({}); // @ts-expect-error return type of getGeojsonFeatureTypes ?
/* eslint-enable */

/**
 * Returns true if the field has geoarrow extension.
 * @param geoField A field to test.
 * @returns
 */
function fieldIsGeoArrow(geoField) {
  var _geoField$metadata;
  return Boolean(geoField === null || geoField === void 0 || (_geoField$metadata = geoField.metadata) === null || _geoField$metadata === void 0 ? void 0 : _geoField$metadata.get('ARROW:extension:name'));
}
function parseGeoJsonRawFeature(rawFeature) {
  var properties = null; // help ensure that properties is present on the returned geojson feature
  if ((0, _typeof2["default"])(rawFeature) === 'object') {
    // Support GeoJson feature as object
    // probably need to normalize it as well
    var normalized = (0, _geojsonNormalize["default"])(rawFeature);
    if (!normalized || !Array.isArray(normalized.features)) {
      // fail to normalize GeoJson
      return null;
    }
    return _objectSpread({
      properties: properties
    }, normalized.features[0]);
  } else if (typeof rawFeature === 'string') {
    var parsedGeometry = parseGeometryFromString(rawFeature);
    if (!parsedGeometry) return null;
    // @ts-expect-error verify whether parsedGeometry always contains properties
    return _objectSpread({
      properties: properties
    }, parsedGeometry);
  } else if (Array.isArray(rawFeature)) {
    // Support GeoJson  LineString as an array of points
    return {
      type: 'Feature',
      geometry: {
        // why do we need to flip it...
        coordinates: rawFeature.map(function (pts) {
          return [pts[1], pts[0]];
        }),
        type: 'LineString'
      },
      properties: properties
    };
  }
  return null;
}
function getGeojsonLayerMeta(_ref) {
  var dataContainer = _ref.dataContainer,
    getFeature = _ref.getFeature,
    config = _ref.config;
  var dataToFeature = config.columnMode === COLUMN_MODE_GEOJSON ? getGeojsonDataMaps(dataContainer, getFeature) :
  // COLUMN_MODE_TABLE
  groupColumnsAsGeoJson(dataContainer, config.columns, 'sortBy');

  // get bounds from features
  var bounds = getGeojsonBounds(dataToFeature);
  // if any of the feature has properties.radius set to be true
  var fixedRadius = Boolean(dataToFeature.find(function (d) {
    var _d$properties;
    return d && 'properties' in d && ((_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.radius);
  }));

  // keep a record of what type of geometry the collection has
  var featureTypes = getGeojsonFeatureTypes(dataToFeature);
  var meanCenters = [];
  for (var i = 0; i < dataToFeature.length; i++) {
    var feature = dataToFeature[i];
    if (feature) {
      try {
        // TODO: use line interpolate to get center of line for LineString
        var cent = (0, _center["default"])(feature);
        meanCenters.push(cent.geometry.coordinates);
      } catch (e) {
        meanCenters.push(null);
      }
    }
  }
  return {
    dataToFeature: dataToFeature,
    bounds: bounds,
    fixedRadius: fixedRadius,
    featureTypes: featureTypes,
    centroids: meanCenters
  };
}

/**
 * Parse raw data to GeoJson feature
 */
function getGeojsonDataMaps(dataContainer, getFeature) {
  var acceptableTypes = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];
  var dataToFeature = [];
  for (var index = 0; index < dataContainer.numRows(); index++) {
    var feature = parseGeoJsonRawFeature(getFeature({
      index: index
    }));
    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {
      var cleaned = _objectSpread(_objectSpread({}, feature), {}, {
        // store index of the data in feature properties
        properties: _objectSpread(_objectSpread({}, feature.properties), {}, {
          index: index
        })
      });
      dataToFeature[index] = cleaned;
    } else {
      dataToFeature[index] = null;
    }
  }
  return dataToFeature;
}

/**
 * Parse raw data to GeoJson point feature coordinates
 */
function getGeojsonPointDataMaps(dataContainer, getFeature) {
  var acceptableTypes = ['Point', 'MultiPoint', 'GeometryCollection'];
  var dataToFeature = [];
  for (var index = 0; index < dataContainer.numRows(); index++) {
    var feature = parseGeoJsonRawFeature(getFeature(dataContainer.rowAsArray(index)));
    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {
      dataToFeature[index] = feature.geometry.type === 'Point' || feature.geometry.type === 'MultiPoint' ? feature.geometry.coordinates :
      // @ts-expect-error Property 'geometries' does not exist on type 'LineString'
      (feature.geometry.geometries || []).reduce(function (accu, f) {
        if (f.type === 'Point') {
          accu.push(f.coordinates);
        } else if (f.type === 'MultiPoint') {
          accu.push.apply(accu, (0, _toConsumableArray2["default"])(f.coordinates));
        }
        return accu;
      }, []);
    } else {
      dataToFeature[index] = null;
    }
  }
  return dataToFeature;
}

/**
 * Parse geojson from string
 * @param {String} geoString
 * @returns {null | Object} geojson object or null if failed
 */
function parseGeometryFromString(geoString) {
  var parsedGeo;

  // try parse as geojson string
  // {"type":"Polygon","coordinates":[[[-74.158491,40.83594]]]}
  try {
    parsedGeo = JSON.parse(geoString);
  } catch (e) {
    // keep trying to parse
  }

  // try parse as wkt using loaders.gl WKTLoader
  if (!parsedGeo) {
    try {
      parsedGeo = (0, _core.parseSync)(geoString, _wkt.WKTLoader);
    } catch (e) {
      return null;
    }
  }

  // try parse as wkb using loaders.gl WKBLoader
  if (!parsedGeo) {
    try {
      var buffer = _buffer.Buffer.from(geoString, 'hex');
      var binaryGeo = (0, _core.parseSync)(buffer, _wkt.WKBLoader);
      // @ts-expect-error
      parsedGeo = (0, _gis.binaryToGeometry)(binaryGeo);
    } catch (e) {
      return null;
    }
  }
  if (!parsedGeo) {
    return null;
  }
  var normalized = (0, _geojsonNormalize["default"])(parsedGeo);
  if (!normalized || !Array.isArray(normalized.features)) {
    // fail to normalize geojson
    return null;
  }
  return normalized.features[0];
}

/**
 * Get geojson bounds
 */
function getGeojsonBounds() {
  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  // 70 ms for 10,000 polygons
  // here we only pick couple
  var maxCount = 10000;
  var samples = features.length > maxCount ? (0, _utils.getSampleData)(features, maxCount) : features;
  var validSingleGeometry = function validSingleGeometry(geom) {
    return geom.coordinates && geom.coordinates.length;
  };
  var validGeometryCollection = function validGeometryCollection(geom) {
    return geom.geometries && geom.geometries.length && geom.geometries.every(validSingleGeometry);
  };
  var nonEmpty = samples.filter(function (d) {
    return d && d.geometry && (validSingleGeometry(d.geometry) || validGeometryCollection(d.geometry));
  });
  try {
    return (0, _bbox["default"])({
      type: 'FeatureCollection',
      features: nonEmpty
    });
  } catch (e) {
    return null;
  }
}
var featureToDeckGlGeoType = exports.featureToDeckGlGeoType = {
  Point: 'point',
  MultiPoint: 'point',
  LineString: 'line',
  MultiLineString: 'line',
  Polygon: 'polygon',
  MultiPolygon: 'polygon'
};
/**
 * Parse geojson from string
 */
function getGeojsonFeatureTypes(allFeatures) {
  // @ts-expect-error some test cases only have 1 geotype
  var featureTypes = {};
  for (var f = 0; f < allFeatures.length; f++) {
    var feature = allFeatures[f];
    if (feature && 'geometry' in feature) {
      var geoType = featureToDeckGlGeoType[feature.geometry && feature.geometry.type];
      if (geoType) {
        featureTypes[geoType] = true;
      }
    }
  }
  return featureTypes;
}
function groupColumnsAsGeoJson(dataContainer, columns) {
  var sortByColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'timestamp';
  var groupedById = {};
  var sortByFieldIdx = columns[sortByColumn].fieldIdx;
  var sortByRequired = !columns[sortByColumn].optional;
  for (var index = 0; index < dataContainer.numRows(); index++) {
    // note: can materialize the row
    var datum = dataContainer.rowAsArray(index);
    var id = datum[columns.id.fieldIdx];
    var lat = datum[columns.lat.fieldIdx];
    var lon = datum[columns.lng.fieldIdx];
    var altitude = columns.altitude ? datum[columns.altitude.fieldIdx] : 0;
    var sortBy = sortByFieldIdx > -1 ? datum[sortByFieldIdx] : null;
    // @ts-expect-error
    var coords = [lon, lat, altitude, sortBy];
    // Adding references to the original data to the coordinates array
    coords.datumIndex = index;
    coords.datum = datum;
    if (!groupedById[id]) groupedById[id] = [];
    if (Number.isFinite(lon) && Number.isFinite(lat) && (!sortByRequired || sortByRequired && sortBy)) {
      // only push points if lat,lng,and sortby exist
      groupedById[id].push(coords);
    }
  }
  var result = Object.entries(groupedById).map(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function (_ref2, index) {
    var _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
      _ = _ref3[0],
      items = _ref3[1];
    return {
      type: 'Feature',
      geometry: {
        type: 'LineString',
        // Sort by columns if has sortByField
        // TODO: items are expected in Position[] format?
        coordinates: sortByFieldIdx > -1 ? items.sort(function (a, b) {
          return (0, _d3Array.ascending)(a[3], b[3]);
        }) : items
      },
      properties: {
        index: index,
        // values are used for valueAccessor in TripLayer.formatLayerData()
        // Note: this can cause row materialization in case of non-row based containers
        values: items.map(function (item) {
          return dataContainer.rowAsArray(item.datumIndex);
        })
      }
    };
  });
  return result;
}

/**
 * Find id / ts / lat / lng columns from a table and assign it to layer columns
 */
function detectTableColumns(dataset, layerColumns) {
  var sortBy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'timestamp';
  var fields = dataset.fields,
    fieldPairs = dataset.fieldPairs;
  if (!fieldPairs.length || !fields.length) {
    return null;
  }
  // find sort by field
  var sortByFieldIdx = fields.findIndex(function (f) {
    return f.type === _constants.ALL_FIELD_TYPES.timestamp;
  });
  // find id column
  var idFieldIdx = fields.findIndex(function (f) {
    var _f$name;
    return (_f$name = f.name) === null || _f$name === void 0 ? void 0 : _f$name.toLowerCase().match(/^(id|uuid)$/g);
  });
  if (sortByFieldIdx > -1 && idFieldIdx > -1) {
    var pointColumns = (0, _layerUtils.assignPointPairToLayerColumn)(fieldPairs[0], true);
    return {
      columns: _objectSpread(_objectSpread({}, Object.keys(layerColumns).reduce(function (accu, col) {
        var _pointColumns$col;
        return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, col, (_pointColumns$col = pointColumns[col]) !== null && _pointColumns$col !== void 0 ? _pointColumns$col : layerColumns[col]));
      }, {})), {}, (0, _defineProperty2["default"])({
        geojson: {
          value: null,
          fieldIdx: -1
          // optional: true
        },
        id: {
          value: fields[idFieldIdx].name,
          fieldIdx: idFieldIdx
          // optional: false
        }
      }, sortBy, {
        value: fields[sortByFieldIdx].name,
        fieldIdx: sortByFieldIdx
        // optional: false
      })),
      label: fieldPairs[0].defaultName
    };
  }
  return null;
}
function applyFiltersToTableColumns(dataset, dataToFeature) {
  var dataContainer = dataset.dataContainer,
    filteredIndex = dataset.filteredIndex;
  if (filteredIndex.length === dataContainer.numRows()) {
    // Only apply the filtering when something is to be filtered out
    return dataToFeature;
  }
  var filteredIndexSet = new Set(filteredIndex);
  var filteredFeatures = [];
  var _iterator = _createForOfIteratorHelper(dataToFeature),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var feature = _step.value;
      // @ts-expect-error geometry.coordinates not available for GeometryCollection
      var filteredCoords = feature.geometry.coordinates.filter(function (c) {
        return filteredIndexSet.has(c.datumIndex);
      });
      if (filteredCoords.length > 0 && feature) {
        filteredFeatures.push(_objectSpread(_objectSpread({}, feature), {}, {
          geometry: _objectSpread(_objectSpread({}, feature.geometry), {}, {
            coordinates: filteredCoords
          }),
          properties: _objectSpread(_objectSpread({}, feature.properties), {}, {
            // @ts-expect-error BinaryFeatureCollection
            values: feature.geometry.coordinates.map(function (c) {
              return dataContainer.rowAsArray(c.datumIndex);
            })
          })
        }));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return filteredFeatures;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,