"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModifyModeExtended = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _editModes = require("@nebula.gl/edit-modes");
var _constants = require("@kepler.gl/constants");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var RIGHT_BUTTON = 2;

/**
 * Show helper only when the point is close enough to the line.
 */
var ModifyModeExtended = exports.ModifyModeExtended = /*#__PURE__*/function (_ModifyMode) {
  function ModifyModeExtended() {
    (0, _classCallCheck2["default"])(this, ModifyModeExtended);
    return _callSuper(this, ModifyModeExtended, arguments);
  }
  (0, _inherits2["default"])(ModifyModeExtended, _ModifyMode);
  return (0, _createClass2["default"])(ModifyModeExtended, [{
    key: "getNearestPoint",
    value:
    // @ts-expect-error expect to return no point when object is too far
    function getNearestPoint(line, inPoint, viewport) {
      var p = _superPropGet(ModifyModeExtended, "getNearestPoint", this, 3)([line, inPoint, viewport]);
      if (p && viewport) {
        var p1 = viewport.project(p.geometry.coordinates);
        var p2 = viewport.project(inPoint.geometry.coordinates);
        var d = Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
        if (d > _constants.EDITOR_LAYER_PICKING_RADIUS) {
          return;
        }
      }
      return p;
    }
  }, {
    key: "handleClick",
    value: function handleClick(event, props) {
      var _event$sourceEvent;
      // prevent insertion of points for right click
      if ((event === null || event === void 0 || (_event$sourceEvent = event.sourceEvent) === null || _event$sourceEvent === void 0 ? void 0 : _event$sourceEvent.button) === RIGHT_BUTTON) {
        return;
      }
      _superPropGet(ModifyModeExtended, "handleClick", this, 3)([event, props]);
    }
  }]);
}(_editModes.ModifyMode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZWRpdE1vZGVzIiwicmVxdWlyZSIsIl9jb25zdGFudHMiLCJfY2FsbFN1cGVyIiwidCIsIm8iLCJlIiwiX2dldFByb3RvdHlwZU9mMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIl9zdXBlclByb3BHZXQiLCJyIiwicCIsIl9nZXQyIiwiUklHSFRfQlVUVE9OIiwiTW9kaWZ5TW9kZUV4dGVuZGVkIiwiZXhwb3J0cyIsIl9Nb2RpZnlNb2RlIiwiX2NsYXNzQ2FsbENoZWNrMiIsImFyZ3VtZW50cyIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJnZXROZWFyZXN0UG9pbnQiLCJsaW5lIiwiaW5Qb2ludCIsInZpZXdwb3J0IiwicDEiLCJwcm9qZWN0IiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsInAyIiwiZCIsIk1hdGgiLCJzcXJ0IiwicG93IiwiRURJVE9SX0xBWUVSX1BJQ0tJTkdfUkFESVVTIiwiaGFuZGxlQ2xpY2siLCJldmVudCIsInByb3BzIiwiX2V2ZW50JHNvdXJjZUV2ZW50Iiwic291cmNlRXZlbnQiLCJidXR0b24iLCJNb2RpZnlNb2RlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VkaXRvci1sYXllci9tb2RpZnktbW9kZS1leHRlbmRlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1xuICBNb2RpZnlNb2RlLFxuICBGZWF0dXJlT2YsXG4gIExpbmVTdHJpbmcsXG4gIFBvaW50LFxuICBWaWV3cG9ydCBhcyBOZWJ1bGFWaWV3cG9ydFxufSBmcm9tICdAbmVidWxhLmdsL2VkaXQtbW9kZXMnO1xuaW1wb3J0IHtWaWV3cG9ydH0gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5cbmltcG9ydCB7RURJVE9SX0xBWUVSX1BJQ0tJTkdfUkFESVVTfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5cbmNvbnN0IFJJR0hUX0JVVFRPTiA9IDI7XG5cbi8qKlxuICogU2hvdyBoZWxwZXIgb25seSB3aGVuIHRoZSBwb2ludCBpcyBjbG9zZSBlbm91Z2ggdG8gdGhlIGxpbmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RpZnlNb2RlRXh0ZW5kZWQgZXh0ZW5kcyBNb2RpZnlNb2RlIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBleHBlY3QgdG8gcmV0dXJuIG5vIHBvaW50IHdoZW4gb2JqZWN0IGlzIHRvbyBmYXJcbiAgZ2V0TmVhcmVzdFBvaW50KFxuICAgIGxpbmU6IEZlYXR1cmVPZjxMaW5lU3RyaW5nPixcbiAgICBpblBvaW50OiBGZWF0dXJlT2Y8UG9pbnQ+LFxuICAgIHZpZXdwb3J0OiBWaWV3cG9ydCB8IG51bGwgfCB1bmRlZmluZWRcbiAgKSB7XG4gICAgY29uc3QgcCA9IHN1cGVyLmdldE5lYXJlc3RQb2ludChsaW5lLCBpblBvaW50LCB2aWV3cG9ydCBhcyBOZWJ1bGFWaWV3cG9ydCB8IG51bGwgfCB1bmRlZmluZWQpO1xuICAgIGlmIChwICYmIHZpZXdwb3J0KSB7XG4gICAgICBjb25zdCBwMSA9IHZpZXdwb3J0LnByb2plY3QocC5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICBjb25zdCBwMiA9IHZpZXdwb3J0LnByb2plY3QoaW5Qb2ludC5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gICAgICBjb25zdCBkID0gTWF0aC5zcXJ0KChwMVswXSAtIHAyWzBdKSAqKiAyICsgKHAxWzFdIC0gcDJbMV0pICoqIDIpO1xuICAgICAgaWYgKGQgPiBFRElUT1JfTEFZRVJfUElDS0lOR19SQURJVVMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKGV2ZW50LCBwcm9wcykge1xuICAgIC8vIHByZXZlbnQgaW5zZXJ0aW9uIG9mIHBvaW50cyBmb3IgcmlnaHQgY2xpY2tcbiAgICBpZiAoZXZlbnQ/LnNvdXJjZUV2ZW50Py5idXR0b24gPT09IFJJR0hUX0JVVFRPTikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdXBlci5oYW5kbGVDbGljayhldmVudCwgcHJvcHMpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFTQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFBaUUsU0FBQUUsV0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsV0FBQUQsQ0FBQSxPQUFBRSxnQkFBQSxhQUFBRixDQUFBLE9BQUFHLDJCQUFBLGFBQUFKLENBQUEsRUFBQUsseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFOLENBQUEsRUFBQUMsQ0FBQSxZQUFBQyxnQkFBQSxhQUFBSCxDQUFBLEVBQUFRLFdBQUEsSUFBQVAsQ0FBQSxDQUFBUSxLQUFBLENBQUFULENBQUEsRUFBQUUsQ0FBQTtBQUFBLFNBQUFHLDBCQUFBLGNBQUFMLENBQUEsSUFBQVUsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBUCxPQUFBLENBQUFDLFNBQUEsQ0FBQUcsT0FBQSxpQ0FBQVYsQ0FBQSxhQUFBSyx5QkFBQSxZQUFBQSwwQkFBQSxhQUFBTCxDQUFBO0FBQUEsU0FBQWMsY0FBQWQsQ0FBQSxFQUFBRSxDQUFBLEVBQUFhLENBQUEsRUFBQWQsQ0FBQSxRQUFBZSxDQUFBLE9BQUFDLEtBQUEsaUJBQUFkLGdCQUFBLGlCQUFBRixDQUFBLEdBQUFELENBQUEsQ0FBQVcsU0FBQSxHQUFBWCxDQUFBLEdBQUFFLENBQUEsRUFBQWEsQ0FBQSxjQUFBZCxDQUFBLGFBQUFELENBQUEsV0FBQWdCLENBQUEsQ0FBQVAsS0FBQSxDQUFBTSxDQUFBLEVBQUFmLENBQUEsT0FBQWdCLENBQUEsSUFaakU7QUFDQTtBQWFBLElBQU1FLFlBQVksR0FBRyxDQUFDOztBQUV0QjtBQUNBO0FBQ0E7QUFGQSxJQUdhQyxrQkFBa0IsR0FBQUMsT0FBQSxDQUFBRCxrQkFBQSwwQkFBQUUsV0FBQTtFQUFBLFNBQUFGLG1CQUFBO0lBQUEsSUFBQUcsZ0JBQUEsbUJBQUFILGtCQUFBO0lBQUEsT0FBQXBCLFVBQUEsT0FBQW9CLGtCQUFBLEVBQUFJLFNBQUE7RUFBQTtFQUFBLElBQUFDLFVBQUEsYUFBQUwsa0JBQUEsRUFBQUUsV0FBQTtFQUFBLFdBQUFJLGFBQUEsYUFBQU4sa0JBQUE7SUFBQU8sR0FBQTtJQUFBQyxLQUFBO0lBQzdCO0lBQ0EsU0FBQUMsZUFBZUEsQ0FDYkMsSUFBMkIsRUFDM0JDLE9BQXlCLEVBQ3pCQyxRQUFxQyxFQUNyQztNQUNBLElBQU1mLENBQUMsR0FBQUYsYUFBQSxDQUFBSyxrQkFBQSwrQkFBeUJVLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQXNDO01BQzdGLElBQUlmLENBQUMsSUFBSWUsUUFBUSxFQUFFO1FBQ2pCLElBQU1DLEVBQUUsR0FBR0QsUUFBUSxDQUFDRSxPQUFPLENBQUNqQixDQUFDLENBQUNrQixRQUFRLENBQUNDLFdBQVcsQ0FBQztRQUNuRCxJQUFNQyxFQUFFLEdBQUdMLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDSCxPQUFPLENBQUNJLFFBQVEsQ0FBQ0MsV0FBVyxDQUFDO1FBQ3pELElBQU1FLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxJQUFJLENBQUNELElBQUEsQ0FBQUUsR0FBQSxDQUFDUixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUdJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBSyxDQUFDLElBQUFFLElBQUEsQ0FBQUUsR0FBQSxDQUFJUixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUdJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBSyxDQUFDLEVBQUM7UUFDaEUsSUFBSUMsQ0FBQyxHQUFHSSxzQ0FBMkIsRUFBRTtVQUNuQztRQUNGO01BQ0Y7TUFDQSxPQUFPekIsQ0FBQztJQUNWO0VBQUM7SUFBQVUsR0FBQTtJQUFBQyxLQUFBLEVBRUQsU0FBQWUsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFQyxLQUFLLEVBQUU7TUFBQSxJQUFBQyxrQkFBQTtNQUN4QjtNQUNBLElBQUksQ0FBQUYsS0FBSyxhQUFMQSxLQUFLLGdCQUFBRSxrQkFBQSxHQUFMRixLQUFLLENBQUVHLFdBQVcsY0FBQUQsa0JBQUEsdUJBQWxCQSxrQkFBQSxDQUFvQkUsTUFBTSxNQUFLN0IsWUFBWSxFQUFFO1FBQy9DO01BQ0Y7TUFDQUosYUFBQSxDQUFBSyxrQkFBQSwyQkFBa0J3QixLQUFLLEVBQUVDLEtBQUs7SUFDaEM7RUFBQztBQUFBLEVBekJxQ0kscUJBQVUiLCJpZ25vcmVMaXN0IjpbXX0=