"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MVTLayer = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _readOnlyError2 = _interopRequireDefault(require("@babel/runtime/helpers/readOnlyError"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _typed = require("@deck.gl/extensions/typed");
var _typed2 = require("@deck.gl/geo-layers/typed");
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/*
  Custom MVT layer that works with MVTSource and PMTileSource.
  Changes:
    - getTileData: handles props.getTileData.
    - renderSubLayers: removed coordinates logic present in original MVTLayer:renderSubLayers.
    - renderSubLayers: set clipBounds.
    - loaders.gl & older deck.gl: geojson-table: data = data.features
*/
// @ts-expect-error need to patch private methods because of newer loaders.gl
var MVTLayer = exports.MVTLayer = /*#__PURE__*/function (_MVTLayer2) {
  function MVTLayer() {
    (0, _classCallCheck2["default"])(this, MVTLayer);
    return _callSuper(this, MVTLayer, arguments);
  }
  (0, _inherits2["default"])(MVTLayer, _MVTLayer2);
  return (0, _createClass2["default"])(MVTLayer, [{
    key: "getTileData",
    value: function getTileData(tile) {
      var getTileData = this.props.getTileData;
      var data = this.state.data;
      tile.url = typeof data === 'string' || Array.isArray(data) ? (0, _typed2._getURLFromTemplate)(data, tile) : null;
      if (getTileData) {
        return getTileData(tile);
      }
      return null;
    }
  }, {
    key: "renderSubLayers",
    value: function renderSubLayers(props) {
      var boundingBox = props.tile.boundingBox;
      props.autoHighlight = true;
      if (boundingBox) {
        props.clipBounds = [].concat((0, _toConsumableArray2["default"])(boundingBox[0]), (0, _toConsumableArray2["default"])(boundingBox[1]));
        props.extensions = [].concat((0, _toConsumableArray2["default"])(props.extensions || []), [new _typed.ClipExtension()]);
      }
      return this.props.renderSubLayers(props);
    }
  }, {
    key: "getHighlightedObjectIndex",
    value: function getHighlightedObjectIndex(tile) {
      var _data;
      var _this$state = this.state,
        hoveredFeatureId = _this$state.hoveredFeatureId,
        hoveredFeatureLayerName = _this$state.hoveredFeatureLayerName;
      var _this$props = this.props,
        uniqueIdProperty = _this$props.uniqueIdProperty,
        highlightedFeatureId = _this$props.highlightedFeatureId;
      var data = tile.content;
      data = ((_data = data) === null || _data === void 0 ? void 0 : _data.shape) === 'geojson-table' ? data.features : data;
      var isHighlighted = isFeatureIdDefined(highlightedFeatureId);
      var isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;
      if (!isFeatureIdPresent) {
        return -1;
      }
      var featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;

      // Iterable data
      if (Array.isArray(data)) {
        return data.findIndex(function (feature) {
          var isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;
          var isMatchingLayer = isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;
          return isMatchingId && isMatchingLayer;
        });
      }
      return -1;
    }
  }]);
}(_typed2.MVTLayer);
function getFeatureUniqueId(feature, uniqueIdProperty) {
  if (feature.properties && uniqueIdProperty) {
    return feature.properties[uniqueIdProperty];
  }
  if ('id' in feature) {
    return feature.id;
  }
  return undefined;
}
function getFeatureLayerName(feature) {
  var _feature$properties;
  return ((_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.layerName) || null;
}
function isFeatureIdDefined(value) {
  return value !== undefined && value !== null && value !== '';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,