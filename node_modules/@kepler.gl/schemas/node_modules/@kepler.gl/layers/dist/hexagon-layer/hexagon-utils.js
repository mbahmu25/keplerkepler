"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexagonToPolygonGeo = hexagonToPolygonGeo;
var _core = require("@deck.gl/core");
var _console = _interopRequireDefault(require("global/console"));
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

function hexagonToPolygonGeo(object, properties, radius, mapState) {
  var viewport = new _core.WebMercatorViewport(mapState);
  if (!Array.isArray(object.position)) {
    return null;
  }
  var screenCenter = viewport.projectFlat(object.position);
  var _viewport$getDistance = viewport.getDistanceScales(object.position),
    unitsPerMeter = _viewport$getDistance.unitsPerMeter;
  if (!Array.isArray(unitsPerMeter)) {
    _console["default"].warn("unitsPerMeter is undefined");
    return null;
  }
  var pixRadius = radius * unitsPerMeter[0];
  var coordinates = [];
  for (var i = 0; i < 6; i++) {
    var vertex = hex_corner(screenCenter, pixRadius, i);
    coordinates.push(viewport.unprojectFlat(vertex));
  }
  coordinates.push(coordinates[0]);
  return {
    geometry: {
      coordinates: coordinates,
      type: 'LineString'
    },
    properties: properties
  };
}
function hex_corner(center, radius, i) {
  var angle_deg = 60 * i + 30;
  var angle_rad = Math.PI / 180 * angle_deg;
  return [center[0] + radius * Math.cos(angle_rad), center[1] + radius * Math.sin(angle_rad)];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJfY29uc29sZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJoZXhhZ29uVG9Qb2x5Z29uR2VvIiwib2JqZWN0IiwicHJvcGVydGllcyIsInJhZGl1cyIsIm1hcFN0YXRlIiwidmlld3BvcnQiLCJXZWJNZXJjYXRvclZpZXdwb3J0IiwiQXJyYXkiLCJpc0FycmF5IiwicG9zaXRpb24iLCJzY3JlZW5DZW50ZXIiLCJwcm9qZWN0RmxhdCIsIl92aWV3cG9ydCRnZXREaXN0YW5jZSIsImdldERpc3RhbmNlU2NhbGVzIiwidW5pdHNQZXJNZXRlciIsIkNvbnNvbGUiLCJ3YXJuIiwicGl4UmFkaXVzIiwiY29vcmRpbmF0ZXMiLCJpIiwidmVydGV4IiwiaGV4X2Nvcm5lciIsInB1c2giLCJ1bnByb2plY3RGbGF0IiwiZ2VvbWV0cnkiLCJ0eXBlIiwiY2VudGVyIiwiYW5nbGVfZGVnIiwiYW5nbGVfcmFkIiwiTWF0aCIsIlBJIiwiY29zIiwic2luIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hleGFnb24tbGF5ZXIvaGV4YWdvbi11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1dlYk1lcmNhdG9yVmlld3BvcnR9IGZyb20gJ0BkZWNrLmdsL2NvcmUnO1xuaW1wb3J0IENvbnNvbGUgZnJvbSAnZ2xvYmFsL2NvbnNvbGUnO1xuaW1wb3J0IHR5cGUge0NlbnRyb2lkfSBmcm9tICdAa2VwbGVyLmdsL2NvbW1vbi11dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhhZ29uVG9Qb2x5Z29uR2VvKG9iamVjdCwgcHJvcGVydGllcywgcmFkaXVzLCBtYXBTdGF0ZSkge1xuICBjb25zdCB2aWV3cG9ydCA9IG5ldyBXZWJNZXJjYXRvclZpZXdwb3J0KG1hcFN0YXRlKTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG9iamVjdC5wb3NpdGlvbikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHNjcmVlbkNlbnRlciA9IHZpZXdwb3J0LnByb2plY3RGbGF0KG9iamVjdC5wb3NpdGlvbik7XG4gIGNvbnN0IHt1bml0c1Blck1ldGVyfSA9IHZpZXdwb3J0LmdldERpc3RhbmNlU2NhbGVzKG9iamVjdC5wb3NpdGlvbik7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHVuaXRzUGVyTWV0ZXIpKSB7XG4gICAgQ29uc29sZS53YXJuKGB1bml0c1Blck1ldGVyIGlzIHVuZGVmaW5lZGApO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcGl4UmFkaXVzID0gcmFkaXVzICogdW5pdHNQZXJNZXRlclswXTtcblxuICBjb25zdCBjb29yZGluYXRlczogYW55W10gPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgIGNvbnN0IHZlcnRleCA9IGhleF9jb3JuZXIoc2NyZWVuQ2VudGVyLCBwaXhSYWRpdXMsIGkpO1xuICAgIGNvb3JkaW5hdGVzLnB1c2godmlld3BvcnQudW5wcm9qZWN0RmxhdCh2ZXJ0ZXgpKTtcbiAgfVxuXG4gIGNvb3JkaW5hdGVzLnB1c2goY29vcmRpbmF0ZXNbMF0pO1xuXG4gIHJldHVybiB7XG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhleF9jb3JuZXIoY2VudGVyOiBDZW50cm9pZCwgcmFkaXVzOiBudW1iZXIsIGk6IG51bWJlcikge1xuICBjb25zdCBhbmdsZV9kZWcgPSA2MCAqIGkgKyAzMDtcbiAgY29uc3QgYW5nbGVfcmFkID0gKE1hdGguUEkgLyAxODApICogYW5nbGVfZGVnO1xuXG4gIHJldHVybiBbY2VudGVyWzBdICsgcmFkaXVzICogTWF0aC5jb3MoYW5nbGVfcmFkKSwgY2VudGVyWzFdICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGVfcmFkKV07XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQSxJQUFBQSxLQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFKQTtBQUNBOztBQU1PLFNBQVNHLG1CQUFtQkEsQ0FBQ0MsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO0VBQ3hFLElBQU1DLFFBQVEsR0FBRyxJQUFJQyx5QkFBbUIsQ0FBQ0YsUUFBUSxDQUFDO0VBQ2xELElBQUksQ0FBQ0csS0FBSyxDQUFDQyxPQUFPLENBQUNQLE1BQU0sQ0FBQ1EsUUFBUSxDQUFDLEVBQUU7SUFDbkMsT0FBTyxJQUFJO0VBQ2I7RUFFQSxJQUFNQyxZQUFZLEdBQUdMLFFBQVEsQ0FBQ00sV0FBVyxDQUFDVixNQUFNLENBQUNRLFFBQVEsQ0FBQztFQUMxRCxJQUFBRyxxQkFBQSxHQUF3QlAsUUFBUSxDQUFDUSxpQkFBaUIsQ0FBQ1osTUFBTSxDQUFDUSxRQUFRLENBQUM7SUFBNURLLGFBQWEsR0FBQUYscUJBQUEsQ0FBYkUsYUFBYTtFQUVwQixJQUFJLENBQUNQLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTSxhQUFhLENBQUMsRUFBRTtJQUNqQ0MsbUJBQU8sQ0FBQ0MsSUFBSSw2QkFBNkIsQ0FBQztJQUMxQyxPQUFPLElBQUk7RUFDYjtFQUVBLElBQU1DLFNBQVMsR0FBR2QsTUFBTSxHQUFHVyxhQUFhLENBQUMsQ0FBQyxDQUFDO0VBRTNDLElBQU1JLFdBQWtCLEdBQUcsRUFBRTtFQUU3QixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO0lBQzFCLElBQU1DLE1BQU0sR0FBR0MsVUFBVSxDQUFDWCxZQUFZLEVBQUVPLFNBQVMsRUFBRUUsQ0FBQyxDQUFDO0lBQ3JERCxXQUFXLENBQUNJLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2tCLGFBQWEsQ0FBQ0gsTUFBTSxDQUFDLENBQUM7RUFDbEQ7RUFFQUYsV0FBVyxDQUFDSSxJQUFJLENBQUNKLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUVoQyxPQUFPO0lBQ0xNLFFBQVEsRUFBRTtNQUNSTixXQUFXLEVBQVhBLFdBQVc7TUFDWE8sSUFBSSxFQUFFO0lBQ1IsQ0FBQztJQUNEdkIsVUFBVSxFQUFWQTtFQUNGLENBQUM7QUFDSDtBQUVBLFNBQVNtQixVQUFVQSxDQUFDSyxNQUFnQixFQUFFdkIsTUFBYyxFQUFFZ0IsQ0FBUyxFQUFFO0VBQy9ELElBQU1RLFNBQVMsR0FBRyxFQUFFLEdBQUdSLENBQUMsR0FBRyxFQUFFO0VBQzdCLElBQU1TLFNBQVMsR0FBSUMsSUFBSSxDQUFDQyxFQUFFLEdBQUcsR0FBRyxHQUFJSCxTQUFTO0VBRTdDLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHdkIsTUFBTSxHQUFHMEIsSUFBSSxDQUFDRSxHQUFHLENBQUNILFNBQVMsQ0FBQyxFQUFFRixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUd2QixNQUFNLEdBQUcwQixJQUFJLENBQUNHLEdBQUcsQ0FBQ0osU0FBUyxDQUFDLENBQUM7QUFDN0YiLCJpZ25vcmVMaXN0IjpbXX0=