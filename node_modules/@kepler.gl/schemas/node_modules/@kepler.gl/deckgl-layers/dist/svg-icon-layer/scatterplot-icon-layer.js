"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _layers = require("@deck.gl/layers");
var _core = require("@luma.gl/core");
var _constants = _interopRequireDefault(require("@luma.gl/constants"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
var DEFAULT_POS = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];
var ScatterplotIconLayer = exports["default"] = /*#__PURE__*/function (_ScatterplotLayer) {
  function ScatterplotIconLayer() {
    (0, _classCallCheck2["default"])(this, ScatterplotIconLayer);
    return _callSuper(this, ScatterplotIconLayer, arguments);
  }
  (0, _inherits2["default"])(ScatterplotIconLayer, _ScatterplotLayer);
  return (0, _createClass2["default"])(ScatterplotIconLayer, [{
    key: "_getModel",
    value: function _getModel(gl) {
      // use default scatterplot shaders
      var shaders = this.getShaders(undefined);
      var iconGeometry = this.props.iconGeometry;
      var geometry = iconGeometry ? new _core.Geometry({
        drawMode: _constants["default"].TRIANGLES,
        attributes: {
          positions: new Float32Array(iconGeometry)
        }
      }) : new _core.Geometry({
        drawMode: _constants["default"].TRIANGLE_FAN,
        attributes: {
          positions: new Float32Array(DEFAULT_POS)
        }
      });
      return new _core.Model(gl, _objectSpread(_objectSpread({}, shaders), {}, {
        id: this.props.id,
        geometry: geometry,
        isInstanced: true,
        // @ts-ignore
        shaderCache: this.context.shaderCache
      }));
    }
  }]);
}(_layers.ScatterplotLayer);
ScatterplotIconLayer.layerName = 'ScatterplotIconLayer';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbGF5ZXJzIiwicmVxdWlyZSIsIl9jb3JlIiwiX2NvbnN0YW50cyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIkRFRkFVTFRfUE9TIiwiU2NhdHRlcnBsb3RJY29uTGF5ZXIiLCJleHBvcnRzIiwiX1NjYXR0ZXJwbG90TGF5ZXIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsIl9nZXRNb2RlbCIsImdsIiwic2hhZGVycyIsImdldFNoYWRlcnMiLCJ1bmRlZmluZWQiLCJpY29uR2VvbWV0cnkiLCJwcm9wcyIsImdlb21ldHJ5IiwiR2VvbWV0cnkiLCJkcmF3TW9kZSIsIkdMIiwiVFJJQU5HTEVTIiwiYXR0cmlidXRlcyIsInBvc2l0aW9ucyIsIkZsb2F0MzJBcnJheSIsIlRSSUFOR0xFX0ZBTiIsIk1vZGVsIiwiaWQiLCJpc0luc3RhbmNlZCIsInNoYWRlckNhY2hlIiwiY29udGV4dCIsIlNjYXR0ZXJwbG90TGF5ZXIiLCJsYXllck5hbWUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvc3ZnLWljb24tbGF5ZXIvc2NhdHRlcnBsb3QtaWNvbi1sYXllci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5pbXBvcnQge1NjYXR0ZXJwbG90TGF5ZXIsIFNjYXR0ZXJwbG90TGF5ZXJQcm9wc30gZnJvbSAnQGRlY2suZ2wvbGF5ZXJzJztcbmltcG9ydCB7R2VvbWV0cnksIE1vZGVsfSBmcm9tICdAbHVtYS5nbC9jb3JlJztcbmltcG9ydCBHTCBmcm9tICdAbHVtYS5nbC9jb25zdGFudHMnO1xuXG5jb25zdCBERUZBVUxUX1BPUyA9IFstMSwgLTEsIDAsIC0xLCAxLCAwLCAxLCAxLCAwLCAxLCAtMSwgMF07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NhdHRlcnBsb3RJY29uTGF5ZXJQcm9wcyBleHRlbmRzIFNjYXR0ZXJwbG90TGF5ZXJQcm9wczxhbnk+IHtcbiAgaWNvbkdlb21ldHJ5OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjYXR0ZXJwbG90SWNvbkxheWVyIGV4dGVuZHMgU2NhdHRlcnBsb3RMYXllcjxhbnksIFNjYXR0ZXJwbG90SWNvbkxheWVyUHJvcHM+IHtcbiAgX2dldE1vZGVsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBzY2F0dGVycGxvdCBzaGFkZXJzXG4gICAgY29uc3Qgc2hhZGVycyA9IHRoaXMuZ2V0U2hhZGVycyh1bmRlZmluZWQpO1xuXG4gICAgY29uc3Qge2ljb25HZW9tZXRyeX0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZ2VvbWV0cnkgPSBpY29uR2VvbWV0cnlcbiAgICAgID8gbmV3IEdlb21ldHJ5KHtcbiAgICAgICAgICBkcmF3TW9kZTogR0wuVFJJQU5HTEVTLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uczogbmV3IEZsb2F0MzJBcnJheShpY29uR2VvbWV0cnkpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgOiBuZXcgR2VvbWV0cnkoe1xuICAgICAgICAgIGRyYXdNb2RlOiBHTC5UUklBTkdMRV9GQU4sXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgcG9zaXRpb25zOiBuZXcgRmxvYXQzMkFycmF5KERFRkFVTFRfUE9TKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICByZXR1cm4gbmV3IE1vZGVsKGdsLCB7XG4gICAgICAuLi5zaGFkZXJzLFxuICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICBnZW9tZXRyeSxcbiAgICAgIGlzSW5zdGFuY2VkOiB0cnVlLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2hhZGVyQ2FjaGU6IHRoaXMuY29udGV4dC5zaGFkZXJDYWNoZVxuICAgIH0pO1xuICB9XG59XG5cblNjYXR0ZXJwbG90SWNvbkxheWVyLmxheWVyTmFtZSA9ICdTY2F0dGVycGxvdEljb25MYXllcic7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFBb0MsU0FBQUksUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFB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