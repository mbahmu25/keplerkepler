"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _core = require("@deck.gl/core");
var _typed = require("@deck.gl/layers/typed");
var _constants = _interopRequireDefault(require("@luma.gl/constants"));
var _ = require("../");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, e, r, o) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & o ? t.prototype : t), e, r); return 2 & o ? function (t) { return p.apply(r, t); } : p; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function addInstanceCoverage(vs) {
  var addDecl = (0, _.editShader)(vs, 'hexagon cell vs add instance 1', 'in vec3 instancePickingColors;', "in vec3 instancePickingColors;\n     in float instanceCoverage;");
  return (0, _.editShader)(addDecl, 'hexagon cell vs add instance 2', 'float dotRadius = radius * coverage * shouldRender;', 'float dotRadius = radius * coverage * instanceCoverage * shouldRender;');
}
// TODO: export all deck.gl layers from kepler.gl
var EnhancedColumnLayer = /*#__PURE__*/function (_ColumnLayer) {
  function EnhancedColumnLayer() {
    (0, _classCallCheck2["default"])(this, EnhancedColumnLayer);
    return _callSuper(this, EnhancedColumnLayer, arguments);
  }
  (0, _inherits2["default"])(EnhancedColumnLayer, _ColumnLayer);
  return (0, _createClass2["default"])(EnhancedColumnLayer, [{
    key: "getShaders",
    value: function getShaders() {
      var shaders = _superPropGet(EnhancedColumnLayer, "getShaders", this, 3)([]);
      return _objectSpread(_objectSpread({}, shaders), {}, {
        vs: addInstanceCoverage(shaders.vs)
      });
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      var _this$getAttributeMan;
      _superPropGet(EnhancedColumnLayer, "initializeState", this, 3)([]);
      (_this$getAttributeMan = this.getAttributeManager()) === null || _this$getAttributeMan === void 0 || _this$getAttributeMan.addInstanced({
        instanceCoverage: {
          size: 1,
          accessor: 'getCoverage'
        }
      });
    }
  }, {
    key: "draw",
    value: function draw(_ref) {
      var uniforms = _ref.uniforms;
      var _this$props = this.props,
        lineWidthUnits = _this$props.lineWidthUnits,
        lineWidthScale = _this$props.lineWidthScale,
        lineWidthMinPixels = _this$props.lineWidthMinPixels,
        lineWidthMaxPixels = _this$props.lineWidthMaxPixels,
        radiusUnits = _this$props.radiusUnits,
        elevationScale = _this$props.elevationScale,
        extruded = _this$props.extruded,
        filled = _this$props.filled,
        stroked = _this$props.stroked,
        strokeOpacity = _this$props.strokeOpacity,
        wireframe = _this$props.wireframe,
        offset = _this$props.offset,
        coverage = _this$props.coverage,
        radius = _this$props.radius,
        angle = _this$props.angle;
      var _this$state = this.state,
        model = _this$state.model,
        fillVertexCount = _this$state.fillVertexCount,
        wireframeVertexCount = _this$state.wireframeVertexCount,
        edgeDistance = _this$state.edgeDistance;
      model.setUniforms(uniforms).setUniforms({
        radius: radius,
        angle: angle / 180 * Math.PI,
        offset: offset,
        extruded: extruded,
        stroked: stroked,
        coverage: coverage,
        elevationScale: elevationScale,
        edgeDistance: edgeDistance,
        radiusUnits: _core.UNIT[radiusUnits],
        widthUnits: _core.UNIT[lineWidthUnits],
        widthScale: lineWidthScale,
        widthMinPixels: lineWidthMinPixels,
        widthMaxPixels: lineWidthMaxPixels
      });

      // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test
      if (extruded && wireframe) {
        model.setProps({
          isIndexed: true
        });
        model.setVertexCount(wireframeVertexCount).setDrawMode(_constants["default"].LINES).setUniforms({
          isStroke: true
        }).draw();
      }
      if (filled) {
        model.setProps({
          isIndexed: false
        });
        model.setVertexCount(fillVertexCount).setDrawMode(_constants["default"].TRIANGLE_STRIP).setUniforms({
          isStroke: false
        }).draw();
      }
      // When drawing 2d: draw fill before stroke so that the outline is always on top
      if (!extruded && stroked) {
        model.setProps({
          isIndexed: false
        });
        // The width of the stroke is achieved by flattening the side of the cylinder.
        // Skip the last 1/3 of the vertices which is the top.
        model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(_constants["default"].TRIANGLE_STRIP).setUniforms({
          isStroke: true,
          opacity: strokeOpacity
        }).draw();
      }
    }
  }]);
}(_typed.ColumnLayer);
EnhancedColumnLayer.layerName = 'EnhancedColumnLayer';
var _default = exports["default"] = EnhancedColumnLayer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,