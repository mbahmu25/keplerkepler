import type { LoaderOptions } from '@loaders.gl/loader-utils';
import { BinaryGeometry, Geometry } from '@loaders.gl/schema';
import { parseWKB } from "./lib/parse-wkb.js";
import { isWKB } from "./lib/parse-wkb-header.js";
export type WKBLoaderOptions = LoaderOptions & {
    wkb?: {
        /** 'geometry' is deprecated use 'geojson-geometry' */
        shape: 'geojson-geometry' | 'binary-geometry' | 'geometry';
    };
};
/**
 * Worker loader for WKB (Well-Known Binary)
 */
export declare const WKBWorkerLoader: {
    readonly dataType: Geometry | BinaryGeometry;
    readonly batchType: never;
    readonly name: "WKB";
    readonly id: "wkb";
    readonly module: "wkt";
    readonly version: any;
    readonly worker: true;
    readonly category: "geometry";
    readonly extensions: ["wkb"];
    readonly mimeTypes: [];
    readonly tests: [typeof isWKB];
    readonly options: {
        readonly wkb: {
            readonly shape: "binary-geometry";
        };
    };
};
/**
 * Loader for WKB (Well-Known Binary)
 */
export declare const WKBLoader: {
    readonly parse: (arrayBuffer: ArrayBuffer) => Promise<BinaryGeometry | Geometry>;
    readonly parseSync: typeof parseWKB;
    readonly dataType: Geometry | BinaryGeometry;
    readonly batchType: never;
    readonly name: "WKB";
    readonly id: "wkb";
    readonly module: "wkt";
    readonly version: any;
    readonly worker: true;
    readonly category: "geometry";
    readonly extensions: ["wkb"];
    readonly mimeTypes: [];
    readonly tests: [typeof isWKB];
    readonly options: {
        readonly wkb: {
            readonly shape: "binary-geometry";
        };
    };
};
//# sourceMappingURL=wkb-loader.d.ts.map