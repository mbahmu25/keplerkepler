import { ParquetColumnChunk, ParquetReaderContext, ParquetPageData, SchemaDefinition } from "../schema/declare.js";
import { CursorBuffer } from "../codecs/index.js";
import { SchemaElement } from "../parquet-thrift/index.js";
/**
 * Decode data pages
 * @param buffer - input data
 * @param column - parquet column
 * @param compression - compression type
 * @returns parquet data page data
 */
export declare function decodeDataPages(buffer: Buffer, context: ParquetReaderContext): Promise<ParquetColumnChunk>;
/**
 * Decode parquet page based on page type
 * @param cursor
 * @param context
 */
export declare function decodePage(cursor: CursorBuffer, context: ParquetReaderContext): Promise<ParquetPageData>;
/**
 * Decode parquet schema
 * @param schemaElements input schema elements data
 * @param offset offset to read from
 * @param len length of data
 * @returns result.offset
 *   result.next - offset at the end of function
 *   result.schema - schema read from the input data
 * @todo output offset is the same as input - possibly excess output field
 */
export declare function decodeSchema(schemaElements: SchemaElement[], offset: number, len: number): {
    offset: number;
    next: number;
    schema: SchemaDefinition;
};
//# sourceMappingURL=decoders.d.ts.map