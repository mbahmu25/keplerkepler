// loaders.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
import { convertWKBTableToGeoJSON } from '@loaders.gl/gis';
import { WKTLoader, WKBLoader } from '@loaders.gl/wkt';
import { parseParquetFile, parseParquetFileInBatches } from "./parse-parquet.js";
export async function parseGeoParquetFile(file, options) {
    const table = await parseParquetFile(file, { ...options, shape: 'object-row-table' });
    const shape = options?.parquet?.shape;
    return convertTable(table, shape);
}
export async function* parseGeoParquetFileInBatches(file, options) {
    const tableBatches = parseParquetFileInBatches(file, { ...options, shape: 'object-row-table' });
    for await (const batch of tableBatches) {
        const shape = options?.parquet?.shape;
        yield convertBatch(batch, shape);
    }
}
function convertTable(objectRowTable, shape) {
    switch (shape) {
        case 'object-row-table':
            return objectRowTable;
        case 'geojson-table':
            try {
                return convertWKBTableToGeoJSON(objectRowTable, objectRowTable.schema, [
                    WKTLoader,
                    WKBLoader
                ]);
            }
            catch (error) {
                return objectRowTable;
            }
        default:
            throw new Error(shape);
    }
}
function convertBatch(objectRowBatch, shape) {
    switch (shape) {
        case 'object-row-table':
            return objectRowBatch;
        case 'geojson-table':
            try {
                const geojsonTable = convertWKBTableToGeoJSON(objectRowBatch, objectRowBatch.schema, [
                    WKTLoader,
                    WKBLoader
                ]);
                return {
                    ...objectRowBatch,
                    ...geojsonTable
                };
            }
            catch (error) {
                return objectRowBatch;
            }
        default:
            throw new Error(shape);
    }
}
