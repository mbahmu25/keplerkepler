import type { GeoJSONTable } from '@loaders.gl/schema';
import type { ArrowTable } from "./schema/arrow-table-type.js";
import { parseGeoArrowInBatches } from "./lib/parsers/parse-geoarrow.js";
import type { GeoArrowLoaderOptions } from "./exports/geoarrow-loader.js";
/**
 * GeoArrowLoader loads an Apache Arrow table, parses GeoArrow type extension data
 * to convert it to a GeoJSON table or a BinaryGeometry
 */
export declare const GeoArrowLoader: {
    readonly parse: (arraybuffer: ArrayBuffer, options?: GeoArrowLoaderOptions) => Promise<ArrowTable | GeoJSONTable>;
    readonly parseSync: (arraybuffer: ArrayBuffer, options?: GeoArrowLoaderOptions) => ArrowTable | GeoJSONTable;
    readonly parseInBatches: typeof parseGeoArrowInBatches;
    readonly options: {
        readonly arrow: {
            readonly shape: "arrow-table";
        };
    };
    readonly dataType: ArrowTable;
    readonly batchType: never;
    readonly name: "Apache Arrow";
    readonly id: "arrow";
    readonly module: "arrow";
    readonly version: any;
    readonly category: "table";
    readonly extensions: ["arrow", "feather"];
    readonly mimeTypes: ["application/vnd.apache.arrow.file", "application/vnd.apache.arrow.stream", "application/octet-stream"];
    readonly binary: true;
    readonly tests: ["ARROW"];
};
//# sourceMappingURL=geoarrow-loader.d.ts.map