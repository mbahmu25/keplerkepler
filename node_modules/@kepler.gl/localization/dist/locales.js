"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOCALE_CODES = exports.LOCALES = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project

var LOCALES = exports.LOCALES = {
  en: 'English',
  fi: 'Suomi',
  pt: 'Português',
  es: 'Español',
  ca: 'Català',
  ja: '日本語',
  cn: '简体中文',
  ru: 'Русский'
};

/**
 * Localization can be passed to `KeplerGl` via uiState `locale`.
 * Available languages are `en` and `fi`. Default language is `en`
 * @constant
 * @public
 * @example
 * ```js
 * import {combineReducers} from 'redux';
 * import {LOCALE_CODES} from 'kepler.gl/localization';
 *
 * const customizedKeplerGlReducer = keplerGlReducer
 *   .initialState({
 *     uiState: {
 *       // use Finnish locale
 *       locale: LOCALE_CODES.fi
 *     }
 *   });
 *
 * ```
 */

var LOCALE_CODES = exports.LOCALE_CODES = Object.keys(LOCALES).reduce(function (acc, key) {
  return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2["default"])({}, key, key));
}, {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMT0NBTEVTIiwiZXhwb3J0cyIsImVuIiwiZmkiLCJwdCIsImVzIiwiY2EiLCJqYSIsImNuIiwicnUiLCJMT0NBTEVfQ09ERVMiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwia2V5IiwiX29iamVjdFNwcmVhZCIsIl9kZWZpbmVQcm9wZXJ0eTIiXSwic291cmNlcyI6WyIuLi9zcmMvbG9jYWxlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vLyBDb3B5cmlnaHQgY29udHJpYnV0b3JzIHRvIHRoZSBrZXBsZXIuZ2wgcHJvamVjdFxuXG5leHBvcnQgY29uc3QgTE9DQUxFUyA9IHtcbiAgZW46ICdFbmdsaXNoJyxcbiAgZmk6ICdTdW9taScsXG4gIHB0OiAnUG9ydHVndcOqcycsXG4gIGVzOiAnRXNwYcOxb2wnLFxuICBjYTogJ0NhdGFsw6AnLFxuICBqYTogJ+aXpeacrOiqnicsXG4gIGNuOiAn566A5L2T5Lit5paHJyxcbiAgcnU6ICfQoNGD0YHRgdC60LjQuSdcbn07XG5cbi8qKlxuICogTG9jYWxpemF0aW9uIGNhbiBiZSBwYXNzZWQgdG8gYEtlcGxlckdsYCB2aWEgdWlTdGF0ZSBgbG9jYWxlYC5cbiAqIEF2YWlsYWJsZSBsYW5ndWFnZXMgYXJlIGBlbmAgYW5kIGBmaWAuIERlZmF1bHQgbGFuZ3VhZ2UgaXMgYGVuYFxuICogQGNvbnN0YW50XG4gKiBAcHVibGljXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGltcG9ydCB7Y29tYmluZVJlZHVjZXJzfSBmcm9tICdyZWR1eCc7XG4gKiBpbXBvcnQge0xPQ0FMRV9DT0RFU30gZnJvbSAna2VwbGVyLmdsL2xvY2FsaXphdGlvbic7XG4gKlxuICogY29uc3QgY3VzdG9taXplZEtlcGxlckdsUmVkdWNlciA9IGtlcGxlckdsUmVkdWNlclxuICogICAuaW5pdGlhbFN0YXRlKHtcbiAqICAgICB1aVN0YXRlOiB7XG4gKiAgICAgICAvLyB1c2UgRmlubmlzaCBsb2NhbGVcbiAqICAgICAgIGxvY2FsZTogTE9DQUxFX0NPREVTLmZpXG4gKiAgICAgfVxuICogICB9KTtcbiAqXG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgdHlwZSBMb2NhbGVDb2Rlc1R5cGUgPSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBMT0NBTEVfQ09ERVM6IExvY2FsZUNvZGVzVHlwZSA9IE9iamVjdC5rZXlzKExPQ0FMRVMpLnJlZHVjZShcbiAgKGFjYywga2V5KSA9PiAoey4uLmFjYywgW2tleV06IGtleX0pLFxuICB7fVxuKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRU8sSUFBTUEsT0FBTyxHQUFBQyxPQUFBLENBQUFELE9BQUEsR0FBRztFQUNyQkUsRUFBRSxFQUFFLFNBQVM7RUFDYkMsRUFBRSxFQUFFLE9BQU87RUFDWEMsRUFBRSxFQUFFLFdBQVc7RUFDZkMsRUFBRSxFQUFFLFNBQVM7RUFDYkMsRUFBRSxFQUFFLFFBQVE7RUFDWkMsRUFBRSxFQUFFLEtBQUs7RUFDVEMsRUFBRSxFQUFFLE1BQU07RUFDVkMsRUFBRSxFQUFFO0FBQ04sQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1PLElBQU1DLFlBQTZCLEdBQUFULE9BQUEsQ0FBQVMsWUFBQSxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ1osT0FBTyxDQUFDLENBQUNhLE1BQU0sQ0FDdEUsVUFBQ0MsR0FBRyxFQUFFQyxHQUFHO0VBQUEsT0FBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQVVGLEdBQUcsV0FBQUcsZ0JBQUEsaUJBQUdGLEdBQUcsRUFBR0EsR0FBRztBQUFBLENBQUUsRUFDcEMsQ0FBQyxDQUNILENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=