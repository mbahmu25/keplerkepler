"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignGpuChannel = assignGpuChannel;
exports.assignGpuChannels = assignGpuChannels;
exports.getDatasetFieldIndexForFilter = getDatasetFieldIndexForFilter;
exports.getGpuFilterProps = getGpuFilterProps;
exports.resetFilterGpuMode = resetFilterGpuMode;
exports.setFilterGpuMode = setFilterGpuMode;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _moment = _interopRequireDefault(require("moment"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _commonUtils = require("@kepler.gl/common-utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
/**
 * Set gpu mode based on current number of gpu filters exists
 */
function setFilterGpuMode(filter, filters) {
  // filter can be applied to multiple datasets, hence gpu filter mode should also be
  // an array, however, to keep us sane, for now, we only check if there is available channel for every dataId,
  // if all of them has, we set gpu mode to true
  // TODO: refactor filter so we don't keep an array of everything

  filter.dataId.forEach(function (dataId) {
    var gpuFilters = filters.filter(function (f) {
      return f.dataId.includes(dataId) && f.gpu;
    });
    if (filter.gpu && gpuFilters.length === _constants.MAX_GPU_FILTERS) {
      (0, _utils.set)(['gpu'], false, filter);
    }
  });
  return filter;
}

/**
 * Scan though all filters and assign gpu chanel to gpu filter
 */
function assignGpuChannels(allFilters) {
  return allFilters.reduce(function (accu, f, index) {
    var filters = accu;

    // if gpu is true assign and validate gpu Channel
    if (f.gpu) {
      f = assignGpuChannel(f, accu);
      filters = (0, _utils.set)([index], f, accu);
    }
    return filters;
  }, allFilters);
}
/**
 * Assign a new gpu filter a channel based on first availability
 */
function assignGpuChannel(filter, filters) {
  // find first available channel
  if (!filter.gpu) {
    return filter;
  }
  var gpuChannel = filter.gpuChannel || [];
  filter.dataId.forEach(function (dataId, datasetIdx) {
    var findGpuChannel = function findGpuChannel(channel) {
      return function (f) {
        var dataIdx = (0, _commonUtils.toArray)(f.dataId).indexOf(dataId);
        return f.id !== filter.id && dataIdx > -1 && f.gpu && (0, _commonUtils.toArray)(f.gpuChannel)[dataIdx] === channel;
      };
    };
    if (Number.isFinite(gpuChannel[datasetIdx]) && !filters.find(findGpuChannel(gpuChannel[datasetIdx]))) {
      // if value is already assigned and valid
      return;
    }
    var i = 0;
    while (i < _constants.MAX_GPU_FILTERS) {
      if (!filters.find(findGpuChannel(i))) {
        gpuChannel[datasetIdx] = i;
        return;
      }
      i++;
    }
  });

  // if cannot find channel for all dataid, set gpu back to false
  // TODO: refactor filter to handle same filter different gpu mode
  if (!gpuChannel.length || !gpuChannel.every(Number.isFinite)) {
    return _objectSpread(_objectSpread({}, filter), {}, {
      gpu: false
    });
  }
  return _objectSpread(_objectSpread({}, filter), {}, {
    gpuChannel: gpuChannel
  });
}
/**
 * Edit filter.gpu to ensure that only
 * X number of gpu filers can coexist.
 */
function resetFilterGpuMode(filters) {
  var gpuPerDataset = {};
  return filters.map(function (f) {
    if (f.gpu) {
      var gpu = true;
      (0, _commonUtils.toArray)(f.dataId).forEach(function (dataId) {
        var count = gpuPerDataset[dataId];
        if (count === _constants.MAX_GPU_FILTERS) {
          gpu = false;
        } else {
          gpuPerDataset[dataId] = count ? count + 1 : 1;
        }
      });
      if (!gpu) {
        return (0, _utils.set)(['gpu'], false, f);
      }
    }
    return f;
  });
}

/**
 * Initial filter uniform
 */
function getEmptyFilterRange() {
  return new Array(_constants.MAX_GPU_FILTERS).fill(0).map(function () {
    return [0, 0];
  });
}

/**
 * Returns index of the data element.
 * @param {any} d Data element with row index info.
 * @returns number
 */
var defaultGetIndex = function defaultGetIndex(d) {
  return d.index;
};

/**
 * Returns value at the specified row from the data container.
 * @param dc Data container.
 * @param d Data element with row index info.
 * @param fieldIndex Column index in the data container.
 * @returns
 */
var defaultGetData = function defaultGetData(dc, d, fieldIndex) {
  return dc.valueAt(d.index, fieldIndex);
};
var getFilterValueAccessor = function getFilterValueAccessor(channels, dataId, fields) {
  return function (dc) {
    return function () {
      var getIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGetIndex;
      var getData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetData;
      return function (d, objectInfo) {
        // for empty channel, value is 0 and min max would be [0, 0]
        var channelValues = channels.map(function (filter) {
          var _filter$domain2;
          if (!filter) {
            return 0;
          }
          var fieldIndex = getDatasetFieldIndexForFilter(dataId, filter);
          var field = fields[fieldIndex];
          var value;
          // d can be undefined when called from attribute updater from deck,
          // when data is an ArrowTable, so use objectInfo instead.
          var data = getData(dc, d || objectInfo, fieldIndex);
          if (typeof data === 'function') {
            value = data(field);
          } else {
            value = filter.type === _constants.FILTER_TYPES.timeRange ? field.filterProps && Array.isArray(field.filterProps.mappedValue) ? field.filterProps.mappedValue[getIndex(d)] : _moment["default"].utc(data).valueOf() : data;
          }
          return (0, _commonUtils.notNullorUndefined)(value) ? Array.isArray(value) ? value.map(function (v) {
            var _filter$domain;
            return v - ((_filter$domain = filter.domain) === null || _filter$domain === void 0 ? void 0 : _filter$domain[0]);
          }) : value - ((_filter$domain2 = filter.domain) === null || _filter$domain2 === void 0 ? void 0 : _filter$domain2[0]) : Number.MIN_SAFE_INTEGER;
        });

        // TODO: can we refactor the above to avoid the transformation below?
        var arrChannel = channelValues.find(function (v) {
          return Array.isArray(v);
        });
        if (Array.isArray(arrChannel)) {
          // Convert info form supported by DataFilterExtension (relevant for TripLayer)
          var vals = [];
          // if there are multiple arrays, they should have the same length
          var _loop = function _loop(i) {
            vals.push(channelValues.map(function (v) {
              return Array.isArray(v) ? v[i] : v;
            }));
          };
          for (var i = 0; i < arrChannel.length; i++) {
            _loop(i);
          }
          return vals;
        }
        return channelValues;
      };
    };
  };
};
function isFilterTriggerEqual(a, b) {
  return a === b || (a === null || a === void 0 ? void 0 : a.name) === (b === null || b === void 0 ? void 0 : b.name) && (a === null || a === void 0 ? void 0 : a.domain0) === (b === null || b === void 0 ? void 0 : b.domain0);
}

/**
 * Get filter properties for gpu filtering
 */
function getGpuFilterProps(filters, dataId, fields, oldGpuFilter) {
  var filterRange = getEmptyFilterRange();
  var triggers = {};

  // array of filter for each channel, undefined, if no filter is assigned to that channel
  var channels = [];
  var _loop2 = function _loop2(i) {
    var _filter$domain3, _filter$domain4, _oldGpuFilter$filterV, _filter$domain5;
    var filter = filters.find(function (f) {
      return f.gpu && f.dataId.includes(dataId) && f.gpuChannel && f.gpuChannel[f.dataId.indexOf(dataId)] === i;
    });
    filterRange[i][0] = filter ? filter.value[0] - ((_filter$domain3 = filter.domain) === null || _filter$domain3 === void 0 ? void 0 : _filter$domain3[0]) : 0;
    filterRange[i][1] = filter ? filter.value[1] - ((_filter$domain4 = filter.domain) === null || _filter$domain4 === void 0 ? void 0 : _filter$domain4[0]) : 0;
    var oldFilterTrigger = (oldGpuFilter === null || oldGpuFilter === void 0 || (_oldGpuFilter$filterV = oldGpuFilter.filterValueUpdateTriggers) === null || _oldGpuFilter$filterV === void 0 ? void 0 : _oldGpuFilter$filterV["gpuFilter_".concat(i)]) || null;
    var trigger = filter ? {
      name: filter.name[filter.dataId.indexOf(dataId)],
      domain0: (_filter$domain5 = filter.domain) === null || _filter$domain5 === void 0 ? void 0 : _filter$domain5[0]
    } : null;
    // don't create a new object, cause deck.gl use shallow compare
    triggers["gpuFilter_".concat(i)] = isFilterTriggerEqual(trigger, oldFilterTrigger) ? oldFilterTrigger : trigger;
    channels.push(filter);
  };
  for (var i = 0; i < _constants.MAX_GPU_FILTERS; i++) {
    _loop2(i);
  }
  var filterValueAccessor = getFilterValueAccessor(channels, dataId, fields);
  return {
    filterRange: filterRange,
    filterValueUpdateTriggers: triggers,
    filterValueAccessor: filterValueAccessor
  };
}

/**
 * Return dataset field index from filter.fieldIdx
 * The index matches the same dataset index for filter.dataId
 */
function getDatasetFieldIndexForFilter(dataId, filter) {
  var datasetIndex = (0, _commonUtils.toArray)(filter.dataId).indexOf(dataId);
  if (datasetIndex < 0) {
    return -1;
  }
  var fieldIndex = filter.fieldIdx[datasetIndex];
  return (0, _commonUtils.notNullorUndefined)(fieldIndex) ? fieldIndex : -1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,