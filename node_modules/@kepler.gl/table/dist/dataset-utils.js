"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNewDataEntry = createNewDataEntry;
exports.getNewDatasetColor = getNewDatasetColor;
exports.getWMSCapabilities = getWMSCapabilities;
exports.wmsCapabilitiesToDatasetMetadata = wmsCapabilitiesToDatasetMetadata;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _uniq = _interopRequireDefault(require("lodash/uniq"));
var _keplerTable = _interopRequireDefault(require("./kepler-table"));
var _tasks = _interopRequireDefault(require("react-palm/tasks"));
var _constants = require("@kepler.gl/constants");
var _utils = require("@kepler.gl/utils");
var _core = require("@loaders.gl/core");
var _pmtiles = require("@loaders.gl/pmtiles");
var _wms = require("@loaders.gl/wms");
var _tilesetUtils = require("./tileset/tileset-utils");
var _rasterTileUtils = require("./tileset/raster-tile-utils");
var _vectorTileUtils = require("./tileset/vector-tile-utils");
var _excluded = ["info", "data"]; // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// apply a color for each dataset
// to use as label colors
var datasetColors = ['#8F2FBF', '#005CFF', '#C06C84', '#F8B195', '#547A82', '#3EACA8', '#A2D4AB'].map(_utils.hexToRgb);
function getNewDatasetColor(datasets) {
  var presetColors = datasetColors.map(String);
  var usedColors = (0, _uniq["default"])(Object.values(datasets).map(function (d) {
    return String(d.color);
  })).filter(function (c) {
    return presetColors.includes(c);
  });
  if (usedColors.length === presetColors.length) {
    // if we already depleted the pool of color
    return _utils.datasetColorMaker.next().value;
  }
  var color = _utils.datasetColorMaker.next().value;
  while (usedColors.includes(String(color))) {
    color = _utils.datasetColorMaker.next().value;
  }
  return color;
}

/**
 * Take datasets payload from addDataToMap, create datasets entry save to visState
 */
function createNewDataEntry(_ref) {
  var _getApplicationConfig;
  var info = _ref.info,
    data = _ref.data,
    opts = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var TableClass = (_getApplicationConfig = (0, _utils.getApplicationConfig)().table) !== null && _getApplicationConfig !== void 0 ? _getApplicationConfig : _keplerTable["default"];
  var dataValidator = _utils.validateInputData;
  if (typeof TableClass.getInputDataValidator === 'function') {
    dataValidator = TableClass.getInputDataValidator();
  }
  var validatedData = dataValidator(data);
  if (!validatedData) {
    return null;
  }

  // check if dataset already exists, and update it when loading data by batches incrementally
  if (info && info.id && datasets[info.id]) {
    // get keplerTable from datasets
    var keplerTable = datasets[info.id];
    // update the data in keplerTable
    return UPDATE_TABLE_TASK({
      table: keplerTable,
      data: validatedData
    });
  }
  info = info || {};
  var color = info.color || getNewDatasetColor(datasets);
  return CREATE_TABLE_TASK({
    info: info,
    color: color,
    opts: opts,
    data: validatedData
  });
}
function updateTable(_x) {
  return _updateTable.apply(this, arguments);
}
function _updateTable() {
  _updateTable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref2) {
    var table, data, updated;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          table = _ref2.table, data = _ref2.data;
          _context.next = 3;
          return table.update(data);
        case 3:
          updated = _context.sent;
          return _context.abrupt("return", updated);
        case 5:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _updateTable.apply(this, arguments);
}
function createTable(_x2) {
  return _createTable.apply(this, arguments);
}
function _createTable() {
  _createTable = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(datasetInfo) {
    var _getApplicationConfig2;
    var info, color, opts, data, refreshedMetadata, metadata, TableClass, table;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          info = datasetInfo.info, color = datasetInfo.color, opts = datasetInfo.opts, data = datasetInfo.data; // update metadata for remote tiled datasets
          _context2.next = 3;
          return refreshRemoteData(datasetInfo);
        case 3:
          refreshedMetadata = _context2.sent;
          metadata = opts.metadata;
          if (refreshedMetadata) {
            metadata = _objectSpread(_objectSpread({}, opts.metadata), refreshedMetadata);
            if (metadata.fields) {
              data.fields = metadata.fields;
            }
          }
          TableClass = (_getApplicationConfig2 = (0, _utils.getApplicationConfig)().table) !== null && _getApplicationConfig2 !== void 0 ? _getApplicationConfig2 : _keplerTable["default"];
          table = new TableClass(_objectSpread(_objectSpread({
            info: info,
            color: color
          }, opts), {}, {
            metadata: metadata
          }));
          _context2.next = 10;
          return table.importData({
            data: data
          });
        case 10:
          return _context2.abrupt("return", table);
        case 11:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _createTable.apply(this, arguments);
}
var UPDATE_TABLE_TASK = _tasks["default"].fromPromise(updateTable, 'UPDATE_TABLE_TASK');
var CREATE_TABLE_TASK = _tasks["default"].fromPromise(createTable, 'CREATE_TABLE_TASK');

/**
 * Fetch metadata for vector tile layers using tilesetMetadataUrl from metadata
 * @param datasetInfo
 * @returns
 */
function refreshRemoteData(_x3) {
  return _refreshRemoteData.apply(this, arguments);
}
function _refreshRemoteData() {
  _refreshRemoteData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(datasetInfo) {
    var type;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          type = datasetInfo.info.type;
          _context3.t0 = type;
          _context3.next = _context3.t0 === _constants.DatasetType.VECTOR_TILE ? 4 : _context3.t0 === _constants.DatasetType.RASTER_TILE ? 7 : _context3.t0 === _constants.DatasetType.WMS_TILE ? 10 : 13;
          break;
        case 4:
          _context3.next = 6;
          return refreshVectorTileMetadata(datasetInfo);
        case 6:
          return _context3.abrupt("return", _context3.sent);
        case 7:
          _context3.next = 9;
          return refreshRasterTileMetadata(datasetInfo);
        case 9:
          return _context3.abrupt("return", _context3.sent);
        case 10:
          _context3.next = 12;
          return refreshWMSMetadata(datasetInfo);
        case 12:
          return _context3.abrupt("return", _context3.sent);
        case 13:
          return _context3.abrupt("return", null);
        case 14:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _refreshRemoteData.apply(this, arguments);
}
function refreshVectorTileMetadata(_x4) {
  return _refreshVectorTileMetadata.apply(this, arguments);
}
function _refreshVectorTileMetadata() {
  _refreshVectorTileMetadata = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(datasetInfo) {
    var _ref3, remoteTileFormat, tilesetMetadataUrl, tilesetDataUrl, rawMetadata, tileSource, metadata;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _ref3 = datasetInfo.opts.metadata || {}, remoteTileFormat = _ref3.remoteTileFormat, tilesetMetadataUrl = _ref3.tilesetMetadataUrl, tilesetDataUrl = _ref3.tilesetDataUrl;
          if (!(!(remoteTileFormat === _constants.RemoteTileFormat.PMTILES || remoteTileFormat === _constants.RemoteTileFormat.MVT) || typeof tilesetMetadataUrl !== 'string' || typeof tilesetDataUrl !== 'string')) {
            _context4.next = 3;
            break;
          }
          return _context4.abrupt("return", null);
        case 3:
          _context4.prev = 3;
          rawMetadata = null;
          if (!(remoteTileFormat === _constants.RemoteTileFormat.MVT)) {
            _context4.next = 11;
            break;
          }
          _context4.next = 8;
          return (0, _tilesetUtils.getMVTMetadata)(tilesetMetadataUrl);
        case 8:
          rawMetadata = _context4.sent;
          _context4.next = 15;
          break;
        case 11:
          tileSource = _pmtiles.PMTilesSource.createDataSource(tilesetMetadataUrl, {});
          _context4.next = 14;
          return tileSource.metadata;
        case 14:
          rawMetadata = _context4.sent;
        case 15:
          if (!rawMetadata) {
            _context4.next = 20;
            break;
          }
          metadata = (0, _vectorTileUtils.parseVectorMetadata)(rawMetadata);
          _context4.next = 19;
          return (0, _vectorTileUtils.getFieldsFromTile)({
            remoteTileFormat: remoteTileFormat,
            tilesetUrl: tilesetDataUrl,
            metadataUrl: tilesetMetadataUrl,
            metadata: metadata
          });
        case 19:
          return _context4.abrupt("return", metadata);
        case 20:
          _context4.next = 24;
          break;
        case 22:
          _context4.prev = 22;
          _context4.t0 = _context4["catch"](3);
        case 24:
          return _context4.abrupt("return", null);
        case 25:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[3, 22]]);
  }));
  return _refreshVectorTileMetadata.apply(this, arguments);
}
function refreshRasterTileMetadata(_x5) {
  return _refreshRasterTileMetadata.apply(this, arguments);
}
function _refreshRasterTileMetadata() {
  _refreshRasterTileMetadata = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(datasetInfo) {
    var _ref4, metadataUrl, pmtilesType, tileSource, rawMetadata, response, _rawMetadata, metadata;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          _ref4 = datasetInfo.opts.metadata || {}, metadataUrl = _ref4.metadataUrl, pmtilesType = _ref4.pmtilesType;
          if (!(typeof metadataUrl !== 'string')) {
            _context5.next = 3;
            break;
          }
          return _context5.abrupt("return", null);
        case 3:
          _context5.prev = 3;
          if (!(pmtilesType === _constants.PMTilesType.RASTER)) {
            _context5.next = 13;
            break;
          }
          tileSource = _pmtiles.PMTilesSource.createDataSource(metadataUrl, {});
          _context5.next = 8;
          return tileSource.metadata;
        case 8:
          rawMetadata = _context5.sent;
          if (!rawMetadata) {
            _context5.next = 11;
            break;
          }
          return _context5.abrupt("return", (0, _vectorTileUtils.parseVectorMetadata)(rawMetadata));
        case 11:
          _context5.next = 25;
          break;
        case 13:
          _context5.next = 15;
          return fetch(metadataUrl);
        case 15:
          response = _context5.sent;
          if (response.ok) {
            _context5.next = 18;
            break;
          }
          throw new Error("Failed Fetch ".concat(metadataUrl));
        case 18:
          _context5.next = 20;
          return response.json();
        case 20:
          _rawMetadata = _context5.sent;
          metadata = (0, _rasterTileUtils.parseRasterMetadata)(_rawMetadata, {
            allowCollections: true
          });
          if (!(metadata instanceof Error)) {
            _context5.next = 24;
            break;
          }
          throw new Error("Failed to parse metadata ".concat(metadata.message));
        case 24:
          return _context5.abrupt("return", metadata);
        case 25:
          _context5.next = 29;
          break;
        case 27:
          _context5.prev = 27;
          _context5.t0 = _context5["catch"](3);
        case 29:
          return _context5.abrupt("return", null);
        case 30:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[3, 27]]);
  }));
  return _refreshRasterTileMetadata.apply(this, arguments);
}
function refreshWMSMetadata(_x6) {
  return _refreshWMSMetadata.apply(this, arguments);
}
function _refreshWMSMetadata() {
  _refreshWMSMetadata = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(datasetInfo) {
    var _ref5, remoteTileFormat, tilesetDataUrl, data;
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _ref5 = datasetInfo.opts.metadata || {}, remoteTileFormat = _ref5.remoteTileFormat, tilesetDataUrl = _ref5.tilesetDataUrl;
          if (!(remoteTileFormat !== _constants.RemoteTileFormat.WMS || typeof tilesetDataUrl !== 'string')) {
            _context6.next = 3;
            break;
          }
          return _context6.abrupt("return", null);
        case 3:
          _context6.prev = 3;
          _context6.next = 6;
          return getWMSCapabilities(tilesetDataUrl);
        case 6:
          data = _context6.sent;
          return _context6.abrupt("return", wmsCapabilitiesToDatasetMetadata(data));
        case 10:
          _context6.prev = 10;
          _context6.t0 = _context6["catch"](3);
        case 12:
          return _context6.abrupt("return", null);
        case 13:
        case "end":
          return _context6.stop();
      }
    }, _callee6, null, [[3, 10]]);
  }));
  return _refreshWMSMetadata.apply(this, arguments);
}
function getWMSCapabilities(_x7) {
  return _getWMSCapabilities.apply(this, arguments);
}
function _getWMSCapabilities() {
  _getWMSCapabilities = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(wsmUrl) {
    return _regenerator["default"].wrap(function _callee7$(_context7) {
      while (1) switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return (0, _core.load)("".concat(wsmUrl, "?service=WMS&request=GetCapabilities"), _wms.WMSCapabilitiesLoader);
        case 2:
          return _context7.abrupt("return", _context7.sent);
        case 3:
        case "end":
          return _context7.stop();
      }
    }, _callee7);
  }));
  return _getWMSCapabilities.apply(this, arguments);
}
function wmsCapabilitiesToDatasetMetadata(capabilities) {
  // Flatten layers if they are nested
  var layers = capabilities.layers.flatMap(function (layer) {
    if (layer.layers && layer.layers.length > 0) {
      return layer.layers;
    }
    return layer;
  });
  var availableLayers = [];
  if (Array.isArray(layers)) {
    availableLayers = layers.map(function (layer) {
      var bb = layer.geographicBoundingBox;
      var boundingBox = null;
      if (Array.isArray(bb) && Array.isArray(bb[0]) && Array.isArray(bb[1])) {
        boundingBox = [bb[0][0], bb[0][1], bb[1][0], bb[1][1]];
      }
      return {
        name: layer.name,
        title: layer.title || layer.name,
        boundingBox: boundingBox,
        queryable: layer.queryable
      };
    });
  }
  return {
    layers: availableLayers,
    version: capabilities.version || '1.3.0'
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,