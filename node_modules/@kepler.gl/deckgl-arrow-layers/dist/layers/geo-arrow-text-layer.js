"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeoArrowTextLayer = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _typed = require("@deck.gl/core/typed");
var _typed2 = require("@deck.gl/layers/typed");
var ga = _interopRequireWildcard(require("@geoarrow/geoarrow-js"));
var _constants = require("@kepler.gl/constants");
var _utils = require("../utils/utils");
var _picking = require("../utils/picking");
var _validate = require("../utils/validate");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // SPDX-License-Identifier: MIT
// Copyright contributors to the kepler.gl project
// deck.gl-community
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** All properties supported by GeoArrowTextLayer */

/** Properties added by GeoArrowTextLayer */

// Remove data and getPosition from the upstream default props
var _TextLayer$defaultPro = _typed2.TextLayer.defaultProps,
  _data = _TextLayer$defaultPro.data,
  _getPosition = _TextLayer$defaultPro.getPosition,
  _getText = _TextLayer$defaultPro.getText,
  _getTextAnchor = _TextLayer$defaultPro.getTextAnchor,
  _getAlignmentBaseline = _TextLayer$defaultPro.getAlignmentBaseline,
  _getPixelOffset = _TextLayer$defaultPro.getPixelOffset,
  _defaultProps = (0, _objectWithoutProperties2["default"])(_TextLayer$defaultPro, ["data", "getPosition", "getText", "getTextAnchor", "getAlignmentBaseline", "getPixelOffset"]);

// Default props added by us
var ourDefaultProps = {
  getTextAnchor: 'middle',
  getAlignmentBaseline: 'center',
  getPixelOffset: [0, 0],
  _validate: true
};

// @ts-expect-error Type 'Uint8Array' is not assignable to type 'RGBAColor'
var defaultProps = _objectSpread(_objectSpread({}, _defaultProps), ourDefaultProps);
var GeoArrowTextLayer = exports.GeoArrowTextLayer = /*#__PURE__*/function (_CompositeLayer) {
  function GeoArrowTextLayer() {
    (0, _classCallCheck2["default"])(this, GeoArrowTextLayer);
    return _callSuper(this, GeoArrowTextLayer, arguments);
  }
  (0, _inherits2["default"])(GeoArrowTextLayer, _CompositeLayer);
  return (0, _createClass2["default"])(GeoArrowTextLayer, [{
    key: "getPickingInfo",
    value: function getPickingInfo(params) {
      return (0, _picking.getPickingInfo)(params, this.props.data);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var table = this.props.data;
      if (this.props.getPosition !== undefined) {
        var geometryColumn = this.props.getPosition;
        if (geometryColumn !== undefined && ga.vector.isPointVector(geometryColumn)) {
          return this._renderLayersPoint(geometryColumn);
        }
        throw new Error('getPosition should pass in an arrow Vector of Point type');
      } else {
        var pointVector = (0, _utils.getGeometryVector)(table, _constants.GEOARROW_EXTENSIONS.POINT);
        if (pointVector !== null) {
          return this._renderLayersPoint(pointVector);
        }
      }
      throw new Error('getPosition not GeoArrow point');
    }
  }, {
    key: "_renderLayersPoint",
    value: function _renderLayersPoint(geometryColumn) {
      var table = this.props.data;
      if (this.props._validate) {
        (0, _typed.assert)(ga.vector.isPointVector(geometryColumn));
        (0, _validate.validateAccessors)(this.props, table);
      }

      // Exclude manually-set accessors
      var _extractAccessorsFrom = (0, _utils.extractAccessorsFromProps)(this.props, ['getPosition', 'getText']),
        _extractAccessorsFrom2 = (0, _slicedToArray2["default"])(_extractAccessorsFrom, 2),
        accessors = _extractAccessorsFrom2[0],
        otherProps = _extractAccessorsFrom2[1];
      var tableOffsets = (0, _picking.computeChunkOffsets)(table.data);
      var layers = [];
      for (var recordBatchIdx = 0; recordBatchIdx < table.batches.length; recordBatchIdx++) {
        var geometryData = geometryColumn.data[recordBatchIdx];
        var flatCoordsData = ga.child.getPointChild(geometryData);
        var flatCoordinateArray = flatCoordsData.values;
        var textData = this.props.getText.data[recordBatchIdx];
        var numLabels = textData.length;
        var textValues = textData.values;
        var characterOffsets = textData.valueOffsets;

        // @ts-expect-error how to properly retrieve batch offset?
        var batchOffset = geometryColumn._offsets[recordBatchIdx];
        var props = _objectSpread(_objectSpread(_objectSpread({}, ourDefaultProps), otherProps), {}, {
          // used for picking purposes
          // @ts-expect-error
          recordBatchIdx: recordBatchIdx,
          tableOffsets: tableOffsets,
          id: "".concat(this.props.id, "-geoarrow-text-layer-").concat(recordBatchIdx),
          data: {
            data: table.batches[recordBatchIdx],
            length: geometryData.length,
            startIndices: characterOffsets,
            attributes: {
              // Positions need to be expanded to be one per character!
              getPosition: {
                value: (0, _utils.expandArrayToCoords)(flatCoordinateArray, geometryData.type.listSize, characterOffsets, numLabels),
                size: geometryData.type.listSize
              },
              // TODO: support non-ascii characters
              getText: {
                value: textValues
                // size: 1,
              }
            }
          },
          // TODO privide more robust data comparators
          dataComparator: function dataComparator(d1, d2) {
            return d1.data === d2.data;
          },
          _subLayerProps: {
            characters: {
              dataComparator: function dataComparator(d1, d2) {
                return d1.data === d2.data;
              }
            }
          }
        });
        for (var _i = 0, _Object$entries = Object.entries(accessors); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = (0, _slicedToArray2["default"])(_Object$entries[_i], 2),
            propName = _Object$entries$_i[0],
            propInput = _Object$entries$_i[1];
          (0, _utils.assignAccessor)({
            props: props,
            propName: propName,
            propInput: propInput,
            chunkIdx: recordBatchIdx,
            geomCoordOffsets: characterOffsets,
            batchOffset: batchOffset
          });
        }
        var layer = new _typed2.TextLayer(_objectSpread(_objectSpread({}, this.getSubLayerProps(props)), {}, {
          // preserve binded accessors, as they are overwriten back by pass-through accessors from extensions
          getFiltered: props.getFiltered,
          getFilterValue: props.getFilterValue
        }));
        layers.push(layer);
      }
      return layers;
    }
  }]);
}(_typed.CompositeLayer);
(0, _defineProperty2["default"])(GeoArrowTextLayer, "defaultProps", defaultProps);
(0, _defineProperty2["default"])(GeoArrowTextLayer, "layerName", 'GeoArrowTextLayer');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,